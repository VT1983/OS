<?xml version="1.0" encoding="utf-8"?>
<OneStreamXF version="6.8.1.13230">
    <extensibilityRulesRoot>
        <businessRule businessRuleType="Extender" name="_Binary_Executer">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq


Namespace OneStream.BusinessRule.Extender._Binary_Executer
	Public Class MainClass
		Dim binaryPath As String
		Dim exitCode As String
		Dim sysOut As String
		Dim sysErr As String
		Dim log As New Text.StringBuilder
		
		
		Public Function createTempFileWithContent(ByVal fileName As String, ByVal fileContent As String) As String
			Dim tempFolder As String = Path.GetTempPath()
			Dim tempFilePath As String = $"{tempFolder}{fileName}"
			
			Using sw As StreamWriter = File.CreateText(tempFilePath)
				sw.Write(fileContent)
			End Using
			Return tempFilePath
		End Function
		
		Public Function createTempfileFromDashboardFile(ByRef si As SessionInfo, ByVal dashboardFileName As String, ByVal serverFileName As String) As String
			Try
				'Dashboard File to read
				Dim sourceFile As DashboardFileResource  = BRApi.Dashboards.FileResources.GetFileResource(si, False, Guid.Empty, dashboardFileName) 			   
				'Define string to hold text from file
				Dim script As New Text.StringBuilder(system.Text.Encoding.UTF8.GetString(sourceFile.FileBytes))
				Return Me.createTempFileWithContent(serverFileName, script.ToString)
			Catch e As Exception
				Me.appendLog($"Error while reading dashboardFile: " & e.ToString)
				Return String.Empty
			End Try
		End Function
		
		Public Sub executeBinary(ByVal binaryPath As String, ByVal args As String)
			Dim binaryExitCode As String = String.Empty
			Dim binaryOutput As String = String.Empty
			Dim binaryStartInfo As ProcessStartInfo = New ProcessStartInfo(binaryPath)
			'binaryStartInfo.LoadUserProfile = True
	        binaryStartInfo.UseShellExecute = False
	        binaryStartInfo.RedirectStandardOutput = True
			binaryStartInfo.RedirectStandardError = True
			binaryStartInfo.CreateNoWindow = True
			'binaryStartInfo.UserName = System.Security.Principal.WindowsIdentity.GetCurrent().Name
			binaryStartInfo.Arguments = args
			
	        Dim binaryProcess As Process = New Process()
	        binaryProcess.StartInfo = binaryStartInfo
	        binaryProcess.Start()
	        
			Using binaryResponseStreamReader As StreamReader = binaryProcess.StandardOutput
		        Me.sysOut = binaryResponseStreamReader.ReadToEnd()
			End Using
			Using binaryResponseStreamReaderErr As StreamReader = binaryProcess.StandardError
				Me.sysErr = binaryResponseStreamReaderErr.ReadToEnd()
			End Using
		    
			binaryProcess.WaitForExit()
				
			Me.exitCode = binaryProcess.ExitCode
			
		    binaryProcess.Close()			
			'Return "ExitCode: " & binaryExitCode & Environment.NewLine & binaryOutput
		End Sub
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Dim DashboardFileName = "generic_validation.py"
				Dim sourceFile As DashboardFileResource  = BRApi.Dashboards.FileResources.GetFileResource(si, False, Guid.Empty, DashboardFileName)  '<-Enter file to read from dashboard
				   
				Dim pythonPath = "C:\Program Files\Python39\python.exe"
				Dim scriptPath = Me.createTempfileFromDashboardFile(si, DashboardFileName, "generic_validation.py")
				Dim wfProfileInfo As New WorkflowProfileInfo()
				Dim sValue As String = BRApi.FileSystem.GetFileShareFolder(si, FileShareFolderTypes.FileShareRoot, wfProfileInfo)
				BRApi.ErrorLog.LogMessage(si, sValue)
'				sValue = String.Format("{0}\System\Contents\Data_Integration\OMD\execution\2021\M08\19\job_id\maps.json", sValue)
'				sValue = String.Format("{0}\System\Contents\Data_Integration", sValue)
				Dim folder_val As String
				folder_val = BRApi.Utilities.GetFileShareFolder(si,FileShareFolderTypes.FileShareRoot, Nothing) & "\System\Contents\Data_Integration\OMD\execution\2021\M08\19\job_id"
				'Dim bValue As Boolean = BRApi.FileSystem.DoesFileExist(si, FileSystemLocation.FileShare, sValue)
				'BRApi.ErrorLog.LogMessage(si, bValue)
				Dim arguments = $"{scriptPath} --folder {folder_val} --file_path map.json"
				BRApi.ErrorLog.LogMessage(si, arguments)
				Me.executeBinary(pythonPath, arguments)
				
				Me.appendLog("ServerName: " & Environment.MachineName)
				Me.appendLog("PythonPath: " & pythonPath)
				Me.appendLog("Arguments: " & arguments)
				Me.appendLog("Python Exit Code: " & Me.exitCode)
				Me.appendLog("Python Output: " & Environment.Newline & Me.sysOut)
				Me.appendLog("Python Error: " & Environment.Newline & Me.sysErr)
				BRApi.ErrorLog.LogMessage(si, Me.sysErr)
				
				
'				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			Finally
				brapi.ErrorLog.LogMessage(si, "|-->Binary Executor<--|", log.ToString)
			End Try
			Dim libFolder = BRApi.Utilities.GetFileShareFolder(si,FileShareFolderTypes.FileShareRoot, Nothing) & "\System\Contents\Data_Integration\OMD\execution\2021\M08\19\job_id"
			Dim fileName = "reportCard.json"
			Dim fileContent As String = ""
			If File.Exists(libFolder & "\" & fileName) Then
				fileContent = File.ReadAllText(libFolder & "\" & fileName)
			End If
			Dim jsonObj = JsonConvert.DeserializeObject(fileContent)
			Dim VAL_ID = Guid.NewGuid()
			BRApi.ErrorLog.LogMessage(si, jsonObj("sourceRecords"))
			Dim sql As New Text.StringBuilder
			sql.AppendLine("INSERT INTO [dbo].[XFW_OMD_VALIDATION]")
			sql.AppendLine("(")
			sql.AppendLine("[ID],[Job_ID],[sourceRecords],[targetRecords],[varianceCount],[extraTargetRecord],[extraSourceRecord],[report_location]")
			sql.AppendLine(") VALUES (")
			sql.AppendLine("'" & VAL_ID.ToString & "','006d2ae8-0f40-4618-aebd-1c98d0a65d25','" & jsonObj("sourceRecords") & "','" & jsonObj("targetRecords") & "','" & jsonObj("sourceRecords") & "','" & VAL_ID.ToString & "',")
			sql.AppendLine(")")
			'Dim sql1 = "INSERT INTO [dbo].[XFW_OMD_VALIDATION] ([ID],[Job_ID],[]) VALUES ('c8fbf6e3-c1c5-4431-9103-728a764b587f','EPtoWMTUS_extractSourceData','StatusRedBall','d0r06fa','8/2/2021 9:03:59 AM','8/2/2021 9:04:04 AM',100,5000)"
			Return Nothing
		End Function
		
		Public Sub appendLog(ByVal message As String)
			log.append(message & Environment.NewLine)
		End Sub
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="A_CV">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.A_CV
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
						If args.DataCellArgs.FunctionName.XFEqualsIgnoreCase("getFromApp") Then
							'Dim account = args.DataCellArgs.NameValuePairs.XFGetValue("Account")
							Dim Account = ""
							'Dim cube = args.DataCellArgs.NameValuePairs.XFGetValue("cube", "INTL")
							Dim cube="INTL"
							Dim app="INTLHQ"
							'Dim app = args.DataCellArgs.NameValuePairs.XFGetValue("App", "Enterprise")
							'Dim pov = api.Pov.GetDataCellPk.GetMemberScript(api)
							'pov = pov.Substring(pov.IndexOf(":") + 1)
							Dim newSI = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si, App, Nothing)
							brapi.ErrorLog.LogMessage(si,"INTL session:" + newSI.ToString())
							'Return BRApi.Finance.Data.GetDataCellUsingMemberScript(newSI, cube, $"{pov}:A#{Account}").DataCellEx.DataCell.CellAmount
'							Dim dataval = BRApi.Finance.Data.GetDataCellUsingMemberScript(newSI,cube,"E#International_Incl_Div:C#Local:S#CorpFcst_Wk36:T#2022M1:V#Periodic:A#A400_000:F#Input:O#BeforeAdj:I#None:U1#Total_Merchandise:U2#Total_Format:U3#Total_Channel_Fulfillment:U4#Ext_Reported:U5#None:U6#None:U7#Total_Banners:U8#None")
							BRApi.Finance.Data.GetDataCellUsingMemberScript(newSI,cube,"E#International_Incl_Div:C#Local:S#CorpFcst_Wk36:T#2022M1:V#Periodic:A#A400_000:F#Input:O#BeforeAdj:I#None:U1#Total_Merchandise:U2#Total_Format:U3#Total_Channel_Fulfillment:U4#Ext_Reported:U5#None:U6#None:U7#Total_Banners:U8#None")
'							brapi.ErrorLog.LogMessage(si,dataval.ToString())
						End If
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ACM_Commit_Post">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="Email_Helper" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports System.Text.RegularExpressions

' Name			: ACM_Commit_Post
' Description	: Queries for Item Notes that may indicate a commit failure and send an email to the EmailDistErr distribution group if found
' Dependancies	: Email_Helper

Namespace OneStream.BusinessRule.Extender.ACM_Commit_Post
	Public Class MainClass
		Dim detailedLogging As Boolean = True
		Dim detailedLog As String = "ACM_Commit_Post"
		Dim globalParameterTableName As String = "XFT_Global_Parameters"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						'Check if we are using email
						Dim email As Boolean = args.NameValuePairs.XFGetValue("Email").XFConvertToBool(True)
						If Not email Then Return Nothing
						
						'AppName. Used to query global paramteters for email server and distribution list
						Dim appName As String = args.NameValuePairs.XFGetValue("AppName")
						If appName = "" Then
							appName = si.AppName
						End If				
						Log(si,"AppName: " & appName)
						
						'Get requests from session state - list of requests that were waiting commit prior to commit step running
						Dim reqs As New List(Of Guid)
						Dim bf As New Runtime.Serialization.Formatters.Binary.BinaryFormatter
						Dim objXFUserState As XFUserState = BRApi.State.GetSessionState(si,False,ClientModuleType.External, String.Empty, String.Empty, "ACM_Commit_Request_List", String.Empty)
						If objXFUserState IsNot Nothing Then
							Dim ms As New MemoryStream
							ms.Write(objXFUserState.BinaryValue,0,objXFUserState.BinaryValue.Length)
							ms.Seek(0, SeekOrigin.Begin)
							reqs = bf.Deserialize(ms)
							If reqs.Count > 0 Then
								Log(si,"Requests: " & String.Join(",",reqs))
							End If
						Else
							Log(si,"No request list found in memory")
						End If
						
					
						
						'Get list of items in request that failed to commit - has item notes
						Dim dtDetails As DataTable = Nothing
						If reqs.Count > 0 Then 
							Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								Dim requests As String = "'" & String.Join("','",reqs) & "'"
								Dim sql As String = $"SELECT ItemName as 'Member', ItemParentName as 'Parent', [Notes] FROM [XFW_ACM_Item] WHERE [FKRequestID] in ({requests}) AND [Notes] <> ''"
								dtDetails = BRApi.Database.ExecuteSql(dbConn,sql,False)
								If dtDetails IsNot Nothing And dtDetails.Rows.Count > 0 Then
									Log(si,"Item count: " & dtDetails.Rows.Count)
								Else
									Log(si,"Item count was nothing")
								End If
							End Using
						End If
						
						'#Region "Get Email Server and Distribution List from Global Parameters"
						Log(si,"Getting parameters")
							'Get Global parameters
							Dim emailServer As String = ""
							Dim emailDist As New List(Of String)
							Dim acmGeneralParams As DataTable
							Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								
								'Get Query results as a datatable
								acmGeneralParams = BRApi.Database.ExecuteSql(dbConn, $"SELECT * FROM {globalParameterTableName} WHERE Module = 'ACM' AND AppName = '{appName}' AND Action = ''", False)
								If acmGeneralParams Is Nothing Or acmGeneralParams.Rows.Count = 0 Then
									Throw New Exception("ACM global general parameters are not configured.")
								End If

								'Get General Parameters from resulting datatable
								emailServer = acmGeneralParams.Select("ParmName = 'EmailSvr'").FirstOrDefault.Item("ParmValue")
								Log(si,"Server: " & emailServer)
								
'								emailDist = acmGeneralParams.Select("ParmName = 'EmailDistErr'").FirstOrDefault.Item("ParmValue").Split(",").ToList()
								'Dim emailDistFull As String = acmGeneralParams.Select("ParmName = 'EmailDistErr'").FirstOrDefault.Item("ParmValue")
								Dim emailDistFull As String = acmGeneralParams.Select("ParmName = 'EmailDist'").FirstOrDefault.Item("ParmValue")
								
								
								emailDist = emailDistFull.Replace(" ","").Split(",").ToList()
								Log(si,"Email Distribution: " & emailDistFull)
								Dim emailIsOk As Boolean = True
								Dim pattern As String= "\A(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)\Z"
								For Each eml As String In emailDist
									If Not Regex.IsMatch(eml, pattern, RegexOptions.IgnoreCase) Then
										emailIsOk = False
										brapi.ErrorLog.LogMessage(si,"Invalid Email: " & eml)
									End If
								Next
								If Not emailIsOk Then
									Log(si,"Verify email and try again.")
									'Throw New Exception("Invalid email")
								End If								
								
								'emailDist = emailDistFull.Split(",").ToList()
								Log(si,"Email Distribution: " & emailDistFull)								

							End Using
						'#End Region						
						
						
						
						'Send email if any failures were found
						'If dtDetails IsNot Nothing And dtDetails.Rows.Count > 0 Then
							Log(si,"Sending email")
							If reqs IsNot Nothing And reqs.Count > 0 Then
								Dim requestList As String = "Request(s) Commited: "
								Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
									Dim requests As String = "'" & String.Join("','",reqs) & "'"
									Dim dtTemp As DataTable = BRApi.Database.ExecuteSql(dbConn,$"SELECT [ID], [RequestID] FROM XFW_ACM_Request WHERE [RequestID] in ({requests})",False)
									If dtTemp IsNot Nothing And dtTemp.Rows.Count > 0 Then
										For Each dr As DataRow In dtTemp.Rows
											'If requestList = "Request(s): " Then
												'requestList += $"R{dr(0).ToString:00000000}"
												'requestList += dr(0).ToString
											'Else
												requestList += $"</br>&nbsp;R{dr(0):00000000}"
												
												
												
												'Get dim name count for all types
												'Dim dtFlowOptions As DataTable = Nothing
												'If reqs.Count > 0 Then 
													'Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
													
													Dim tempList As New Dictionary(Of String, Integer)
														Dim dtFlowOptions As DataTable = BRApi.Database.ExecuteSql(dbConn,$"SELECT FlowOptions FROM [XFW_ACM_Item] WHERE [FKRequestID] = '{dr("RequestID")}'",False)
														If Not dtFlowOptions Is Nothing And dtFlowOptions.Rows.Count > 0 Then
															For Each itm As DataRow In dtFlowOptions.Rows
																Dim itmFlow As String = itm(0).ToString()
																If Not tempList.ContainsKey(itmFlow) Then
																	tempList.Add(itmFlow,1)
																Else
																	tempList(itmFlow) = tempList(itmFlow) + 1
																End If
															Next
														End If
														
														For Each kvp As KeyValuePair(Of String,Integer) In tempList
															requestList += $"</br>&nbsp;&nbsp;{kvp.Key} x {kvp.Value}"
														Next
						'								If dtFlowOptions IsNot Nothing And dtDetails.Rows.Count > 0 Then
						'									Log(si,"Item count: " & dtFlowOptions.Rows.Count)
						'								Else
						'									Log(si,"Item count was nothing")
						'								End If
													'End Using
												'End If													
												
												
												
												'requestList += $"</br> R{dr(0).ToString:00000000}"
											'End If
											
										Next
									End If
								End Using
								If requestList <> "Requests found:" Then
									SendPostCommitEmail(si, dtDetails, emailDist, emailServer, requestList)
								Else
									SendPostCommitEmail(si, dtDetails, emailDist, emailServer)
								End If
							Else
								log(si,"Sending blank email")
								SendPostCommitEmail(si, dtDetails, emailDist, emailServer,"No pending ACM requests found.")
							End If
							
						'End If
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			Finally
				If detailedLogging Then brapi.ErrorLog.LogMessage(si,detailedLog)
			End Try
		End Function
		Sub Log(ByVal si As SessionInfo, ByVal logValue As String)
			If detailedLogging Then
				If detailedLog = "" Then
					detailedLog = logValue
				Else
					detailedLog += vbnewline & logValue
				End If
			End If
		End Sub
		Public Sub SendPostCommitEmail(ByVal si As SessionInfo, 
			ByVal dt As DataTable,
			ByVal distributionList As List(Of String), 
			ByVal emailServer As String,  
			Optional ByVal preParagraph As String = "", 
			Optional ByVal postParagraph As String = "",
			Optional ByVal fileAttachmentPaths As List(Of String) = Nothing)

			'Get current environenment
			Dim xEnv As New XFEnvironment
			Dim xSet As XFEnvironmentSettings = xEnv.GetAppServerConfigEnvironmentSettings()
			Dim curEnvName As String = xSet.EnvironmentName
			
			'Subject
			'Dim subject As String = $"{si.AppName} - {curEnvName} - ACM Commit Complete"	
			Dim subject As String = $"{si.AppName} - {curEnvName} - {si.UserName} - ACM Commit Complete"
			
			'Body
			'log(si,"Creating email body")
			Dim emailHelper As New OneStream.BusinessRule.Extender.Email_Helper.MainClass
			Dim body As New StringBuilder
			body.AppendLine(emailHelper.NewHTMLParagraph("ACM Commit Complete."))

			If Not dt Is Nothing Then
				If dt.Rows.Count > 0 Then
					
					'PRE - PARAGRAPH
					If preParagraph <> "" Then body.AppendLine(emailHelper.NewHTMLParagraph(preParagraph))	
					
					'ERRORS IN THE TABLE
					body.AppendLine("Errors:")
					body.AppendLine(emailHelper.StartHTMLTable)
					body.AppendLine(emailHelper.NewHTMLTableRowHeader(dt.Columns.Cast(Of DataColumn).Select(Function(x) x.ColumnName).ToList()))
					For Each requestRow As DataRow In dt.rows
						body.AppendLine(emailHelper.NewHTMLTableRow(requestRow.ItemArray.Cast(Of String).Select(Function(x) x.ToString).ToList()))
					Next
					body.AppendLine(emailHelper.EndHTMLTable)
					
					'EXTRA INFO (TIME STAMP)
					Dim integrationProperties As New List(Of String)
					Dim cstTimeNow = System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Now, "Central Standard Time")		
					integrationProperties.Add($"Sent: {cstTimeNow} CST")					
					If integrationProperties.Count > 0 Then
						body.AppendLine(emailHelper.NewHTMLParagraph(String.Join("</br>",integrationProperties)))
					End If
					
					'POST - PARAGRAPH
					If postParagraph <> "" Then body.AppendLine(emailHelper.NewHTMLParagraph(postParagraph))
				Else
					
					If preParagraph <> "" Then body.AppendLine(emailHelper.NewHTMLParagraph(preParagraph))
						
					'timestamp
					Dim integrationProperties As New List(Of String)
					'integrationProperties.Add(preParagraph)
					Dim cstTimeNow = System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Now, "Central Standard Time")		
					integrationProperties.Add($"Sent: {cstTimeNow} CST")					
					If integrationProperties.Count > 0 Then
						body.AppendLine(emailHelper.NewHTMLParagraph(String.Join("</br>",integrationProperties)))
					End If
					
					log(si,"No rows found")
					'
					body.AppendLine(emailHelper.NewHTMLParagraph("No ACM Commit errors detected"))					
				End If
			Else
				log(si,"Dt was empty")
				If preParagraph <> "" Then 
					body.AppendLine(emailHelper.NewHTMLParagraph(preParagraph))
				End If
				
				body.AppendLine(emailHelper.NewHTMLParagraph("No ACM Commit errors detected."))
				
			End If
			
			'Finishing notes
			Try
				'log(si,"Finishing notes")
				'Dim cstTimeNow = System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Now, "Central Standard Time")		
				'body.AppendLine(emailHelper.NewHTMLParagraph($"Ran by {si.UserName}</br>Sent {cstTimeNow} CST"))	
			Catch
				log(si,"Failed to create finishing notes in post commit ACM br")
			End Try
			
			'Attachments
			log(si,"Adding attachments")
			If fileAttachmentPaths Is Nothing Then fileAttachmentPaths = New List(Of String)({""})
				
			'Send
			BRApi.Utilities.SendMail(si,emailServer,distributionList,subject,body.ToString,True,fileAttachmentPaths)
			
		End Sub		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ACM_Commit_Pre">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Text.RegularExpressions


Namespace OneStream.BusinessRule.Extender.ACM_Commit_Pre
	Public Class MainClass
		Dim globalParameterTableName As String = "XFT_Global_Parameters"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						'Check if we are using email
						Dim email As Boolean = args.NameValuePairs.XFGetValue("Email").XFConvertToBool(True)
						If Not email Then Return Nothing
							
						'Appname used to get the emails for validation before committing
						Dim appName As String = args.NameValuePairs.XFGetValue("AppName")
						If appName = "" Then
							appName = si.AppName
						End If
						
						Dim emailDist As New List(Of String)
						Dim acmGeneralParams As DataTable
						Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								
							'Get Query results as a datatable
							acmGeneralParams = BRApi.Database.ExecuteSql(dbConn, $"SELECT * FROM {globalParameterTableName} WHERE Module = 'ACM' AND AppName = '{appName}' AND Action = ''", False)
							If acmGeneralParams Is Nothing Or acmGeneralParams.Rows.Count = 0 Then
								Throw New Exception("ACM global general parameters are not configured.")
							End If
							
							'Get emails and validate
							Dim emailDistFull As String = acmGeneralParams.Select("ParmName = 'EmailDist'").FirstOrDefault.Item("ParmValue")	
							emailDist = emailDistFull.Replace(" ","").Split(",").ToList()
							Dim emailIsOk As Boolean = True
							Dim pattern As String= "\A(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)\Z"
							Dim invalidEmailList As New List(Of String)
							For Each eml As String In emailDist
								If Not Regex.IsMatch(eml, pattern, RegexOptions.IgnoreCase) Then
									emailIsOk = False
									invalidEmailList.Add(eml)
									'brapi.ErrorLog.LogMessage(si,"Invalid Email: " & eml)
								End If
							Next
							If Not emailIsOk Then
								'brapi.ErrorLog.LogMessage(si,"Email Distribution: " & emailDistFull)
								'brapi.ErrorLog.LogMessage(si,"Verify email and try again.")
								Dim plrl As String = If(invalidEmailList.Count > 1,"s","")
								Dim filesAsString As String = "  -  " & String.join(vbnewline & "  -  ",invalidEmailList)
								Throw New Exception($"{vbnewline}{vbnewline}Invalid email{plrl}:{vbnewline}{filesAsString}")
							End If								

						End Using							
						
						'Get ACM Request waiting commit - establish the list of request Ids
						Dim reqs As New List(Of Guid)
						Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							Dim dt As DataTable = BRApi.Database.ExecuteSql(dbConn,"SELECT [RequestID] FROM [XFW_ACM_Request] WHERE [Status] = 'Waiting'",False)
							If Not dt Is Nothing And dt.Rows.Count > 0 Then
								For Each dr As DataRow In dt.Rows
									reqs.Add(dr("RequestID"))
								Next dr
							End If
						End Using

						'Save list of requests to session state to be used by the post commit step
						Using ms As MemoryStream = New MemoryStream
							Dim bf As New Runtime.Serialization.Formatters.Binary.BinaryFormatter
							bf.Serialize(ms,reqs)
							BRApi.State.SetSessionState(si,False,ClientModuleType.External,String.Empty,String.Empty,"ACM_Commit_Request_List",String.Empty,String.Empty, ms.ToArray)
						End Using
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ACM_CreateFlowViews">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>true</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="ACM_Engine" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Uh6XsM/GbTvKhfvZWm3GFZhlvltnqCSnR6/CUa/jtsQoD00S4bE+nY3fNmDWY49PkvbT2Ke3P2pMViiSmUGnDMU7OY2+TXSY0Et+5EtPt9JBq6Ojo9Y5fCFkBmhkb2B8p7jDOznqgticDraAR39haxdIAVc6K02DzK16bvlrzcxnTCMNt0ecHJv94d+1tZojCXjrkwe4RImW73LggJrzApYBYiI27fhwmKeVhF3yxdVtn4fqY2w885xwsBFOHKYxDkCs12/HXGDKnMaTaqJuI6JK8nsDwM85DT1JjNniJj0EDV+oFKT3HBW1KqXqYLcCOiZvrcRH3oido0+WFIwGcIA7bOMXiThjwROxCEkOYO5h7aX5KMbazsLTOyszr9SCfGE/1Fe1shapOZiTVkhAJA3Z6YrHFAfN/hwabUTlap2DAgs4AQIF7i6hPoiMQojOAAJkMtHxjL1SUqpaSFQgu1EFpC3NAWVMyyipiPXnum4mHsa9uMdRtMdMOoiUEkVUG+ENHauYiaLOo+tGZUdeT+9Ip1yZOC39t7SrDiNSHkeMcP/OZtZ8AskyHWl4QHLv0n33Gfidyaa9dbDvEQxt7l2DU179NZAuq1YG/fbjx6eA/+uIEZ4VjlzSAdhib3JD2vAYNhFM0Vu0oSSEm+HuVruXU31lNnjshv1KWd/WdyJlpQxZGOz/CY8yjDUQbMJF7ZiRzonRmNzZ/1hjsDuiwV7Cg4kXC6Zm0Nx5R1BC9UVObbjvrKnj5Az7jbOVIFUMrZfmcsMjG9FpWtJjLkKq7wRwBskx4fxGNVN35gsgUQPiSgNEg7ZH+E7DWszl9iqHI9qRP3SKgRdbdbfcOthTlw3eLCV9FcrIYLfCf+yYuFX9nEepzDLt97XVIR+dmfy6K6alhxZEQsOI1ZL1hAvWv/GKLeX48Gm9dCThH7aAmAzaHwPY0Suu3ChJRoJS+gvc2kWg5NNOyUt3LrZxLoDuqMalnEi8SuzMrX6uroTL15Dc10lGXLdheES/2M63VswNHR94YhRzKfnOM3J1spd/uiQ50chAYZn7VbqE0SIN7UY7cUHBAO0bJd3oaHTIqOkocwMJOML/AwTfH/jCUIhnI7KB/I0xvcEnVo1ofd6Mv7P9QGUL2yfh+y1DERMSD5tzg6+n79eCo+yWASUd3DqGvm9WLM1KzvKo2hxwViVexZbldbQm+yCjwOEAEfXQYU7V8Z5N0CroVVXXGGFyYxWiZmaY03XcPM/P4h952DaBIPqa2WhHVIn5wRLh2NmQJK2NMThPCmUldhmDcBE+jhTFhLdpiHtNlaQ9tvtJ/ntOmlSmXmT29gE5V2fxT0YRRXBWzYgmxXSGJg9seTrW2PrroqONozIoNRodc/wgNpY2IM5ynyR0RSPc983ZcSeh71w9rx4TyaxWng7A1FaHIifT/DJ1Q6zGZWbG0/sobTP0PcCufxiRZYdqxzuZ0YuMFo3475CwgHp3eO/msUmjtEPwKB0/jUunXSOUJEcFAw637D5uQuKf1qD3w2PcyPzfQlKjvZAwl+pFxkoKIARKoCehO/cUpwUi4Fwp9cwuzl60MT6ruh4s56b6dRLKltWs8YgcbZipnRhBhesRGXXcLrEICaijJ3HwAJzoYtPbSHS+MXvICTX2cNGISpjaTagpMCntvNt3F8wNuzGP/Cs9/ysQTnBd7rDi4GD+7e1DKYMB6U3iZVt9DVuD4yHTJWfLtQ3uPnWImZJ1Rve8CKXIELowEIFaK5hJJE9KCyTr75sZE8/A3ec7YwyY8qglWIccDoWj+Tn/shs0ydwdKmu3/rm4/k5TmnY7hVhNhH3L7uYcw5kAqxnOsLe/8HtwfmUSFhiVSzx3smlrL4SVbcW6RxhJISscnb6Q3g7Z24Pnk+cHC/9GHS0XZrG++UTQa5wZSL3soHryBySrUiYXuJwl8gqr5baNLnhbiXSDDeQpuEFnwqBgcRv7wEKds7gffbUAFFJQfyX2OfW/KHOXU9G+2dWW1S6nZ4MVnK/cyqNC08dGdWxdFF4o+lu5PXbq3Q/rHjX8eypdkJSczfKYL12ruSo9goIfWnJG85I/YLZIkibNgfjCanHfP/R9DFmN6iiUs6KO/OS+MSWL3G7pOnIiSp0rb4bHyAhR/Aov82jKY7gVTapw5xsjRpBaLuJwZrjc7gt+SNWiOMpGNBHSWRSpwEKzkTznmLIAXmekMQjdWg8HZMjm9FZhXa7GgJ9JvAtBqcF32mIueCLQvkhxOlf95sSwi34nGcegcmYeOcDhu26e1kNg4Vz0dq44qUDtHFbwZa78/rVqr/aHNqweaJV2oKnpF+gYFOIKphPzLirMA8/2El3TNggQHcvIqLBeiYgHqYKDBXIYPXEgjCVtlcXtIkIXTsjwPnx1009+A93y+p+Sfc0bKQOf693Jx6cgN60v3haZC6wNr9ljpiVYW9k85lxiaiVtrNO8uAD9BppzhMkk7hT7H8VnFpKZt0erkORXVortHwxzBoDn0Z1UWgbBIRn7YJiMEzX9Z5iZtz/M4Is+z2gmVDGPJg4ZD9TQO9a6WTCBbVxPdeCv9JXEcmzvMPeok0ftvbn3UKRsEk9WnD8KU6/Oevqpc8w3nSk+4DUPKpOPc7AB5Gfy0HwyPs1YLWoCqmdexEyx8vxxmi8rRa5CWu4rhyYQrH6NY2xrxrN/0zSF17JIqWmZ/g4KgDhV6p5W3vwBy/rOMkMWHVEDM+kecMhRS0oBaLNEsJriyHpL0+Q7oHWvlDDlqzcjrtqFwq/e6PSzjeN3ePvLxAJq1H803nVkKcIM5L7iX2YHSgWfk/YfaCw3fKTl2tSicsUPjYXP+kc2AlNs9mXhEcquHgcygrF0o99ZPO9uurJ1pjGFDGnOOYmj0fv2zpNj+qXnV1Ia3BN6iH4yFkpM1stag/OJb7QUomGfy50yJw3eovlZa2CghJNLcIGtkByzdnraZHloegOW07y69Ps+46+HbjjFYzy41SkLmOmd84htsZFVWWi5/tcHlCCVI1EqwEQoq0XeJjldkCPpFUZZWTXstWA8meJFC0LFXQHOUT95NTMmerfn1JDJCXP1m6pBsBE/FHfXMMYtGBl5XS34x1WYNxDp6PhVMmmH9qDH+kx4cXN4yI62ukMHKO9imvetmeCgzScpuHM2jUr/6YXx1DEOqXghcWjnkSRXCnZpwDPsYV1Al6Ac1ubsLZnQwNSMYNRHSfGATsuAoO76FZim9RoUGKzqP+TbDNNC67+Gj2T9O6x6UcH6LNgBLVom/Q8qJACCgQHUl7rfJxLzNU2exVIntoknICo=]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ACM_CreateRequest">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>true</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="ACM_Engine" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Uh6XsM/GbTvKhfvZWm3GFZhlvltnqCSnR6/CUa/jtsQoD00S4bE+nY3fNmDWY49PkvbT2Ke3P2pMViiSmUGnDMU7OY2+TXSY0Et+5EtPt9JBq6Ojo9Y5fCFkBmhkb2B8p7jDOznqgticDraAR39haxdIAVc6K02DzK16bvlrzcxnTCMNt0ecHJv94d+1tZojCXjrkwe4RImW73LggJrzApYBYiI27fhwmKeVhF3yxdVtn4fqY2w885xwsBFOHKYxDkCs12/HXGDKnMaTaqJuI6JK8nsDwM85DT1JjNniJj0EDV+oFKT3HBW1KqXqYLcCOiZvrcRH3oido0+WFIwGcIA7bOMXiThjwROxCEkOYO5h7aX5KMbazsLTOyszr9SCfGE/1Fe1shapOZiTVkhAJA3Z6YrHFAfN/hwabUTlap2DAgs4AQIF7i6hPoiMQojOAAJkMtHxjL1SUqpaSFQgu1EFpC3NAWVMyyipiPXnum4mHsa9uMdRtMdMOoiUEkVUG+ENHauYiaLOo+tGZUdeT+9Ip1yZOC39t7SrDiNSHkeMcP/OZtZ8AskyHWl4QHLv0n33Gfidyaa9dbDvEQxt7l2DU179NZAuq1YG/fbjx6eA/+uIEZ4VjlzSAdhib3JD2vAYNhFM0Vu0oSSEm+HuVruXU31lNnjshv1KWd/WdyJlpQxZGOz/CY8yjDUQbMJF7ZiRzonRmNzZ/1hjsDuiwV7Cg4kXC6Zm0Nx5R1BC9UVObbjvrKnj5Az7jbOVIFUMrZfmcsMjG9FpWtJjLkKq7wRwBskx4fxGNVN35gsgUQPiSgNEg7ZH+E7DWszl9iqHI9qRP3SKgRdbdbfcOthTlw3eLCV9FcrIYLfCf+yYuFX9nEepzDLt97XVIR+dmfy6K6alhxZEQsOI1ZL1hAvWv/GKLeX48Gm9dCThH7aAmAwP9aakeuWWjmvUianfgdGXTQOIZZ2uMB7CtxY/A4Acqq7c4WbNWgEJZs7VQjHqK60CovMbgKCcUNrWn7DK8LHslS+ll0XAoFgKHjO0BVvSGDxhBgOZqp7dgKDrnG3UDHXaXKMkOQFq4WJ2EXVKLdiAnk91ZhThLiFJ7+/hzDEPffMzTYy4YCETvaAmXf0YwvJgMAVjsWvB52LgqSZwM2EBHv5W2TT3F1o6JMSBK1YB7/KM6g11/LRyFS6lm4fGCU3IqR3eEhx9BUmpDlQTczcMfU32mGDYpJpiYeylqsVm5T1sWTXpRAKzqRaq3aPDP0day0rJRvkTaLYGT29hREWorRpFE0UrgUjgB+NzENXO3VVgajp4jVi5WIYnow1hFUutvop5FiSSMjzYJF8C66M4rdFdGbaxzTX6F7Qa0msjhpWDCzC8ow0jL6Gjqd5d/t0LuRSLQZJPct03jUFXaBADOO0I39Bph/QgVI6NCcOOVWySZRW7W4IIFnMLNpGilRYudlVIuRvq4nzu6RDheYt++/OWtpteh7QMpDpglNLz196WoIhmocp60d1SBL5zEvnylzbLbOuj/yrCdgtbBVDHxG30LvDChvA3izf7s5v8S6/qLeZTCjXzwJuisJ5XCAuKccUIRukc8lr1aBCXL7p09xOA6z5cSMpKSmlnZAthxRYGVPOWpy0bLk2xV+yCim1RHei/W3zL8jpde5pKlKe43E9Hc3Ulkccd31lkj0a8SGXCW2QmIziRijWbBmtgDzYGx29TXd2532jv80w7lt3M3xbZXv/vasc6WM0ukowPfReRXjmLnXDRr3RopHthnj4M4/crd3c5Z2BJecpCdlHvNF3K/mtlDLBcySWOKWbRXatUzItyNr9BEvbXm+5oxe8+dfMX0cD4N3lIantJzM/ZdO5WS75SBV7VyJmW5o03kLDy7OLaMBkiqR+5o+OCBZqK9sQRwHWcwuMuZymFPGqxdvm1+EgY/vC6Xcc0VVec044kexCZYQwh17uQWMVY9bTmNrBZHKoJT7CQnQOupYwvDTUcSb6yAR+/UMOFewWb5hI2j1XX2/vitdjZbTy5AJ7ixs/YX9VWer4iQ+elobCafaV6xcXeSg7i+Lf4dHwBBleIfhpc0ZNdJspneP5h/kRbhp0bWFe1kY03qh3oxNobzh5u8hv+lz6Y3hDQQv8dziLlvXHmTfGajGFgk63oSegtCNz/gL/F63GY2btAj8coBzUIX5RcbHsf5yYqzD+NYt2tZMiqQC4fzG/7i5YVTaKXDSFI2DwETBrZCD78wAp01VXyjsr9AnUwDj2fLfW1uyCMw9jkffneMZGxfv/qChmdnwKfbzPsUMSlnO6++K5UkkVMY60isNZ2CV7LshxnqujmXjKlYHix5b+4i/Bz1j9H0SuEnD6wTkDNKDJEOjl/R/Xx9VK+cii1eme1iSJKtabH/RjARpaCeT9Pniec0qcYLGRkgnJFdKxstsYKU/9ZHjgyQSf14wPowJZ1BVeZoENURcbJIOe2R+Vkbwvbf2RkqgimlNnGT+RfZja0+Fdye1FC6SUFd0SLU8UqjmadjjPz8eguf0MagqtBGM8rowTgXDvyDb8/OUh3EkFCOsD0fUtKXte9r/K0E/X1vm278XXFcndB67DFyYDNwj4GGKodObRhy/AKa5xg+IWue1qmEIxfaJw4YllnaDQ0ISkmuQD/o9ghBGg4d2bScpWvhEFTMZfSix80IyWjtqt/sFK3AcwYK2rTfuV9cuz/d345E9vSkSnO875AkAKt6LjV4FNv6pbqE/uw8E4w8GeflEQdRQSDshmMTuLCdIAVizgwP4LT+mogpoAfQRZQN1l2QQv4+o/u01RRgO5lZRYtE6IRlD+Y+tegs4UJdEIWd1mXGONoZY+AD4pE7MfOWsP0dgDx8jlVNjczKrBzX4OznXnKPS38wrzzdzli2aN8iHm2oAGFB/apB6Lm3vBlnacHtwT4G/4doWBwCisWCOtjXC/g25WTZcbDlXKKvw4/TVuwVq8ippKpUbOlz9Pb4W6C64BiBnYgHVPvXfQL8hYQ2Hc2xD3OhOuJc2ociowI/EcgazK+w4T/s+1PoLOQQl06kHBJuLzJrjE7GDzIQBTFhRq896vTlG4bphcuXzOmyBO8LUfx6wmBOlFyrNReG4m0fcI=]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ACM_GET_FCP_Automation">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="Email_Helper" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="ACM_Param_Custom" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="false" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\WPF\WindowsBase.dll" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="false" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="F:\OneStream Software\OneStreamAppRoot\OneStreamApp\bin\DocumentFormat.OpenXml.dll" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

'Imports OneStream.BusinessRule.Extender.Fcp_Integration_Utility
Imports OneStream.BusinessRule.Extender.OS_Models
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
Imports DocumentFormat.OpenXml
Imports DocumentFormat.OpenXml.Packaging
Imports DocumentFormat.OpenXml.Spreadsheet
Imports System.Text.RegularExpressions

Namespace OneStream.BusinessRule.Extender.ACM_GET_FCP_Automation
	Public Class MainClass
		
		#Region "Class-Level Parameters Dims"
		
			'================================================================================
			' Settings
			'================================================================================
			Dim loadMetadataSeqName As String = "Load_Metadata" 'sequence name to call to launch ACM
			Dim globalParameterTableName As String = "XFT_Global_Parameters" 'name of the global parameter table
			Dim attachmentFileName As String = "" ' "ACM_Difference_Report.xlsx" 'name of temp XL file to be attached to email
			Dim moduleName As String = "FCP_OS_DIM_HIER_PROPERTIES"
			Dim userDashboardTable As String = "XFW_ACM_UserDashboardSettings"
			
			Dim includeEmail As Boolean = True							'reporting and testing
			Dim detailedEmailAttachment As Boolean = True				'reporting and testing
			Dim acmKey1 As String = "ACMAutomationValues"
			Dim dsErrorKey As String = "AcmDataSourceError"
			Dim flagPossibleRenames As Boolean = False
			Dim debug As Boolean = False 
			Dim autoCommit As Boolean = False							'used to change the verbiage in the email. If true the phrase "Pending review and commit" is excluded.
			
			'================================================================================
			' Other Class-Level Variables
			'================================================================================
			Dim attachmentFileDir As String = ""
			Dim dtRequests As New DataTable
			Dim existingRequests As New List(Of String)
			'Dim err As String = ""
			Dim err As New List(Of String)
			Dim wrn As New List(Of String)
'			Dim envName As String = ""
			Dim detailedLog As String = "ACM_GET_FCP_Automation" 'initialize log with current BR name
			Dim emailServer As String = ""
			Dim emailDist As New List(Of String)
			Dim okToRun As Boolean = False
			Dim okToRunAutoReset As Boolean = True
			Dim appName As String = ""
			Dim workflowOverride As String = ""
			Dim dimTypeOverride As String = ""
			Dim dimNamesOverride As String = ""
			Dim attemptedMetadata As New Dictionary(Of String, String)
			
			'Email content
			Dim ds As New DataSet
			Dim dtAdd As New DataTable
			Dim dtUpdate As New DataTable
			Dim dtCopy As New DataTable
			Dim dtMove As New datatable
			Dim dtRemove As New DataTable
			Dim dtRename As New DataTable
			Dim dtJson As New DataTable
			Dim dtSourceRaw As New DataTable
			Dim dtSourceMod As New DataTable

			'Boolean DataTable Columns Set (only set them once)
			Dim bAdd As Boolean = False
			Dim bUpdate As Boolean = False
			Dim bMove As Boolean = False
			Dim bCopy As Boolean = False
			Dim bRemove As Boolean = False
			Dim bRename As Boolean = False
			Dim bJson As Boolean = False	
			
			'Email Helper
			Dim emailHelper As New OneStream.BusinessRule.Extender.Email_Helper.MainClass
		#End Region
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try	
				#Region "Parameter Initialization"

				'Debug (turns on detailed logging and includes the original ACM item json along with the FCP source metadata in both the raw and cleaned datatable forms)
					Dim strDebug As String = args.NameValuePairs.XFGetValue("Debug","False")
					debug = Convert.ToBoolean(strDebug)
					Log(si,"debug: " & debug)
					If Not debug Then 
						brapi.ErrorLog.LogMessage(si,"ACM Automation Debugging is disabled.")	
					Else
						brapi.ErrorLog.LogMessage(si,"ACM Automation Debuging is enabled.")
					End If
					BRApi.State.SetSessionState(si,False,ClientModuleType.External,String.Empty, String.Empty,acmKey1,"Debug",debug.ToString,Nothing)
					
				'Show a touch of progress
					brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,"Initializing Parameters",0)

				'AppName (used to query FCP)
					appName = args.NameValuePairs.XFGetValue("AppName")
					If appName = "" Then appName = si.AppName
					Log(si,"appName: " & appName)
					Brapi.ErrorLog.LogMessage(si,"AppName: " & appName)
					BRApi.State.SetSessionState(si,False,ClientModuleType.External,String.Empty, String.Empty,acmKey1,"AppName",appName,Nothing)		

				'Include email (allow users to control using DM parameters)
					includeEmail = args.NameValuePairs.XFGetValue("Email").XFConvertToBool(True)
					If Not includeEmail Then 
						Brapi.ErrorLog.LogMessage(si,"ACM Automation Email notifications are disabled.")
					Else
						brapi.ErrorLog.LogMessage(si,"ACM Automation Email notifications enabled.")
					End If
					


					Dim workflowOverride As String = ""
					Dim dimTypeOverride As String = ""
					Dim dimNamesOverride As String = ""
			
				'Workflow Overrides
					Dim overrideWorkflow As Boolean = False
					workflowOverride = args.NameValuePairs.XFGetValue("Workflow","")
					If workflowOverride = "|!Workflow!|" Then workflowOverride = ""
					dimTypeOverride = args.NameValuePairs.XFGetValue("DimType","")
					If dimTypeOverride = "|!DimType!|" Then dimTypeOverride = ""
					dimNamesOverride = args.NameValuePairs.XFGetValue("DimNames","")
					If dimNamesOverride = "|!DimNames!|" Then dimNamesOverride = ""
					If workflowOverride <> "" And dimTypeOverride <> "" And dimNamesOverride <> "" Then
						Log(si,"Overriding workflow")
						Log(si,"Workflow: " & workflowOverride)
						Log(si,"DimType: " & dimTypeOverride)
						Log(si,"DimNames: " & dimNamesOverride)
						overrideWorkflow = True
					Else If $"{workflowOverride}{dimTypeOverride}{dimNamesOverride}" <> "" Then
						wrn.Add("The workflow override parameters are not complete. Using global parameters to define workflows.")
					End If
					
				'Commit included
					autoCommit = args.NameValuePairs.XFGetValue("Commit").XFConvertToBool(False)					
					
				'Email notification table
					Log(si,"Create request table")
					dtRequests.Columns.Add("Request")
					dtRequests.Columns.Add("DimType")
					dtRequests.Columns.Add("DimName")
					dtRequests.Columns.Add("Import")
					dtRequests.Columns.Add("Status")

				'Get Global parameters
					Dim acmFlowParams As DataTable
					Dim acmGeneralParams As DataTable
					Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
						
						'GET GENERAL ACM PARAMETERS
						Log(si,"Getting global table")
						acmGeneralParams = BRApi.Database.ExecuteSql(dbConn, $"SELECT * FROM {globalParameterTableName} WHERE Module = 'ACM' AND AppName = '{appName}' AND Action = ''", False)
						If acmGeneralParams Is Nothing Then
							log(si,"Global settings not found")
							Throw New Exception($"{vbnewline}{vbnewline}ACM global general parameters are not configured.")
						Else If acmGeneralParams.Rows.Count = 0 Then
							log(si,"Global settings app not found")
							Throw New Exception($"{vbnewline}{vbnewline}Error getting ACM Global Paramters. Verify Global Paramter Table contains the required ACM Configuration.ACM requires the appname to be the target FCP application name")
						End If
						
						'GET FLOW PARAMTERS
						If Not overrideWorkflow Then
							Log(si,"Getting flow table")
							acmFlowParams = BRApi.Database.ExecuteSql(dbConn, $"SELECT * FROM {globalParameterTableName} WHERE Module = 'ACM' AND AppName = '{appName}' AND Action <> '' AND Action <> 'FieldList'", False)
							If acmFlowParams Is Nothing Or acmFlowParams.Rows.Count = 0 Then
								Throw New Exception($"{vbnewline}{vbnewline}ACM global automation parameters are not configured. The AppName should be the target FCP application name. The Action should be not blank and not equal to 'FieldList'.")
							End If		
						Else
							Log(si,"Creating datatable by hand using override values")
							brapi.ErrorLog.LogMessage(si,"Using workflow override settings")
							acmFlowParams = New DataTable
							acmFlowParams.Columns.AddRange({"Module","AppName","ParmName","Action","ParmValue"}.Select(Function(x) New DataColumn(x)).ToArray)
							acmFlowParams.Rows.Add({"ACM",appName,workflowOverride,dimTypeOverride,dimNamesOverride})
							
							'Dim tempDimList As List(Of String) = dimNamesOverride.Split(",")
						End If
						
						
						
						'GET ENDPOINT
'						Dim endPoint As String = acmGeneralParams.Select("ParmName = 'Endpoint'").FirstOrDefault.Item("ParmValue")
'						If Not endPoint.StartsWith("https") Then
'							Dim dtTemp As DataTable = BRApi.Database.ExecuteSql(dbConn,$"SELECT [ParmValue] FROM {globalParameterTableName} WHERE [Module] = {endPoint} AND [PartName] like '%endpoint%'")
'							If dtTemp IsNot Nothing And dtTemp.Rows.Count > 0 Then
'								endpoint = dtTemp(0)(0) & "/"
'							Else
'								Throw New Exception("Could not find a valid endpoint in the configuration.")
'							End If
'						End If
						Dim endpoint As String  = acmGeneralParams.Select("ParmName = 'Endpoint'").FirstOrDefault.Item("ParmValue")
						Log(si,"Endpoint = " & endpoint)
						If Not endpoint.StartsWith("https") Then
							Log(si,"Searching for endpoint")
							Dim dtTemp As DataTable = BRApi.Database.ExecuteSql(dbConn,$"Select [ParmValue] From {globalParameterTableName} Where Module = '{endpoint}' AND [ParmName] like '%endpoint%'",False)
							Log(si,"Test endpoint result")
							If Not dtTemp Is Nothing And dtTemp.Rows.Count > 0 Then
								Log(si,"Setting new endpoint")
								endpoint = dtTemp(0)(0)
								Log(si,"Endpoint = " & endpoint)
							Else
								Throw New Exception($"{vbnewline}{vbnewline}Could not find valid endpoint to run ACM Automation.{vbnewline}Please double check ACM configuration in the Global Paramter Table. " & endpoint)
							End If
						End If						
						

						BRApi.State.SetSessionState(si,False,ClientModuleType.External,String.Empty, String.Empty,acmKey1,"Endpoint",endpoint,Nothing)
						
						'Param - Email server
						emailServer = acmGeneralParams.Select("ParmName = 'EmailSvr'").FirstOrDefault.Item("ParmValue")
						Log(si,"Email Server = " & emailServer)

						'Param - Distribution List
						Dim emailDistFull As String = acmGeneralParams.Select("ParmName = 'EmailDist'").FirstOrDefault.Item("ParmValue")
						emailDist = emailDistFull.Replace(" ","").Split(",").ToList()
						Log(si,"Email Distribution: " & emailDistFull)
						Dim pattern As String= "\A(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)\Z"
						Dim invalidEmailList As New List(Of String)
						For Each eml As String In emailDist
							If Not Regex.IsMatch(eml, pattern, RegexOptions.IgnoreCase) Then
								invalidEmailList.Add(eml)
							End If
						Next
						If invalidEmailList.Count> 0 Then
							Throw New Exception($"{vbnewline}{vbnewline}Invalid email{If(invalidEmailList.Count > 1,"s","")}:{vbnewline}{"  -  " & String.join(vbnewline & "  -  ",invalidEmailList)}")							
						End If
						
						'Param - Ok to run
						Dim okToRunString As String = acmGeneralParams.Select("ParmName = 'OkToRun'").FirstOrDefault.Item("ParmValue")
						okToRun = okToRunString.XFConvertToBool()
						Log(si,"OkToRun: " & okToRun)
						
						'Param - Ok to run auto reset
						Dim okToRunAutoResetString As String = acmGeneralParams.Select("ParmName = 'OkToRunAutoReset'").FirstOrDefault.Item("ParmValue")
						okToRunAutoReset = okToRunAutoResetString.XFConvertToBool()
						Log(si,	"OkToRunAutoReset: " & okToRunAutoReset)
						
						'Check if ok to run
						If Not okToRun Then
							'Log(si,"Not okToRun. Aborting.")
							'err.Add("ACM global OkToRun Parmateter is set to false.")
							Throw New Exception($"{vbnewline}{vbnewline}ACM global OkToRun Parmateter is set to false.")
						End If
						
						'Verify FCP configuration configuration
						Dim sqlVerify As String = $"Select [ParmName] FROM {globalParameterTableName} Where Module = '{moduleName}' AND AppName = '{si.AppName}' ORDER BY ParmName, Action, SeqNum"
						Dim dtVerify As DataTable = BRApi.Database.ExecuteSql(dbConn,sqlVerify,False)
						If dtVerify Is Nothing Then
							log(si," ACM FCP Connection credentials are not set!")
							Throw New Exception($"{vbnewline}{vbnewline}ACM FCP Connection credentials are not set!{vbnewline}The following parameters are missing: ConsumerID, EmailDist, JSONEndPoint, SvcEnv, SvcName.")
						End If
						If dtVerify.Rows.Count = 0 Then
							log(si," ACM FCP Connection credentials are not set!")
							Throw New Exception($"{vbnewline}{vbnewline}ACM FCP Connection credentials are not set!{vbnewline}The following parameters are missing: ConsumerID, EmailDist, JSONEndPoint, SvcEnv, SvcName.")								
						End If
						If dtVerify.Rows.Count < 5 Then
							Dim missingConfigs As New list(Of String)
							If dtVerify.Select("ParmName='ConsumerID'").Count = 0 Then
								missingConfigs.Add("ConsumerID")
							End If
							If dtVerify.Select("ParmName='EmailDist'").Count = 0 Then
								missingConfigs.Add("EmailDist")
							End If		
							If dtVerify.Select("ParmName='JSONEndPoint'").Count = 0 Then
								missingConfigs.Add("JSONEndPoint")
							End If							
							If dtVerify.Select("ParmName='SvcEnv'").Count = 0 Then
								missingConfigs.Add("SvcEnv")
							End If	
							If dtVerify.Select("ParmName='SvcName'").Count = 0 Then
								missingConfigs.Add("SvcName")
							End If								
							Throw New Exception($"{vbnewline}{vbnewline}ACM FCP Connection credentials are not complete!{vbnewline}The following parameters are missing: {string.Join(",",missingConfigs)}")	
						End If	
						
						'SAVE USER SETTINGS
						
						' - first make sure the table exists
						Dim sqlUserSettings As String = $"IF NOT (EXISTS (SELECT *
						 FROM INFORMATION_SCHEMA.TABLES
						 WHERE TABLE_SCHEMA = 'dbo'
						 AND TABLE_NAME = '{userDashboardTable}'))
							BEGIN
								SET ANSI_NULLS ON
								SET QUOTED_IDENTIFIER ON
								CREATE TABLE [dbo].[{userDashboardTable}](
									[UserId] [varchar](100),
									[FldName] [varchar](100),
									[FldVal] [varchar](100)
								) ON [PRIMARY]
							END"
						brapi.Database.ExecuteSql(dbConn,sqlUserSettings,False)
						
						' - update or add as needed
						sqlUserSettings = $"SELECT * FROM {userDashboardTable} WHERE UserId = '{si.UserName}'"
						Dim currentUserSettings As DataTable = BRApi.Database.ExecuteSql(dbConn,sqlUserSettings,False)
						If currentUserSettings Is Nothing Then
							Dim dtUserSettings As New DataTable
							dtUserSettings.Columns.Add("UserId")
							dtUserSettings.Columns.Add("FldName")
							dtUserSettings.Columns.Add("FldVal")
							dtUserSettings.Rows.Add({si.UserName,"FcpAppName",appName})
							dtUserSettings.Rows.Add({si.UserName,"DimType",dimTypeOverride})
							dtUserSettings.Rows.Add({si.UserName,"DimNames",dimNamesOverride})
							dtUserSettings.Rows.Add({si.UserName,"WorkflowName",workflowOverride})
							BRApi.Database.SaveCustomDataTable(si,DbLocation.Application.ToString,userDashboardTable,dtUserSettings,True)	
						Else If currentUserSettings.Rows.Count = 0 Then
							Dim dtUserSettings As New DataTable
							dtUserSettings.Columns.Add("UserId")
							dtUserSettings.Columns.Add("FldName")
							dtUserSettings.Columns.Add("FldVal")
							dtUserSettings.Rows.Add({si.UserName,"FcpAppName",appName})
							dtUserSettings.Rows.Add({si.UserName,"DimType",dimTypeOverride})
							dtUserSettings.Rows.Add({si.UserName,"DimNames",dimNamesOverride})
							dtUserSettings.Rows.Add({si.UserName,"WorkflowName",workflowOverride})
							BRApi.Database.SaveCustomDataTable(si,DbLocation.Application.ToString,userDashboardTable,dtUserSettings,True)								
						Else
							sqlUserSettings = $"UPDATE {userDashboardTable} SET FldVal = '{appName}' WHERE UserId = '{si.UserName}' AND FldName = 'FcpAppName'"
							brapi.Database.ExecuteSql(dbConn,sqlUserSettings,False)
							
							sqlUserSettings = $"UPDATE {userDashboardTable} SET FldVal = '{dimTypeOverride}' WHERE UserId = '{si.UserName}' AND FldName = 'DimType'"
							brapi.Database.ExecuteSql(dbConn,sqlUserSettings,False)
							
							sqlUserSettings = $"UPDATE {userDashboardTable} SET FldVal = '{dimNamesOverride}' WHERE UserId = '{si.UserName}' AND FldName = 'DimNames'"
							brapi.Database.ExecuteSql(dbConn,sqlUserSettings,False)
							
							sqlUserSettings = $"UPDATE {userDashboardTable} SET FldVal = '{workflowOverride}' WHERE UserId = '{si.UserName}' AND FldName = 'WorkflowName'"
							brapi.Database.ExecuteSql(dbConn,sqlUserSettings,False)							
						End If
						
					End Using
					
					
					If includeEmail Then
						
						'Get existing requests
						Log(si,"Getting existing requests")
						brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,"Checking for existing requests",0)
						Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							Dim dt As DataTable = BRApi.Database.ExecuteSql(dbConn,"SELECT [ID] FROM [XFW_ACM_Request] WHERE [Status] = 'Waiting'",False)
							If Not dt Is Nothing And dt.Rows.Count > 0 Then
								For Each dr As DataRow In dt.Rows
									existingRequests.Add(dr("ID"))
								Next
							End If
						End Using
						
						'Name the tabs of the attached excel file
						Log(si,"Naming tables")
						dtAdd.TableName = "ADD"
						dtUpdate.TableName = "UPDATE"
						dtCopy.TableName = "COPY"
						dtMove.TableName = "MOVE"
						dtRemove.TableName = "REMOVE"
						dtRename.TableName = "RENAME"
						dtJson.TableName = "JSON"
					
					End If

					'Resetting session state
					Try 
						Using ms As MemoryStream = New MemoryStream
							BRApi.State.SetSessionState(si, False, ClientModuleType.External, String.Empty, String.Empty, acmKey1, "RawSource", String.Empty, Nothing)
							BRApi.State.SetSessionState(si, False, ClientModuleType.External, String.Empty, String.Empty, acmKey1, "CleanSource", String.Empty, Nothing)
							BRApi.State.SetSessionState(si, False, ClientModuleType.External, String.Empty, String.Empty, acmKey1, "ConnectionErrors", String.Empty, Nothing)
						End Using							
					Catch
						Throw New Exception($"{vbnewline}{vbnewline}Failed to set SessionState for one of the following:{vbnewline}  -  RawSource{vbnewline}  -  CleanSource{vbnewline}  -  ConnectionErrors")
					End Try
			
						
					'Validate metadata configuration for dimensions
					For Each acmFlowRow As DataRow In acmFlowParams.Rows
						Dim tempDimList = acmFlowRow.Item("ParmValue").Replace(" ","").Split(",")
						For Each tempDim As String In tempDimList
							
							Dim tempSql As String = $"Select Label, DimName FROM XFW_ACM_Dimension WHERE DimName = '{tempDim}'"
							Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								Dim resultingTempDt As DataTable = BRApi.Database.ExecuteSql(dbConn,tempSql,False)
								If Not resultingTempDt Is Nothing Then
									If Not resultingTempDt.Rows.Count = 0 Then
										If resultingTempDt.Rows.Count > 1 Then
											Throw New Exception("")
										Else If resultingTempDt.Rows(0)(0).ToString <> tempDim Then
											Throw New Exception($"{vbnewline}{vbnewline}Metadata Label '{resultingTempDt.Rows(0)(0).ToString}' does not match dimension name '{tempDim}'")
										Else If resultingTempDt.Rows(0)(1).ToString <> tempDim Then
											Throw New Exception($"{vbnewline}{vbnewline}Metadata Dimension Name '{resultingTempDt.Rows(0)(0).ToString}' does not match dimension name '{tempDim}'")
										End If
									Else
										Throw New Exception($"{vbnewline}{vbnewline}Failed to find metadata configured in ACM for dimension '{tempDim}'")
									End If	
								Else
									Throw New Exception($"{vbnewline}{vbnewline}Failed to find metadata configured in ACM for dimension '{tempDim}'")
								End If
							End Using
						Next
					Next
					
				#End Region
				
				Try
					#Region "Loop on DimType/DimNames and run ACM to create new ACM Requests"
						
						'Calculate progress increment
						Dim progressIncrement As Integer = 1
						For Each acmFlowRow As DataRow In acmFlowParams.Rows
							progressIncrement += acmFlowRow.Item("ParmValue").Replace(" ","").Split(",").length	
						Next
						progressIncrement = 100 / progressIncrement / 2
						Log(si,"ProgressIncrement: " & progressIncrement)
						
						'Update task progress
						Log(si,"Looping Global Parameters")
						brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,"Looping on DimTypes and DimNames",0)
						
						'Loop on DimTypes (Entity, Account, UD1 - UD8)	
						Dim fileAppend As Boolean = False
						For Each acmFlowRow As DataRow In acmFlowParams.Rows
							Dim dimType As String = acmFlowRow.Item("Action").Trim()
							
							If acmFlowRow.Item("ParmValue") <> "" Then
								Dim dimNames As String() = acmFlowRow.Item("ParmValue").Replace(" ","").Split(",")
								Dim flowName As String = acmFlowRow.Item("ParmName")
								Log(si,$"FlowName (workflow profile name): " & flowName)
														
								'Verify workflow profiles exist
								log(si,"looking for workflow")
								Try
									Dim wfClusterPkVerify As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si,"ACM_MetadataImport_Default." & flowName,"Actual","2021M1")
									log(si,"testing workflow")
									If wfClusterPkVerify Is Nothing Then
										log(si,"workflow not found")
										'err.Add($"Failed to find workflow profile {flowName}")
										Throw New Exception($"{vbnewline}{vbnewline}Cannot find workflow profile {flowName}!")
										Continue For
									'Else
										'log(si,"found workflow")
									End If
								Catch
									log(si,"workflow not found")
									'err.Add($"Failed to find workflow profile {flowName}")
									Throw New Exception($"{vbnewline}{vbnewline}Cannot find workflow profile {flowName}!")
									Continue For								
								End Try
								'Save to session state. This is used in the parser rule when the ACM job is started.
								Log(si,"Saving dimType to session state")
								BRApi.State.SetSessionState(si,False,ClientModuleType.External,String.Empty, String.Empty,acmKey1,"DimType",dimType,Nothing)
								
								'Create One (1) ACM Request per DimName (ENT,WMTUS,...)
								Log(si,"Looping on dimNames")
								For Each dimName As String In dimNames
									
									'Save to attempted list for use in the email later on
									If attemptedMetadata.containsKey(dimType) Then
										attemptedMetadata(dimType) += "," & dimName
									Else
										attemptedMetadata.Add(dimType,dimName)
									End If
									
									
									'Save to session state. This is used in the connector business rule when the ACM job is started.
									Log(si,$"Saving dimName {dimName} to session state")
									BRApi.State.SetSessionState(si,False,ClientModuleType.External,String.Empty, String.Empty,acmKey1,"DimName",dimName,Nothing)

									'Update Task activity and log
									brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,$"Running ACM Import on {dimType} {dimName}",progressIncrement)
									
									'Define SourceName parameter for the dynamic ACM job - this comes from the flowName saved in the Global parameter table
									Dim customSubstVars As New Dictionary(Of String, String)
									customSubstVars.Add("SourceName",flowName)
									
									'Launch custom ACM job and provide the sourceName dynamically based on the DimType
									Log(si,"Custom ACM Import Begin **")
									Dim objTaskActivityItemQueued As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(si, loadMetadataSeqName, customSubstVars)
									Log(si,"Custom ACM Import Complete _")
									
									If includeEmail Then
										
										'Update Task Activity
										brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,$"Reviewing Request for {dimType} {dimName}",progressIncrement)								
										
										'Get final task status
										Log(si,"Reviewing Requests")
										Dim objTaskActivityItemFinal As TaskActivityItem = BRApi.TaskActivity.GetTaskActivityItem(si,objTaskActivityItemQueued.UniqueID)
										
										
										
										Dim connectorErrors As String = GetSessionStateValue(si,"ConnectorErrors")
										If connectorErrors <> "" Then
											err.Add(connectorErrors)
											log(si,"Connector Errors: " & connectorErrors)
										End If

										'Generate email content
										GenerateEmailContent(si,api,args,dimType,dimName,objTaskActivityItemFinal.TaskActivityStatusStr)
										
									End If
									
								Next dimName
							Else
								Dim wrnString As String = $"No Dim Names configured for Dim Type {dimType}"
								Log(si,wrnString)
								wrn.Add(wrnString)
							End If
						Next acmFlowRow
					#End Region
					
					#Region "Create final xl file for email attachment"
						If includeEmail Then
			
							'Email attachment file name
							If detailedEmailAttachment Then
								Log(si,"Getting ACM outgoing directory")
								attachmentFileDir = Path.Combine(BRApi.FileSystem.GetFileShareFolder(si,FileShareFolderTypes.ApplicationOutgoing,api),"ACM")
								
								If Not Directory.Exists(attachmentFileDir) Then
									Log(si,"Creating ACM outgoing directory")
									directory.CreateDirectory(attachmentFileDir)
								End If
								
								Log(si,"Defining outgoing file name")
								
								'Building File Name
								Dim attemptedDims As String = String.Join(",",attemptedMetadata.Values)
								Dim curEnvName As String = GetCurrentEnvironment()
								Dim curAppName As String = si.AppName
								Dim curTimeStamp As String = System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Now, "Central Standard Time").ToString("yyyyMMdd_HHmmss")
								
								attachmentFileName = Path.Combine(attachmentFileDir,$"ACM_Diff_Report_{attemptedDims}_{curAppName}_{curEnvName}_{curTimeStamp}.xlsx")
								Log(si,"attachmentFileName: " & attachmentFileName)
							Else If includeEmail Then
								Log(si,"No attachment will be added")

							End If						

							CombineTablesToXL(si)
						Else
							Log(si,"No email will be sent")
						End If
					#End Region
					
				Catch ex As Exception		
					#Region "Error Handling"
						brapi.ErrorLog.LogMessage(si,"Entered error handling") 'just in case the log doesn't print
						Log(si,"Entered error handling")
						Try
							log(si,$"Exception: {ex}")
							log(si,"Exception: " & ex.Message)
						Catch
						End Try					
						'brapi.ErrorLog.LogMessage(si,detailedLog)
						Dim thisBRName As String = Me.ToString.Replace("OneStream.BusinessRule.Extender.","").Replace(".MainClass","")
						
						err.Add(ex.Message)
						
						If okToRun Then
							Try
								If ex.InnerException.Message.StartsWith($"Invalid object name '{globalParameterTableName}'") Then
									Throw New Exception($"{thisBRName} BR requires the {globalParameterTableName} marketplace solution to function.")
								End If
							Catch	
								Throw ex
	'							If debug Then
									'brapi.ErrorLog.LogMessage(si,detailedLog & vbnewline)
									okToRun = False
	'							End If
						
								Log(si,"No inner exception found")
							'Finally
								'Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
							End Try
						Else
							brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,"Aborting. Ok to run flag set to false.",1)
						End If
						
						
					#End Region		
					
				Finally	
					#Region "Final Email Notification"
					
						If okToRun Then
							
							brapi.ErrorLog.LogMessage(si,"Final notifications")
							'Log email table status
							If includeEmail Then
								If dtRequests IsNot Nothing And dtRequests.Rows.Count > 0 Then
									Log(si,"dtRequests has rows")
								Else
									
									'No Requests were returned by the generate email process. 
									'Either no matches were found Or an Error occured
									Log(si,"dtRequests is nothing or has no rows")
									
									'Query results. If found, then something went wrong in the parsing process
									Log(si,"Double checking request status")
									Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
										Dim dt As DataTable = BRApi.Database.ExecuteSql(dbConn,"SELECT [ID] FROM [XFW_ACM_Request] WHERE [Status] = 'Waiting'",False)
										If Not dt Is Nothing And dt.Rows.Count > 0 Then
											For Each dr As DataRow In dt.Rows
												If Not existingRequests.contains((dr("ID")))
													If detailedEmailAttachment Then
														
														wrn.Add("An error occured while parsing the ACM items to create the difference report.")
					
														
														'Request exists but was not added to the request datatable
														'This is mostly likly because the detailed email attachment failed to parse
														'Try to get email content again but without parsing the data
														Log(si,"Existing request found! Attempting to regenerate email datatable without detailed attachment")
														detailedEmailAttachment = False
														GenerateEmailContent(si,api,args)
														Exit For
													End If
												End If
											Next
										End If
									End Using		
									
	'								If dtRequests IsNot Nothing And dtRequests.Rows.Count > 0 Then
	'									Log(si,"dtRequests has rows now")
	'									err.Add("Something went wrong creating the detailed email attachment by parsing the items in the database")
	'								Else
	'									Log(si,"dtRequests still has no rows")
	'								End If
								End If
					
								'Send Email
								Log(si,"About to send email. Folder Path: " & attachmentFileName)
								If Not File.Exists(attachmentFileName) Then 
									Log(si,"File was not created. Nothing to attach.")
									attachmentFileName = ""
								End If
								
								Me.SendRequestsInitiatedEmail(si,dtRequests,New List(Of String)({attachmentFileName}),appName,emailServer,emailDist,err,wrn,autoCommit)
								'emailHelper.SendRequestsInitiatedEmail(si,dtRequests,New List(Of String)({attachmentFileName}),appName,emailServer,emailDist,err,wrn,autoCommit)
								
							End If
							
							'Reset the OkToRun flag to false - if configured to do so
							If okToRunAutoReset Then
								Log(si,"Auto resetting ok to run to false")
								Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
									BRApi.Database.ExecuteSql(dbConn, $"UPDATE {globalParameterTableName} SET ParmValue = 'False' WHERE Module = 'ACM' AND ParmName = 'OkToRun'", False)
								End Using						
							End If
							
							'delete attachement file
							If File.Exists(attachmentFileName) Then
								Log(si,"Deleting file " & attachmentFileName)
								File.Delete(attachmentFileName)
							End If
							
						End If
						
						'Add final log string to error log
						If debug Then
							brapi.ErrorLog.LogMessage(si,detailedLog & vbnewline)
						End If

					#End Region
					
				End Try
				
			Catch exInit As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, exInit))
			End Try
			Return Nothing
		End Function
	
		#Region "Helper Functions"

		''' <summary>
		''' Generate Email Content (data table with embeded html and email attachment)
		''' </summary>
		''' <param name="si"></param>
		''' <param name="api"></param>
		''' <param name="args"></param>
		''' <param name="dimType"></param>
		''' <param name="dimName"></param>
		''' <param name="strTaskActivityItemFinal"></param>
		Private Sub GenerateEmailContent(ByVal si As SessionInfo,ByVal api As Object, ByVal args As ExtenderArgs,
					Optional ByVal dimType As String = "", Optional ByVal dimName As String = "", Optional ByVal strTaskActivityItemFinal As String = "Completed")
		Try
			
			If strTaskActivityItemFinal <> "Completed" Then
				Log(si,$"Creating request row for {dimType} {dimName} and {strTaskActivityItemFinal} status")
				Dim requestText As String = $"R000000NA"
				Dim requestNum As String = requestText
	
				Log(si,"Add request to email datatable")
				Dim dsStatus As String = GetSessionStateValue(si,dsErrorKey)
				If dsStatus Is Nothing Or dsStatus = "" Then dsStatus = "Unknown"
				dtRequests.Rows.Add({requestText, dimType, dimName, strTaskActivityItemFinal,dsStatus})
				Log(si,$"Email datatable now has {dtRequests.Rows.Count} rows")
			Else
				'Open a connection to the database
				Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					
					'Find newly credated requests in a status of waiting
					Log(si,"Query for request info")
					Dim requestInfo As DataTable = BRApi.Database.ExecuteSql(dbConn,"SELECT r.ID as 'Request', count(i.ItemID) as 'Item Count', r.[Created], r.RequestID FROM [XFW_ACM_Request] r INNER JOIN [XFW_ACM_Item] i ON r.RequestID = i.FKRequestID WHERE r.[Status] = 'Waiting' GROUP BY r.ID, r.[Created], r.RequestID",False)
					If Not requestInfo Is Nothing And requestInfo.Rows.Count > 0 Then
						Log(si,"Request info found")
						
						'For each request
						For Each dr As DataRow In requestInfo.Rows
							
							'Check if request was not pre-existing - don't want to report on requests already pending commit
							If Not existingRequests.Contains(dr("Request")) Then
								
								'Create first column cell text with request number, item count, and create timestamp
									'=======================================|
									'	R00000012							|
									'		8 Items							|
									'		Created 3/30/2021 3:23:45 PM	|
									'=======================================|
									
									Log(si,"Creating request text")
									Dim requestText As String = $"R{dr("Request"):00000000}"
									Dim requestNum As String = requestText
									If dr("Item Count") = 1 Then
										requestText += $"</br><small><div style='text-indent:1em'>1 Item</div>"
									Else
										requestText += $"</br><small><div style='text-indent:1em'>{dr("Item Count")} Items</div>"
									End If
									requestText += $"<div style='text-indent:1em'>Created {dr("Created")}</div></small>"
			
								#Region "Detailed Email Attachment"
								'======================================================================================================
								'Create XL file attachment with item details"
								'======================================================================================================
								
									'Query the [XFW_ACM_Item] table and parse the ItemProperties json
									'to discover the 'to' and 'from' values and only list them if they are different.
									'
									'In the case of an add, these values will come from the Properties tag in the item json.
									'Otherwise, the 'to' and 'from' values come from the 'Audit' tag in the item json.											
								
								If detailedEmailAttachment Then
									
									Log(si,$"Create detailed email attachment for request {requestNum}")
									Dim itemSQL As String = $"SELECT ItemProperties, ItemName, FlowOptions, ItemParentName FROM [XFW_ACM_Item] WHERE [FKRequestID] = '{dr("RequestID")}'"
									Dim dtDetails As DataTable = BRApi.Database.ExecuteSql(dbConn,itemSQL,False)
									If Not dtDetails Is Nothing And dtDetails.Rows.Count > 0 Then
										Log(si,"dtDetails has " & dtDetails.Rows.Count & " rows.")
										
										
										'Loop on items
										Log(si,"Getting values from json")
										Dim propertyList As List(Of String) = Nothing
										Dim removeColumns() As String = {"ParentName","Name"}
										Dim jsonColumns() As String = {"Request","DimType","DimName","ParentName","Name","Json"}
										Dim updateColumns() As String = {"Name","Property","From","To"}
										
										'Get groups from secGroup table
										Log(si,"Get groups from secGroup table")
										Dim dtSecGroup As DataTable = Nothing
										Using dbFmConn As DbConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
											dtSecGroup = BRApi.Database.ExecuteSql(dbFmConn,"SELECT UniqueID, Name FROM SecGroup",False)
										End Using
										
										'Add to dictionary
										Log(si,"Add to dictionary")
										Dim secGroupNameFromId As New Dictionary(Of String, String)
										For Each rSecGroup As DataRow In dtSecGroup.Rows
											If Not secGroupNameFromId.ContainsKey(rSecGroup("UniqueID").ToString) Then
												secGroupNameFromId.Add(rSecGroup("UniqueID").ToString,rSecGroup("Name"))
											End If
										Next rSecGroup
										
										'Get list of groups as backup
										Log(si,"Get list of groups as backup")
										Dim grps As List(Of OneStream.Shared.Wcf.Group) = BRApi.Security.Admin.GetGroups(si)
										
'										Dim memScriptDict As New Dictionary(Of String, String)
'										memScriptDict.Add("Entity","E")
'										memScriptDict.Add("Account","A")
'										memScriptDict.Add("Flow","F")
'										memScriptDict.Add("Scenario","S")
'										memScriptDict.Add("UD1","UD1")
'										memScriptDict.Add("Merch","UD1")
'										memScriptDict.Add("UD2","UD2")
'										memScriptDict.Add("CenterType","UD2")
'										memScriptDict.Add("UD3","UD3")
'										memScriptDict.Add("Channel","UD1")
'										memScriptDict.Add("UD4","UD4")
'										memScriptDict.Add("UD5","UD5")
'										memScriptDict.Add("UD6","UD6")
'										memScriptDict.Add("UD7","UD7")
'										memScriptDict.Add("UD8","UD8")
										
'										Dim cubeInfos As List(Of CubeInfo) = BRApi.Finance.Cubes.GetCubeInfos(si)
										
										Log(si,"Looping on items")
										For Each itemDetailRow As DataRow In dtDetails.Rows
											
											'Get' member name', 'parent name', and 'properties' from the item record
											Dim itemJson As String = itemDetailRow("ItemProperties")
											Dim itemName As String = itemDetailRow("ItemName")
											Dim itemParent As String = itemDetailRow("ItemParentName")
											

											
											'Get json as jObject
											Dim jObj As JObject = JObject.Parse(itemJson)

											
											'Get the item Action and add to DataTable
											Dim itemAction As String
											Try
												itemAction = jObj("Options")("Action").ToString
											Catch
												If itemDetailRow("FlowOptions").Contains(",") Then
													itemAction = itemDetailRow("FlowOptions").split(",")(1)
												Else
													itemAction = "Unknown"
													Log(si,$"Bad action on item {itemName}")
												End If
											End Try
											
											'Get Property List from item json
											If propertyList Is Nothing Then
												Select Case itemAction
													Case "ADD","MOVE","COPY"
														Log(si,"Adding property list")
														propertyList = GetACMItemPropertyNames(si,jObj)
												
														'if the first one is an UPDATE, remove the CurrentParentName as it is irrelavent
														If propertyList.Contains("CurrentParentName") Then
															propertyList.Remove("CurrentParentName")
														End If
												End Select
											End If										
											
											'Set up the json table
											If debug Then
												If Not bJson Then
													Log(si,"Adding json tab")
													dtJson.Columns.AddRange(jsonColumns.Select(Function(x) New DataColumn(x)).ToArray)
													bJson = True
												End If
												dtJson.Rows.Add({requestNum,dimType,dimName,itemParent,itemName,itemJson})
											End If										
											
											'Select case
											Dim fcpKeyNames As String() = {"Request","DimType","DimName"}
											Dim fcpKeyValues As String() = {requestNum,dimType,dimName}
											'Dim secGroupNames As New List(Of String)({"READ_DATA_GRP","READ_DATA_GRP2","READ_WRITE_DATA_GRP","READ_WRITE_DATA_GRP2"})
											Dim secGroupNames As New List(Of String)({"DisplayMemberGroup","ReadDataGroupUniqueID","ReadDataGroupUniqueID2","ReadWriteDataGroupUniqueID","ReadWriteDataGroupUniqueID2"})
											Select Case itemAction
												Case "ADD"
													If Not bAdd Then
														Log(si,"Adding columns to ADD table")
														dtAdd.Columns.AddRange(AddArrays(si,fcpKeyNames,,propertyList).Select(Function(x) New DataColumn(x)).ToArray())
														bAdd = True
													End If
													dtAdd.Rows.Add(AddArrays(si,fcpKeyValues,GetACMItemPropertyValues(si,jObj).ToArray))
													
		                                		Case "UPDATE"
													If Not bUpdate Then
														Log(si,"Adding columns to UPDATE table")
														dtUpdate.Columns.AddRange(AddArrays(si,fcpKeyNames,updateColumns).Select(Function(x) New DataColumn(x)).ToArray())
														bUpdate = True
													End If			
										            Dim jAuditParent As JToken = jObj("Audit")
													'Log(si,"Deserializing Audit Json")
										            Dim auditList As List(Of Audit) = JsonConvert.DeserializeObject(Of List(Of Audit))(jAuditParent.ToString)
													'Log(si,"Looping through audit items")
										            For Each _audit As Audit In auditList
														If Not _audit.to.XFEqualsIgnoreCase(_audit.from) Then
															
															'log(si,$"Mismatching properties found. From: {_audit.from} To: {_audit.to}")
															'TRUE=1 and FALSE=0. Hopefully remove after next version of ACM
															If (_audit.To = "1" And _audit.from.XFEqualsIgnoreCase("TRUE")) _
																Or (_audit.To.XFEqualsIgnoreCase("TRUE") And _audit.From = "1") _
																Or (_audit.To = "0" And _audit.from.XFEqualsIgnoreCase("FALSE")) _
																Or (_audit.To.XFEqualsIgnoreCase("FALSE") And _audit.From = "0") Then
																'do nothing, false alarm
															Else
																'============================================================================== CONVERT GUIDS TO NAMES
																'Replace SecGroup GUID with SecGroup Name 
																If secGroupNames.Contains(_audit.propertyName) Then
																	Dim guidOutput As Guid 'used for try parse only
																	
																	'Log(si,"   evaluating _audit.to")
																	If Guid.TryParse(_audit.to, guidOutput) Then
																		If secGroupNameFromId.ContainsKey(_audit.to) Then
																			_audit.to = secGroupNameFromId(_audit.to)
																		ElseIf grps.Select(Function(x) x.UniqueID.ToString).ToList().Contains(_audit.to) Then
																			_audit.to = grps.Find(Function(x) x.UniqueID.ToString = _audit.to).Name
																		ElseIf _audit.to = "00000000-0000-0000-0000-000000000000" Then
																			_audit.to = "Everyone"
																		End If
																	End If
																	
																	'Log(si,"   evaluating _audit.from")
																	If Guid.TryParse(_audit.from, guidOutput) Then
																		If secGroupNameFromId.ContainsKey(_audit.from) Then
																			_audit.from = secGroupNameFromId(_audit.from)
																		ElseIf grps.Select(Function(x) x.UniqueID.ToString).ToList().Contains(_audit.from) Then
																			_audit.from = grps.Find(Function(x) x.UniqueID.ToString = _audit.from).Name
																		ElseIf _audit.from = "00000000-0000-0000-0000-000000000000" Then
																			_audit.from = "Everyone"
																		End If
																	End If		
																Else
																	'Log(si, "Unknown security group " & _audit.propertyName)
																	'unknown security group. do nothing.
																End If
																
																'============================================================================= CONVERT SOME KNOWN IDS TO NAMES
																If _audit.propertyName = "ICConstraint" Then
																	If _audit.from = "-999" Then
																		_audit.from = "None"
																	End If
																End If
																
																'Log(si,"   adding update row")	
																If Not _audit.to.XFEqualsIgnoreCase(_audit.from) Then
																	dtUpdate.Rows.Add(AddArrays(si,fcpKeyValues,{itemName,_audit.propertyName,_audit.from,_audit.to}))
																End If
															End If
										                End If
										            Next 
													
												Case "MOVE"
													If Not bMove Then	
														dtMove.Columns.AddRange(AddArrays(si,fcpKeyNames,,propertyList).Select(Function(x) New DataColumn(x)).ToArray())
														bMove = True
													End If					
													dtMove.Rows.Add(AddArrays(si,fcpKeyValues,GetACMItemPropertyValues(si,jObj).ToArray))
													
												Case "COPY"	
													If Not bCopy Then
														Log(si,"Adding columns to COPY table")
														dtCopy.Columns.AddRange(AddArrays(si,fcpKeyNames,,propertyList).Select(Function(x) New DataColumn(x)).ToArray())
														bCopy = True
													End If
													dtCopy.Rows.Add(AddArrays(si,fcpKeyValues,,GetACMItemPropertyValues(si,jObj)))
													
												Case "REMOVE"
													If Not bRemove Then
														Log(si,"Adding columns to REMOVE table")
														dtRemove.Columns.AddRange(AddArrays(si,fcpKeyNames,removeColumns).Select(Function(x) New DataColumn(x)).ToArray())
														bRemove = True
													End If
													
													If itemParent = "" Or itemName = "" Then
														Log(si,"Blank item name or parent found!!!")
													Else
														
'														Dim dataTotal As Decimal = 0.00
'														Dim dataInCubes As Integer = 0
'														For Each cbInfo As CubeInfo In CubeInfos
'															Dim mbrScrpt As String = $"{memScriptDict(dimType)}#{itemName}"
'															Dim objDataCellInfoUsingMemberScript As DataCellInfoUsingMemberScript = BRApi.Finance.Data.GetDataCellUsingMemberScript(si, cbInfo.Cube.Name, mbrScrpt)
'															If objDataCellInfoUsingMemberScript.DataCellEx.DataCell.CellAmount > 0 Then
'																dataTotal += objDataCellInfoUsingMemberScript.DataCellEx.DataCell.CellAmount
'																dataInCubes += 1
'															End If
'														Next
														
														dtRemove.Rows.Add(AddArrays(si,fcpKeyValues,{itemParent,itemName}))
													End If		
		                                		Case Else
													Log(si,"Unknown action")
													Log(si,"Unknown action type: " & itemAction)  	
		                    				End Select
										Next 
										
									End If
								Else
									Log(si,"No attachment required")
									attachmentFileName = ""
								End If
								#End Region
								
								Log(si,"Add request to email datatable")
								dtRequests.Rows.Add({requestText, dimType, dimName, strTaskActivityItemFinal,"Pending Review"})
								Log(si,$"Email datatable now has {dtRequests.Rows.Count} rows")
								
								'Add request to existing requests (not sure if this is needed but it will prevent any duplicates)
								existingRequests.Add(dr("Request"))
								
								Exit For 'should only be one anyway
							End If
						Next dr	
					
					Else
						'no requests found
						If Not detailedEmailAttachment Then
							attachmentFileName = ""
						End If					
					End If
				End Using
			End If
			Catch ex As Exception
				Log(si,"FCP_GET_ACM AUTOMATION BR>GenerateEmailContent>Failed:" & ex.Message)
				detailedEmailAttachment = False
				err.Add("FCP_GET_ACM_AUTOMATION BR: GenerateEmailContent: Failed: " & ex.Message)
			End Try
		End Sub

		Sub Log(ByVal si As SessionInfo, ByVal logValue As String)
			If debug Then
				If detailedLog = "" Then
					detailedLog = logValue
				Else
					detailedLog += vbnewline & " " & logValue
				End If
			End If
		End Sub
		
		Private Function GetACMItemPropertyNames(ByVal si As sessioninfo, ByVal jObj As JObject) As List(Of String)
	        Dim jProperties As JToken = jObj("Properties")
	        Dim jProp As JProperty
	        Dim jPropName As String
			Dim retVal As New List(Of String)
	        For Each field As JToken In jProperties.Children
	            jProp = field.ToObject(Of JProperty)
	            jPropName = jProp.Name            
				'retVal.Add(chr(34) & jPropName & chr(34))
				retVal.Add(jPropName)
	        Next 	
			Return retVal
		End Function		
		
		Private Function GetACMItemPropertyValues(ByVal si As sessioninfo, ByVal jObj As JObject) As List(Of String)
	        Dim jProperties As JToken = jObj("Properties")
	        Dim jProp As JProperty
	        Dim jPropVal, jPropName As String
			Dim retVal As New List(Of String)
	        For Each field As JToken In jProperties.Children
	            jProp = field.ToObject(Of JProperty)
	            jPropVal = jProp.Value      
				jPropName = jProp.Name
				'retVal.Add(chr(34) & jPropVal & chr(34))
				If jPropName <> "CurrentParentName" Then
					retVal.Add(jPropVal)
				End If
	        Next 	
			Return retVal
		End Function		
		
		Private Function GetACMAuditValues(ByVal si As SessionInfo, ByVal jObj As Object) As List(Of List(Of String))	
		
            Dim jAuditParent As JToken = jObj("Audit")
            Dim auditList As List(Of Audit) = JsonConvert.DeserializeObject(Of List(Of Audit))(jAuditParent.ToString)
            
            'Dim changedFound As Boolean = False
			Dim fromList As New List(Of String)
			Dim toList As New List(Of String)
            For Each _audit As Audit In auditList
				fromList.Add(_audit.from)
				toList.Add(_audit.to)
                'If _audit.to <> _audit.from Then
                'sw.WriteLine($"R{dr("Request"):00000000},{dimType},{dimName},{itemName},{itemAction},{_audit.propertyName},{_audit.from},{_audit.to}")
                'End If
            Next 
			
			Return New List(Of List(Of String))({fromList, toList})
		End Function
	
		Public Function AddArrays(ByVal si As SessionInfo, ByVal array1 As String(), Optional ByVal array2 As String() = Nothing, Optional ByVal l2 As List(Of String) = Nothing ) As String()
			Dim l1 As List(Of String) = array1.ToList()
			If l2 Is Nothing Then l2 = array2.ToList()
			l1.AddRange(l2)
			Return l1.ToArray()
			
			'TODO: is there a faster way to combine two arrays?
			'	Tried using union, but that fails with multiples
			
		End Function
		
		Public Sub CombineTablesToXL(ByVal si As SessionInfo)
				
			'TODO: try to flag renames
			Log(si,"CombineTablesToXL")

			If dtAdd IsNot Nothing And dtAdd.Rows.Count > 0 Then 
				Log(si," Adding ADD Table to dataset")
				ds.Tables.Add(dtAdd)
			End If
			
			If dtUpdate IsNot Nothing And dtUpdate.Rows.Count > 0 Then ' And bUpdate2 Then 
				Log(si," Adding UPDATE Table to dataset")
				ds.Tables.Add(dtUpdate)
			End If
			
			If dtCopy IsNot Nothing And dtCopy.Rows.Count > 0 Then 
				Log(si," Adding COPY Table to dataset")
				ds.Tables.Add(dtCopy)
			End If
			
			If dtMove IsNot Nothing And dtMove.Rows.Count > 0 Then 
				ds.Tables.Add(dtMove)
				Log(si," Adding MOVE Table to dataset")
			End If
			
			If Not dtRemove Is Nothing And dtRemove.Rows.Count > 0 Then 
				
				Dim memScriptDict As New Dictionary(Of String, String)
				memScriptDict.Add("Entity","E")
				memScriptDict.Add("Account","A")
				memScriptDict.Add("Flow","F")
				memScriptDict.Add("Scenario","S")
				memScriptDict.Add("UD1","UD1")
				memScriptDict.Add("UD2","UD2")
				memScriptDict.Add("UD3","UD3")
				memScriptDict.Add("UD4","UD4")
				memScriptDict.Add("UD5","UD5")
				memScriptDict.Add("UD6","UD6")
				memScriptDict.Add("UD7","UD7")
				memScriptDict.Add("UD8","UD8")
				
				Dim ph As New OneStream.BusinessRule.DashboardStringFunction.ACM_Param_Custom.MainClass
				Dim mappedDimNames As String() = ph.GetDimMapFromGlobalParameterTable(si).Split(",")
				If Not memScriptDict.ContainsKey(mappedDimNames(0)) Then memScriptDict.Add(mappedDimNames(0),"E")
				If Not memScriptDict.ContainsKey(mappedDimNames(1)) Then memScriptDict.Add(mappedDimNames(1),"A")
				If Not memScriptDict.ContainsKey(mappedDimNames(2)) Then memScriptDict.Add(mappedDimNames(2),"S")
				If Not memScriptDict.ContainsKey(mappedDimNames(3)) Then memScriptDict.Add(mappedDimNames(3),"F")
				If Not memScriptDict.ContainsKey(mappedDimNames(4)) Then memScriptDict.Add(mappedDimNames(4),"UD1")
				If Not memScriptDict.ContainsKey(mappedDimNames(5)) Then memScriptDict.Add(mappedDimNames(5),"UD2")
				If Not memScriptDict.ContainsKey(mappedDimNames(6)) Then memScriptDict.Add(mappedDimNames(6),"UD3")
				If Not memScriptDict.ContainsKey(mappedDimNames(7)) Then memScriptDict.Add(mappedDimNames(7),"UD4")
				If Not memScriptDict.ContainsKey(mappedDimNames(8)) Then memScriptDict.Add(mappedDimNames(8),"UD5")
				If Not memScriptDict.ContainsKey(mappedDimNames(9)) Then memScriptDict.Add(mappedDimNames(9),"UD6")
				If Not memScriptDict.ContainsKey(mappedDimNames(10)) Then memScriptDict.Add(mappedDimNames(10),"UD7")
				If Not memScriptDict.ContainsKey(mappedDimNames(11)) Then memScriptDict.Add(mappedDimNames(11),"UD8")
				
				Dim cubeInfos As List(Of CubeInfo) = BRApi.Finance.Cubes.GetCubeInfos(si)				
				
				dtRemove.Columns.Add("Cubes Affected")
				dtRemove.Columns.Add("Total Amount in Cubes")
				
				For Each removeRow As DataRow In dtRemove.Rows
					Dim mbrNm As String = removeRow("Name").ToString

					Dim srchForData As Boolean = False
					If (dtCopy Is Nothing) 
						srchForData = True
					Else If Not dtCopy Is Nothing And (dtCopy.Rows.Count = 0 Or dtCopy.Columns.Count = 0) Then
						srchForData = True
					Else If Not dtCopy Is Nothing And dtCopy.Rows.Count > 0 And dtCopy.Columns.Count > 0 Then
						If dtCopy.Select($"[Name] = '{mbrNm}'").Length = 0 Then
							srchForData = True
						End If
					End If
					
					If srchForData Then
						Dim dataTotal As Decimal = 0.00
						Dim dataInCubes As Integer = 0
						For Each cbInfo As CubeInfo In CubeInfos
							Dim mbrScrpt As String = $"{memScriptDict(removeRow("DimType"))}#{mbrNm}"
							Dim objDataCellInfoUsingMemberScript As DataCellInfoUsingMemberScript = BRApi.Finance.Data.GetDataCellUsingMemberScript(si, cbInfo.Cube.Name, mbrScrpt)
							If objDataCellInfoUsingMemberScript.DataCellEx.DataCell.CellAmount > 0 Then
								dataTotal += objDataCellInfoUsingMemberScript.DataCellEx.DataCell.CellAmount
								dataInCubes += 1
							End If
						Next	
						
						removeRow("Cubes Affected") = dataInCubes
						removeRow("Total Amount in Cubes") = dataTotal.ToString
					End If
				Next

				Log(si," Adding REMOVE Table to dataset")
				ds.Tables.Add(dtRemove)
			End If
			
			If dtJson IsNot Nothing And dtJson.Rows.Count > 0 And debug Then
				Log(si," Adding JSON Table to dataset")
				ds.Tables.Add(dtJson)
			End If

			Dim bf As New Runtime.Serialization.Formatters.Binary.BinaryFormatter
			
			Log(si," Evaluating RAW SOURCE Table")
			Dim objXFUserStateRaw As XFUserState = BRApi.State.GetSessionState(si, False, ClientModuleType.External, String.Empty, String.Empty, acmKey1, "RawSource")
			If objXFUserStateRaw IsNot Nothing Then
				Dim memStream As New MemoryStream
				memStream.Write(objXFUserStateRaw.BinaryValue, 0, objXFUserStateRaw.BinaryValue.Length)
				memStream.Seek(0, SeekOrigin.Begin)
				dtSourceRaw = bf.Deserialize(memStream)				
			End If
'			If dtSourceRaw IsNot Nothing And dtSourceRaw.Rows.Count > 0 Then
'				Log(si," Adding RAW SOURCE Table to dataset")
'				dtSourceRaw.TableName = "RAW"
'				ds.Tables.Add(dtSourceRaw)
'			Else
'				wrn.Add("No source data found")
'			End If
				
			If debug Then
				
				
				If dtSourceRaw IsNot Nothing And dtSourceRaw.Rows.Count > 0 Then
					Log(si," Adding RAW SOURCE Table to dataset")
					dtSourceRaw.TableName = "RAW"
					ds.Tables.Add(dtSourceRaw)
				Else
					wrn.Add("No source data found")
				End If				
				'MOVED THIS CODE UP ABOVE THE IF DEBUG STATEMENT
'				Dim bf As New Runtime.Serialization.Formatters.Binary.BinaryFormatter
				
'				Log(si," Evaluating RAW SOURCE Table")
'				Dim objXFUserStateRaw As XFUserState = BRApi.State.GetSessionState(si, False, ClientModuleType.External, String.Empty, String.Empty, acmKey1, "RawSource")
'				If objXFUserStateRaw IsNot Nothing Then
'					Dim memStream As New MemoryStream
'					memStream.Write(objXFUserStateRaw.BinaryValue, 0, objXFUserStateRaw.BinaryValue.Length)
'					memStream.Seek(0, SeekOrigin.Begin)
'					dtSourceRaw = bf.Deserialize(memStream)				
'				End If
'				If dtSourceRaw IsNot Nothing And dtSourceRaw.Rows.Count > 0 Then
'					Log(si," Adding RAW SOURCE Table to dataset")
'					dtSourceRaw.TableName = "RAW"
'					ds.Tables.Add(dtSourceRaw)
'				Else
'					wrn.Add("No source data found")
'				End If
				
				Log(si," Evaluating CLEAN Table")
				'dtSourceMod = LoadCsvToDataTableQCQ(si,modFilePath)
				Dim objXFUserStateClean As XFUserState = BRApi.State.GetSessionState(si, False, ClientModuleType.External, String.Empty, String.Empty, acmKey1, "CleanSource")
				If objXFUserStateClean IsNot Nothing Then
					Log(si,"  Getting table from session state")
					Dim memStream As New MemoryStream
					memStream.Write(objXFUserStateClean.BinaryValue, 0, objXFUserStateClean.BinaryValue.Length)
					memStream.Seek(0, SeekOrigin.Begin)
					dtSourceMod = bf.Deserialize(memStream)				
				End If										
				If dtSourceMod IsNot Nothing And dtSourceMod.Rows.COunt > 0 Then
					Log(si," Adding Modified Table to dataset")
					dtSourceMod.TableName = "CLEAN"
					ds.Tables.Add(dtSourceMod)
				End If		
				
			End If

			If includeEmail And detailedEmailAttachment And attachmentFileName <> "" And ds.Tables.Count > 0
				
				'Find possible renames
				If flagPossibleRenames Then
					
					Try
					
						Dim possibleRenames As New DataTable
						possibleRenames.Columns.AddRange({"FromParent","ToParent","AffectedChildren"}.Select(Function(x) New DataColumn(x)).toArray())
						'copyparent name is the key: copyRow("ParentName")
						For Each copyRow As DataRow In dtCopy.Rows
							For Each removeRow As DataRow In dtRemove.Rows
								If copyRow("Name") = removeRow("Name") And copyRow("ParentName") <> removeRow("ParentName") Then
									
									'Check if it already exists
									Dim foundRow As Boolean = False
									For Each prRow As DataRow In possibleRenames.Rows
										If prRow("FromParent") = removeRow("ParentName") Then
											foundRow = True
											prRow("AffectedChildren") = (Integer.Parse(prRow("AffectedChildren")) + 1).ToString
											Exit For
										End If
									Next prRow
									
									If Not foundRow Then					
										possibleRenames.Rows.Add({removeRow("ParentName"),copyRow("ParentName"),"1"})			
									End If
								End If
							Next removeRow
						Next copyRow
						
						If possibleRenames IsNot Nothing And possibleRenames.Rows.Count > 0 Then
							possibleRenames.TableName = "PSBLE_RENAMES"
							ds.Tables.Add(possibleRenames)
						End If
					Catch
						Log(si,"Error finding renames")
					End Try
				End If
				
				'Create excel file
				Log(si," Attempting to create excel file. DS table count: " & ds.Tables.Count)
				CreateExcelDocument(ds,attachmentFileName)
			End If
			
		End Sub
		
		Private Sub CreateExcelDocument(ds As DataSet, sFilename As String)
	        Try
	            Dim WB As SpreadsheetDocument = SpreadsheetDocument.Create(sFilename, SpreadsheetDocumentType.Workbook)

	            ' Add a WorkbookPart to the document.
	            Dim WBP As WorkbookPart = WB.AddWorkbookPart

	            WBP.Workbook = New Workbook
	            WB.WorkbookPart.Workbook.Sheets = New Spreadsheet.Sheets

	            Dim SheetID As Int32 = 1
	            ' Append a new worksheet and associate it with the workbook.
	            For Each dt As DataTable In ds.Tables
	                ' Add a WorksheetPart to the WorkbookPart.
	                Dim WSP As WorksheetPart = WBP.AddNewPart(Of WorksheetPart)()
	                Dim WSD As SheetData = New Spreadsheet.SheetData
	                WSP.Worksheet = New Spreadsheet.Worksheet(WSD)
	                Dim SHS As Sheets = WB.WorkbookPart.Workbook.GetFirstChild(Of Sheets)
	                Dim rID As String = WB.WorkbookPart.GetIdOfPart(WSP)

	                Dim SH As Sheet = New Sheet
	                SH.Id = WB.WorkbookPart.GetIdOfPart(WSP)
	                SH.SheetId = SheetID
	                SH.Name = dt.TableName
	                SheetID = SheetID + 1
	                SHS.Append(SH)

	                Dim HR As Spreadsheet.Row = New Spreadsheet.Row
	                Dim columns As List(Of String) = New List(Of String)
	                For Each column As System.Data.DataColumn In dt.Columns
	                    columns.Add(column.ColumnName)
	                    Dim Cell As Spreadsheet.Cell = New Spreadsheet.Cell
	                    Cell.DataType = Spreadsheet.CellValues.String
	                    Cell.CellValue = New Spreadsheet.CellValue(column.ColumnName)
	                    HR.AppendChild(Cell)
	                Next
	                WSD.AppendChild(HR)

	                For Each dr As System.Data.DataRow In dt.Rows
	                    Dim newRow As Spreadsheet.Row = New Spreadsheet.Row
	                    For Each col As String In columns
	                        Dim Cell As Spreadsheet.Cell = New Spreadsheet.Cell
	                        Cell.DataType = Spreadsheet.CellValues.String
	                        Cell.CellValue = New Spreadsheet.CellValue(dr(col).ToString())
	                        newRow.AppendChild(Cell)
	                    Next
	                    WSD.AppendChild(newRow)
	                Next


	            Next

	            WBP.Workbook.Save()

	            ' Close the document.
	            WB.Close()
	        Catch ex As Exception
	            Throw New Exception(ex.Message, ex)
	        End Try
	    End Sub			

		Private Function GetSessionStateValue(ByVal si As SessionInfo, ByVal key As String) As String
			Dim objXFUserState As XFUserState = BRApi.State.GetSessionState(si,False,ClientModuleType.External, String.Empty, String.Empty,acmKey1,key)
			If objXFUserState IsNot Nothing Then
				Return objXFUserState.TextValue
			Else
				Return String.Empty
			End If
		End Function
		
		Public Function GetCurrentEnvironment() As String
			Dim xEnv As New XFEnvironment
			Dim xSet As XFEnvironmentSettings = xEnv.GetAppServerConfigEnvironmentSettings()
			Return xSet.EnvironmentName
		End Function
		
		Public Sub SendRequestsInitiatedEmail(ByVal si As SessionInfo, ByVal requests As DataTable, ByVal fileAttachmentPaths As List(Of String),
											  ByVal appName As String, ByVal paramEmailServer As String, ByVal distributionList As List(Of String), 
											  Optional ByVal err As List(Of String) = Nothing,
											  Optional ByVal wrn As List(Of String) = Nothing,
											  Optional ByVal autoCommit As Boolean = False)

			'Get current environenment
			Dim curEnvName As String = GetCurrentEnvironment()
				
			'Subject
			Dim subject As String = $"{si.AppName} - {curEnvName} - {si.UserName} - ACM Import Complete"
					
			'Body
			Dim body As New StringBuilder

			'Requests
			If requests IsNot Nothing And requests.Rows.Count > 0 Then
				body.AppendLine(emailHelper.NewHTMLParagraph("ACM Import Complete."))
				body.AppendLine(emailHelper.StartHTMLTable)
				body.AppendLine(emailHelper.NewHTMLTableRowHeader(requests.Columns.Cast(Of DataColumn).Select(Function(x) x.ColumnName).ToList()))
				For Each requestRow As DataRow In requests.rows
					body.AppendLine(emailHelper.NewHTMLTableRow(requestRow.ItemArray.Cast(Of String).Select(Function(x) x.ToString).ToList()))
				Next
				body.AppendLine(emailHelper.EndHTMLTable)
				
				#Region "Integration Properties. I.e. FcpAppName, Attempted Dimensions..."
					Dim integrationProperties As New List(Of String)

					'Add Attempted FCP Name
					integrationProperties.Add($"FcpAppName: {appName}")
					
					'Add Attempted metadata
					For Each kvp As KeyValuePair(Of String, String) In attemptedMetadata
						integrationProperties.Add($"{kvp.Key}: {kvp.Value}")
					Next

					'Add source records found count
					If Not dtRequests Is Nothing And Not dtSourceRaw Is Nothing And dtSourceRaw.Rows.Count > 0 Then
						integrationProperties.Add($"Record Count: {dtSourceRaw.Rows.Count}")
					Else
						integrationProperties.Add($"Record Count: 0. No FCP data was found")
					End If	
					
					'SENT TIME STAMP
					Dim cstTimeNow = System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Now, "Central Standard Time")		
					integrationProperties.Add($"Sent: {cstTimeNow} CST")				
					
					If integrationProperties.Count > 0 Then
						body.AppendLine(emailHelper.NewHTMLParagraph(String.Join("</br>",integrationProperties)))
					End If
				#End Region
			
				'Add Warnings
				If wrn IsNot Nothing And wrn.Count > 0 Then
					Dim wrnText As String = "<span style='color:#FFC300'>Note(s):</span>"
					For Each w As String In wrn
						wrnText += "</br>" & w
					Next
					body.AppendLine(emailHelper.NewHTMLParagraph(wrnText))
				End If
				
				'Add Errors
				If err IsNot Nothing And err.Count > 0 Then
					Dim errText As String = "<span style='color:#ff030b'>Error(s):</span>"
					For Each e As String In err
						errText += "</br>" & e
					Next
					body.AppendLine(emailHelper.NewHTMLParagraph(errText))
				End If

				'Add Pending Review and Commit
				If Not autoCommit Then body.AppendLine(emailHelper.NewHTMLParagraph("Pending Review and Commit."))	
					
			Else

				'Show completion if no error
				If err Is Nothing Or err.Count = 0 Then
					body.AppendLine(emailHelper.NewHTMLParagraph($"ACM Import Complete."))
					
'					'Add source records found count
'					If Not dtSourceRaw Is Nothing And dtSourceRaw.Rows.Count > 0 Then
'						body.AppendLine(emailHelper.NewHTMLParagraph($"Source Row Count: {dtSourceRaw.Rows.Count}</br>No changes found</br>No request generated"))
'					Else
'						body.AppendLine(emailHelper.NewHTMLParagraph($"No source data found</br>No request generated"))
'					End If		
					
'					'Add Attempted metadata
'					Dim attemptedMetadataString As String = "Attempted DimTypes and DimNames"
'					For Each kvp As KeyValuePair(Of String, String) In attemptedMetadata
'						attemptedMetadataString += $"</br>{kvp.Key}: {kvp.Value}"
'					Next
'					If attemptedMetadataString <> "Attempted DimTypes and DimNames" Then 
'						body.AppendLine(emailHelper.NewHTMLParagraph(attemptedMetadataString))
'					End If
					
'					'Add Attempted FCP Name
'					body.AppendLine(emailHelper.NewHTMLParagraph($"FcpAppName: {appName}"))
					#Region "Integration Properties. I.e. FcpAppName, Attempted Dimensions..."
						Dim integrationProperties As New List(Of String)

						'Add Attempted FCP Name
						integrationProperties.Add($"FcpAppName: {appName}")
						
						'Add Attempted metadata
						For Each kvp As KeyValuePair(Of String, String) In attemptedMetadata
							integrationProperties.Add($"{kvp.Key}: {kvp.Value}")
						Next

						'Add source records found count
						If Not dtRequests Is Nothing And Not dtSourceRaw Is Nothing And dtSourceRaw.Rows.Count > 0 Then
							integrationProperties.Add($"Record Count: {dtSourceRaw.Rows.Count}")
							integrationProperties.Add($"No changes found")
							integrationProperties.Add($"No request generated")
						Else
							integrationProperties.Add($"Record Count: 0. No FCP data was found")
						End If	
						
						'SENT TIME STAMP
						Dim cstTimeNow = System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Now, "Central Standard Time")		
						integrationProperties.Add($"Sent: {cstTimeNow} CST")				
						
						If integrationProperties.Count > 0 Then
							body.AppendLine(emailHelper.NewHTMLParagraph(String.Join("</br>",integrationProperties)))
						End If
					#End Region					
				End If
				
				' Add any warnings
				If wrn IsNot Nothing And wrn.Count > 0 Then
					Dim wrnText As String = "<span style='color:#FFC300'>Warning:</span>"
					For Each w As String In wrn
						wrnText += "</br>" & w
					Next
					body.AppendLine(emailHelper.NewHTMLParagraph(wrnText))
				End If				
				
				' Add any errors
				If err IsNot Nothing And err.Count > 0 Then
					'body.AppendLine(emailHelper.NewHTMLParagraph(addInfo))
					Dim errText As String = "<span style='color:#ff030b'>Error:</span>"
					For Each e As String In err
						errText += "</br>" & e
					Next
					body.AppendLine(emailHelper.NewHTMLParagraph(errText))					
				End If				
			End If
			
			'SENT TIME STAMP
			'Dim cstTimeNow = System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Now, "Central Standard Time")		
			'body.AppendLine(emailHelper.NewHTMLParagraph($"Application {si.AppName}</br>Environment {curEnvName}</br>Ran by {si.UserName}</br>Sent: {cstTimeNow} CST"))	
				
			
			'Send email
			BRApi.Utilities.SendMail(si, paramEmailServer, distributionList, subject, body.ToString, True, fileAttachmentPaths)
			
		End Sub

		#End Region
		
	End Class
	
	#Region "Helper Classes"
		Public Class Audit
			Public Property propertyName As String
			Public Property [from] As String
			Public Property [to] As String
		End Class
		
	#End Region
	
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ACM_Metadata_From_FCP">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="Fcp_Integration_Utility" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="Email_Helper" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="false" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\WPF\WindowsBase.dll" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="false" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="F:\OneStream Software\OneStreamAppRoot\OneStreamApp\bin\DocumentFormat.OpenXml.dll" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports OneStream.BusinessRule.Extender.Fcp_Integration_Utility
Imports OneStream.BusinessRule.Extender.OS_Models
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
Imports DocumentFormat.OpenXml
Imports DocumentFormat.OpenXml.Packaging
Imports DocumentFormat.OpenXml.Spreadsheet

Namespace OneStream.BusinessRule.Extender.ACM_Metadata_From_FCP
	Public Class MainClass
		
		#Region "Class-Level Parameters"
		
			'General Local Parameters
			Dim loadMetadataSeqName As String = "Load_Metadata"
			Dim globalParameterTableName As String = "XFT_Global_Parameters"
			Dim detailedEmailAttachment As Boolean = True
			Dim attachmentFileDir As String = ""
			Dim attachmentFileName As String = "ACM_Difference_Report.xlsx"
			'Dim fileAttachments As New List(Of String)
			Dim dtRequests As New DataTable
			Dim existingRequests As New List(Of String)
			Dim err As String = ""
			Dim envName As String = ""
			Dim appName As String = ""
			'Dim loopCount As Integer = 0
			'Dim loopItem As String = ""
			'Dim loopAction As String = ""
			Dim detailedLog As String = ""
			Dim detailedLogging As Boolean = True
			
			'General Global Parameters
			Dim emailServer As String = ""
			Dim emailDist As New List(Of String)
			Dim okToRun As Boolean = False
			Dim okToRunAutoReset As Boolean = True
			
			'Email Helper
			Dim emailHelper As New OneStream.BusinessRule.Extender.Email_Helper.MainClass
		#End Region
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try	
				#Region "Initialize Parameters"
					Log(si,"</br>Initializing Parameters")
					brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,"Initializing Parameters",2)
					
				'Get email attachment file name
					attachmentFileDir = Path.Combine(BRApi.FileSystem.GetFileShareFolder(si,FileShareFolderTypes.ApplicationOutgoing,api),"ACM")
					If Not Directory.Exists(attachmentFileDir) Then
						directory.CreateDirectory(attachmentFileDir)
					End If
					attachmentFileName = Path.Combine(attachmentFileDir,attachmentFileName)
				
				'initialize email notification datatable
					Log(si,"	Create request table")
					dtRequests.Columns.Add("Request")
					dtRequests.Columns.Add("DimType")
					dtRequests.Columns.Add("DimName")
					dtRequests.Columns.Add("Import")
					dtRequests.Columns.Add("Status")

				'Get Global parameters
				
				'	EmailSvr
				'	EmailDist
				'	OkToRun
				'	OkToRunAutoReset
				'	DimType/DimName combinations
				
					'	Example:
					
					'			Module		AppName			ParmName (DimTypes)		Action	SeqNum	ParmValue (DimNames)
					'		---------------------------------------------------------------------------------------------
					'G		 ACM			Walmart Dev		EmailSvr								WalmartSMTP
					'G		 ACM			Walmart Dev		EmailDist								email@1.com,email@2.com
					'G		 ACM			Walmart Dev		OkToRun									True
					'G		 ACM			Walmart Dev		OkToRunAutoReset						False
					'F		 ACM_Entity		Walmart Dev		Entity									ENT,WMTUS
					'F		 ACM_Account	Walmart Dev		Account									Detail_Account
					'F		 ACM_UD1		Walmart Dev		UD1										Merch_SAMS_Detail,Merch_US_Detail		
					
					Dim acmFlowParams As DataTable
					Dim acmGeneralParams As DataTable
					Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
						
						Log(si,"	Getting general table")
						acmGeneralParams = BRApi.Database.ExecuteSql(dbConn, $"SELECT * FROM {globalParameterTableName} WHERE Module = 'ACM'", False)
						If acmGeneralParams Is Nothing Or acmGeneralParams.Rows.Count = 0 Then
							Throw New Exception("ACM global general parameters are not configured.")
						End If
						
						Log(si,"	Getting flow table")
						acmFlowParams = BRApi.Database.ExecuteSql(dbConn, $"SELECT * FROM {globalParameterTableName} WHERE Module like 'ACM_%'", False)
						If acmFlowParams Is Nothing Or acmFlowParams.Rows.Count = 0 Then
							Throw New Exception("ACM global flow parameters are not configured.")
						End If		
						
						'Get General Parameters
						emailServer = acmGeneralParams.Select("ParmName = 'EmailSvr'").FirstOrDefault.Item("ParmValue")
						Log(si,"	Email Server = " & emailServer)

						Dim emailDistFull As String = acmGeneralParams.Select("ParmName = 'EmailDist'").FirstOrDefault.Item("ParmValue")
						emailDist = emailDistFull.Split(",").ToList()
						Log(si,"	Email Distribution: " & emailDistFull)
						Dim okToRunString As String = acmGeneralParams.Select("ParmName = 'OkToRun'").FirstOrDefault.Item("ParmValue")
						okToRun = okToRunString.XFConvertToBool()
						Log(si,"	OkToRun: " & okToRun)
						Dim okToRunAutoResetString As String = acmGeneralParams.Select("ParmName = 'OkToRunAutoReset'").FirstOrDefault.Item("ParmValue")
						okToRunAutoReset = okToRunAutoResetString.XFConvertToBool()
						Log(si,	"	OkToRunAutoReset: " & okToRunAutoReset)
						
						'Check if ok to run
						If Not okToRun Then
							Log(si,"Not okToRun. Aborting.")
							err = "ACM global OkToRun Parmateter is set to false."
							Throw New Exception("ACM global OkToRun Parmateter is set to false.")
						End If
						
					End Using
					
					#Region "Get Existing Pending Requests"
						Log(si,"Getting existing requests")
						brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,"Checking for existing requests",2)
						'Get Existing Requests (if any - so we don't report on them)
						Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							Dim dt As DataTable = BRApi.Database.ExecuteSql(dbConn,"SELECT [ID] FROM [XFW_ACM_Request] WHERE [Status] = 'Waiting'",False)
							If Not dt Is Nothing And dt.Rows.Count > 0 Then
								For Each dr As DataRow In dt.Rows
									existingRequests.Add(dr("ID"))
								Next
							End If
						End Using
					#End Region
									
					
				#End Region

				#Region "Loop on DimType/DimNames and run ACM to create new requests"
					'Log(si,"Looping Global Parameters")
					brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,"Looping on DimTypes and DimNames",2)
					
					'Loop on DimTypes (Entity, Account, UD1 - UD8)	
					Dim fileAppend As Boolean = False
					For Each acmFlowRow As DataRow In acmFlowParams.Rows
						Dim dimType As String = acmFlowRow.Item("ParmName")
						Dim dimNames As String() = acmFlowRow.Item("ParmValue").Split(",")
						envName = acmFlowRow.Item("Action")
						appName = acmFlowRow.Item("AppName") 
						
						'Save to session state. This is used in the parser rule when the ACM job is started.
						Log(si,"Saving dimType, appName, and envName to session state")
						BRApi.State.SetSessionState(si,False,ClientModuleType.External,String.Empty, String.Empty,"ACMAutomationValues","DimType",dimType,Nothing)
						BRApi.State.SetSessionState(si,False,ClientModuleType.External,String.Empty, String.Empty,"ACMAutomationValues","AppName",appName,Nothing)
						BRApi.State.SetSessionState(si,False,ClientModuleType.External,String.Empty, String.Empty,"ACMAutomationValues","EnvName",envName,Nothing)
						
						'Create One (1) ACM Request per DimName (ENT,WMTUS,...)
						Log(si,"Looping on dimNames")
						For Each dimName As String In dimNames
							
							'Save to session state. This is used in the parser rule when the ACM job is started.
							Log(si,"Saving dimName to session state")
							BRApi.State.SetSessionState(si,False,ClientModuleType.External,String.Empty, String.Empty,"ACMAutomationValues","DimName",dimName,Nothing)
							
							#Region "Launch ACM" 'create sourceName parameter from on the current dimType
							
								'Update Task activity and log
								Log(si,"Launching ACM with SourceName = " & dimType & "Source")
								brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,$"Running ACM Import on {dimType} {dimName}",2)
								
								'Define SourceName parameter for the ACM job
								Dim customSubstVars As New Dictionary(Of String, String)
								customSubstVars.Add("SourceName", dimType & "Source")
								
								'Launch custom ACM job and provide the sourceName dynamically based on the DimType
								Log(si,"Launching ACM...")
								Dim objTaskActivityItemQueued As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(si, loadMetadataSeqName, customSubstVars)
								Log(si,"...Finished running ACM")
								
							#End Region
							
							#Region "Evaluate Import" 'generate email - read ACM Item table and create email datatable and email XL file attachment
							
								'Update Task Activity, Log, and get final activity status
								brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,"Reviewing Requests",85)
								Log(si,"Reviewing Requests")
								Dim objTaskActivityItemFinal As TaskActivityItem = BRApi.TaskActivity.GetTaskActivityItem(si,objTaskActivityItemQueued.UniqueID)
			
								GenerateXLFileFromPendingACMRequests(si,api,args,dimType,dimName,objTaskActivityItemFinal)
							
							#End Region
							
							#Region "Old Code"
'							#Region "Difference Report from Item info"
								
'								'Update Task Activity, Log, and get final activity status
'								brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,"Reviewing Requests",85)
'								Log(si,"Reviewing Requests")
'								Dim objTaskActivityItemFinal As TaskActivityItem = BRApi.TaskActivity.GetTaskActivityItem(si,objTaskActivityItemQueued.UniqueID)
								
'								'Open a connection to the database
'								Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'									Log(si,"Querying for request info")
'									Dim requestInfo As DataTable = BRApi.Database.ExecuteSql(dbConn,"SELECT r.ID as 'Request', count(i.ItemID) as 'Item Count', r.[Created], r.RequestID FROM [XFW_ACM_Request] r INNER JOIN [XFW_ACM_Item] i ON r.RequestID = i.FKRequestID WHERE r.[Status] = 'Waiting' GROUP BY r.ID, r.[Created], r.RequestID",False)
'									If Not requestInfo Is Nothing And requestInfo.Rows.Count > 0 Then
'										Log(si,"Request info found")
'										For Each dr As DataRow In requestInfo.Rows
'											If Not existingRequests.Contains(dr("Request")) Then
												
'												'======================================================================================================
'												'Create first column cell text with request number, item count, and create timestamp
'												'======================================================================================================
'													'i.e. 
'													'=======================================|
'													'	R00000012							|
'													'		8 Items							|
'													'		Created 3/30/2021 3:23:45 PM	|
'													'=======================================|
'												Log(si,"Creating request text")
'												Dim requestText As String = $"R{dr("Request"):00000000}"
'												If dr("Item Count") = 1 Then
'													requestText += $"</br><small><div style='text-indent:1em'>1 Item</div>"
'												Else
'													requestText += $"</br><small><div style='text-indent:1em'>{dr("Item Count")} Items</div>"
'												End If
'												requestText += $"<div style='text-indent:1em'>Created {dr("Created")}</div></small>"
'												Log(si,"Request Text: " & vbnewline & requestText)

'												#Region "Detailed Email Attachment"
												
'												'======================================================================================================
'												'Create csv file attachment with item detail"
'												'======================================================================================================
												
'													'Query the [XFW_ACM_Item] table and parse the ItemProperties json
'													'to discover the 'to' and 'from' values and only list them if they are different.
'													'
'													'In the case of an add, these values will come from the Properties tag in the item json.
'													'Otherwise, the 'to' and 'from' values come from the 'Audit' tag in the item json.											
												
'												If detailedEmailAttachment Then
'													Log(si,$"Create detailed email attachment for {dr("RequestID")}")
'													Dim itemSQL As String = $"SELECT ItemProperties, ItemName, FlowOptions, ItemParentName FROM [XFW_ACM_Item] WHERE [FKRequestID] = '{dr("RequestID")}'"
'													Dim dtDetails As DataTable = BRApi.Database.ExecuteSql(dbConn,itemSQL,False)
'													If Not dtDetails Is Nothing And dtDetails.Rows.Count > 0 Then
'														Log(si,"dtDetails has " & dtDetails.Rows.Count & " rows.")
														
'														'Create datasets and datatables to organize item info
'														Dim ds As New DataSet
														
'														'Create datatables and name them (names translate to the excel tab names)
'														Dim dtAdd As New DataTable
'														dtAdd.TableName = "ADD"
'														Dim dtUpdate As New DataTable
'														dtUpdate.TableName = "UPDATE"
'														Dim dtCopy As New DataTable
'														dtCopy.TableName = "COPY"
'														Dim dtMove As New datatable
'														dtMove.TableName = "MOVE"
'														Dim dtRemove As New DataTable
'														dtRemove.TableName = "REMOVE"
														
'														'Boolean DataTable Columns Set (only set them once)
'														Dim bAdd As Boolean = False
'														Dim bUpdate As Boolean = False
'														Dim bUpdate2 As Boolean = False 'only add update dt if actual changes are found
'														Dim bMove As Boolean = False
'														Dim bCopy As Boolean = False
'														Dim bRemove As Boolean = False
														
'														Dim propertyList As List(Of String) = Nothing
'														'Dim propertyColumnList As DataColumn() = Nothing
'														'Dim propertyColumnList As List(Of DataColumn) = Nothing
														
'														For Each itemDetailRow As DataRow In dtDetails.Rows
															
'															Dim itemJson As String = itemDetailRow("ItemProperties")
'															Dim itemName As String = itemDetailRow("ItemName")
'															Dim itemParent As String = itemDetailRow("ItemParentName")
															
'															Dim jObj As JObject = JObject.Parse(itemJson)
															
'															'Get Property List
'															If propertyList Is Nothing Then 
'																propertyList = GetACMItemPropertyNames(si,jObj)
'																'propertyColumnList = propertyList.Select(Function(x) New DataColumn(x)).ToArray
																
'																'if the first one is an UPDATE, remove the CurrentParentName as it is irrelavent
'																If propertyList.Contains("CurrentParentName") Then
'																	propertyList.Remove("CurrentParentName")
'																End If
'															End If
															
'															'Get the item Action and add to DataTable
'															Dim itemAction As String = jObj("Options")("Action").ToString
'															Select Case itemAction
																
'																Case "ADD"
'																	If Not bAdd Then
'																		Log(si,"Adding columns to ADD table")
'																		dtAdd.Columns.AddRange(propertyList.Select(Function(x) New DataColumn(x)).ToArray)
'																		bAdd = True
'																	End If
'																	dtAdd.Rows.Add(GetACMItemPropertyValues(si,jObj).ToArray)

'                                                        		Case "UPDATE"
'																	If Not bUpdate Then
'																		Log(si,"Adding columns to UPDATE table")
'																		dtUpdate.Columns.Add("Member")
'																		dtUpdate.Columns.Add("Property")
'																		dtUpdate.Columns.Add("From")
'																		dtUpdate.Columns.Add("To")
'																		bUpdate = True
'																	End If			
																	
'																	'Add 1 update row per property change found
'														            Dim jAuditParent As JToken = jObj("Audit")
'														            Dim auditList As List(Of Audit) = JsonConvert.DeserializeObject(Of List(Of Audit))(jAuditParent.ToString)
'														            For Each _audit As Audit In auditList
'														                If _audit.to <> _audit.from Then
'																			dtUpdate.Rows.Add({itemName,_audit.propertyName,_audit.from,_audit.to})
'																			bUpdate2 = True
'														                End If
'														            Next 	
																	
'																Case "MOVE"
'																	If Not bMove Then
'																		Log(si,"Adding columns to MOVE table")
'																		dtMove.Columns.AddRange(propertyList.Select(Function(x) New DataColumn(x)).ToArray)
'																		bMove = True
'																	End If
'																	dtMove.Rows.Add(GetACMItemPropertyValues(si,jObj).ToArray)
																	
'																Case "COPY"	
'																	If Not bCopy Then
'																		Log(si,"Adding columns to COPY table")
'																		dtCopy.Columns.AddRange(propertyList.Select(Function(x) New DataColumn(x)).ToArray)
'																		bCopy = True
'																	End If
'																	dtCopy.Rows.Add(GetACMItemPropertyValues(si,jObj).ToArray)																	
																	
'																Case "REMOVE"
'																	If Not bRemove Then
'																		Log(si,"Adding columns to REMOVE table")
'																		dtRemove.Columns.Add("Member")
'																		dtRemove.Columns.Add("Parent")
'																		bRemove = True
'																	End If
'																	dtRemove.Rows.Add({itemName,itemParent})

'                                                        		Case Else
'																	Log(si,"Unknown action type: " & itemAction)  
																	
'                                            				End Select

'														Next 
														

'														If bAdd Then 
'															Log(si,"Adding ADD Table to dataset")
'															ds.Tables.Add(dtAdd)
'														End If
														
'														If bUpdate And bUpdate2 Then 
'															Log(si,"Adding UPDATE Table to dataset")
'															ds.Tables.Add(dtUpdate)
'														End If
														
'														If bCopy Then 
'															Log(si,"Adding COPY Table to dataset")
'															ds.Tables.Add(dtCopy)
'														End If
														
'														If bMove Then 
'															ds.Tables.Add(dtMove)
'															Log(si,"Adding MOVE Table to dataset")
'														End If
														
'														If bRemove Then 
'															Log(si,"Adding REMOVE Table to dataset")
'															ds.Tables.Add(dtRemove)
'														End If
															
'														'Using sw As StreamWriter = New StreamWriter(attachmentFilepathAndName, fileAppend)	
'														CreateExcelDocument(ds,attachmentFileName)

'													End If
'												Else
'													Log(si,"No request details found")
'													'attachmentFilepath = ""
'													'fileAttachments.Add("")
'													attachmentFileName = ""
'												End If
'												#End Region
												
'												Log(si,"Adding request to datatable")
'												dtRequests.Rows.Add({requestText, dimType, dimName, objTaskActivityItemFinal.TaskActivityStatusStr,"Pending Review"})
												
'												Log(si,"dt request rows " & dtRequests.Rows.Count)
'												existingRequests.Add(dr("Request"))
												
'												Exit For 'should only be one anyway
'											End If
'										Next dr
'									Else
'										err = "No requests created"
'										'fileAttachments.Add("")
'										attachmentFileName = ""
'									End If
'								End Using
'							#End Region
							#End Region
							
						Next dimName
					Next acmFlowRow
				#End Region
											
			Catch ex As Exception		
				#Region "Error Handling"
					Log(si,"Entered error handling")
					
					'If loopCount > 0 Then Log(si,$"Died on {loopItem} in the {loopAction} action on the {loopCount} row")

					err = ex.Message
					Log(si,"ACM_Metadata_From_FCP Error: " & err)
					
					If okToRun Then
						Try
							If ex.InnerException.Message.StartsWith($"Invalid object name '{globalParameterTableName}'") Then
								Throw New Exception($"ACM_Metadata_From_FCP BR requires the {globalParameterTableName} marketplace solution to function.")
							End If
						Catch
							
							If detailedLogging Then
								brapi.ErrorLog.LogMessage(si,detailedLog & vbnewline)
							End If
					
							brapi.ErrorLog.LogMessage(si,"No inner exception found")
						Finally
							Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
						End Try
					Else
						brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,"Aborting. Ok to run flag set to false.",1)
					End If
					
					
				#End Region		
				
			Finally	
				#Region "Final Email Notification"
				
					If okToRun Then
						
						'Log email table status
						If dtRequests IsNot Nothing And dtRequests.Rows.Count > 0 Then
							Log(si,"dtRequests has rows")
						Else
							Log(si,"dtRequests is nothing or has no rows")
						End If
			
						'Send Email
						Log(si,"About to send email. Folder Path: " & attachmentFileName)
						emailHelper.SendRequestsInitiatedEmail(si,dtRequests,New List(Of String)({attachmentFileName}),envName,appName,emailServer,emailDist,err)
					
						'Reset the OkToRun flag to false - if configured to do so
						If okToRunAutoReset Then
							Log(si,"Auto resetting ok to run to false")
							Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								BRApi.Database.ExecuteSql(dbConn, $"UPDATE {globalParameterTableName} SET ParmValue = 'False' WHERE Module = 'ACM' AND ParmName = 'OkToRun'", False)
							End Using						
						End If
						
						'delete attachement file
						If File.Exists(attachmentFileName) Then
							Log(si,"Deleting file " & attachmentFileName)
							File.Delete(attachmentFileName)
						End If
						
					End If
					
					'Add final log string to error log
					If detailedLogging Then
						brapi.ErrorLog.LogMessage(si,detailedLog & vbnewline)
					End If

				#End Region
				
			End Try
			Return Nothing
		End Function
	
		#Region "Helper Functions"
		Sub Log(ByVal si As SessionInfo, ByVal logValue As String)
			If detailedLogging Then
				If detailedLog = "" Then
					detailedLog = logValue
				Else
					detailedLog += vbnewline & logValue
				End If
			End If
		End Sub
		
		Private Function GetACMItemPropertyNames(ByVal si As sessioninfo, ByVal jObj As JObject) As List(Of String)
	        Dim jProperties As JToken = jObj("Properties")
	        Dim jProp As JProperty
	        Dim jPropName As String
			Dim retVal As New List(Of String)
	        For Each field As JToken In jProperties.Children
	            jProp = field.ToObject(Of JProperty)
	            jPropName = jProp.Name            
				'retVal.Add(chr(34) & jPropName & chr(34))
				retVal.Add(jPropName)
	        Next 	
			Return retVal
		End Function		
		
		Private Function GetACMItemPropertyValues(ByVal si As sessioninfo, ByVal jObj As JObject) As List(Of String)
	        Dim jProperties As JToken = jObj("Properties")
	        Dim jProp As JProperty
	        Dim jPropVal, jPropName As String
			Dim retVal As New List(Of String)
	        For Each field As JToken In jProperties.Children
	            jProp = field.ToObject(Of JProperty)
	            jPropVal = jProp.Value      
				jPropName = jProp.Name
				'retVal.Add(chr(34) & jPropVal & chr(34))
				If jPropName <> "CurrentParentName" Then 
					retVal.Add(jPropVal)
				End If
	        Next 	
			Return retVal
		End Function	
		
		
		Private Function GetACMAuditValues(ByVal si As SessionInfo, ByVal jObj As Object) As List(Of List(Of String))	
		
            Dim jAuditParent As JToken = jObj("Audit")
            Dim auditList As List(Of Audit) = JsonConvert.DeserializeObject(Of List(Of Audit))(jAuditParent.ToString)
            
            'Dim changedFound As Boolean = False
			Dim fromList As New List(Of String)
			Dim toList As New List(Of String)
            For Each _audit As Audit In auditList
				fromList.Add(_audit.from)
				toList.Add(_audit.to)
                'If _audit.to <> _audit.from Then
                'sw.WriteLine($"R{dr("Request"):00000000},{dimType},{dimName},{itemName},{itemAction},{_audit.propertyName},{_audit.from},{_audit.to}")
                'End If
            Next 
			
			Return New List(Of List(Of String))({fromList, toList})
		End Function

		Private Sub CreateExcelDocument(ds As DataSet, sFilename As String)
	        Try
	            Dim WB As SpreadsheetDocument = SpreadsheetDocument.Create(sFilename, SpreadsheetDocumentType.Workbook)

	            ' Add a WorkbookPart to the document.
	            Dim WBP As WorkbookPart = WB.AddWorkbookPart

	            WBP.Workbook = New Workbook
	            WB.WorkbookPart.Workbook.Sheets = New Spreadsheet.Sheets

	            Dim SheetID As Int32 = 1
	            ' Append a new worksheet and associate it with the workbook.
	            For Each dt As DataTable In ds.Tables
	                ' Add a WorksheetPart to the WorkbookPart.
	                Dim WSP As WorksheetPart = WBP.AddNewPart(Of WorksheetPart)()
	                Dim WSD As SheetData = New Spreadsheet.SheetData
	                WSP.Worksheet = New Spreadsheet.Worksheet(WSD)
	                Dim SHS As Sheets = WB.WorkbookPart.Workbook.GetFirstChild(Of Sheets)
	                Dim rID As String = WB.WorkbookPart.GetIdOfPart(WSP)

	                Dim SH As Sheet = New Sheet
	                SH.Id = WB.WorkbookPart.GetIdOfPart(WSP)
	                SH.SheetId = SheetID
	                SH.Name = dt.TableName
	                SheetID = SheetID + 1
	                SHS.Append(SH)

	                Dim HR As Spreadsheet.Row = New Spreadsheet.Row
	                Dim columns As List(Of String) = New List(Of String)
	                For Each column As System.Data.DataColumn In dt.Columns
	                    columns.Add(column.ColumnName)
	                    Dim Cell As Spreadsheet.Cell = New Spreadsheet.Cell
	                    Cell.DataType = Spreadsheet.CellValues.String
	                    Cell.CellValue = New Spreadsheet.CellValue(column.ColumnName)
	                    HR.AppendChild(Cell)
	                Next
	                WSD.AppendChild(HR)

	                For Each dr As System.Data.DataRow In dt.Rows
	                    Dim newRow As Spreadsheet.Row = New Spreadsheet.Row
	                    For Each col As String In columns
	                        Dim Cell As Spreadsheet.Cell = New Spreadsheet.Cell
	                        Cell.DataType = Spreadsheet.CellValues.String
	                        Cell.CellValue = New Spreadsheet.CellValue(dr(col).ToString())
	                        newRow.AppendChild(Cell)
	                    Next
	                    WSD.AppendChild(newRow)
	                Next


	            Next

	            WBP.Workbook.Save()

	            ' Close the document.
	            WB.Close()
	        Catch ex As Exception
	            Throw New Exception(ex.Message, ex)
	        End Try
	    End Sub		
	
		Private Sub GenerateXLFileFromPendingACMRequests(ByVal si As SessionInfo,ByVal api As Object, ByVal args As ExtenderArgs,
					ByVal dimType As String, ByVal dimName As String, ByVal objTaskActivityItemFinal As TaskActivityItem)
			
			'Open a connection to the database
			Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
			
				Log(si,"Query for request info")
				Dim requestInfo As DataTable = BRApi.Database.ExecuteSql(dbConn,"SELECT r.ID as 'Request', count(i.ItemID) as 'Item Count', r.[Created], r.RequestID FROM [XFW_ACM_Request] r INNER JOIN [XFW_ACM_Item] i ON r.RequestID = i.FKRequestID WHERE r.[Status] = 'Waiting' GROUP BY r.ID, r.[Created], r.RequestID",False)
				If Not requestInfo Is Nothing And requestInfo.Rows.Count > 0 Then
					Log(si,"Request info found")
					
					'For each request
					For Each dr As DataRow In requestInfo.Rows
						
						'Check if request was not pre-existing
						If Not existingRequests.Contains(dr("Request")) Then
							
							'======================================================================================================
							'Create first column cell text with request number, item count, and create timestamp
							'======================================================================================================
								'i.e. 
								'=======================================|
								'	R00000012							|
								'		8 Items							|
								'		Created 3/30/2021 3:23:45 PM	|
								'=======================================|
								
								Log(si,"Creating request text")
								Dim requestText As String = $"R{dr("Request"):00000000}"
								If dr("Item Count") = 1 Then
									requestText += $"</br><small><div style='text-indent:1em'>1 Item</div>"
								Else
									requestText += $"</br><small><div style='text-indent:1em'>{dr("Item Count")} Items</div>"
								End If
								requestText += $"<div style='text-indent:1em'>Created {dr("Created")}</div></small>"
		

							#Region "Detailed Email Attachment"
							
							'======================================================================================================
							'Create XL file attachment with item details"
							'======================================================================================================
							
								'Query the [XFW_ACM_Item] table and parse the ItemProperties json
								'to discover the 'to' and 'from' values and only list them if they are different.
								'
								'In the case of an add, these values will come from the Properties tag in the item json.
								'Otherwise, the 'to' and 'from' values come from the 'Audit' tag in the item json.											
							
							If detailedEmailAttachment Then
								Log(si,$"Create detailed email attachment for request {dr("RequestID")}")
								Dim itemSQL As String = $"SELECT ItemProperties, ItemName, FlowOptions, ItemParentName FROM [XFW_ACM_Item] WHERE [FKRequestID] = '{dr("RequestID")}'"
								Dim dtDetails As DataTable = BRApi.Database.ExecuteSql(dbConn,itemSQL,False)
								If Not dtDetails Is Nothing And dtDetails.Rows.Count > 0 Then
									Log(si,"dtDetails has " & dtDetails.Rows.Count & " rows.")
									
									'Create datasets and datatables to organize item info
									Dim ds As New DataSet
									
									'Create datatables and name them (names translate to the excel tab names)
									Dim dtAdd As New DataTable
									dtAdd.TableName = "ADD"
									Dim dtUpdate As New DataTable
									dtUpdate.TableName = "UPDATE"
									Dim dtCopy As New DataTable
									dtCopy.TableName = "COPY"
									Dim dtMove As New datatable
									dtMove.TableName = "MOVE"
									Dim dtRemove As New DataTable
									dtRemove.TableName = "REMOVE"
									
									Dim dtRename As New DataTable
									dtRename.TableName = "RENAME"
									
									'Boolean DataTable Columns Set (only set them once)
									Dim bAdd As Boolean = False
									Dim bUpdate As Boolean = False
									Dim bUpdate2 As Boolean = False 'only add update dt if actual changes are found
									Dim bMove As Boolean = False
									Dim bCopy As Boolean = False
									Dim bRemove As Boolean = False
									Dim bRename As Boolean = False
									
									'Loop on items
									Log(si,"Looping on items")
									Dim propertyList As List(Of String) = Nothing
									For Each itemDetailRow As DataRow In dtDetails.Rows
										
										'Get member name, parent name, and properties from the item record
										Dim itemJson As String = itemDetailRow("ItemProperties")
										Dim itemName As String = itemDetailRow("ItemName")
										Dim itemParent As String = itemDetailRow("ItemParentName")
										
										'Get Property List
										Dim jObj As JObject = JObject.Parse(itemJson)
										If propertyList Is Nothing Then 
											propertyList = GetACMItemPropertyNames(si,jObj)
											
											'if the first one is an UPDATE, remove the CurrentParentName as it is irrelavent
											If propertyList.Contains("CurrentParentName") Then
												propertyList.Remove("CurrentParentName")
											End If
										End If
										
										'Get the item Action and add to DataTable
										Dim itemAction As String = jObj("Options")("Action").ToString
										Select Case itemAction
											
											Case "ADD"
												If Not bAdd Then
													Log(si,"Adding columns to ADD table")
													dtAdd.Columns.AddRange(propertyList.Select(Function(x) New DataColumn(x)).ToArray)
													bAdd = True
												End If
												dtAdd.Rows.Add(GetACMItemPropertyValues(si,jObj).ToArray)

	                                		Case "UPDATE"
												If Not bUpdate Then
													Log(si,"Adding columns to UPDATE table")
													dtUpdate.Columns.Add("Name")
													dtUpdate.Columns.Add("Property")
													dtUpdate.Columns.Add("From")
													dtUpdate.Columns.Add("To")
													bUpdate = True
												End If			
												
												'Add 1 update row per property change found
									            Dim jAuditParent As JToken = jObj("Audit")
									            Dim auditList As List(Of Audit) = JsonConvert.DeserializeObject(Of List(Of Audit))(jAuditParent.ToString)
									            For Each _audit As Audit In auditList
									                If _audit.to <> _audit.from Then
														dtUpdate.Rows.Add({itemName,_audit.propertyName,_audit.from,_audit.to})
														bUpdate2 = True
									                End If
									            Next 	
												
											Case "MOVE"
												If Not bMove Then
													Log(si,"Adding columns to MOVE table")
													dtMove.Columns.AddRange(propertyList.Select(Function(x) New DataColumn(x)).ToArray)
													bMove = True
												End If
												dtMove.Rows.Add(GetACMItemPropertyValues(si,jObj).ToArray)
												
											Case "COPY"	
												If Not bCopy Then
													Log(si,"Adding columns to COPY table")
													dtCopy.Columns.AddRange(propertyList.Select(Function(x) New DataColumn(x)).ToArray)
													bCopy = True
												End If
												dtCopy.Rows.Add(GetACMItemPropertyValues(si,jObj).ToArray)																	
												
											Case "REMOVE"
												If Not bRemove Then
													Log(si,"Adding columns to REMOVE table")
													dtRemove.Columns.Add("ParentName")
													dtRemove.Columns.Add("Name")
													bRemove = True
												End If
												dtRemove.Rows.Add({itemParent,itemName})

	                                		Case Else
												Log(si,"Unknown action type: " & itemAction)  
												
	                    				End Select

									Next 
									

									If bAdd Then 
										Log(si,"Adding ADD Table to dataset")
										ds.Tables.Add(dtAdd)
									End If
									
									If bUpdate And bUpdate2 Then 
										Log(si,"Adding UPDATE Table to dataset")
										ds.Tables.Add(dtUpdate)
									End If
									
									If bCopy Then 
										Log(si,"Adding COPY Table to dataset")
										ds.Tables.Add(dtCopy)
									End If
									
									If bMove Then 
										ds.Tables.Add(dtMove)
										Log(si,"Adding MOVE Table to dataset")
									End If
									
									If bRemove Then 
										Log(si,"Adding REMOVE Table to dataset")
										ds.Tables.Add(dtRemove)
									End If
									
									
									
									
'									'Identify Renames
'									' Get children that exist in COPY and REMOVE
'									Dim onCopyAndRemove As DataTable = From c In dtCopy.AsEnumerable Join r In dtRemove On c.Field(Of String)("Name") Equals r.Field(Of String)("Member") 
'										Select New With {.Member = r.Field(Of String)("Member"), .CopyParent = c.Field(Of String)("ParentName"), .RemoveParent = r.Field(Of String)("Parent")}
																	
									
'									For Each crRow As DataRow In onCopyAndRemove
'										Dim possibleRename As Boolean = False
'										If crRow("CopyParent") <> crRow("RemoveParent") Then
'											Dim cleanCopy As String = crRow("CopyParent").ToString.ToUpper.Replace("-","").Replace(".","").Replace("_","")
'											Dim cleanRemove As String = crRow("RemoveParent").ToString.ToUpper.Replace("-","").Replace(".","").Replace("_","")
'											If cleanCopy = cleanRemove Then
'												possibleRename = True
'											Else
'												Dim copyParentNameArray = cleanCopy.Split(" ")
'												Dim removeParentNameArray = cleanRemove.Split(" ")
												
'												Dim copyCount As Integer = copyParentNameArray.Length
'												Dim removeCount As Integer = removeParentNameArray.Length
												
'												Dim smallestCount As Integer = 0
'												If copyCount <= removeCount Then
'													smallestCount = copyCount
'												Else
'													smallestCount = removeCount
'												End If
												
'												Dim matchCount As Integer = 0
'												For Each copyPiece As String In copyParentNameArray
'													If removeParentNameArray.Contains(copyPiece) Then
'														matchCount += 1
'													End If
'												Next copyPiece
												
'												Dim percentMatch As Double = matchCount * 100 / smallestCount
												
'												If percentMatch > 75 Then
'													possibleRename = True
'												End If
												
'											End If
'										End If
'										If possibleRename Then
											
'										End If
'									Next crRow

			
									'Using sw As StreamWriter = New StreamWriter(attachmentFilepathAndName, fileAppend)	
									CreateExcelDocument(ds,attachmentFileName)

								End If
							Else
								Log(si,"No request details found")
								'attachmentFilepath = ""
								'fileAttachments.Add("")
								attachmentFileName = ""
							End If
							#End Region
							
							Log(si,"Add request to email datatable")
							dtRequests.Rows.Add({requestText, dimType, dimName, objTaskActivityItemFinal.TaskActivityStatusStr,"Pending Review"})
							Log(si,$"Email datatable now has {dtRequests.Rows.Count} rows")
							
							'Add request to existing requests (not sure if this is needed but it will prevent any duplicates)
							existingRequests.Add(dr("Request"))
							
							Exit For 'should only be one anyway
						End If
					Next dr
				Else
					err = "No requests created"
					'fileAttachments.Add("")
					attachmentFileName = ""
				End If
			End Using

		End Sub
		#End Region
		
	End Class

	Public Class Audit
		Public Property propertyName As String
		Public Property [from] As String
		Public Property [to] As String
	End Class
		
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ACM_MetadataCommit">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>true</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="ACM_Engine" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Uh6XsM/GbTvKhfvZWm3GFZhlvltnqCSnR6/CUa/jtsQoD00S4bE+nY3fNmDWY49PkvbT2Ke3P2pMViiSmUGnDMU7OY2+TXSY0Et+5EtPt9JBq6Ojo9Y5fCFkBmhkb2B8p7jDOznqgticDraAR39haxdIAVc6K02DzK16bvlrzcxnTCMNt0ecHJv94d+1tZojCXjrkwe4RImW73LggJrzApYBYiI27fhwmKeVhF3yxdVtn4fqY2w885xwsBFOHKYxDkCs12/HXGDKnMaTaqJuI6JK8nsDwM85DT1JjNniJj0EDV+oFKT3HBW1KqXqYLcCOiZvrcRH3oido0+WFIwGcIA7bOMXiThjwROxCEkOYO5h7aX5KMbazsLTOyszr9SCfGE/1Fe1shapOZiTVkhAJA3Z6YrHFAfN/hwabUTlap2DAgs4AQIF7i6hPoiMQojOAAJkMtHxjL1SUqpaSFQgu1EFpC3NAWVMyyipiPXnum4mHsa9uMdRtMdMOoiUEkVUG+ENHauYiaLOo+tGZUdeT+9Ip1yZOC39t7SrDiNSHkeMcP/OZtZ8AskyHWl4QHLv0n33Gfidyaa9dbDvEQxt7l2DU179NZAuq1YG/fbjx6eA/+uIEZ4VjlzSAdhib3JD2vAYNhFM0Vu0oSSEm+HuVruXU31lNnjshv1KWd/WdyJlpQxZGOz/CY8yjDUQbMJF7ZiRzonRmNzZ/1hjsDuiwV7Cg4kXC6Zm0Nx5R1BC9UVObbjvrKnj5Az7jbOVIFUMrZfmcsMjG9FpWtJjLkKq7wRwBskx4fxGNVN35gsgUQPiSgNEg7ZH+E7DWszl9iqHI9qRP3SKgRdbdbfcOthTlw3eLCV9FcrIYLfCf+yYuFX9nEepzDLt97XVIR+dmfy6K6alhxZEQsOI1ZL1hAvWv/GKLeX48Gm9dCThH7aAmAw9EWjf2S+sSd+8v6ElI9dAYt2uYiHlJaN6NqR3fjkPA89tL4HjzHtRp5BJ6g5tN9akpL829ujRp9LLgqcYjBrtO9NGSC8A/xb48CS5FacLsMrX1a4Ov0PQmaGu1nvK0tOiEPC/KBzLP7NFMafncyGB+4PWlrvqYaBa0lGUs6D0A9XbTqXAvM7G3kfjk+iWqMXRa8ued6iKRV+1QCL5fXxhJnwhbfr/RTZwxw0TwmBSWVYN0LICTYAtXupLtS0aqk/hY6p/gFQ2PBEQnH37cma6JP/TolxetNsWQ8Web5eJ6GT2KcQ32IV/c6GQDWvSm3oPSqMgsw0GBAOzi+mKB/8Ip5JVPUYWYapcUqsVvlR/MZhG/xUtdkDGGoV9CM6wqTdBajVcMj2LQD3xxs7bzoHQCQtPzfEddIzA5BdDlNNAiDAmq/eWw7+zAZ6cgnqCCHV17drjEg89/68HYyJ/jIdLfR30L1MGZioqDQtb2Ekoxb76Bnub051wXmOoXYsJTLcJhlmoQe2OB+YZEtzlT8G2z5UjWN92BISgo41J6D9136t280/llccfDZYT4YpI/5KLyUdyg/+jfacB+qLjBQMzw5TYPhiaGroIpOcgX3g+B8HHXCSMgLDDwXEzrL2hWJYQzejWskYBgW9vrjwy8vW2lVt9GfT2+HYkAmvUP1c9yYPDF4Y7IWBnfCCZub5VaDai53P6ahB7xSfr0DPKSVTt0F/4oxq2rMEB51HLqjcqymyBIS87P/gOmMKBC8fPWz9KoVSqpqpQpSJkNlWn/XbjNVGxu5Ir+zmjZUNAKtZeuP5YSE2GeTXaoWWQ2pTaJBxqXcORYcV3uusBWyKzeq7jYLXxYcAg/RKhEctJHGEg97+uHMQajwEw4r3GvWFNWl8JXpc51qJ9lsP6EqjDfvEZ9nFczh5mLP0guB+psEaa1XA6waHdcnyJ6WrrgaNR8LFTDCO1csozKs85WqLp1OT5fx5KK0+Kf/URPxgUylMa5dSwn12y4Qjq6XvzHMQMnUJyzX94hz1gDXt+9956pDfUOIL9A70Z3UpCs2cX67EpeOdF6nVUZhmHkvHgmd+fKudK4BWpnX5m0gqk8Tuj+vASbynGA5uaP5qOlUCjiLFj4h/rjEiV2BBmnKuRMfng3+Fa0iw3I2eriW+8Je8a+BO5Y1i6wNBOKh+wNS0O+LhdIf+I/EJSbbnP0xeH1hCJIddaEir6VR7W7zav9cmZLYzDrxy2xNV/qvlCfTcbcqRJ9oxBDFqMboQAfuPY+lu4B80BXk37+RvaHqMs12wpbt+gw0BwJ/EjanOsj89DzT8Kp+5lpbaNnioAkj3V9vQCWSsMXuj+jBc40fSfWNBRUwOLiqEl8L/9lXK7y8fcQOn20/XZGBRXVvIsHm0VWt5XUTQFGm6L+ePp4peq42EUTKXKG97IANwUCZ4/eMber6iSIIxAqx/Wl8ehpSVJt1uY2mIqWU00H3RrQQTRV+NVJMkONY5cOvAAHBZkQOk+ehIHJhxqNik6IDiOjnj+qGCJFWpqie7Rs7cA6hYQSXRxMyZq3WDKQaIUiyJP8+C6elkFUHqmPHj79JHz5z4McIcxe1vH8w/g4RwBXC4WifVEUNQ9DinhiK3QEg3o7T8wxQmgOPuTzshjJ3HRQmXhUQK+rt0OMFV5HqmNj5QMQ6dUsSa8gC+3Sdv1bqDEFF+sW0dSU3gVgZ6Lx+GQXlEEs44o6Q0CA8pywpL33uKNbgMZO3mTdhtvPfLRF6Tj79qB17R7Bx3gUPPMMmrVkTI3Jdl5RvVz9ltzotq2E237GZjpgaASGQeYbFyLuFigzrXe6U1t2g==]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ACM_MetadataDelete">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports System.Diagnostics

Namespace OneStream.BusinessRule.Extender.ACM_MetadataDelete
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				
				Dim dimName As String = ""
				Dim parentMemberName As String = ""

				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.Unknown
				 		dimName  = "TEST"
						parentMemberName  = "TestParent"
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						dimName  = args.NameValuePairs.XFGetValue("DimName")
						parentMemberName  = args.NameValuePairs.XFGetValue("Parent")
					Case Else
						brapi.ErrorLog.LogMessage(si,"Must supply parameters to delete members")
						Return Nothing	
				End Select
				Brapi.ErrorLog.LogMessage(si,$"Target {dimName} {parentMemberName}")
				
				'Dim childEntities As List(Of MemberInfo) = api.Members.GetMembersUsingFilter(api.pov.EntityDim.DimPk,"E#[" & parentMemberName & "].Children",Nothing)
				'brapi.ErrorLog.LogMessage(si,"childrencount: " & childEntities.Count)
				
				Dim dimPk As DimPk = BRApi.Finance.Dim.GetDimPk(si,dimName)	
				'Dim allMembers As List(Of Member) = BRApi.Finance.Members.GetAllMembers(si, dimPk, False)
				
				Dim memberId As Integer = brapi.Finance.Members.GetMemberId(si,dimPk.DimTypeId,parentMemberName)
				
				Dim watch As Stopwatch = Stopwatch.StartNew
				Dim totalCnt As Integer = 0
				Dim passCnt As Integer = 0
				Dim firstMem As String = ""
				Dim lastMem As String = ""
				Dim baseMembers As List(Of Member) = BRApi.Finance.Members.GetBaseMembers(si,dimPk,memberId,Nothing)
				BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, False, "prm_acm_delete_error", "")
				Do While baseMembers IsNot Nothing And baseMembers.Count > 0
					'If baseMembers.Any(Function(x) x.Name = "None") Then
					baseMembers.RemoveAll(Function(x) x.Name.XFEqualsIgnoreCase("None")) 'remove any none members as they will have trouble deleting
					If baseMembers.Count = 0 Then
						BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, False, "prm_acm_delete_error", "Warning. Cannot delete member 'None'. Please remove manually and try again.")
						Exit Do	
					End If
					firstMem = baseMembers(0).Name
					If firstMem = lastMem Then
						BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, False, "prm_acm_delete_error", "Warning. Delete is failing. Please verify base members are not extended.")
						Exit Do						
					End If
					passCnt += 1
					brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,$"Pass {passCnt}: Deleting {baseMembers.Count} base members starting with {baseMembers(0).Name}",10)
					For Each baseMember As Member In baseMembers
						totalCnt += 1 
						BRApi.Finance.MemberAdmin.RemoveMember(si, dimPk, baseMember.MemberPk)
					Next
					lastMem = firstMem
					baseMembers = BRApi.Finance.Members.GetBaseMembers(si,dimPk,memberId,Nothing)
					If passCnt > 20 Then
						'brapi.ErrorLog.LogMessage(si,"Delete metadata hit 20 passes and aborted")
						BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, False, "prm_acm_delete_error", "Warning. Recursion limit reached.")
						Exit Do
					End If
				Loop
				watch.Stop()
				
				Dim ts As TimeSpan = watch.Elapsed
				Dim runtime As String = String.Format("{0:00}:{1:00}:{2:00}.{3:00}",ts.Hours,ts.Minutes,ts.Seconds,ts.Milliseconds / 10)
				'Brapi.ErrorLog.LogMessage(si,$"Deleted {totalCnt} {dimName} {parentMemberName} in {watch.Elapsed.TotalMinutes.ToString} minutes")
				BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, False, "prm_acm_delete_time", $"Deleted {totalCnt} in {dimName} > {parentMemberName} in {runtime}")
				
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ACM_MetadataImport">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>true</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="ACM_Engine" />
            </referencedAssemblies>
            <sourceCode><![CDATA[]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ACM_PrepareMetadata">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>true</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="ACM_Engine" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Uh6XsM/GbTvKhfvZWm3GFZhlvltnqCSnR6/CUa/jtsQoD00S4bE+nY3fNmDWY49PkvbT2Ke3P2pMViiSmUGnDMU7OY2+TXSY0Et+5EtPt9JBq6Ojo9Y5fCFkBmhkb2B8p7jDOznqgticDraAR39haxdIAVc6K02DzK16bvlrzcxnTCMNt0ecHJv94d+1tZojCXjrkwe4RImW73LggJrzApYBYiI27fhwmKeVhF3yxdVtn4fqY2w885xwsBFOHKYxDkCs12/HXGDKnMaTaqJuI6JK8nsDwM85DT1JjNniJj0EDV+oFKT3HBW1KqXqYLcCOiZvrcRH3oido0+WFIwGcIA7bOMXiThjwROxCEkOYO5h7aX5KMbazsLTOyszr9SCfGE/1Fe1shapOZiTVkhAJA3Z6YrHFAfN/hwabUTlap2DAgs4AQIF7i6hPoiMQojOAAJkMtHxjL1SUqpaSFQgu1EFpC3NAWVMyyipiPXnum4mHsa9uMdRtMdMOoiUEkVUG+ENHauYiaLOo+tGZUdeT+9Ip1yZOC39t7SrDiNSHkeMcP/OZtZ8AskyHWl4QHLv0n33Gfidyaa9dbDvEQxt7l2DU179NZAuq1YG/fbjx6eA/+uIEZ4VjlzSAdhib3JD2vAYNhFM0Vu0oSSEm+HuVruXU31lNnjshv1KWd/WdyJlpQxZGOz/CY8yjDUQbMJF7ZiRzonRmNzZ/1hjsDuiwV7Cg4kXC6Zm0Nx5R1BC9UVObbjvrKnj5Az7jbOVIFUMrZfmcsMjG9FpWtJjLkKq7wRwBskx4fxGNVN35gsgUQPiSgNEg7ZH+E7DWszl9iqHI9qRP3SKgRdbdbfcOthTlw3eLCV9FcrIYLfCf+yYuFX9nEepzDLt97XVIR+dmfy6K6alhxZEQsOI1ZL1hAvWv/GKLeX48Gm9dCThH7aAmAzvRXa6SvxFUWYk/YnWY+2zCx0wWA0U//XbG4Zmzvk19MQGSquGLwfVFPKCvNXdT7xKGxTJijDgsZmptB+9amRUxVuba1j76wwSY03RYnBROq99RVUM/MK5jQ/eHss+8fo2ge7Z1e+VEJ1EuFq1tucaYQyDJcdHcWwgMc/3NOFMvUgNtrMtIQwLc902thBD9tyLiBW5SpcXBvA9RDvAMqQCUzAjgJ7RkQPozqFS8KrO+E7h7VSvTkTdlDSU0uq6hUS1ddSmJT3Ol+i3ZRTCRzrWwwyA3cyJBolMo8dK/hbEfoKvC2nGf3++Ljw2LTDERhAVurhGHZsskZQ8oJSvnp/uPKqbA9YG9NVJGIzDLRg1dQokyaOMebxOvwaPHBMpJloC390ZBOvlmN0nP5cXeKAw+Y0BYLANVueH6v8b7qg3hjbrGSse8vH8123ScvSXdD8qEnKFIc/ddarGg9QxaR1nILFTNGQqBJxX+r/YzsV57QIwPv+M2wUKPhuvmN/Vp+gjwcSrPI7iE+wnt6IMJem4yNZcxdsbkg7dacj7OyNCUPP5hJI7qxNzXLSiWuG+8Ef9OlP7JRz2VLcvTQOt8Wq3hQcEBT97cakTigQclqm4ssmOc1/9XPrI9veaUtXYHLRlRwZRQZuzxrjt1+J+tcyILwCbE/2sQOsHDXCzzqRom/U5GkIK3i7izrmfDbUlJc4SCuA9ZfpTTyqNghevm2co9k9oXqMAkkt+knLtj/wJgaQIEhgX1vZ3OhIZTfeR7zIorc25s2zf8LSkgQd80KqmP2hTg3iHyK67iYQ0sc3iu3dnVr1HMAY3eqmVpzh/OKHMVm734wTHjK/C+USO3mnctqqnFTNvwUQPvqK8dJPhUELacc5w83FgVFinCnk5nsLg1L2TPgWpmR16G2dcF3onNBamDJ6UQIt8LuyHzkry0/zdmQsS38uf+/m+G7+SJPmDrSJai9b5iBp5aCf7MUHGLWlMSeLkZmF3NfgxQVIwns4QV9iS8CJ+fkmRjYd8TElHwkpEVPIwYviofAl9JBM1ZhVDk6Yur5eRWAR5p8VmboMgGe4ddTW2y2OtAaVbRfbr+mp81FWv6XYfKKAAqSe/IyGIPKwltwpeeN5Hjy92Ghz3aVGy/9JPH3Nyy81FLo/O/u80578s++DUmpelpMtlWgGsNr0QBhnyDUdxuR8ANgZeub0jFKbvJKgQlxqRKiCaOFOVUiXafBEdubwiSiejpW8JpsSWGHalqiIe0c1HQUgHAUwKHHWfMyGVKJuP/M9t8ofBogeGI+tZTmhWtno8tm8GUOYehVQ+eGwIgK3oSzp/QLVoczLZZLAR+8CEMSK8eJpRmuDL4PtTL+AZXpZKWH87DfVJHloFbin87qjsZzNR4jWrIyjnpmkuP+HGyZjjdg4FcYZfswuw8E1zc5mmUYbmj7W3w5q2lMtRPK5BJZq1qiOmYarzRnLNiuA8OfwltK1Mda52XfQOFbLgtkbeHGPhplQxpWrYNmISBgaaaBDuEXk5AnWJedH4oKtMjwgbhLusYFALAQC7MsVI69uFkchHORK+Ap1Icp3t85SPeqpv/5Ub2CcwzSbXUAXwORqx+LBrIkE/LSju+KFEr/KRO7VdRYIYgM1gJMCSnyRA+syXgXf9/TxmwN3CDHLH7T7v2vuV71VYFNUrLbGic4CJ4OqrCT1TO+54mvfj1QQy1OnO0agw4BkaR9EKhXEqoiwuBPJtHINC4THzFJB8nwI/]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ACM_SourceSystem_Connector_Account">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.ACM_SourceSystem_Connector_Account
	Public Class MainClass
        Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
            Try
				Dim sDim As String
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						sDim = args.NameValuePairs("Dimension") 
						PopulateAutomationTables(si, globals, api, args, sDim)	
					Case Is = ExtenderFunctionType.Unknown
						sDim = "Account"
						PopulateAutomationTables(si, globals, api, args, sDim)
					End Select
			Catch ex As Exception
	            Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	        End Try
			Return Nothing
		End Function			
		Public Sub PopulateAutomationTables(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs, ByVal sDim As String)
			Try
				Dim sqlMember, sqlTree As New Text.StringBuilder
				
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				'**** Change These Variables Accordingly****
				Dim srcMemberTable As String = "Source_Metadata_Account_Members"
				Dim srcTreeTable As String = "Source_Metadata_Account_Tree"
				Dim externalConnection As String = "External Database 3"
				Dim dbExtConn As DbConnInfo = Nothing
				If Not externalConnection Is Nothing
					dbExtConn = BRApi.Database.CreateExternalDbConnInfo(si, externalConnection)
				End If
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				'**** Change These Variables Accordingly****
				'Queries to Source System for Member and Tree. 
				Dim srcMemberSql As String = "SELECT 
					Member as Member
					,Text1 as Text1
					,Text2 as Text2
					,Text3 as Text3
					,Text4 as Text4
					,Text5 as Text5
					,Text6 as Text6
					,Text7 as Text7
					,Text8 as Text8
					,UD1Constraint as UD1Constraint
					,UD2Constraint as UD2Constraint
					,UD3Constraint as UD3Constraint
					,UD4Constraint as UD4Constraint
					,UD5Constraint as UD5Constraint
					,UD6Constraint as UD6Constraint
					,UD7Constraint as UD7Constraint
					,UD8Constraint as UD8Constraint
					,EnableUD1Aggregation as EnableUD1Aggregation
					,EnableUD2Aggregation as EnableUD2Aggregation
					,EnableUD3Aggregation as EnableUD3Aggregation
					,EnableUD4Aggregation as EnableUD4Aggregation
					,EnableUD5Aggregation as EnableUD5Aggregation
					,EnableUD6Aggregation as EnableUD6Aggregation
					,EnableUD7Aggregation as EnableUD7Aggregation
					,EnableUD8Aggregation as EnableUD8Aggregation
					,EnableICAggregation as EnableICAggregation
					,EnableOriginAggregation as EnableOriginAggregation
					,EnableFlowAggregation as EnableFlowAggregation
					,UsedOnEntityDim as UsedOnEntityDim
					,UsedOnConsDim as UsedOnConsDim
					,Description as Description
					,IsConsolidated as IsConsolidated
					,ICConstraint as ICConstraint
					,AllowInput as AllowInput
					,WorkflowChannel as WorkflowChannel
					,InUse as InUse
					,AggregationWeight as AggregationWeight

				from " & srcMemberTable	
				
				Dim srcTreeSql As String = "SELECT 
				
				Dimension as Dimension
				,Parent as Parent
				,Child as Child
				,SortOrder as SortOrder
				
				from " & srcTreeTable
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				
				Dim memberTable As String = "XFW_ACM_Metadata" & sDim & "ImportMembers"
				Dim treeTable As String = "XFW_ACM_Metadata" & sDim & "ImportTree"
								
				Using dbConn As DbConnInfoApp = BRApi.Database.CreateApplicationDbConnInfo(si)
	                
					'Clear data from Member and Tree tables.
					BRApi.Database.ExecuteSql(dbConn, "TRUNCATE TABLE " & treeTable, True)
	                BRApi.Database.ExecuteSql(dbConn, "TRUNCATE TABLE " & memberTable, True)					

					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					'Execute srcMemberSql and Insert Results into memberTable
					Dim dtMember As DataTable
					If externalConnection Is Nothing Then
						dtMember = BRAPi.Database.ExecuteSql(dbConn, srcMemberSql.ToString, False)
					Else
						dtMember = BRAPi.Database.ExecuteSql(dbExtConn, srcMemberSql.ToString, False)
					End If
					
					Dim insertMemberFields As String = ""
					
					For Each dc As DataColumn In dtMember.Columns
						insertMemberFields = insertMemberFields & (dc.ColumnName).ToString & ","
					Next
					
					insertMemberFields = insertMemberFields.remove(insertMemberFields.length - 1)
					
					Dim memberInsert As New Text.StringBuilder
					Dim memberValue As String = ""
					For Each dr As DataRow In dtMember.Rows
						memberValue = "("
						For Each dc As DataColumn In dtMember.Columns
							memberValue = memberValue & "'" & (dr(dc.ColumnName).ToString & "',")
						Next
						memberValue = memberValue.remove(memberValue.Length - 1) & "),"
						memberInsert.append(memberValue)
					Next					
					memberInsert.length = memberInsert.Length - 1
					
					sqlMember.Append("INSERT INTO " & memberTable & " (" & insertMemberFields & ") ")
					sqlMember.Append("VALUES " & memberInsert.tostring)

	                BRApi.Database.ExecuteSql(dbConn, sqlMember.ToString, True)
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
									
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					'Execute srcTreeSql and Insert Results into treeTable	
					Dim dtTree As DataTable
					If externalConnection Is Nothing Then
						dtTree = BRAPi.Database.ExecuteSql(dbConn, srcTreeSql.ToString, False)
					Else
						dtTree = BRAPi.Database.ExecuteSql(dbExtConn, srcTreeSql.ToString, False)
					End If
					
					Dim insertTreeFields As String = ""
					
					For Each dc As DataColumn In dtTree.Columns
						insertTreeFields = insertTreeFields & (dc.ColumnName).ToString & ","
					Next
					
					insertTreeFields = insertTreeFields.remove(insertTreeFields.length - 1)	
								
					Dim treeInsert As New Text.StringBuilder
					Dim treeValue As String = ""
					For Each dr As DataRow In dtTree.Rows
						treeValue = "("
						For Each dc As DataColumn In dtTree.Columns
							treeValue = treeValue & "'" & (dr(dc.ColumnName).ToString & "',")
						Next
						treeValue = treeValue.remove(treeValue.Length - 1) & "),"
						treeInsert.append(treeValue)
					Next		
					treeInsert.Length = treeInsert.Length - 1

					sqlTree.Append("INSERT INTO " & treeTable & " (" & insertTreeFields & ") ")
					sqlTree.Append("VALUES " & treeInsert.tostring)

	                BRApi.Database.ExecuteSql(dbConn, sqlTree.ToString, True)	
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
	            End Using
		                    
	        Catch ex As Exception
	            Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	        End Try
        End Sub
    End Class
End Namespace]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ACM_SourceSystem_Connector_Entity">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="Fcp_Integration_Utility" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports OneStream.BusinessRule.Extender.Fcp_Integration_Utility
Imports OneStream.BusinessRule.Extender.OS_Models

Namespace OneStream.BusinessRule.Extender.ACM_SourceSystem_Connector_Entity
	Public Class MainClass
        Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Dim sDim As String
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						'sDim = args.NameValuePairs("Dimension") 
						sDim = args.NameValuePairs.XFGetValue("Dimension")
						PopulateAutomationTables(si, globals, api, args, sDim)	
					Case Is = ExtenderFunctionType.Unknown
						sDim = "Entity"
						PopulateAutomationTables(si, globals, api, args, sDim)
					End Select
			Catch ex As Exception
	            Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	        End Try
			Return Nothing
		End Function			
		Public Sub PopulateAutomationTables(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs, ByVal sDim As String)
			Try			
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				#Region "Fcp Entity Endpoint"
				
	 				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					#Region "Definitions"
						Dim fcpIntegrator As OneStream.BusinessRule.Extender.Fcp_Integration_Utility.MainClass = Nothing
						'Dim wfPOVId As String = String.Empty
						'Dim objectName As String = String.Empty '= args.DataSourceName 'FCP view name in this code. This is used to construct the request URI
						Dim result As ActualsData = Nothing
						Dim fcpRowCount As Integer = 0
						Dim osRowCount As Integer = 0
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						'Get Required FCP Integration Details from Lookup Rules
						'	-EndPoint must be defined for each FCP Data Source Definition
						'	-ConsumerID must be defined for each EndPoint
						'	-SvcEnv must be defined for each EndPoint
						'	-SvcName must be defined for each EndPoint
						Const transLookup_EndPoints As String = "FCP_DataSource_Endpoints"
						Const transLookup_ConsumerIDs As String = "FCP_DataSource_ConsumerIDs"
						Const transLookup_SvcEnvs As String = "FCP_DataSource_SvcEnvs"
						Const transLookup_SvcNames As String = "FCP_DataSource_SvcNames"
						
						Dim endPoint As String
						'Dim consumerID As String
						'Dim svcEnv As String
						'Dim svcName As String
						Dim errMsg As String
					#End Region
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					#Region "Get EndPoint Input Parameters"
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					'Get the FCP EndPoint from the Transformation Lookup Rule
					'	-Source Value: Data Source Name
					'	-Target Value: FCP Endpoint
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						'Dim acmSourceName As String = args.NameValuePairs.XFGetValue("Dimension")
						endPoint = BRApi.Utilities.TransformText(si, sDim, transLookup_EndPoints, True)				
						If endPoint = sDim Then
							errMsg = $"Lookup Rule not found in {transLookup_EndPoints} for {sDim}"
							brapi.ErrorLog.LogMessage(si, errMsg)
							Throw New XFUserMsgException(si, New Exception(errMsg))
						End If				
	'					endPoint = BRApi.Utilities.TransformText(si, args.DataSourceName, transLookup_EndPoints, True)				
	'					If endPoint = args.DataSourceName Then
	'						errMsg = $"Lookup Rule not found in {transLookup_EndPoints} for {args.DataSourceName}"
	'						brapi.ErrorLog.LogMessage(si, errMsg)
	'						Throw New XFUserMsgException(si, New Exception(errMsg))
	'					End If
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			

					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					'Get the FCP ConsumerID from the Transformation Lookup Rule
					'	-Source Value: FCP Endpoint
					'	-Target Value: ConsumerID
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						consumerID = BRApi.Utilities.TransformText(si, endPoint, transLookup_ConsumerIDs, True)				
						If consumerID = endPoint Then
							errMsg = $"Lookup Rule not found in {transLookup_ConsumerIDs} for {endPoint}"
							brapi.ErrorLog.LogMessage(si, errMsg)
							Throw New XFUserMsgException(si, New Exception(errMsg))
						End If
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					'Get the FCP SvcEnv from the Transformation Lookup Rule
					'	-Source Value: FCP Endpoint
					'	-Target Value: SvcEnv
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						svcEnv = BRApi.Utilities.TransformText(si, endPoint, transLookup_SvcEnvs, True)				
						If svcEnv = endPoint Then
							errMsg = $"Lookup Rule not found in {transLookup_SvcEnvs} for {endPoint}"
							brapi.ErrorLog.LogMessage(si, errMsg)
							Throw New XFUserMsgException(si, New Exception(errMsg))
						End If
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					'Get the FCP svcName from the Transformation Lookup Rule
					'	-Source Value: FCP Endpoint
					'	-Target Value: SvcName
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						svcName = BRApi.Utilities.TransformText(si, endPoint, transLookup_SvcNames, True)				
						If svcName = endPoint Then
							errMsg = $"Lookup Rule not found in {transLookup_SvcNames} for {endPoint}"
							brapi.ErrorLog.LogMessage(si, errMsg)
							Throw New XFUserMsgException(si, New Exception(errMsg))
						End If
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					'Set Required ExtenderArgs for Integration Utility Class
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						Dim integrationArgs As New ExtenderArgs
						integrationArgs.NameValuePairs.Add("ConsumerID", consumerID)
						integrationArgs.NameValuePairs.Add("SvcEnv", svcEnv)
						integrationArgs.NameValuePairs.Add("SvcName", svcName)
						
						'Add Optional Args
						'integrationArgs.NameValuePairs.Add("WriteFCPDataToFile", True)
						
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					#End Region
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					#Region "Create a NEW instance of the Integration Utility Class"
						'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						fcpIntegrator = New OneStream.BusinessRule.Extender.Fcp_Integration_Utility.MainClass(si, api, integrationArgs)
						fcpIntegrator.AddLogMessage(si, $"ACM Extender {Me.GetType().Namespace} Started ({sDim}).")
						'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
					#End Region
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
				
				#End Region
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				#Region "Sql Source Tables / Connection (not in use)"
				'Dim sqlMember, sqlTree As New Text.StringBuilder
'				'**** Change These Variables Accordingly****
'				Dim srcMemberTable As String = "Source_Metadata_Entity_Members"
'				Dim srcTreeTable As String = "Source_Metadata_Entity_Tree"
'				Dim externalConnection As String = "External Database 3"
'				Dim dbExtConn As DbConnInfo = Nothing
'				If Not externalConnection Is Nothing
'					dbExtConn = BRApi.Database.CreateExternalDbConnInfo(si, externalConnection)
'				End If
				
'				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				
'				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'				'**** Change These Variables Accordingly****
'				'Queries to Source System for Member and Tree. 
'				Dim srcMemberSql As String = "SELECT 
'					Member as Member
'					,Text1 as Text1
'					,Text2 as Text2
'					,Text3 as Text3
'					,Text4 as Text4
'					,Text5 as Text5
'					,Text6 as Text6
'					,Text7 as Text7
'					,Text8 as Text8
'					,UD1Constraint as UD1Constraint
'					,UD2Constraint as UD2Constraint
'					,UD3Constraint as UD3Constraint
'					,UD4Constraint as UD4Constraint
'					,UD5Constraint as UD5Constraint
'					,UD6Constraint as UD6Constraint
'					,UD7Constraint as UD7Constraint
'					,UD8Constraint as UD8Constraint
'					,UD1Default as UD1Default
'					,UD2Default as UD2Default
'					,UD3Default as UD3Default
'					,UD4Default as UD4Default
'					,UD5Default as UD5Default
'					,UD6Default as UD6Default
'					,UD7Default as UD7Default
'					,UD8Default as UD8Default
'					,Description as Description
'					,Currency as Currency
'					,IsConsolidated as IsConsolidated
'					,IsIC as IsIC
'					,ICConstraint as ICConstraint
'					,AllowAdjustments as AllowAdjustments
'					,InUse as InUse
'					,AllowAdjustmentsFromChildren as AllowAdjustmentsFromChildren
'					,ReadDataGroup as ReadDataGroup
'					,ReadWriteDataGroup as ReadWriteDataGroup 
'				from " & srcMemberTable	
				
'				Dim srcTreeSql As String = "SELECT 
				
'				Dimension as Dimension
'				,Parent as Parent
'				,Child as Child
'				,SortOrder as SortOrder
				
'				from " & srcTreeTable
				#End Region
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~				
				
				Dim memberTable As String = "XFW_ACM_Metadata" & sDim & "ImportMembers"
				Dim treeTable As String = "XFW_ACM_Metadata" & sDim & "ImportTree"
								
				Using dbConn As DbConnInfoApp = BRApi.Database.CreateApplicationDbConnInfo(si)
	                
					'Clear data from Member and Tree tables.
					BRApi.Database.ExecuteSql(dbConn, "TRUNCATE TABLE " & treeTable, True)
	                BRApi.Database.ExecuteSql(dbConn, "TRUNCATE TABLE " & memberTable, True)					

					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
					#Region "Fcp - Bulk Insert to ACM Staging Tables"
					
						'-----------------------------------------------------------------------------------------
						'GetData ConnectorActionTypes is triggered via the WF Process
						'	-Build the endpoint
						'-----------------------------------------------------------------------------------------
							endPoint += $"getData/{sDim}"
							
							
							'-----------------------------------------------------------------------------------------
							
							'========================================================================================
							'Below are the user defined FCP error codes For Get API.
							'========================================================================================
							'101=Error While running query
							'102=Selected model yet Not implemented! Please check catalogue.
							'103=Error In building attributes From resultset
							'104=Error reading config file
							'105=Error In building Date parameters
							'106=Error In creating data objects
							'107=Record count mismatch
							'108=Error In generating query String
							'109=Error In adding meta To data model
							'110=Error connecting To data source.
							'111=Year And Period are mandatory parameters
							'112=Selected model supports pagination.Please provide appropriate page number
							'113=Error In generating meta
							'114=No data exists.
							'------------------------------------------------------------------------------------------
							
							'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
							'Request the data from FCP, process the data in stage
							'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
								fcpIntegrator.AddLogMessage(si, $"WF Unit Description: {api.WorkflowUnitDescription}")
								wfPOVId = $"{api.WorkflowProfile.Name.ToUpper()}_{ScenarioDimHelper.GetNameFromId(si, api.WorkflowUnitPk.ScenarioKey).ToUpper()}_{TimeDimHelper.GetNameFromId(api.WorkflowUnitPk.TimeKey).ToUpper()}"
								
								fcpIntegrator.AddLogMessage(si, $"Session State Key1: {wfPOVId}")
								
								result = fcpIntegrator.GetDataTableFromFcp(si, endPoint)
								If result.Success Then
									If result.Data IsNot Nothing Then
										fcpRowCount += result.Data.Rows.Count 
										api.Parser.ProcessDataTable(si, result.Data, False, api.ProcessInfo)
										osRowCount += api.ProcessInfo.RowCount
									Else
										fcpIntegrator.AddLogMessage(si, $"StatusCode: {result.StatusCode}, Message: {result.ReasonPhrase}")
									End If
								Else
									errMsg = $"Error: StatusCode: {result.StatusCode}, Message: {result.ReasonPhrase}"
									fcpIntegrator.AddLogMessage(si, errMsg)
									Throw New XFUserMsgException(si, New Exception(errMsg))
								End If
								cnt += 1
							Loop		
						'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~					
					#End Region
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
					#Region "Build SQL Insert Statement and use with BRApi.Database.ExecuteSql (Not in use)"
'					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'					'Execute srcMemberSql and Insert Results into memberTable
'					Dim dtMember As DataTable
'					If externalConnection Is Nothing Then
'						dtMember = BRAPi.Database.ExecuteSql(dbConn, srcMemberSql.ToString, False)
'					Else
'						dtMember = BRAPi.Database.ExecuteSql(dbExtConn, srcMemberSql.ToString, False)
'					End If
					
'					Dim insertMemberFields As String = ""
					
'					For Each dc As DataColumn In dtMember.Columns
'						insertMemberFields = insertMemberFields & (dc.ColumnName).ToString & ","
'					Next
					
'					insertMemberFields = insertMemberFields.remove(insertMemberFields.length - 1)
					
'					Dim memberInsert As New Text.StringBuilder
'					Dim memberValue As String = ""
'					For Each dr As DataRow In dtMember.Rows
'						memberValue = "("
'						For Each dc As DataColumn In dtMember.Columns
'							memberValue = memberValue & "'" & (dr(dc.ColumnName).ToString & "',")
'						Next
'						memberValue = memberValue.remove(memberValue.Length - 1) & "),"
'						memberInsert.append(memberValue)
'					Next					
'					memberInsert.length = memberInsert.Length - 1
					
'					sqlMember.Append("INSERT INTO " & memberTable & " (" & insertMemberFields & ") ")
'					sqlMember.Append("VALUES " & memberInsert.tostring)

'	                BRApi.Database.ExecuteSql(dbConn, sqlMember.ToString, True)
'					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
									
'					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'					'Execute srcTreeSql and Insert Results into treeTable	
'					Dim dtTree As DataTable
'					If externalConnection Is Nothing Then
'						dtTree = BRAPi.Database.ExecuteSql(dbConn, srcTreeSql.ToString, False)
'					Else
'						dtTree = BRAPi.Database.ExecuteSql(dbExtConn, srcTreeSql.ToString, False)
'					End If
					
'					Dim insertTreeFields As String = ""
					
'					For Each dc As DataColumn In dtTree.Columns
'						insertTreeFields = insertTreeFields & (dc.ColumnName).ToString & ","
'					Next
					
'					insertTreeFields = insertTreeFields.remove(insertTreeFields.length - 1)	
								
'					Dim treeInsert As New Text.StringBuilder
'					Dim treeValue As String = ""
'					For Each dr As DataRow In dtTree.Rows
'						treeValue = "("
'						For Each dc As DataColumn In dtTree.Columns
'							treeValue = treeValue & "'" & (dr(dc.ColumnName).ToString & "',")
'						Next
'						treeValue = treeValue.remove(treeValue.Length - 1) & "),"
'						treeInsert.append(treeValue)
'					Next		
'					treeInsert.Length = treeInsert.Length - 1

'					sqlTree.Append("INSERT INTO " & treeTable & " (" & insertTreeFields & ") ")
'					sqlTree.Append("VALUES " & treeInsert.tostring)

'	                BRApi.Database.ExecuteSql(dbConn, sqlTree.ToString, True)		
					#End Region
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					
	            End Using
		                    
	        Catch ex As Exception
	            Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	        End Try
        End Sub
    End Class
End Namespace]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ACM_SourceSystem_Connector_UD1">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.ACM_SourceSystem_Connector_UD1
	Public Class MainClass
        Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
            Try
				Dim sDim As String
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						sDim = args.NameValuePairs("Dimension") 
						PopulateAutomationTables(si, globals, api, args, sDim)	
					Case Is = ExtenderFunctionType.Unknown
						sDim = "UD1"
						PopulateAutomationTables(si, globals, api, args, sDim)
					End Select
			Catch ex As Exception
	            Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	        End Try
			Return Nothing
		End Function			
		Public Sub PopulateAutomationTables(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs, ByVal sDim As String)
			Try
				Dim sqlMember, sqlTree As New Text.StringBuilder
				
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				'**** Change These Variables Accordingly****
				Dim srcMemberTable As String = "Source_Metadata_UD1_Members"
				Dim srcTreeTable As String = "Source_Metadata_UD1_Tree"
				Dim externalConnection As String = "External Database 3"
				Dim dbExtConn As DbConnInfo = Nothing
				If Not externalConnection Is Nothing
					dbExtConn = BRApi.Database.CreateExternalDbConnInfo(si, externalConnection)
				End If
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				'**** Change These Variables Accordingly****
				'Queries to Source System for Member and Tree. 
				Dim srcMemberSql As String = "SELECT 
					Member as Member
					,Text1 as Text1
					,Text2 as Text2
					,Text3 as Text3
					,Text4 as Text4
					,Text5 as Text5
					,Text6 as Text6
					,Text7 as Text7
					,Text8 as Text8
					,Description as Description
					,IsConsolidated as IsConsolidated
					,AllowInput as AllowInput
					,WorkflowChannel as WorkflowChannel
					,InUse as InUse
					,AlternateCurrencyForDisplay as AlternateCurrencyForDisplay
					,AggregationWeight as AggregationWeight

				from " & srcMemberTable	
				
				Dim srcTreeSql As String = "SELECT 
				
				Dimension as Dimension
				,Parent as Parent
				,Child as Child
				,SortOrder as SortOrder
				
				from " & srcTreeTable
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				
				Dim memberTable As String = "XFW_ACM_Metadata" & sDim & "ImportMembers"
				Dim treeTable As String = "XFW_ACM_Metadata" & sDim & "ImportTree"
								
				Using dbConn As DbConnInfoApp = BRApi.Database.CreateApplicationDbConnInfo(si)
	                
					'Clear data from Member and Tree tables.
					BRApi.Database.ExecuteSql(dbConn, "TRUNCATE TABLE " & treeTable, True)
	                BRApi.Database.ExecuteSql(dbConn, "TRUNCATE TABLE " & memberTable, True)					

					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					'Execute srcMemberSql and Insert Results into memberTable
					Dim dtMember As DataTable
					If externalConnection Is Nothing Then
						dtMember = BRAPi.Database.ExecuteSql(dbConn, srcMemberSql.ToString, False)
					Else
						dtMember = BRAPi.Database.ExecuteSql(dbExtConn, srcMemberSql.ToString, False)
					End If
					
					Dim insertMemberFields As String = ""
					
					For Each dc As DataColumn In dtMember.Columns
						insertMemberFields = insertMemberFields & (dc.ColumnName).ToString & ","
					Next
					
					insertMemberFields = insertMemberFields.remove(insertMemberFields.length - 1)
					
					Dim memberInsert As New Text.StringBuilder
					Dim memberValue As String = ""
					For Each dr As DataRow In dtMember.Rows
						memberValue = "("
						For Each dc As DataColumn In dtMember.Columns
							memberValue = memberValue & "'" & (dr(dc.ColumnName).ToString & "',")
						Next
						memberValue = memberValue.remove(memberValue.Length - 1) & "),"
						memberInsert.append(memberValue)
					Next					
					memberInsert.length = memberInsert.Length - 1
					
					sqlMember.Append("INSERT INTO " & memberTable & " (" & insertMemberFields & ") ")
					sqlMember.Append("VALUES " & memberInsert.tostring)

	                BRApi.Database.ExecuteSql(dbConn, sqlMember.ToString, True)
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
									
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					'Execute srcTreeSql and Insert Results into treeTable	
					Dim dtTree As DataTable
					If externalConnection Is Nothing Then
						dtTree = BRAPi.Database.ExecuteSql(dbConn, srcTreeSql.ToString, False)
					Else
						dtTree = BRAPi.Database.ExecuteSql(dbExtConn, srcTreeSql.ToString, False)
					End If
					
					Dim insertTreeFields As String = ""
					
					For Each dc As DataColumn In dtTree.Columns
						insertTreeFields = insertTreeFields & (dc.ColumnName).ToString & ","
					Next
					
					insertTreeFields = insertTreeFields.remove(insertTreeFields.length - 1)	
								
					Dim treeInsert As New Text.StringBuilder
					Dim treeValue As String = ""
					For Each dr As DataRow In dtTree.Rows
						treeValue = "("
						For Each dc As DataColumn In dtTree.Columns
							treeValue = treeValue & "'" & (dr(dc.ColumnName).ToString & "',")
						Next
						treeValue = treeValue.remove(treeValue.Length - 1) & "),"
						treeInsert.append(treeValue)
					Next		
					treeInsert.Length = treeInsert.Length - 1

					sqlTree.Append("INSERT INTO " & treeTable & " (" & insertTreeFields & ") ")
					sqlTree.Append("VALUES " & treeInsert.tostring)

	                BRApi.Database.ExecuteSql(dbConn, sqlTree.ToString, True)	
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
	            End Using
		                    
	        Catch ex As Exception
	            Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	        End Try
        End Sub
    End Class
End Namespace]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ACM_SourceSystem_Connector_UD2">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.ACM_SourceSystem_Connector_UD2
	Public Class MainClass
        Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
            Try
				Dim sDim As String
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						sDim = args.NameValuePairs("Dimension") 
						PopulateAutomationTables(si, globals, api, args, sDim)	
					Case Is = ExtenderFunctionType.Unknown
						sDim = "UD2"
						PopulateAutomationTables(si, globals, api, args, sDim)
					End Select
			Catch ex As Exception
	            Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	        End Try
			Return Nothing
		End Function			
		Public Sub PopulateAutomationTables(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs, ByVal sDim As String)
			Try
				Dim sqlMember, sqlTree As New Text.StringBuilder
				
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				'**** Change These Variables Accordingly****
				Dim srcMemberTable As String = "Source_Metadata_UD2_Members"
				Dim srcTreeTable As String = "Source_Metadata_UD2_Tree"
				Dim externalConnection As String = "External Database 3"
				Dim dbExtConn As DbConnInfo = Nothing
				If Not externalConnection Is Nothing
					dbExtConn = BRApi.Database.CreateExternalDbConnInfo(si, externalConnection)
				End If
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				'**** Change These Variables Accordingly****
				'Queries to Source System for Member and Tree. 
				Dim srcMemberSql As String = "SELECT 
					Member as Member
					,Text1 as Text1
					,Text2 as Text2
					,Text3 as Text3
					,Text4 as Text4
					,Text5 as Text5
					,Text6 as Text6
					,Text7 as Text7
					,Text8 as Text8
					,Description as Description
					,IsConsolidated as IsConsolidated
					,AllowInput as AllowInput
					,WorkflowChannel as WorkflowChannel
					,InUse as InUse
					,AlternateCurrencyForDisplay as AlternateCurrencyForDisplay
					,AggregationWeight as AggregationWeight

				from " & srcMemberTable	
				
				Dim srcTreeSql As String = "SELECT 
				
				Dimension as Dimension
				,Parent as Parent
				,Child as Child
				,SortOrder as SortOrder
				
				from " & srcTreeTable
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				
				Dim memberTable As String = "XFW_ACM_Metadata" & sDim & "ImportMembers"
				Dim treeTable As String = "XFW_ACM_Metadata" & sDim & "ImportTree"
								
				Using dbConn As DbConnInfoApp = BRApi.Database.CreateApplicationDbConnInfo(si)
	                
					'Clear data from Member and Tree tables.
					BRApi.Database.ExecuteSql(dbConn, "TRUNCATE TABLE " & treeTable, True)
	                BRApi.Database.ExecuteSql(dbConn, "TRUNCATE TABLE " & memberTable, True)					

					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					'Execute srcMemberSql and Insert Results into memberTable
					Dim dtMember As DataTable
					If externalConnection Is Nothing Then
						dtMember = BRAPi.Database.ExecuteSql(dbConn, srcMemberSql.ToString, False)
					Else
						dtMember = BRAPi.Database.ExecuteSql(dbExtConn, srcMemberSql.ToString, False)
					End If
					
					Dim insertMemberFields As String = ""
					
					For Each dc As DataColumn In dtMember.Columns
						insertMemberFields = insertMemberFields & (dc.ColumnName).ToString & ","
					Next
					
					insertMemberFields = insertMemberFields.remove(insertMemberFields.length - 1)
					
					Dim memberInsert As New Text.StringBuilder
					Dim memberValue As String = ""
					For Each dr As DataRow In dtMember.Rows
						memberValue = "("
						For Each dc As DataColumn In dtMember.Columns
							memberValue = memberValue & "'" & (dr(dc.ColumnName).ToString & "',")
						Next
						memberValue = memberValue.remove(memberValue.Length - 1) & "),"
						memberInsert.append(memberValue)
					Next					
					memberInsert.length = memberInsert.Length - 1
					
					sqlMember.Append("INSERT INTO " & memberTable & " (" & insertMemberFields & ") ")
					sqlMember.Append("VALUES " & memberInsert.tostring)

	                BRApi.Database.ExecuteSql(dbConn, sqlMember.ToString, True)
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
									
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					'Execute srcTreeSql and Insert Results into treeTable	
					Dim dtTree As DataTable
					If externalConnection Is Nothing Then
						dtTree = BRAPi.Database.ExecuteSql(dbConn, srcTreeSql.ToString, False)
					Else
						dtTree = BRAPi.Database.ExecuteSql(dbExtConn, srcTreeSql.ToString, False)
					End If
					
					Dim insertTreeFields As String = ""
					
					For Each dc As DataColumn In dtTree.Columns
						insertTreeFields = insertTreeFields & (dc.ColumnName).ToString & ","
					Next
					
					insertTreeFields = insertTreeFields.remove(insertTreeFields.length - 1)	
								
					Dim treeInsert As New Text.StringBuilder
					Dim treeValue As String = ""
					For Each dr As DataRow In dtTree.Rows
						treeValue = "("
						For Each dc As DataColumn In dtTree.Columns
							treeValue = treeValue & "'" & (dr(dc.ColumnName).ToString & "',")
						Next
						treeValue = treeValue.remove(treeValue.Length - 1) & "),"
						treeInsert.append(treeValue)
					Next		
					treeInsert.Length = treeInsert.Length - 1

					sqlTree.Append("INSERT INTO " & treeTable & " (" & insertTreeFields & ") ")
					sqlTree.Append("VALUES " & treeInsert.tostring)

	                BRApi.Database.ExecuteSql(dbConn, sqlTree.ToString, True)	
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
	            End Using
		                    
	        Catch ex As Exception
	            Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	        End Try
        End Sub
    End Class
End Namespace]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ACM_SourceSystem_Connector_UD3">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.ACM_SourceSystem_Connector_UD3
	Public Class MainClass
        Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
            Try
				Dim sDim As String
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						sDim = args.NameValuePairs("Dimension") 
						PopulateAutomationTables(si, globals, api, args, sDim)	
					Case Is = ExtenderFunctionType.Unknown
						sDim = "UD3"
						PopulateAutomationTables(si, globals, api, args, sDim)
					End Select
			Catch ex As Exception
	            Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	        End Try
			Return Nothing
		End Function			
		Public Sub PopulateAutomationTables(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs, ByVal sDim As String)
			Try
				Dim sqlMember, sqlTree As New Text.StringBuilder
				
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				'**** Change These Variables Accordingly****
				Dim srcMemberTable As String = "Source_Metadata_UD3_Members"
				Dim srcTreeTable As String = "Source_Metadata_UD3_Tree"
				Dim externalConnection As String = "External Database 3"
				Dim dbExtConn As DbConnInfo = Nothing
				If Not externalConnection Is Nothing
					dbExtConn = BRApi.Database.CreateExternalDbConnInfo(si, externalConnection)
				End If
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				'**** Change These Variables Accordingly****
				'Queries to Source System for Member and Tree. 
				Dim srcMemberSql As String = "SELECT 
					Member as Member
					,Text1 as Text1
					,Text2 as Text2
					,Text3 as Text3
					,Text4 as Text4
					,Text5 as Text5
					,Text6 as Text6
					,Text7 as Text7
					,Text8 as Text8
					,Description as Description
					,IsConsolidated as IsConsolidated
					,AllowInput as AllowInput
					,WorkflowChannel as WorkflowChannel
					,InUse as InUse
					,AlternateCurrencyForDisplay as AlternateCurrencyForDisplay
					,AggregationWeight as AggregationWeight

				from " & srcMemberTable	
				
				Dim srcTreeSql As String = "SELECT 
				
				Dimension as Dimension
				,Parent as Parent
				,Child as Child
				,SortOrder as SortOrder
				
				from " & srcTreeTable
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				
				Dim memberTable As String = "XFW_ACM_Metadata" & sDim & "ImportMembers"
				Dim treeTable As String = "XFW_ACM_Metadata" & sDim & "ImportTree"
								
				Using dbConn As DbConnInfoApp = BRApi.Database.CreateApplicationDbConnInfo(si)
	                
					'Clear data from Member and Tree tables.
					BRApi.Database.ExecuteSql(dbConn, "TRUNCATE TABLE " & treeTable, True)
	                BRApi.Database.ExecuteSql(dbConn, "TRUNCATE TABLE " & memberTable, True)					

					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					'Execute srcMemberSql and Insert Results into memberTable
					Dim dtMember As DataTable
					If externalConnection Is Nothing Then
						dtMember = BRAPi.Database.ExecuteSql(dbConn, srcMemberSql.ToString, False)
					Else
						dtMember = BRAPi.Database.ExecuteSql(dbExtConn, srcMemberSql.ToString, False)
					End If
					
					Dim insertMemberFields As String = ""
					
					For Each dc As DataColumn In dtMember.Columns
						insertMemberFields = insertMemberFields & (dc.ColumnName).ToString & ","
					Next
					
					insertMemberFields = insertMemberFields.remove(insertMemberFields.length - 1)
					
					Dim memberInsert As New Text.StringBuilder
					Dim memberValue As String = ""
					For Each dr As DataRow In dtMember.Rows
						memberValue = "("
						For Each dc As DataColumn In dtMember.Columns
							memberValue = memberValue & "'" & (dr(dc.ColumnName).ToString & "',")
						Next
						memberValue = memberValue.remove(memberValue.Length - 1) & "),"
						memberInsert.append(memberValue)
					Next					
					memberInsert.length = memberInsert.Length - 1
					
					sqlMember.Append("INSERT INTO " & memberTable & " (" & insertMemberFields & ") ")
					sqlMember.Append("VALUES " & memberInsert.tostring)

	                BRApi.Database.ExecuteSql(dbConn, sqlMember.ToString, True)
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
									
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					'Execute srcTreeSql and Insert Results into treeTable	
					Dim dtTree As DataTable
					If externalConnection Is Nothing Then
						dtTree = BRAPi.Database.ExecuteSql(dbConn, srcTreeSql.ToString, False)
					Else
						dtTree = BRAPi.Database.ExecuteSql(dbExtConn, srcTreeSql.ToString, False)
					End If
					
					Dim insertTreeFields As String = ""
					
					For Each dc As DataColumn In dtTree.Columns
						insertTreeFields = insertTreeFields & (dc.ColumnName).ToString & ","
					Next
					
					insertTreeFields = insertTreeFields.remove(insertTreeFields.length - 1)	
								
					Dim treeInsert As New Text.StringBuilder
					Dim treeValue As String = ""
					For Each dr As DataRow In dtTree.Rows
						treeValue = "("
						For Each dc As DataColumn In dtTree.Columns
							treeValue = treeValue & "'" & (dr(dc.ColumnName).ToString & "',")
						Next
						treeValue = treeValue.remove(treeValue.Length - 1) & "),"
						treeInsert.append(treeValue)
					Next		
					treeInsert.Length = treeInsert.Length - 1

					sqlTree.Append("INSERT INTO " & treeTable & " (" & insertTreeFields & ") ")
					sqlTree.Append("VALUES " & treeInsert.tostring)

	                BRApi.Database.ExecuteSql(dbConn, sqlTree.ToString, True)	
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
	            End Using
		                    
	        Catch ex As Exception
	            Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	        End Try
        End Sub
    End Class
End Namespace]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ACM_SourceSystem_Connector_UD4">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.ACM_SourceSystem_Connector_UD4
	Public Class MainClass
        Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
            Try
				Dim sDim As String
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						sDim = args.NameValuePairs("Dimension") 
						PopulateAutomationTables(si, globals, api, args, sDim)	
					Case Is = ExtenderFunctionType.Unknown
						sDim = "UD4"
						PopulateAutomationTables(si, globals, api, args, sDim)
					End Select
			Catch ex As Exception
	            Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	        End Try
			Return Nothing
		End Function			
		Public Sub PopulateAutomationTables(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs, ByVal sDim As String)
			Try
				Dim sqlMember, sqlTree As New Text.StringBuilder
				
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				'**** Change These Variables Accordingly****
				Dim srcMemberTable As String = "Source_Metadata_UD4_Members"
				Dim srcTreeTable As String = "Source_Metadata_UD4_Tree"
				Dim externalConnection As String = "External Database 3"
				Dim dbExtConn As DbConnInfo = Nothing
				If Not externalConnection Is Nothing
					dbExtConn = BRApi.Database.CreateExternalDbConnInfo(si, externalConnection)
				End If
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				'**** Change These Variables Accordingly****
				'Queries to Source System for Member and Tree. 
				Dim srcMemberSql As String = "SELECT 
					Member as Member
					,Text1 as Text1
					,Text2 as Text2
					,Text3 as Text3
					,Text4 as Text4
					,Text5 as Text5
					,Text6 as Text6
					,Text7 as Text7
					,Text8 as Text8
					,Description as Description
					,IsConsolidated as IsConsolidated
					,AllowInput as AllowInput
					,WorkflowChannel as WorkflowChannel
					,InUse as InUse
					,AlternateCurrencyForDisplay as AlternateCurrencyForDisplay
					,AggregationWeight as AggregationWeight

				from " & srcMemberTable	
				
				Dim srcTreeSql As String = "SELECT 
				
				Dimension as Dimension
				,Parent as Parent
				,Child as Child
				,SortOrder as SortOrder
				
				from " & srcTreeTable
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				
				Dim memberTable As String = "XFW_ACM_Metadata" & sDim & "ImportMembers"
				Dim treeTable As String = "XFW_ACM_Metadata" & sDim & "ImportTree"
								
				Using dbConn As DbConnInfoApp = BRApi.Database.CreateApplicationDbConnInfo(si)
	                
					'Clear data from Member and Tree tables.
					BRApi.Database.ExecuteSql(dbConn, "TRUNCATE TABLE " & treeTable, True)
	                BRApi.Database.ExecuteSql(dbConn, "TRUNCATE TABLE " & memberTable, True)					

					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					'Execute srcMemberSql and Insert Results into memberTable
					Dim dtMember As DataTable
					If externalConnection Is Nothing Then
						dtMember = BRAPi.Database.ExecuteSql(dbConn, srcMemberSql.ToString, False)
					Else
						dtMember = BRAPi.Database.ExecuteSql(dbExtConn, srcMemberSql.ToString, False)
					End If
					
					Dim insertMemberFields As String = ""
					
					For Each dc As DataColumn In dtMember.Columns
						insertMemberFields = insertMemberFields & (dc.ColumnName).ToString & ","
					Next
					
					insertMemberFields = insertMemberFields.remove(insertMemberFields.length - 1)
					
					Dim memberInsert As New Text.StringBuilder
					Dim memberValue As String = ""
					For Each dr As DataRow In dtMember.Rows
						memberValue = "("
						For Each dc As DataColumn In dtMember.Columns
							memberValue = memberValue & "'" & (dr(dc.ColumnName).ToString & "',")
						Next
						memberValue = memberValue.remove(memberValue.Length - 1) & "),"
						memberInsert.append(memberValue)
					Next					
					memberInsert.length = memberInsert.Length - 1
					
					sqlMember.Append("INSERT INTO " & memberTable & " (" & insertMemberFields & ") ")
					sqlMember.Append("VALUES " & memberInsert.tostring)

	                BRApi.Database.ExecuteSql(dbConn, sqlMember.ToString, True)
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
									
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					'Execute srcTreeSql and Insert Results into treeTable	
					Dim dtTree As DataTable
					If externalConnection Is Nothing Then
						dtTree = BRAPi.Database.ExecuteSql(dbConn, srcTreeSql.ToString, False)
					Else
						dtTree = BRAPi.Database.ExecuteSql(dbExtConn, srcTreeSql.ToString, False)
					End If
					
					Dim insertTreeFields As String = ""
					
					For Each dc As DataColumn In dtTree.Columns
						insertTreeFields = insertTreeFields & (dc.ColumnName).ToString & ","
					Next
					
					insertTreeFields = insertTreeFields.remove(insertTreeFields.length - 1)	
								
					Dim treeInsert As New Text.StringBuilder
					Dim treeValue As String = ""
					For Each dr As DataRow In dtTree.Rows
						treeValue = "("
						For Each dc As DataColumn In dtTree.Columns
							treeValue = treeValue & "'" & (dr(dc.ColumnName).ToString & "',")
						Next
						treeValue = treeValue.remove(treeValue.Length - 1) & "),"
						treeInsert.append(treeValue)
					Next		
					treeInsert.Length = treeInsert.Length - 1

					sqlTree.Append("INSERT INTO " & treeTable & " (" & insertTreeFields & ") ")
					sqlTree.Append("VALUES " & treeInsert.tostring)

	                BRApi.Database.ExecuteSql(dbConn, sqlTree.ToString, True)	
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
	            End Using
		                    
	        Catch ex As Exception
	            Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	        End Try
        End Sub
    End Class
End Namespace]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ACM_SourceSystem_Connector_UD5">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.ACM_SourceSystem_Connector_UD5
	Public Class MainClass
        Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
            Try
				Dim sDim As String
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						sDim = args.NameValuePairs("Dimension") 
						PopulateAutomationTables(si, globals, api, args, sDim)	
					Case Is = ExtenderFunctionType.Unknown
						sDim = "UD5"
						PopulateAutomationTables(si, globals, api, args, sDim)
					End Select
			Catch ex As Exception
	            Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	        End Try
			Return Nothing
		End Function			
		Public Sub PopulateAutomationTables(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs, ByVal sDim As String)
			Try
				Dim sqlMember, sqlTree As New Text.StringBuilder
				
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				'**** Change These Variables Accordingly****
				Dim srcMemberTable As String = "Source_Metadata_UD5_Members"
				Dim srcTreeTable As String = "Source_Metadata_UD5_Tree"
				Dim externalConnection As String = "External Database 3"
				Dim dbExtConn As DbConnInfo = Nothing
				If Not externalConnection Is Nothing
					dbExtConn = BRApi.Database.CreateExternalDbConnInfo(si, externalConnection)
				End If
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				'**** Change These Variables Accordingly****
				'Queries to Source System for Member and Tree. 
				Dim srcMemberSql As String = "SELECT 
					Member as Member
					,Text1 as Text1
					,Text2 as Text2
					,Text3 as Text3
					,Text4 as Text4
					,Text5 as Text5
					,Text6 as Text6
					,Text7 as Text7
					,Text8 as Text8
					,Description as Description
					,IsConsolidated as IsConsolidated
					,AllowInput as AllowInput
					,WorkflowChannel as WorkflowChannel
					,InUse as InUse
					,AlternateCurrencyForDisplay as AlternateCurrencyForDisplay
					,AggregationWeight as AggregationWeight

				from " & srcMemberTable	
				
				Dim srcTreeSql As String = "SELECT 
				
				Dimension as Dimension
				,Parent as Parent
				,Child as Child
				,SortOrder as SortOrder
				
				from " & srcTreeTable
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				
				Dim memberTable As String = "XFW_ACM_Metadata" & sDim & "ImportMembers"
				Dim treeTable As String = "XFW_ACM_Metadata" & sDim & "ImportTree"
								
				Using dbConn As DbConnInfoApp = BRApi.Database.CreateApplicationDbConnInfo(si)
	                
					'Clear data from Member and Tree tables.
					BRApi.Database.ExecuteSql(dbConn, "TRUNCATE TABLE " & treeTable, True)
	                BRApi.Database.ExecuteSql(dbConn, "TRUNCATE TABLE " & memberTable, True)					

					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					'Execute srcMemberSql and Insert Results into memberTable
					Dim dtMember As DataTable
					If externalConnection Is Nothing Then
						dtMember = BRAPi.Database.ExecuteSql(dbConn, srcMemberSql.ToString, False)
					Else
						dtMember = BRAPi.Database.ExecuteSql(dbExtConn, srcMemberSql.ToString, False)
					End If
					
					Dim insertMemberFields As String = ""
					
					For Each dc As DataColumn In dtMember.Columns
						insertMemberFields = insertMemberFields & (dc.ColumnName).ToString & ","
					Next
					
					insertMemberFields = insertMemberFields.remove(insertMemberFields.length - 1)
					
					Dim memberInsert As New Text.StringBuilder
					Dim memberValue As String = ""
					For Each dr As DataRow In dtMember.Rows
						memberValue = "("
						For Each dc As DataColumn In dtMember.Columns
							memberValue = memberValue & "'" & (dr(dc.ColumnName).ToString & "',")
						Next
						memberValue = memberValue.remove(memberValue.Length - 1) & "),"
						memberInsert.append(memberValue)
					Next					
					memberInsert.length = memberInsert.Length - 1
					
					sqlMember.Append("INSERT INTO " & memberTable & " (" & insertMemberFields & ") ")
					sqlMember.Append("VALUES " & memberInsert.tostring)

	                BRApi.Database.ExecuteSql(dbConn, sqlMember.ToString, True)
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
									
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					'Execute srcTreeSql and Insert Results into treeTable	
					Dim dtTree As DataTable
					If externalConnection Is Nothing Then
						dtTree = BRAPi.Database.ExecuteSql(dbConn, srcTreeSql.ToString, False)
					Else
						dtTree = BRAPi.Database.ExecuteSql(dbExtConn, srcTreeSql.ToString, False)
					End If
					
					Dim insertTreeFields As String = ""
					
					For Each dc As DataColumn In dtTree.Columns
						insertTreeFields = insertTreeFields & (dc.ColumnName).ToString & ","
					Next
					
					insertTreeFields = insertTreeFields.remove(insertTreeFields.length - 1)	
								
					Dim treeInsert As New Text.StringBuilder
					Dim treeValue As String = ""
					For Each dr As DataRow In dtTree.Rows
						treeValue = "("
						For Each dc As DataColumn In dtTree.Columns
							treeValue = treeValue & "'" & (dr(dc.ColumnName).ToString & "',")
						Next
						treeValue = treeValue.remove(treeValue.Length - 1) & "),"
						treeInsert.append(treeValue)
					Next		
					treeInsert.Length = treeInsert.Length - 1

					sqlTree.Append("INSERT INTO " & treeTable & " (" & insertTreeFields & ") ")
					sqlTree.Append("VALUES " & treeInsert.tostring)

	                BRApi.Database.ExecuteSql(dbConn, sqlTree.ToString, True)	
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
	            End Using
		                    
	        Catch ex As Exception
	            Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	        End Try
        End Sub
    End Class
End Namespace]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ACM_SourceSystem_Connector_UD6">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.ACM_SourceSystem_Connector_UD6
	Public Class MainClass
        Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
            Try
				Dim sDim As String
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						sDim = args.NameValuePairs("Dimension") 
						PopulateAutomationTables(si, globals, api, args, sDim)	
					Case Is = ExtenderFunctionType.Unknown
						sDim = "UD6"
						PopulateAutomationTables(si, globals, api, args, sDim)
					End Select
			Catch ex As Exception
	            Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	        End Try
			Return Nothing
		End Function			
		Public Sub PopulateAutomationTables(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs, ByVal sDim As String)
			Try
				Dim sqlMember, sqlTree As New Text.StringBuilder
				
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				'**** Change These Variables Accordingly****
				Dim srcMemberTable As String = "Source_Metadata_UD6_Members"
				Dim srcTreeTable As String = "Source_Metadata_UD6_Tree"
				Dim externalConnection As String = "External Database 3"
				Dim dbExtConn As DbConnInfo = Nothing
				If Not externalConnection Is Nothing
					dbExtConn = BRApi.Database.CreateExternalDbConnInfo(si, externalConnection)
				End If
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				'**** Change These Variables Accordingly****
				'Queries to Source System for Member and Tree. 
				Dim srcMemberSql As String = "SELECT 
					Member as Member
					,Text1 as Text1
					,Text2 as Text2
					,Text3 as Text3
					,Text4 as Text4
					,Text5 as Text5
					,Text6 as Text6
					,Text7 as Text7
					,Text8 as Text8
					,Description as Description
					,IsConsolidated as IsConsolidated
					,AllowInput as AllowInput
					,WorkflowChannel as WorkflowChannel
					,InUse as InUse
					,AlternateCurrencyForDisplay as AlternateCurrencyForDisplay
					,AggregationWeight as AggregationWeight

				from " & srcMemberTable	
				
				Dim srcTreeSql As String = "SELECT 
				
				Dimension as Dimension
				,Parent as Parent
				,Child as Child
				,SortOrder as SortOrder
				
				from " & srcTreeTable
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				
				Dim memberTable As String = "XFW_ACM_Metadata" & sDim & "ImportMembers"
				Dim treeTable As String = "XFW_ACM_Metadata" & sDim & "ImportTree"
								
				Using dbConn As DbConnInfoApp = BRApi.Database.CreateApplicationDbConnInfo(si)
	                
					'Clear data from Member and Tree tables.
					BRApi.Database.ExecuteSql(dbConn, "TRUNCATE TABLE " & treeTable, True)
	                BRApi.Database.ExecuteSql(dbConn, "TRUNCATE TABLE " & memberTable, True)					

					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					'Execute srcMemberSql and Insert Results into memberTable
					Dim dtMember As DataTable
					If externalConnection Is Nothing Then
						dtMember = BRAPi.Database.ExecuteSql(dbConn, srcMemberSql.ToString, False)
					Else
						dtMember = BRAPi.Database.ExecuteSql(dbExtConn, srcMemberSql.ToString, False)
					End If
					
					Dim insertMemberFields As String = ""
					
					For Each dc As DataColumn In dtMember.Columns
						insertMemberFields = insertMemberFields & (dc.ColumnName).ToString & ","
					Next
					
					insertMemberFields = insertMemberFields.remove(insertMemberFields.length - 1)
					
					Dim memberInsert As New Text.StringBuilder
					Dim memberValue As String = ""
					For Each dr As DataRow In dtMember.Rows
						memberValue = "("
						For Each dc As DataColumn In dtMember.Columns
							memberValue = memberValue & "'" & (dr(dc.ColumnName).ToString & "',")
						Next
						memberValue = memberValue.remove(memberValue.Length - 1) & "),"
						memberInsert.append(memberValue)
					Next					
					memberInsert.length = memberInsert.Length - 1
					
					sqlMember.Append("INSERT INTO " & memberTable & " (" & insertMemberFields & ") ")
					sqlMember.Append("VALUES " & memberInsert.tostring)

	                BRApi.Database.ExecuteSql(dbConn, sqlMember.ToString, True)
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
									
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					'Execute srcTreeSql and Insert Results into treeTable	
					Dim dtTree As DataTable
					If externalConnection Is Nothing Then
						dtTree = BRAPi.Database.ExecuteSql(dbConn, srcTreeSql.ToString, False)
					Else
						dtTree = BRAPi.Database.ExecuteSql(dbExtConn, srcTreeSql.ToString, False)
					End If
					
					Dim insertTreeFields As String = ""
					
					For Each dc As DataColumn In dtTree.Columns
						insertTreeFields = insertTreeFields & (dc.ColumnName).ToString & ","
					Next
					
					insertTreeFields = insertTreeFields.remove(insertTreeFields.length - 1)	
								
					Dim treeInsert As New Text.StringBuilder
					Dim treeValue As String = ""
					For Each dr As DataRow In dtTree.Rows
						treeValue = "("
						For Each dc As DataColumn In dtTree.Columns
							treeValue = treeValue & "'" & (dr(dc.ColumnName).ToString & "',")
						Next
						treeValue = treeValue.remove(treeValue.Length - 1) & "),"
						treeInsert.append(treeValue)
					Next		
					treeInsert.Length = treeInsert.Length - 1

					sqlTree.Append("INSERT INTO " & treeTable & " (" & insertTreeFields & ") ")
					sqlTree.Append("VALUES " & treeInsert.tostring)

	                BRApi.Database.ExecuteSql(dbConn, sqlTree.ToString, True)	
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
	            End Using
		                    
	        Catch ex As Exception
	            Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	        End Try
        End Sub
    End Class
End Namespace]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ACM_SourceSystem_Connector_UD7">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.ACM_SourceSystem_Connector_UD7
	Public Class MainClass
        Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
            Try
				Dim sDim As String
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						sDim = args.NameValuePairs("Dimension") 
						PopulateAutomationTables(si, globals, api, args, sDim)	
					Case Is = ExtenderFunctionType.Unknown
						sDim = "UD7"
						PopulateAutomationTables(si, globals, api, args, sDim)
					End Select
			Catch ex As Exception
	            Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	        End Try
			Return Nothing
		End Function			
		Public Sub PopulateAutomationTables(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs, ByVal sDim As String)
			Try
				Dim sqlMember, sqlTree As New Text.StringBuilder
				
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				'**** Change These Variables Accordingly****
				Dim srcMemberTable As String = "Source_Metadata_UD7_Members"
				Dim srcTreeTable As String = "Source_Metadata_UD7_Tree"
				Dim externalConnection As String = "External Database 3"
				Dim dbExtConn As DbConnInfo = Nothing
				If Not externalConnection Is Nothing
					dbExtConn = BRApi.Database.CreateExternalDbConnInfo(si, externalConnection)
				End If
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				'**** Change These Variables Accordingly****
				'Queries to Source System for Member and Tree. 
				Dim srcMemberSql As String = "SELECT 
					Member as Member
					,Text1 as Text1
					,Text2 as Text2
					,Text3 as Text3
					,Text4 as Text4
					,Text5 as Text5
					,Text6 as Text6
					,Text7 as Text7
					,Text8 as Text8
					,Description as Description
					,IsConsolidated as IsConsolidated
					,AllowInput as AllowInput
					,WorkflowChannel as WorkflowChannel
					,InUse as InUse
					,AlternateCurrencyForDisplay as AlternateCurrencyForDisplay
					,AggregationWeight as AggregationWeight

				from " & srcMemberTable	
				
				Dim srcTreeSql As String = "SELECT 
				
				Dimension as Dimension
				,Parent as Parent
				,Child as Child
				,SortOrder as SortOrder
				
				from " & srcTreeTable
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				
				Dim memberTable As String = "XFW_ACM_Metadata" & sDim & "ImportMembers"
				Dim treeTable As String = "XFW_ACM_Metadata" & sDim & "ImportTree"
								
				Using dbConn As DbConnInfoApp = BRApi.Database.CreateApplicationDbConnInfo(si)
	                
					'Clear data from Member and Tree tables.
					BRApi.Database.ExecuteSql(dbConn, "TRUNCATE TABLE " & treeTable, True)
	                BRApi.Database.ExecuteSql(dbConn, "TRUNCATE TABLE " & memberTable, True)					

					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					'Execute srcMemberSql and Insert Results into memberTable
					Dim dtMember As DataTable
					If externalConnection Is Nothing Then
						dtMember = BRAPi.Database.ExecuteSql(dbConn, srcMemberSql.ToString, False)
					Else
						dtMember = BRAPi.Database.ExecuteSql(dbExtConn, srcMemberSql.ToString, False)
					End If
					
					Dim insertMemberFields As String = ""
					
					For Each dc As DataColumn In dtMember.Columns
						insertMemberFields = insertMemberFields & (dc.ColumnName).ToString & ","
					Next
					
					insertMemberFields = insertMemberFields.remove(insertMemberFields.length - 1)
					
					Dim memberInsert As New Text.StringBuilder
					Dim memberValue As String = ""
					For Each dr As DataRow In dtMember.Rows
						memberValue = "("
						For Each dc As DataColumn In dtMember.Columns
							memberValue = memberValue & "'" & (dr(dc.ColumnName).ToString & "',")
						Next
						memberValue = memberValue.remove(memberValue.Length - 1) & "),"
						memberInsert.append(memberValue)
					Next					
					memberInsert.length = memberInsert.Length - 1
					
					sqlMember.Append("INSERT INTO " & memberTable & " (" & insertMemberFields & ") ")
					sqlMember.Append("VALUES " & memberInsert.tostring)

	                BRApi.Database.ExecuteSql(dbConn, sqlMember.ToString, True)
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
									
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					'Execute srcTreeSql and Insert Results into treeTable	
					Dim dtTree As DataTable
					If externalConnection Is Nothing Then
						dtTree = BRAPi.Database.ExecuteSql(dbConn, srcTreeSql.ToString, False)
					Else
						dtTree = BRAPi.Database.ExecuteSql(dbExtConn, srcTreeSql.ToString, False)
					End If
					
					Dim insertTreeFields As String = ""
					
					For Each dc As DataColumn In dtTree.Columns
						insertTreeFields = insertTreeFields & (dc.ColumnName).ToString & ","
					Next
					
					insertTreeFields = insertTreeFields.remove(insertTreeFields.length - 1)	
								
					Dim treeInsert As New Text.StringBuilder
					Dim treeValue As String = ""
					For Each dr As DataRow In dtTree.Rows
						treeValue = "("
						For Each dc As DataColumn In dtTree.Columns
							treeValue = treeValue & "'" & (dr(dc.ColumnName).ToString & "',")
						Next
						treeValue = treeValue.remove(treeValue.Length - 1) & "),"
						treeInsert.append(treeValue)
					Next		
					treeInsert.Length = treeInsert.Length - 1

					sqlTree.Append("INSERT INTO " & treeTable & " (" & insertTreeFields & ") ")
					sqlTree.Append("VALUES " & treeInsert.tostring)

	                BRApi.Database.ExecuteSql(dbConn, sqlTree.ToString, True)	
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
	            End Using
		                    
	        Catch ex As Exception
	            Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	        End Try
        End Sub
    End Class
End Namespace]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ACM_SourceSystem_Connector_UD8">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.ACM_SourceSystem_Connector_UD8
	Public Class MainClass
        Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
            Try
				Dim sDim As String
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						sDim = args.NameValuePairs("Dimension") 
						PopulateAutomationTables(si, globals, api, args, sDim)	
					Case Is = ExtenderFunctionType.Unknown
						sDim = "UD8"
						PopulateAutomationTables(si, globals, api, args, sDim)
					End Select
			Catch ex As Exception
	            Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	        End Try
			Return Nothing
		End Function			
		Public Sub PopulateAutomationTables(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs, ByVal sDim As String)
			Try
				Dim sqlMember, sqlTree As New Text.StringBuilder
				
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				'**** Change These Variables Accordingly****
				Dim srcMemberTable As String = "Source_Metadata_UD8_Members"
				Dim srcTreeTable As String = "Source_Metadata_UD8_Tree"
				Dim externalConnection As String = "External Database 3"
				Dim dbExtConn As DbConnInfo = Nothing
				If Not externalConnection Is Nothing
					dbExtConn = BRApi.Database.CreateExternalDbConnInfo(si, externalConnection)
				End If
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				'**** Change These Variables Accordingly****
				'Queries to Source System for Member and Tree. 
				Dim srcMemberSql As String = "SELECT 
					Member as Member
					,Text1 as Text1
					,Text2 as Text2
					,Text3 as Text3
					,Text4 as Text4
					,Text5 as Text5
					,Text6 as Text6
					,Text7 as Text7
					,Text8 as Text8
					,Description as Description
					,IsConsolidated as IsConsolidated
					,AllowInput as AllowInput
					,WorkflowChannel as WorkflowChannel
					,InUse as InUse
					,AlternateCurrencyForDisplay as AlternateCurrencyForDisplay
					,AggregationWeight as AggregationWeight

				from " & srcMemberTable	
				
				Dim srcTreeSql As String = "SELECT 
				
				Dimension as Dimension
				,Parent as Parent
				,Child as Child
				,SortOrder as SortOrder
				
				from " & srcTreeTable
				'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				
				Dim memberTable As String = "XFW_ACM_Metadata" & sDim & "ImportMembers"
				Dim treeTable As String = "XFW_ACM_Metadata" & sDim & "ImportTree"
								
				Using dbConn As DbConnInfoApp = BRApi.Database.CreateApplicationDbConnInfo(si)
	                
					'Clear data from Member and Tree tables.
					BRApi.Database.ExecuteSql(dbConn, "TRUNCATE TABLE " & treeTable, True)
	                BRApi.Database.ExecuteSql(dbConn, "TRUNCATE TABLE " & memberTable, True)					

					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					'Execute srcMemberSql and Insert Results into memberTable
					Dim dtMember As DataTable
					If externalConnection Is Nothing Then
						dtMember = BRAPi.Database.ExecuteSql(dbConn, srcMemberSql.ToString, False)
					Else
						dtMember = BRAPi.Database.ExecuteSql(dbExtConn, srcMemberSql.ToString, False)
					End If
					
					Dim insertMemberFields As String = ""
					
					For Each dc As DataColumn In dtMember.Columns
						insertMemberFields = insertMemberFields & (dc.ColumnName).ToString & ","
					Next
					
					insertMemberFields = insertMemberFields.remove(insertMemberFields.length - 1)
					
					Dim memberInsert As New Text.StringBuilder
					Dim memberValue As String = ""
					For Each dr As DataRow In dtMember.Rows
						memberValue = "("
						For Each dc As DataColumn In dtMember.Columns
							memberValue = memberValue & "'" & (dr(dc.ColumnName).ToString & "',")
						Next
						memberValue = memberValue.remove(memberValue.Length - 1) & "),"
						memberInsert.append(memberValue)
					Next					
					memberInsert.length = memberInsert.Length - 1
					
					sqlMember.Append("INSERT INTO " & memberTable & " (" & insertMemberFields & ") ")
					sqlMember.Append("VALUES " & memberInsert.tostring)

	                BRApi.Database.ExecuteSql(dbConn, sqlMember.ToString, True)
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
									
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					'Execute srcTreeSql and Insert Results into treeTable	
					Dim dtTree As DataTable
					If externalConnection Is Nothing Then
						dtTree = BRAPi.Database.ExecuteSql(dbConn, srcTreeSql.ToString, False)
					Else
						dtTree = BRAPi.Database.ExecuteSql(dbExtConn, srcTreeSql.ToString, False)
					End If
					
					Dim insertTreeFields As String = ""
					
					For Each dc As DataColumn In dtTree.Columns
						insertTreeFields = insertTreeFields & (dc.ColumnName).ToString & ","
					Next
					
					insertTreeFields = insertTreeFields.remove(insertTreeFields.length - 1)	
								
					Dim treeInsert As New Text.StringBuilder
					Dim treeValue As String = ""
					For Each dr As DataRow In dtTree.Rows
						treeValue = "("
						For Each dc As DataColumn In dtTree.Columns
							treeValue = treeValue & "'" & (dr(dc.ColumnName).ToString & "',")
						Next
						treeValue = treeValue.remove(treeValue.Length - 1) & "),"
						treeInsert.append(treeValue)
					Next		
					treeInsert.Length = treeInsert.Length - 1

					sqlTree.Append("INSERT INTO " & treeTable & " (" & insertTreeFields & ") ")
					sqlTree.Append("VALUES " & treeInsert.tostring)

	                BRApi.Database.ExecuteSql(dbConn, sqlTree.ToString, True)	
					'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			
	            End Using
		                    
	        Catch ex As Exception
	            Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	        End Try
        End Sub
    End Class
End Namespace]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ACM_Test_Configuration">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.ACM_Test_Configuration
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Dim globalParameterTableName As String = "XFT_Global_Parameters"
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
						Dim appName As String = "Walmart_Prod"
						Dim emailDist As String = "jaimie.stephens@walmart.com,Angela.Wilcox0@walmart.com"
						
						Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							
							Dim sql As String = $"INSERT INTO {globalParameterTableName} (Module,AppName,ParmName,Action,SeqNum,ParmValue,UpdateTime,UpdateBy) 
												   VALUES 
													('ACM','{appName}','EmailDist','',0,'{emailDist}','{Now}','{si.UserName}'),
													('ACM','{appName}','EmailDistErr','',0,'{emailDist}','{Now}','{si.UserName}'),
													('ACM','{appName}','EmailSvr','',0,'WalmartSMTP','{Now}','{si.UserName}'),
													('ACM','{appName}','Endpoint','',0,'https://fcp-os-mesh-gcp-01-stage.fin-dpa-fcp.k8s.glb.us.walmart.net/','{Now}','{si.UserName}'),
													('ACM','{appName}','OkToRun','',0,'True','{Now}','{si.UserName}'),
													('ACM','{appName}','OkToRunAutoReset','',0,'False','{Now}','{si.UserName}'),
													('ACM','{appName}','ACM_EntitySource','FieldList',0,'OS_PARENT,OS_NM,DIMENSION_DESC,TXT1,TXT2,TXT3,TXT4,TXT5,TXT6,TXT7,TXT8,CRNCY,IN_USE,ALLOW_ADJ,DISP_MBR_GRP,READ_DATA_GRP,READ_DATA_GRP2,READ_WRITE_DATA_GRP,READ_WRITE_DATA_GRP2,MBR_DIMENSION,SORT_ORDER','{Now}','{si.UserName}'),
													('ACM','{appName}','ACM_UD3Source','FieldList',0,'OS_PARENT,OS_NM,DIMENSION_DESC,TXT1,TXT2,TXT3,TXT4,TXT5,TXT6,TXT7,TXT8,IS_CONSOLIDATE,ALLOW_INPUT,IN_USE,DISP_MBR_GRP,MBR_DIMENSION,SORT_ORDER','{Now}','{si.UserName}'),
													('ACM','{appName}','EntitySource','Entity',0,'WMTUS','{Now}','{si.UserName}'),
													('ACM','{appName}','UD3Source','Channel',0,'Channel,Channel_WMTUS,Channel_SAMS','{Now}','{si.UserName}')"
							
							BRApi.Database.ExecuteSql(dbConn,sql,False)
							
						End Using
						
'					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
'					Case Is = ExtenderFunctionType.ExecuteExternalDimensionSource
'						'Add External Members
'						Dim externalMembers As New List(Of NameValuePair)
'						externalMembers.Add(New NameValuePair("YourMember1Name","YourMember1Value"))
'						externalMembers.Add(New NameValuePair("YourMember2Name","YourMember2Value"))
'						Return externalMembers
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ACM_Test_Connector">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="FCP_GET_ACM" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
Imports Newtonsoft.Json.JsonPropertyAttribute

'Imports OneStream.BusinessRule.Extender.Fcp_Integration_Utility
Imports OneStream.BusinessRule.Extender.OS_Models

Namespace OneStream.BusinessRule.Extender.ACM_Test_Connector
	Public Class MainClass
		
		Dim detailedLogging As Boolean = True
		Dim detailedLog As String = "Test Connector"
		Dim globalParameterTableName As String = "XFT_Global_Parameters"
		Dim moduleName As String = "FCP_OS_DIM_HIER_PROPERTIES"
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			
			'Dim acmConnector As OneStream.BusinessRule.Connector.ACM_Custom_Connector.MainClass
			Try	
				'Dim endpoint As String = ""
				Dim dimType As String = ""
				Dim dimName As String = ""
				Dim appName As String = ""
				Dim dataSourceName As String = ""	
				
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.Unknown
						
						'MANUAL PARAMTERS
						'endpoint = "https://fcp-os-mesh-gcp-01-stage.fin-dpa-fcp.k8s.glb.us.walmart.net/"
						dimType = "Entity"
						dimName = ""
						appName = "SAMS_PROD"
						dataSourceName = "ACM_EntitySource"
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						'DATA MANAGEMENT PARAMETERS
						'endpoint = args.NameValuePairs.XFGetValue("Endpoint")
						dimType = args.NameValuePairs.XFGetValue("DimType","")
						dimName = args.NameValuePairs.XFGetValue("DimName","")
						appName = args.NameValuePairs.XFGetValue("AppName","")
						dataSourceName = args.NameValuePairs.XFGetValue("DataSource")
						If dimName = "|!DimName!|" Then dimName = ""
						If dimType = "|!DimType!|" Then dimType = ""
						if appName = "|!AppName!|" then appName = ""
				End Select
				
				'GET RAW DATATABLE FROM FCP
				Dim testConnector As New OneStream.BusinessRule.Connector.FCP_GET_ACM.MainClass
				
				'Verify FCP configuration configuration
				Dim sqlVerify As String = $"Select [ParmName] FROM {globalParameterTableName} Where Module = '{moduleName}' AND AppName = '{si.AppName}' ORDER BY ParmName, Action, SeqNum"
				Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					Dim dtVerify As DataTable = BRApi.Database.ExecuteSql(dbConn,sqlVerify,False)
					If dtVerify Is Nothing Then
						log(si," ACM FCP Connection credentials are not set!")
						Throw New Exception($"{vbnewline}{vbnewline}ACM FCP Connection credentials are not set!{vbnewline}The following parameters are missing: ConsumerID, EmailDist, JSONEndPoint, SvcEnv, SvcName.")
					End If
					If dtVerify.Rows.Count = 0 Then
						log(si," ACM FCP Connection credentials are not set!")
						Throw New Exception($"{vbnewline}{vbnewline}ACM FCP Connection credentials are not set!{vbnewline}The following parameters are missing: ConsumerID, EmailDist, JSONEndPoint, SvcEnv, SvcName.")								
					End If
					If dtVerify.Rows.Count < 5 Then
						Dim missingConfigs As New list(Of String)
						If dtVerify.Select("ParmName='ConsumerID'").Count = 0 Then
							missingConfigs.Add("ConsumerID")
						End If
						If dtVerify.Select("ParmName='EmailDist'").Count = 0 Then
							missingConfigs.Add("EmailDist")
						End If		
						If dtVerify.Select("ParmName='JSONEndPoint'").Count = 0 Then
							missingConfigs.Add("JSONEndPoint")
						End If							
						If dtVerify.Select("ParmName='SvcEnv'").Count = 0 Then
							missingConfigs.Add("SvcEnv")
						End If	
						If dtVerify.Select("ParmName='SvcName'").Count = 0 Then
							missingConfigs.Add("SvcName")
						End If								
						Throw New Exception($"{vbnewline}{vbnewline}ACM FCP Connection credentials are not complete!{vbnewline}The following parameters are missing: {string.Join(",",missingConfigs)}")	
					End If		
					'brapi.ErrorLog.LogMessage(si,"jrs " & dtVerify.Rows.Count.ToString)
				End Using
						
				'brapi.ErrorLog.LogMessage(si,"jrs-1")
				'Dim dtOutline As DataTable = testConnector.GetMetadataFromFCP(si,api,endpoint,appName,dimType,dimName)
				Dim dtOutline As DataTable = testConnector.GetMetadataFromFCP(si,api,appName,dimType,dimName)
				Log(si,testConnector.GetConnectionLog())
				'brapi.ErrorLog.LogMessage(si,"jrs-2")
				'DROP TABLE
				Dim tbl As String = "XFW_ACM_FCP"
				Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					brapi.Database.ExecuteSql(dbConn,$"IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = '{tbl}')) BEGIN DROP TABLE [dbo].[{tbl}] END",False)
				End Using				
				'brapi.ErrorLog.LogMessage(si,"jrs-3")
				'WRITE DATA TABLE TO ADMIN FOLDER FOR EVALUATION
				If dtOutline IsNot Nothing AndAlso dtOutline.Rows.Count > 0 Then
					'brapi.ErrorLog.LogMessage(si,"jrs-4")
					Log(si,"Dt count: " & dtOutline.Rows.Count)
					
					'CREATE TABLE
					Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
						Dim sql As String = $"IF NOT (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = '{tbl}'))
												BEGIN SET ANSI_NULLS ON SET QUOTED_IDENTIFIER ON CREATE TABLE [dbo].[{tbl}]("
						For Each c As DataColumn In dtOutline.Columns
							sql += "[" & c.ColumnName & "] [varchar](max) NULL,"
						Next
						sql += ") ON [PRIMARY] END"
						'brapi.ErrorLog.LogMessage(si,"jrs-7: " & sql)
						brapi.Database.ExecuteSql(dbConn,sql,False)
					End Using	

					'SAVE FCP QUERY RESULTS TO TABLE
					brapi.Database.SaveCustomDataTable(si,dbLocation.Application.ToString,tbl,dtOutline,True)
		
				Else
					brapi.ErrorLog.LogMessage(si,"jrs-5")
					Log(si,"No data found")
					Return Nothing
				End If
				
'				'TEST CLEANING THE DATA AND WRITE RESULTING FILE TO ADMIN FOLDER
'				testConnector.CleanDataTable(si,dataSourceName,dtOutline)						
'				WriteDataTableToAdminFile(si,dtOutline,"FCP_CLEANED_TEST.csv")
				
'				'FINAL NOTE
'				Log(si,"Test Complete. Check admin folder for test files.")

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			Finally
				brapi.ErrorLog.LogMessage(si,detailedLog)
			End Try
		End Function

		Public Sub WriteDataTableToAdminFile(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal filename As String, Optional ByVal maxRows As Int16 = 0)
            Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)                                                                               
            Dim groupFolderPath As String = FileShareFolderHelper.GetGroupsFolderForApp(si, True, configSettings.FileShareRootFolder, si.AppToken.AppName)
            Dim folderPath As String =  $"{groupFolderPath}\Administrators\{filename}"
            Using writer As StreamWriter = New StreamWriter(folderPath)
		        writer.WriteLine(chr(34) & String.Join(chr(34) & "," & chr(34), dt.Columns.Cast(Of DataColumn).Select(Function(x) x.ColumnName).ToArray()) & chr(34))
				Dim rCnt As Int16 = 0
		        For Each r As DataRow In dt.Rows
					rCnt += 1
		            writer.WriteLine(chr(34) & String.Join(chr(34) & "," & chr(34), r.ItemArray)& chr(34))
					If maxRows > 0 And rCnt = maxRows Then
						Exit For
					End If
		        Next
		        writer.Close()
		    End Using                   
		End Sub          
		Private Sub Log(ByVal si As SessionInfo, ByVal logValue As String)
			If detailedLogging Then
				If detailedLog = "" Then
					detailedLog = logValue
				Else
					detailedLog += vbnewline & " " & logValue
				End If
			End If
		End Sub
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ANR_CustomTable_Helper">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.ANR_CustomTable_Helper
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
					
						Dim sql As New Text.StringBuilder
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							
'						sql.AppendLine("CREATE TABLE [XFW_ANR_Comment](
								
'								[Package] [nvarchar] (100),
'								[Period] [nvarchar] (100),
'								[Comment] [nvarchar] (100),
'								[Last_Update_Time] [Date],
'								[Last_UserID] [nvarchar] (100),
'								[PK_Period_ID][nvarchar] (100),
								
						
'								PRIMARY KEY ([PK_Period_ID])
									
'							    )" )

								
'						sql.AppendLine("CREATE TABLE [XFW_ANR_Sweep](
								
'								[Package] [nvarchar] (100),
								
'								[Amount] [Decimal](28,2),
								
'								PRIMARY KEY ([Package])
								
									
'							    )" )

							
'							sql.AppendLine("DROP TABLE [dbo].[XFW_ANR_Reaction]")
'							sql.AppendLine("CREATE TABLE [XFW_ANR_Reaction](
'								[UniqueID] [nvarchar] (100),
'								[UserID] [nvarchar] (100),
'								[Package] [nvarchar] (100),
'								[SubPackage_Reaction] [integer],
'								[Function_Reaction] [integer],
'								[TimeStamp] [Date],
'								[Period] [nvarchar] (100),
'								[Comment] [nvarchar] (100),
								
'								PRIMARY KEY ([UniqueID])
									
'							    )" )

							sql.AppendLine("INSERT INTO [XFW_ANR_Sweep](Package, Period) Values")
							For count=1 To 25
								If count<10
									If count <>8
									sql.AppendLine("('PK_0" & count & "','2022M7'),")
									End If 
								Else
								sql.AppendLine("('PK_" & count & "','2022M7'),")
								End If 
							Next
								sql.AppendLine("('PK_26','2022M7')")
								
							Brapi.ErrorLog.LogMessage(Si,"sql string " & sql.ToString)
									
							    

							BRApi.Database.ExecuteActionQuery (dbConnApp, sql.ToString, False, False)
						End Using

						
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="AST_ClearLogsForThreshold">
            <accessGroup>TechSupport_ENT_APP</accessGroup>
            <maintenanceGroup>Administrators</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="AST_SolutionHelper" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.AST_ClearLogsForThreshold
	Public Class MainClass
		'------------------------------------------------------------------------------------------------------------
		'Reference Code: 		AST_ClearLogsForThreshold 
		'
		'Description:			Combined Error, User Logon and Task Activity log clearing helper functions.
		'
		'Usage:					Provides low impact log clearing functions for all the three majaor log types within
		'						OneStream XF.  These methods are intended to be executed from a Data Management job as
		'						a background process.  The deletes for Task Activity are structured as single record deletes
		'						in order to prevent time-outs, excessive transaction log growth and concurrency problems.
		'
		'Created By:			OneStream Software
		'Date Created:			07-15-2014
		'------------------------------------------------------------------------------------------------------------		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Dim batchSize As Integer = 100000

				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.Unknown
						'Delete Default 90 Day Retention
						ClearTaskActivity(si, 90, 90, Nothing, batchSize, "(All)", "(All)")
						ClearErrorLog(si, 90, 90, Nothing, batchSize, "(All)", "(All)", String.Empty)
						ClearLogonActivity(si, 90, 90, Nothing, batchSize, "(All)", "(All)")

					Case ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						'Delete One Month at a time starting at 27 months old, this will break delete process in to multiple Data Management Steps
						'--------------------------------------------------------------------------------------------------------------------------											
						Dim convertError As Boolean = False
						Dim retentionDays As Integer = ConvertHelper.ToInt32(args.NameValuePairs("RetentionDays"), False, 0)
						Dim clearTaskActivity As Boolean = ConvertHelper.ToBoolean(args.NameValuePairs("ClearTaskActivity"), False, False, convertError)
						Dim clearErrorLog As Boolean = ConvertHelper.ToBoolean(args.NameValuePairs("ClearErrorLog"), False, False, convertError)
						Dim clearLogonActivity As Boolean = ConvertHelper.ToBoolean(args.NameValuePairs("ClearLogonActivity"), False, False, convertError)
						Dim clearLogUser As String = args.NameValuePairs.XFGetValue("ClearLogUser", String.Empty)
						Dim clearLogApplication As String = args.NameValuePairs.XFGetValue("ClearLogApplication", String.Empty)
						Dim errorLogDescription As String = args.NameValuePairs.XFGetValue("ErrorLogDescription", String.Empty)
						Dim stepThreshold As Integer = ConvertHelper.ToInt32(args.NameValuePairs.XFGetValue("StepThreshold", 0), False, 0)
						Dim dmTaskItem As TaskActivityItem = GetTaskActivityItem(si)

						'Execute
						If clearTaskActivity Then Me.ClearTaskActivity(si, retentionDays, stepThreshold, dmTaskItem, batchSize, clearLogUser, clearLogApplication)
						If clearErrorLog Then Me.ClearErrorLog(si, retentionDays, stepThreshold, dmTaskItem, batchSize, clearLogUser, clearLogApplication, errorLogDescription)
						If clearLogonActivity Then Me.ClearLogonActivity(si, retentionDays, stepThreshold, dmTaskItem, batchSize, clearLogUser, clearLogApplication)

				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function

#Region "Log Clearing Helper Functions"

		Private Function GetThresholdDate(ByVal si As SessionInfo, retentionDays As Integer, stepThreshold As Integer) As String
			Try
				Dim yearMonthDay As String = String.Empty

				'Make sure that we do not clear log items if this Step Threshold is less than the Threshold selected by the user
				'and do NOT allow retention days less than 30.
				If (retentionDays <> 0) AndAlso (retentionDays >= 30) AndAlso (stepThreshold <> 0) AndAlso (stepThreshold >= retentionDays) Then
					'Calculate the date threshold to used for the delete criteria
					yearMonthDay = DateTime.Now().AddDays(stepThreshold * -1).ToString("yyyy-MM-dd")
				End If

				Return yearMonthDay

			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function

		Private Sub ClearTaskActivity(ByVal si As SessionInfo, retentionDays As Integer, stepThreshold As Integer, taskItem As TaskActivityItem, batchSize As Integer, clearLogUser As String, clearLogApplication As String)
			Try
				'Initialize the Task Activity update threshold
				Dim updateTime As DateTime = DateTime.Now.AddMinutes(5)

				'Calculate the date threshold to used for the delete criteria
				Dim yearMonthDay As String = GetThresholdDate(si, retentionDays, stepThreshold)

				'Make sure that we do not clear log items if this Step Threshold is less than the Threshold selected by the user
				If yearMonthDay <> String.Empty Then

					'Delete all log information older than the supplied date
					Dim msg As New Text.StringBuilder
					msg.Append("Delete Task Activity [" & yearMonthDay & "] ")

					Using dbConnFW As DbConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
						Dim taskCount As Long = 0
						Dim stepCount As Long = 0

						'Get count of Task Steps that match this date criteria
						Dim sqlStep As New Text.StringBuilder
						sqlStep.Append("Select COUNT(TaskActivityStep.StepType) As StepCount ")
						sqlStep.Append("From TaskActivity INNER Join TaskActivityStep On TaskActivity.UniqueID = TaskActivityStep.TaskActivityID ")
						sqlStep.Append("Where (TaskActivity.StartTime < CONVERT(DATETIME, '" & SqlStringHelper.EscapeSqlString(yearMonthDay) & " 00:00:00', 102))")
						If clearLogUser <> "(All)" Then
							sqlStep.Append("AND UserName = '" & SqlStringHelper.EscapeSqlString(clearLogUser) & "'")
						End If
						If clearLogApplication <> "(All)" Then
							sqlStep.Append("AND AppName = '" & SqlStringHelper.EscapeSqlString(clearLogApplication) & "'")
						End If
						'Get the count of items to delete
						Using dt As DataTable = BRApi.Database.ExecuteSql(dbConnFW, sqlStep.ToString, True)
							stepCount = CType(dt.Rows(0).Item(0), Long)
						End Using

						'Get the list of TaskSteps and delete them one by one
						Dim deleteStatement As New Text.StringBuilder
						deleteStatement.Append("DELETE TOP (" & batchSize.ToString & ") ")
						deleteStatement.Append("From TaskActivityStep ")
						deleteStatement.Append("From TaskActivity INNER Join TaskActivityStep On TaskActivity.UniqueID = TaskActivityStep.TaskActivityID ")
						deleteStatement.Append("Where (TaskActivity.StartTime < CONVERT(DATETIME, '" & SqlStringHelper.EscapeSqlString(yearMonthDay) & " 00:00:00', 102)) ")
						If clearLogUser <> "(All)" Then
							deleteStatement.Append("AND UserName = '" & SqlStringHelper.EscapeSqlString(clearLogUser) & "' ")
						End If
						If clearLogApplication <> "(All)" Then
							deleteStatement.Append("AND AppName = '" & SqlStringHelper.EscapeSqlString(clearLogApplication) & "' ")
						End If

						'Now keep executing and committing this statement until the records affected count = 0
						Dim cumDeleteCount As Long = 0
						Dim rowsDeleted As Long = 0

						'Keep deleting as long as the number of rows is equal to the batch size
						Do While cumDeleteCount < stepCount
							'Delete rows, but limit to batch size
							rowsDeleted = DbSql.ExecuteActionQuery(dbConnFW, CommandType.Text, deleteStatement.ToString, Nothing, True)
							cumDeleteCount += rowsDeleted

							'Update TaskActivityStatus
							If Not taskItem Is Nothing Then
								If DateTime.Now >= updateTime Then
									'Reset the update time indicator
									updateTime = DateTime.Now.AddMinutes(5)
									'Update the task status
									Dim pctComplete As Decimal = Math.Round(((cumDeleteCount / stepCount) * 100), 0)
									UpdateTaskActivityStatus(si, taskItem, "Deleted: (" & cumDeleteCount.ToString & ") Steps Of (" & stepCount.ToString & ") Total Steps", pctComplete, 100)
								End If
							End If
						Loop

						'Update task status for final delete of tasks (Set to 99%)
						UpdateTaskActivityStatus(si, taskItem, "Deleting Tasks", 99, 100)

						'Now delete all of the tasks in one call
						Dim sqlTasksDelete As New Text.StringBuilder
						sqlTasksDelete.Append("DELETE FROM TaskActivity WHERE (StartTime < CONVERT(DATETIME, '" & SqlStringHelper.EscapeSqlString(yearMonthDay) & " 00:00:00', 102)) ")
						If clearLogUser <> "(All)" Then
							sqlTasksDelete.Append("AND UserName = '" & SqlStringHelper.EscapeSqlString(clearLogUser) & "' ")
						End If
						If clearLogApplication <> "(All)" Then
							sqlTasksDelete.Append("AND AppName = '" & SqlStringHelper.EscapeSqlString(clearLogApplication) & "' ")
						End If
						taskCount = BRApi.Database.ExecuteActionQuery(dbConnFW, sqlTasksDelete.ToString, True, False)

						'Update task status for final delete of tasks (Set to 100%)
						UpdateTaskActivityStatus(si, taskItem, "Deleting Tasks", 100, 100)

						'Log the delete information
						msg.Append("Tasks = " & taskCount.ToString & ", ")
						msg.Append("Steps = " & stepCount.ToString)
						BRApi.ErrorLog.LogMessage(si, msg.ToString)

					End Using
				End If

			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub

		Private Sub ClearLogonActivity(ByVal si As SessionInfo, retentionDays As Integer, stepThreshold As Integer, taskItem As TaskActivityItem, batchSize As Integer, clearLogUser As String, clearLogApplication As String)
			Try
				'Initialize the Task Activity update threshold
				Dim updateTime As DateTime = DateTime.Now.AddMinutes(5)

				'Calculate the date threshold to used for the delete criteria
				Dim yearMonthDay As String = GetThresholdDate(si, retentionDays, stepThreshold)

				'Make sure that we do not clear log items if this Step Threshold is less than the Threshold selected by the user
				If (yearMonthDay <> String.Empty) Then

					'Delete all log information older than the supplied date
					Dim msg As New Text.StringBuilder
					msg.Append("Delete Logon Activity [" & yearMonthDay & "] ")

					Using dbConnFW As DbConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
						Dim logonCount As Long = 0

						'Get count of Logons that match this date criteria
						Dim sqlLogons As New Text.StringBuilder
						sqlLogons.Append("SELECT COUNT(*) AS LogonCount ")
						sqlLogons.Append("FROM UserLogonActivity ")
						sqlLogons.Append("Where (LogonTime < CONVERT(DATETIME, '" & SqlStringHelper.EscapeSqlString(yearMonthDay) & " 00:00:00', 102)) ")
						If clearLogUser <> "(All)" Then
							sqlLogons.Append("AND UserName = '" & SqlStringHelper.EscapeSqlString(clearLogUser) & "' ")
						End If
						If clearLogApplication <> "(All)" Then
							sqlLogons.Append("AND AppName = '" & SqlStringHelper.EscapeSqlString(clearLogApplication) & "' ")
						End If
						'Get the count of items to delete
						Using dt As DataTable = BRApi.Database.ExecuteSql(dbConnFW, sqlLogons.ToString, True)
							logonCount = CType(dt.Rows(0).Item(0), Long)
						End Using

						'Now delete all of the Logons one batch at a time			
						Dim sqlLogonsDelete As New Text.StringBuilder
						sqlLogonsDelete.Append("DELETE TOP (" & batchSize.ToString & ") ")
						sqlLogonsDelete.Append("FROM UserLogonActivity ")
						sqlLogonsDelete.Append("Where (LogonTime < CONVERT(DATETIME, '" & SqlStringHelper.EscapeSqlString(yearMonthDay) & " 00:00:00', 102)) ")
						If clearLogUser <> "(All)" Then
							sqlLogonsDelete.Append("AND UserName = '" & SqlStringHelper.EscapeSqlString(clearLogUser) & "' ")
						End If
						If clearLogApplication <> "(All)" Then
							sqlLogonsDelete.Append("AND AppName = '" & SqlStringHelper.EscapeSqlString(clearLogApplication) & "' ")
						End If

						'Now keep executing and committing this statement until the records affected count = 0
						Dim cumLogonDeleteCount As Long = 0
						Dim rowsLogonDeleted As Long = 0

						'Keep deleting as long as the number of rows is equal to the batch size
						Do While cumLogonDeleteCount < logonCount
							'Delete rows, but limit to batch size
							rowsLogonDeleted = DbSql.ExecuteActionQuery(dbConnFW, CommandType.Text, sqlLogonsDelete.ToString, Nothing, True)
							cumLogonDeleteCount += rowsLogonDeleted

							'Update TaskActivityStatus
							If Not taskItem Is Nothing Then
								'If DateTime.Now >= updateTime Then
								'Reset the update time indicator
								updateTime = DateTime.Now.AddMinutes(5)
								'Update the task status
								Dim pctComplete As Decimal = Math.Round(((cumLogonDeleteCount / logonCount) * 100), 0)
								UpdateTaskActivityStatus(si, taskItem, "Deleted: (" & cumLogonDeleteCount.ToString & ") Logons Of (" & logonCount.ToString & ") Total Logons", pctComplete, 100)
								'End If
							End If
						Loop

						'Update task status for final delete (Set to 100%)
						UpdateTaskActivityStatus(si, taskItem, "Deleting Logon Activity", 100, 100)

						'Log the delete information
						msg.Append("Logons = " & logonCount.ToString)
						BRApi.ErrorLog.LogMessage(si, msg.ToString)

					End Using
				End If

			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub

		Private Sub ClearErrorLog(ByVal si As SessionInfo, retentionDays As Integer, stepThreshold As Integer, taskItem As TaskActivityItem, batchSize As Integer, clearLogUser As String, clearLogApplication As String, errorLogDescription As String)
			Try
				'Initialize the Task Activity update threshold
				Dim updateTime As DateTime = DateTime.Now.AddMinutes(5)

				'Calculate the date threshold to used for the delete criteria
				Dim yearMonthDay As String = GetThresholdDate(si, retentionDays, stepThreshold)

				'Make sure that we do not clear log items if this Step Threshold is less than the Threshold selected by the user
				If (yearMonthDay <> String.Empty) Then

					'Delete all log information older than the supplied date
					Dim msg As New Text.StringBuilder
					msg.Append("Delete Error Log [" & yearMonthDay & "] ")

					Using dbConnFW As DbConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
						Dim logCount As Long = 0

						'Get count of errors that match this date criteria
						Dim sqlErrorLog As New Text.StringBuilder
						sqlErrorLog.Append("SELECT COUNT(*) AS ErrorCount ")
						sqlErrorLog.Append("FROM ErrorLog ")
						sqlErrorLog.Append("Where (ErrorTime < CONVERT(DATETIME, '" & SqlStringHelper.EscapeSqlString(yearMonthDay) & " 00:00:00', 102)) ")
						If clearLogUser <> "(All)" Then
							sqlErrorLog.Append("AND UserName = '" & SqlStringHelper.EscapeSqlString(clearLogUser) & "' ")
						End If
						If clearLogApplication <> "(All)" Then
							sqlErrorLog.Append("AND AppName = '" & SqlStringHelper.EscapeSqlString(clearLogApplication) & "' ")
						End If
						If errorLogDescription.Trim <> "" Then
							sqlErrorLog.Append(" AND Description LIKE '%" & SqlStringHelper.EscapeSqlString(errorLogDescription.Trim) & "%'")
						End If
						'Get the count of items to delete
						Using dt As DataTable = BRApi.Database.ExecuteSql(dbConnFW, sqlErrorLog.ToString, True)
							logCount = CType(dt.Rows(0).Item(0), Long)
						End Using

						'Now delete all of the Error Log Entries one batch at a time
						Dim sqlLogDelete As New Text.StringBuilder
						sqlLogDelete.Append("DELETE TOP (" & batchSize.ToString & ") ")
						sqlLogDelete.Append("FROM ErrorLog ")
						sqlLogDelete.Append("Where (ErrorTime < CONVERT(DATETIME, '" & SqlStringHelper.EscapeSqlString(yearMonthDay) & " 00:00:00', 102)) ")
						If clearLogUser <> "(All)" Then
							sqlLogDelete.Append("AND UserName = '" & SqlStringHelper.EscapeSqlString(clearLogUser) & "' ")
						End If
						If clearLogApplication <> "(All)" Then
							sqlLogDelete.Append("AND AppName = '" & SqlStringHelper.EscapeSqlString(clearLogApplication) & "' ")
						End If
						If errorLogDescription.Trim <> "" Then
							sqlLogDelete.Append(" AND Description LIKE '%" & SqlStringHelper.EscapeSqlString(errorLogDescription.Trim) & "%' ")
						End If

						'Now keep executing and committing this statement until the records affected count = 0
						Dim cumErrorDeleteCount As Long = 0
						Dim rowsErrorDeleted As Long = 0

						'Keep deleting as long as the number of rows is equal to the batch size
						Do While cumErrorDeleteCount < logCount
							'Delete rows, but limit to batch size
							rowsErrorDeleted = DbSql.ExecuteActionQuery(dbConnFW, CommandType.Text, sqlLogDelete.ToString, Nothing, True)
							cumErrorDeleteCount += rowsErrorDeleted

							'Update TaskActivityStatus
							If Not taskItem Is Nothing Then
								If DateTime.Now >= updateTime Then
									'Reset the update time indicator
									updateTime = DateTime.Now.AddMinutes(5)
									'Update the task status
									Dim pctComplete As Decimal = Math.Round(((cumErrorDeleteCount / logCount) * 100), 0)
									UpdateTaskActivityStatus(si, taskItem, "Deleted: (" & cumErrorDeleteCount.ToString & ") Errors Of (" & logCount.ToString & ") Total Errors", pctComplete, 100)
								End If
							End If
						Loop

						'Update task status for final delete (Set to 100%)
						UpdateTaskActivityStatus(si, taskItem, "Deleting Error Log", 100, 100)

						'Log the delete information
						msg.Append("Error Log Entries = " & logCount.ToString)
						BRApi.ErrorLog.LogMessage(si, msg.ToString)

					End Using
				End If

			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub

#End Region

#Region "Task Activity Helpers"

		Private Function GetTaskActivityItem(ByVal si As SessionInfo) As TaskActivityItem
			Try
				Dim taItem As TaskActivityItem = Nothing

				Dim runningTasks As TaskActivityList = EngineTaskActivity.GetTaskActivity(si, True, True, Nothing, Nothing, 0, 100)
				If Not runningTasks Is Nothing Then
					For Each taskItem As TaskActivityInfo In runningTasks.Items
						'Find the TaskID for the "Clear Logs (AST)" Task
						If taskItem.Item.Description.Equals("Clear Logs (AST)", StringComparison.InvariantCultureIgnoreCase) And (taskItem.Item.TaskActivityType = TaskActivityType.DataManagement) Then
							taItem = taskItem.Item
							Exit For
						End If
					Next
				End If

				Return taItem

			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function

		Private Sub UpdateTaskActivityStatus(ByVal si As SessionInfo, taskItem As TaskActivityItem, actionDescription As String, actionsCompleted As Decimal, numActions As Integer)
			Try
				If Not taskItem Is Nothing Then
					'Update the current Sub-Task so a long running jobs are not cancelled by the system
					EngineTaskActivity.UpdateRunningTaskActivity(si, taskItem.UniqueID, Nothing, taskItem.CurrentSubTask, taskItem.CurrentSubTaskDescription, actionDescription, actionsCompleted, numActions)
				End If

			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub

#End Region

	End Class
End Namespace]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ATest">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Net.Mail

Namespace OneStream.BusinessRule.Extender.ATest
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
'	Dim SmtpServer As New SmtpClient()
'    Dim mail As New MailMessage()
'    SmtpServer.UseDefaultCredentials = True
''   SmtpServer.Credentials = New Net.NetworkCredential(Username, Password)
'    SmtpServer.Port = "25"
'    SmtpServer.Host = "smtp-gw1.homeoffice.wal-mart.com"
'    SmtpServer.EnableSsl = False
'    SmtpServer.DeliveryMethod = SmtpDeliveryMethod.Network

Dim conn As String = "SmtpHost=[smtp-gw1.homeoffice.wal-mart.com],SmtpPort=[25],EnableSSL=[False],SmtpSourceMailAccount=[DoNotReply@wal-mart.com]"
				
				
				Dim fileAttachmentPaths As New List(Of String)

If fileAttachmentPaths Is Nothing Then fileAttachmentPaths = New List(Of String)({""})
				Dim lst As New List(Of String ) 
'				lst.Add("vikas.kumar.tripathi@walmart.com")
				BRApi.Utilities.SendMail(si,conn, lst.ToList, "H", "H", false,fileAttachmentPaths)
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Automation_Copy_GET">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.Automation_Copy_GET
	Public Class MainClass		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				
				'************************************************************************************************************
				'**
				'** This is a BR to allow for automating batchjobs for Connector driven workflows.
				'** To use, you need to create a DataManagement Job, and you need to pass the following parameters to it:
				'** 	wfTop = <Top Workflow you want to loop through all descendants of>
				'**		T3Tag = <What is the tag in the Text3 field of the specific import workflow>
				'**		globScen = <which scenario to run for>
				'**		globTime = <which time to run for>
				'**
				'** Example to put in Parameter field of DataManagement Step:
				'**		wfTop = Clubs, T3Tag = AutoLoad, globScen = |GlobalScenario|, globTime = |GlobalTime|, ParallelCountTag = 10 
				'**  ParallelCountTag is optional, not needed. If not used Batch will will be serialized, if used it will run in parallel
				'**
				'************************************************************************************************************
				
			
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.Unknown, ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep

					'Note for testing purpose
					Dim testing As Boolean = False
					
						'Set all the needed variables
						Dim globScen As String = args.NameValuePairs("globScen")
						Dim globTime As String = args.NameValuePairs("globTime")
						Dim systemTime As String = globTime
						Dim fixedScenario As String = globScen
						Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
						Dim bolError As Boolean = False
						Dim wfTop As String = args.NameValuePairs("WfTop")
						Dim T3Tag As String = args.NameValuePairs("T3Tag")
						Dim wfProfileInfo As WorkflowProfileInfo = BRApi.Workflow.Metadata.GetProfile(si, wfTop)
						Dim wfClusterPk As WorkflowUnitClusterPk
						Dim wfClusterPk2 As WorkflowUnitClusterPk
						Dim scenarioMemberID As Integer = BRApi.Finance.Members.GetMemberId(si, dimTypeId.Scenario, fixedScenario)
						Dim scentypeID As Integer = BRApi.Finance.Scenario.GetScenarioType(si,scenarioMemberID).Id
						Dim wfList As New List(Of String)
						Dim parallelCountTag As String = args.NameValuePairs.XFGetValue("ParallelCountTag","1")
						Dim wfProfileDeleteList As New List(Of WorkFlowProfileInfo)  'add 10/05 	
						Dim DMJobName As String = args.NameValuePairs.XFGetValue("DMJobName","DMJob Not Specified") 
						Dim SubjectDMJobName As String = args.NameValuePairs.XFGetValue("DMJobName","") 
						
						'Get all the Import WFs under WFTop with the correct T3Tag and add to list
						wfClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, WfTop, fixedScenario, systemTime)
						
						Dim objList As List(Of WorkFlowProfileInfo) = BRApi.Workflow.Metadata.GetRelatives(si, wfClusterPk, WorkflowProfileRelativeTypes.Descendants, WorkflowProfileTypes.InputImportChild)
						
						For Each wfItem As WorkflowProfileInfo In objList
							If wfItem.GetAttributeValue(scentypeID,SharedConstants.WorkflowProfileAttributeIndexes.Text3) = T3Tag Then
								'If WF is locked, do nothing
								wfCLusterPk2 = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, wfItem.Name, fixedScenario, systemTime)						
								
								Dim wfStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfClusterPk2)	
								
								If Not wfStatus.Locked Then
									wfList.Add(stringhelper.ReplaceString(wfItem.Name,".",";",True))
								End If
							End If
						Next	
						
						'Loop through the generated list of WFs, and create trigger file
						If wfList.Count > 0 Then
							'Loop through the generated list of WFs, and delete stagesummarytargetdata
							If wfProfileDeleteList.Count > 0 Then
								Dim timeId As Integer = BRApi.Finance.Members.GetMemberId(si,DimType.Time.Id, systemTime)
								For Each wfProfile As WorkflowProfileInfo In wfProfileDeleteList
									Me.DeleteAllRowsForScenarioTimeForStageSummaryTargetDataTable(si,wfProfile.UniqueID,scenarioMemberID,timeId,timeId)                                                    
								Next
							End If	

							For Each wfMem As String In WfList
								'Create GL WF Batch Trigger File
								Me.CreateBatchFileTrigger(si,FileShareFolderHelper.GetBatchHarvestFolderForApp(si, True, configSettings.FileShareRootFolder, configSettings.FileShareBatchHarvestRootFolder,si.AppToken.AppName),wfMem.ToString,fixedScenario,systemTime, Testing)
					    	Next
						End If
						
						'Set Processing Switches	
						Dim valTransform As Boolean = True
						Dim valIntersect As Boolean = True
						'7/16/2020 Change to False for import issue to not execute the load to cube
						Dim loadCube As Boolean = True
						'7/16/2020 Change to False for import issue to not execute the load to cube
						Dim processCube As Boolean = True
						Dim confirm As Boolean = False
						Dim autoCertify As Boolean = False
						
						Dim batchinfo As WorkflowBatchFileCollection = Nothing
						If Not testing Then
							If parallelCountTag = "" Or parallelCountTag = "1" Then
								batchInfo = BRApi.Utilities.ExecuteFileHarvestBatch(si, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, False)
							Else 
								Dim parallelCount As Integer = parallelCountTag.XFConvertToInt
								If parallelCount > 8 Then
    							   parallelCount = 8
								End If
								BRApi.ErrorLog.LogMessage(si,"Before ExecuteFileHarvestBatchParallel")
								batchInfo = BRApi.Utilities.ExecuteFileHarvestBatchParallel(si, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, parallelCount)
							End If
						End If
						
						If batchInfo IsNot Nothing Then
							
'							'--------- Email Notification --------- 
							'the following dashboard parameters are stored in the '99_WMT_Notifications'- Dashboard Maintenance Unity (DMU)
'							Dim paramEmailServer As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "prm_WMT_EmailNotification_Server")
'							Dim paramEmailBusiness As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "prm_WMT_EmailNotification_Business") ' to be commented out when not in test
'							Dim paramEmailIT As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "prm_WMT_EmailNotification_IT")  ' to be commented out when not in test
'							Dim paramEmailTest As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "prm_WMT_EmailNotification_Test")
'							Dim moreEmails As String = args.NameValuePairs.XFGetValue("MoreEmails", "") 'add 12/21/2020 Mohan - DAP-3611
							
'							Dim emailList As New List(Of String)
'							emailList.AddRange(paramEmailBusiness.Split(",").ToList()) ' to be commented out when not in test
'							emailList.AddRange(paramEmailIT.Split(",").ToList())  ' to be commented out when not in test
'							emailList.AddRange(paramEmailTest.Split(",").ToList()) ' for testing purpose only, this one can be commented 
							
'							'add 12/21/2020 Mohan - DAP-3611
'							If Not String.IsNullOrEmpty(moreEmails) Then
'								BRApi.ErrorLog.LogMessage(si, $"MoreEmails: {moreEmails}")
'								emailList.AddRange(moreEmails.Split(",").ToList())
'							End If
							
'							Dim emailHelper As New OneStream.BusinessRule.Extender.Email_Helper.MainClass
'							emailHelper.GetBatchDetailsAndSendEmail(si, batchInfo, emailList, paramEmailServer, SubjectDMJobName)
						End If
						
				End Select

				Return Nothing
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		#Region "General Helpers"
			
			Private Sub CreateBatchFileTrigger(ByVal si As SessionInfo, ByVal harvestPath As String, ByVal wfName As String, ByVal wfScenario As String, ByVal wfTime As String, ByVal Testing As Boolean)
			
			Dim Path As String = String.Empty

				If Not Testing Then
					
					path = harvestPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-R.txt"
				Else
				Dim testingFolderPath As String = BRApi.FileSystem.GetFileShareFolder(si, Filesharefoldertypes.Batch, Nothing) & "\_Testing"
				If Not Directory.Exists(testingFolderPath) Then directory.CreateDirectory(testingFolderPath) 
					
					path = testingFolderPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-R.txt"
				End If
					
				If Not File.Exists(path) Or Testing = True Then
					' Create a file to write to. 
					Using sw As StreamWriter = File.CreateText(path)
						sw.WriteLine("Batch File Trigger")
					End Using
				End If
			End Sub		
				
		#End Region
		#Region "SummaryTargetDeleteHelper"
			Public Sub DeleteAllRowsForScenarioTimeForStageSummaryTargetDataTable(ByVal si As SessionInfo, ByVal workflowProfileID As Guid, ByVal scenarioId As Integer, ByVal startWFTimeId As Integer, ByVal endWFTimeId As Integer)
                Try
                    'Delete Summary Target Data For Clusters
                    Dim table As New StageSummaryTargetDataTable
                    Dim dbWheres As New List(Of DbWhere)
                    dbWheres.Add(New DbWhere(StageSummaryTargetDataColNames.DimWorkflowProfileKey, DbOperator.IsEqualTo, workflowProfileID))
                    dbWheres.Add(New DbWhere(StageSummaryTargetDataColNames.DimWorkflowScenarioKey, DbOperator.IsEqualTo, scenarioId))
                    dbWheres.Add(New DbWhere(StageSummaryTargetDataColNames.DimWorkflowTimeKey, DbOperator.IsGreaterThanOrEqualTo, startWFTimeId, "StartWFTimeId"))
                    dbWheres.Add(New DbWhere(StageSummaryTargetDataColNames.DimWorkflowTimeKey, DbOperator.IsLessThanOrEqualTo, endWFTimeId, "EndWFTimeId"))

                    Using dbConnApp As DbConnInfo = BRApi.DataBase.CreateApplicationDbConnInfo(si)
                  		table.BatchDeleteRows(dbConnApp, dbWheres, False)
                    End Using

                Catch ex As Exception
                    Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
                End Try
            End Sub
		#End Region
    End Class

End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="CAPEX_to_ENS_Trigger">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
#End Region

#Region "Rule Change Mgmt"
'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: VIji
	'Description:		logic to push data from CAPEX to ENS
	
'--------------------------------------------------------------------------------------------------------------------------------------------
#End Region

Namespace OneStream.BusinessRule.Extender.CAPEX_to_ENS_Trigger
	Public Class MainClass

#Region "Constants"
		Dim wsi As SessionInfo
		Dim jobid As String
		Dim getCClistTAI As TaskActivityItem
		Dim getCClistTAIStatus As TaskActivityItem
		Dim extractSourceDataTAI As TaskActivityItem
		Dim extractSourceDataTAIStatus As TaskActivityItem
		Dim loadTAI As TaskActivityItem
		Dim loadTAIStatus As TaskActivityItem
		Dim consolidateTAI As TaskActivityItem
		Dim consolidateTAIStatus As TaskActivityItem
		Dim validationTAI As TaskActivityItem
		Dim validationTAIStatus As TaskActivityItem
		
		Dim watcher_table As String = "XFW_WMT_CapitalExpense_Watcher"
		Dim activityId As String = "TRG2"
		Dim sequenceName_getCClist As String = "CAPEXtoENS_getCClist"	
		Dim sequenceName_extractSourceData As String = "CAPEXtoENS_extractSourceData"
		Dim sequenceName_load As String = "CAPEXtoENS_load"
		Dim sequenceName_consolidate As String = "CAPEXtoENS_consolidate"
		Dim sequenceName_Validation As String = "CAPEXtoENS_validation"
		
#End Region		

#Region "Main"

		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Dim DEBUG As Boolean = True
				Dim logs As New Text.StringBuilder
				Dim getcclist_flag As String = args.NameValuePairs.XFGetValue("getcclist_flag")
				Dim CAPEXtoENS_source_app As String = args.NameValuePairs.XFGetValue("CAPEXtoENS_source_app")
				globals.SetObject("CAPEXtoENS_source_app",CAPEXtoENS_source_app)
				
				globals.SetObject("getcclist_flag",getcclist_flag)
				
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
					
						
						globals.SetObject("CAPEXtoENS_PROCESS_LOG",logs)
						Dim chunk_size As Integer = args.NameValuePairs.XFGetValue("chunk_size").XFConvertToInt
						Dim cclist As String = String.Empty
						Dim cclist_chunk As New List(Of String)
						Dim cclist_all() As String
						Dim cclistx As String = String.Empty
						
						
						wsi = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si, CAPEXtoENS_source_app, openAppResult.Success)
						jobid = args.NameValuePairs.XFGetValue("JobId")
						
						Dim customSubstVars_getCClist As New Dictionary(Of String, String)

						Dim customSubstVars_consolidate As New Dictionary(Of String, String)
						Dim validation_params As New Dictionary(Of String, String)
						'getCClist
						Me.processlog(si,globals,"calling getcclist sequence")
						customSubstVars_getCClist.Add("Function", "getCClist")
						getCClistTAI = BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_getCClist, customSubstVars_getCClist)
						CreateSubTask(si,jobid.ToString, getCClistTAI.UniqueID.ToString,"Sqnc_Submit_SubTask")
						getCClistTAIStatus = BRApi.TaskActivity.GetTaskActivityItem(si, getCClistTAI.UniqueID)
						
						If getCClistTAIStatus.TaskActivityStatus = TaskActivityStatus.Failed Then

							updateWatcher(si, wsi, globals, watcher_table, activityId, "fail")
							Me.processlog(si,globals,"getcclist failed")
							Throw New System.Exception("getCClist Failed")
							
						ElseIf getCClistTAIStatus.TaskActivityStatus = TaskActivityStatus.Completed Then
							Me.processlog(si,globals,"getcclist completed")

							
							If globals.GetObject("CAPEXtoENS_getCClist") IsNot Nothing AndAlso DirectCast(globals.GetObject("CAPEXtoENS_getCClist"), String).Length > 0 Then
								cclist_all = DirectCast(globals.GetObject("CAPEXtoENS_getCClist"), String).Split(",")
								
								'get sams ecomm vbo + ecomm cost centers outside the VBO across segment
								globals.SetObject("CAPEXtoENS_SAMS_ECOM_VBO", getecomm_entityList(si))
								globals.SetObject("CAPEXtoENS_SAMS_ECOM_CC", getSAMSEcomm_entityList(si))
								
								updateWatcher(si, wsi, globals, watcher_table, activityId, "running")
								Me.processlog(si,globals,"cclist ---- " & DirectCast(globals.GetObject("CAPEXtoENS_getCClist"), String))
	
								Me.processlog(si,globals,"creating cc and vbo dictionary")
								Dim cclist_vbo_maps As String = String.Empty
								cclist_vbo_maps = String.Join("','",cclist_all)

								Dim sql As New Text.StringBuilder
								sql.Append("SELECT COST_CENTER,VBO_NAME FROM [dbo].[XFW_ExpensePlanning_VBO_CC_Mappings] WHERE COST_CENTER IN ('" & cclist_vbo_maps & "')")
								
								
								
								
								Dim VBOCCdt As DataTable = Nothing
								Dim VBOCCdict As New Dictionary(Of String, String)
								Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
									VBOCCdt = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, sql.ToString, True)
								End Using
								'save vbo-cc mappings in a dictionary
								If VBOCCdt.Rows.Count > 0
									For Each VBOCCdr As DataRow In VBOCCdt.Rows
										If Not VBOCCdict.ContainsKey(VBOCCdr("COST_CENTER"))
											VBOCCdict.Add(VBOCCdr("COST_CENTER"),VBOCCdr("VBO_NAME"))
										End If
									Next
								End If
'								Brapi.ErrorLog.LogMessage(si," CC list" & cclist_vbo_maps)
'								Me.Printdt(si,VBOCCdt,"VBOCC")
								
								
								globals.SetObject("CEtoENT_VBOCC_Mappings", VBOCCdict)
								
								'extractSourceData
								Me.processlog(si,globals,"start processing extract and load in chunks")
								If cclist_all.Length > chunk_size Then
									cclist_chunk = toChunks(si, cclist_all, chunk_size)
									For Each cclistitr As String In cclist_chunk
										Me.executeTrigger(si, globals, cclistitr)
									Next
								Else
									Me.executeTrigger(si, globals, globals.GetObject("CAPEXtoENS_getCClist").ToString)
								End If
											'consolidate
											cclist = String.Join(",", cclist_all)
											cclist = String.Join(",", cclist.Split(",").[Select](Function(x) "E#" & x))
'											



												cclistx = String.Join(",", cclist_all)
												cclistx = String.Join("-", cclistx.Split(",")).Replace("E#","")
												updateWatcher(si,wsi,globals,watcher_table,activityId,"success")
												validation_params.Add("JobId", jobid.ToString)
												validation_params.Add("EntityList", cclistx)
												validation_params.Add("JsonFile","capex_ens.json")
												Me.processlog(si,globals,"calling validation sequence")
													validationTAI = BRApi.Utilities.ExecuteDataMgmtSequence(si, "Sqnc_run_validation", validation_params)
													CreateSubTask(si,  jobid.ToString, validationTAI.UniqueID.ToString, "Sqnc_Submit_SubTask")
													validationTAIStatus = BRApi.TaskActivity.GetTaskActivityItem(si, validationTAI.UniqueID)
													
													If validationTAIStatus.TaskActivityStatus = TaskActivityStatus.Completed Then
														processlog(si, globals, "Sqnc_run_validation Completed")
														
													Else
														processlog(si, globals, "Sqnc_run_validation Failed")
													End If	
											Else
											processlog(si, globals, "No CC Found")
										End If
									End If
'								
						
				End Select

				Return Nothing
			Catch ex As Exception
				Me.processlog(si,globals,ex.Message)
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			Finally
				Me.CreateLogTask(si,globals,jobid)
			End Try
		End Function

#End Region
		
#Region "Helper Functions"		
		Sub executeTrigger(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal cclist As String)
			Try
				
				Dim customSubstVars_extractSourceData As New Dictionary(Of String, String)
				Dim customSubstVars_load As New Dictionary(Of String, String)
				
				'extractSourceData
				Try
					customSubstVars_extractSourceData.Add("Function", "extractSourceData") 
					customSubstVars_extractSourceData.Add("cclist", cclist)
					'processlog(si, globals, "Cost Center Chunk:" & cclist)
					extractSourceDataTAI = BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_extractSourceData, customSubstVars_extractSourceData)
					CreateSubTask(si,jobid.ToString,extractSourceDataTAI.UniqueID.ToString,"Sqnc_Submit_SubTask")
					extractSourceDataTAIStatus = BRApi.TaskActivity.GetTaskActivityItem(si, extractSourceDataTAI.UniqueID)
				Catch ex As Exception
					'processlog(si, globals, sequenceName_load & ":" & ex.Message & " InnerException:" & ex.InnerException.Message)
					updateWatcher(si, wsi, globals, watcher_table, activityId, "fail")
				End Try
				
				If extractSourceDataTAIStatus.TaskActivityStatus = TaskActivityStatus.Failed Then
					updateWatcher(si,wsi,globals,watcher_table,activityId,"fail")
					'processlog(si, globals, "extractSourceData Failed")
					Throw New System.Exception("extractSourceData Failed")
				ElseIf extractSourceDataTAIStatus.TaskActivityStatus = TaskActivityStatus.Completed
					'processlog(si, globals, "extractSourceData Completed")
					'load
					If globals.GetObject("CAPEXtoENS_extractSourceData") IsNot Nothing AndAlso DirectCast(globals.GetObject("CAPEXtoENS_extractSourceData"), DataTable).Rows.Count > 0 Then
						cclist = String.Join(",", cclist.Split(",").[Select](Function(x) "E#" & x))
						
						customSubstVars_load.Add("CAPEXtoENS_getCClist", cclist)
						loadTAI = BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_load, customSubstVars_load)
						CreateSubTask(si,jobid.ToString,loadTAI.UniqueID.ToString,"Sqnc_Submit_SubTask")
						loadTAIStatus = BRApi.TaskActivity.GetTaskActivityItem(si, loadTAI.UniqueID)
						
						If loadTAIStatus.TaskActivityStatus = TaskActivityStatus.Failed Then
							updateWatcher(si,wsi,globals,watcher_table,activityId,"fail")
							'processlog(si, globals, "Load Failed")
							Throw New System.Exception("Load Failed")
						ElseIf loadTAIStatus.TaskActivityStatus = TaskActivityStatus.Completed
							'processlog(si, globals, "Load Completed")
						End If
					End If
				End If
				
			
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		
		Private Sub updateWatcher(ByVal si As SessionInfo, ByVal wsi As SessionInfo, ByVal globals As BRGlobals, ByVal watcher_table As String, ByVal activityId As String, ByVal action As String)
			Try	
				Dim uniquecclist As String = String.Empty
				uniquecclist = DirectCast(globals.GetObject("CAPEXtoENS_getCClist"), String)
				uniquecclist = uniquecclist.Replace(",", "','")
				
				Dim sql As New Text.StringBuilder
				If action.XFEqualsIgnoreCase("success") Then
                   sql.Append("UPDATE XFW_WMT_CapitalExpense_Watcher SET Run_Flag=1,Processed_On='"& DateTime.Now & "' WHERE Wait_Flag=0 AND ActivityID='"& activityId &"' AND CostCenter In ('" & uniquecclist.ToString & "') ")
                   sql.Append("UPDATE XFW_WMT_CapitalExpense_Watcher SET Run_Flag=0,Wait_flag=0,Processed_On='"& DateTime.Now & "' WHERE Wait_Flag=1 AND ActivityID='"& activityId &"' AND CostCenter In ('" & uniquecclist & "') ") 
			    ElseIf action.XFEqualsIgnoreCase("fail")
					sql.Append("UPDATE XFW_WMT_CapitalExpense_Watcher SET Run_Flag=-1,Processed_On='"& DateTime.Now &"' WHERE  ActivityID='"& activityId &"' AND CostCenter In ('" & uniquecclist & "') ")
				ElseIf action.XFEqualsIgnoreCase("running")
					sql.Append("UPDATE XFW_WMT_CapitalExpense_Watcher SET Run_Flag=2,Processed_On=null,Requested_On='"& DateTime.Now &"'  WHERE  ActivityID='"& activityId &"' AND CostCenter In ('" & uniquecclist & "') ")
				End If
				If sql.Length > 0
					Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(wsi)
							BRAPi.Database.ExecuteActionQuery(dbConnApp,sql.ToString,False,False)
					End Using
			    End If
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		
		Private Sub CreateSubTask(ByVal si As SessionInfo, ByVal taskid As String, ByVal subtaskid As String, ByVal sequenceName_subtask As String)
			Try
				Dim subtask_dict As New Dictionary(Of String, String)
				subtask_dict.Add("JobId", taskid)
				subtask_dict.Add("SubTaskId", subtaskid)
				subtask_dict.Add("Status", String.Empty)
				BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_subtask, subtask_dict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub
		
		Private Sub processlog(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal logmessage As String)
			Try
				If globals.GetObject("CAPEXtoENS_PROCESS_LOG") IsNot Nothing  Then
					globals.GetObject("CAPEXtoENS_PROCESS_LOG").AppendLine(Environment.NewLine & "[" & DateTime.Now.ToString & "] - " & logmessage)
				End If	
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		
		End Sub
		Private Sub CreateLogTask(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal jobid As String)
			Try
				Dim logdict As New Dictionary(Of String, String)
				logdict("jobId") = jobid.ToString
				logdict("FileName") = "CAPEXtoENS_PROCESS_LOG"
				logdict("Message") = globals.GetObject("CAPEXtoENS_PROCESS_LOG").ToString
				BRApi.Utilities.ExecuteDataMgmtSequence(si,"Sqnc_log_msg",logdict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		Private Function toChunks(ByVal si As SessionInfo, ByVal cclist_all() As String, ByVal chunk_size As Integer) As List(Of String)
			Try
				
				
				Dim noOfChunk As Integer = 0
				Dim chunkList As New List(Of String)
				Dim templist As New Text.StringBuilder
				Dim temp As String = String.Empty
				Dim tchunk As Integer = chunk_size
				Dim x As Integer = 0
				
				
				noOfChunk = Math.Ceiling(cclist_all.Length / chunk_size)
			
				For i = 0 To noOfChunk - 1
					Dim j As Integer = x
					While j < tchunk 
						If j < cclist_all.Length Then
							templist.Append(cclist_all(j) & ",")
						End If	
						j += 1
					End While
					x += chunk_size 
					tchunk = tchunk + chunk_size
					temp = templist.ToString
					temp = temp.Remove(temp.Length - 1, 1)
					chunkList.Add(temp)
					
					templist.Clear
				Next
				
				Return 	chunkList			
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		Public Function PrintDT(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal Desc As String)
		Try
			 'Print Table
			 Dim dtprint As New Text.StringBuilder
				 For Each dc As DataColumn In dt.Columns
					dtprint.Append(dc.ColumnName & ",")
				 Next
				 dtprint.Remove(dtprint.Length - 1, 1)
				 dtprint.Append(Environment.NewLine)
				 For Each dr As DataRow In dt.Rows										
					For Each dc As DataColumn In dt.Columns
						dtprint.Append(dr(dc.ColumnName) & ",")
					Next
					dtprint.Remove(dtprint.Length - 1, 1)
					dtprint.Append(Environment.NewLine)
				 Next
				 BRApi.ErrorLog.LogMessage(si, Desc,dtprint.ToString)
		Return Nothing		 
		Catch ex As Exception                
	   		Throw ErrorHandler.LogWrite(si,New XFException(si,ex))
		End Try		 
		End Function
		
		'sames ecomm VBO
		Private Function getecomm_entityList(ByVal si As SessionInfo) As List(Of String)
			Try
				Dim sql_ecomm As String = "SELECT DISTINCT VBO FROM XFW_RACI_Matrix WHERE AnaplanECF_Filter LIKE '%Anaplan%'"
				Dim dt_ecomm As New DataTable
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_ecomm = BRApi.Database.ExecuteSql(dbConnApp, sql_ecomm, False)
				End Using
				Dim ecomm_entityList As New List(Of String)
				If dt_ecomm IsNot Nothing AndAlso dt_ecomm.Rows.Count>0
					For Each dr_ecomm In dt_ecomm.Rows
						ecomm_entityList.Add(dr_ecomm("VBO"))
					Next	
				End If
				
				Return ecomm_entityList
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		'sams additional ecomm cc list outside ecomm VBO
		Private Function getSAMSEcomm_entityList(ByVal si As SessionInfo) As List(Of String)
			Try
				Dim sql_ecomm_cc As String = "SELECT CC FROM XFW_EP_CC_Attribute WHERE Attribute1 LIKE '%SAMS_ECOMM%'"
				Dim dt_ecomm_cc As New DataTable
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_ecomm_cc = BRApi.Database.ExecuteSql(dbConnApp, sql_ecomm_cc, False)
				End Using
				Dim ecomm_entityList_cc As New List(Of String)
				If dt_ecomm_cc IsNot Nothing AndAlso dt_ecomm_cc.Rows.Count>0
					For Each dr_ecomm_cc In dt_ecomm_cc.Rows
						ecomm_entityList_cc.Add(dr_ecomm_cc("CC"))
					Next	
				End If
				
				Return ecomm_entityList_cc
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		
#End Region

	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="CAPEXtoENS">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
#End Region

#Region "Rule Change Mgmt"
'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: VIji
	'Description:		logic to push data from CAPEX to ENS
	
'--------------------------------------------------------------------------------------------------------------------------------------------
#End Region

Namespace OneStream.BusinessRule.Extender.CAPEXtoENS
	Public Class MainClass
		
#Region "Main"

		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim DEBUG As Boolean = True
						Dim func As String = args.NameValuePairs.XFGetValue("Function")
						Dim cclist As String = args.NameValuePairs.XFGetValue("cclist")
						Dim CAPEXtoENS_source_app As String = globals.GetObject("CAPEXtoENS_source_app").ToString
						
						Dim wsi_si As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si, CAPEXtoENS_source_app, openAppResult.Success)
						Dim watcher_table As String = "XFW_WMT_CapitalExpense_Watcher"
						
						If func.XFEqualsIgnoreCase("getCClist") Then
							Dim getCCList_status As Boolean = getCClist(si, globals, wsi_si, watcher_table)
							

							If Not getCCList_status Then Return Nothing
							
						ElseIf func.XFEqualsIgnoreCase("extractSourceData")
							Dim ce_cubeView As String = "AppToAppPush"
							Dim extractSourceData_status As Boolean = extractSourceData(si, globals, wsi_si, ce_cubeView, cclist)
							If Not extractSourceData_status Then Return Nothing
						End If
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function

#End Region

#Region "Helper Functions"
		
		Private Function getCClist(ByVal si As SessionInfo, ByRef globals As BRGLobals, ByVal wsi_si As SessionInfo,  ByVal watcher_table As String) As Boolean

			Dim getCCList_status As Boolean = False

			Try
				Dim getcclist_flag As String = DirectCast(globals.GetObject("getcclist_flag"),String)
				'get WMTUS Ecomm VBO list from RACI
				Dim sql_wmtus_ecomm As String = "SELECT DISTINCT VBO FROM XFW_RACI_Matrix WHERE AnaplanECF_Filter LIKE '%ECF%'"
				Dim dt_wmtus_ecomm As New DataTable
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_wmtus_ecomm = BRApi.Database.ExecuteSql(dbConnApp, sql_wmtus_ecomm, False)
				End Using
				Dim entityList_wmtus_ecomm As New HashSet(Of String)
				If dt_wmtus_ecomm IsNot Nothing AndAlso dt_wmtus_ecomm.Rows.Count>0
					For Each dr_wmtus_ecomm In dt_wmtus_ecomm.Rows
						Dim entityList_meminfo_wmtus_ecomm As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "ENT", "E#" & dr_wmtus_ecomm("VBO") & ".Base", True)
						For Each entity_wmtus_ecomm In entityList_meminfo_wmtus_ecomm
'							entityList_wmtus_ecomm += "'" & entity_wmtus_ecomm.Member.Name & "',"
							entityList_wmtus_ecomm.Add(entity_wmtus_ecomm.Member.Name)
						Next	
					Next	
				End If	
'				If entityList_wmtus_ecomm.Length>0
'					entityList_wmtus_ecomm = entityList_wmtus_ecomm.Remove(entityList_wmtus_ecomm.Length-1,1)
'				End If
				
				globals.SetObject("EPtoENT_wmtusecomm_cclist", entityList_wmtus_ecomm)
				
				Dim dt As DataTable = Nothing
				Dim uniquecclist As String = String.Empty
				Dim sql As String = String.Empty
				Dim colname As String = String.Empty
				If getcclist_flag.XFEqualsIgnoreCase("Watcher")
					colname = "CostCenter"
					sql = "SELECT DISTINCT " & colname & " FROM " & watcher_table & " WHERE ActivityID='TRG2' AND (Run_Flag=0 OR Run_Flag =-1)"
				ElseIf getcclist_flag.XFEqualsIgnoreCase("All")
					colname = "Cost_Center"
					sql = "SELECT DISTINCT COST_CENTER As CostCenter FROM XFW_WMT_CLP_VBO_HIER" 
				End If
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(wsi_si)
					dt = BRAPi.Database.ExecuteSql(dbConnApp, sql, False)
				End Using
				
				If dt IsNot Nothing AndAlso dt.Rows.Count > 0
					For Each dr As DataRow In dt.Rows
						uniquecclist += dr("CostCenter") & ","
					Next
				End If
				If uniquecclist.Length > 0 Then
					uniquecclist = uniquecclist.Remove(uniquecclist.Length-1,1)
				End If
				
				globals.SetObject("CAPEXtoENS_getCClist", uniquecclist)
				getCCList_status = True
			

				
			Catch ex As Exception
				getCCList_status = False
				Me.processlog(si,globals,"Exception in getcclist - " & ex.Message)
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		Return getCCList_status
		End Function	
		
		Private Function extractSourceData(ByVal si As SessionInfo, ByRef globals As BRGLobals, ByVal wsi As SessionInfo, ByVal cubeViewName As String, ByVal cclist As String) As Boolean
			Dim extractSourceData_status As Boolean = False
			Try

				Dim dt As DataTable = Nothing

				If cclist.Length > 0 Then
					
					cclist = String.Join(",", cclist.Split(",").[Select](Function(x) "E#" & x))
					
					Dim vParams As New Dictionary(Of String, String)
					vParams.Add("ATAEntity", cclist)
					vParams.Add("ATATime", BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "AOP_Year"))
					
					dt = CVRender(si, wsi, cubeViewName, vParams)
					
					If dt IsNot Nothing AndAlso dt.Rows.Count > 0 Then 

						globals.SetObject("CAPEXtoENS_extractSourceData", dt)
					End If	
				
				End If	
				
				extractSourceData_status = True
			Catch ex As Exception
				extractSourceData_status = False
				Me.processlog(si,globals,"Exception in extract source data - " & ex.Message)
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		Return extractSourceData_status
		End Function
		
		Public Function CVRender(ByRef si As SessionInfo, ByRef wsi As SessionInfo, ByVal cubeViewName As String, ByVal vParams As Dictionary(Of String, String)) As DataTable
			Dim value As New NameValueFormatBuilder 
			Dim instance As New XFIfActionExpr("CVFilter", value)
			value = instance.NameValueFormatBuilder
			value.ApplyNameValuePairsFromDictionary(vParams)
			Dim entityDimensionName As String = ""
			Dim entityMemFilter As String = ""
			Dim scenarioDimName As String = ""
			Dim scenarioMemFilter As String = ""
			Dim timeMemFilter As String = ""
			Dim includeCellTextCols As Boolean = False
			Dim useStandardFactTableFields As Boolean = True
			Dim useGenericTimeColNames As Boolean = True
			Dim parallelQueryCount As Integer = 8
			Dim logStatistics As Boolean = False
			Dim dt As DataTable = Nothing
			Try
				
				dt = BRApi.Import.Data.FdxExecuteCubeViewTimePivot(wsi, cubeViewName, 
					entityDimensionName, entityMemFilter, scenarioDimName, scenarioMemFilter, timeMemFilter, value, includeCellTextCols, 
					useStandardFactTableFields, True, Nothing, parallelQueryCount, logStatistics)
				
				If dt IsNot Nothing Then					
					Return dt
				Else
					Return Nothing
				End If
			Catch e As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try
		End Function
		
		Private Sub processlog(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal logmessage As String)
			Try
				globals.GetObject("CAPEXtoENS_PROCESS_LOG").AppendLine(Environment.NewLine & "[" & DateTime.Now.ToString & "] - " & logmessage)
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		
		End Sub	
		
		Public Function PrintDT(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal Desc As String)
		Try
			 'Print Table
			 Dim dtprint As New Text.StringBuilder
				 For Each dc As DataColumn In dt.Columns
					dtprint.Append(dc.ColumnName & ",")
				 Next
				 dtprint.Remove(dtprint.Length - 1, 1)
				 dtprint.Append(Environment.NewLine)
				 For Each dr As DataRow In dt.Rows										
					For Each dc As DataColumn In dt.Columns
						dtprint.Append(dr(dc.ColumnName) & ",")
					Next
					dtprint.Remove(dtprint.Length - 1, 1)
					dtprint.Append(Environment.NewLine)
				 Next
				 BRApi.ErrorLog.LogMessage(si, Desc,dtprint.ToString)
		Return Nothing		 
		Catch ex As Exception                
	   		Throw ErrorHandler.LogWrite(si,New XFException(si,ex))
		End Try		 
		End Function
		
#End Region		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="CB_test_Extender">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.CB_test_Extender
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
							
						'brapi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"ENTPeriod"&curPeriod," ")
						
						
						Dim totalPeriods As Integer = 12
						Dim curPeriod As Integer = 1
						Dim ParamValue As String = String.Empty
						Dim Formatvalue As String = String.Empty
						Dim Flag As Integer = 0
						 Do While curPeriod <= totalPeriods
							'brapi.ErrorLog.LogMessage(si, "inside Loop")
							ParamValue = brapi.Dashboards.Parameters.GetLiteralParameterValue(si,False,"ENTPeriod"&curPeriod)
							'brapi.ErrorLog.LogMessage(si, "inside Loop" & ParamValue)
							'If Not ParamValue Is Nothing Then 
							If ParamValue <> " "  Then 							
								
								'Formatvalue = Formatvalue & "," & ParamValue
								
								If Flag = 0 Then
									Flag = 1
									Formatvalue = ParamValue
								Else
									Formatvalue = Formatvalue & "," & ParamValue
								End If
								'ParamValue = brapi.Dashboards.Parameters.GetLiteralParameterValue(si,False,"ENTPeriod"&curPeriod)
																							
							End If
							'brapi.ErrorLog.LogMessage(si,"Inside Format Loop" & Formatvalue)
'							If curPeriod = 1 Then
'								Formatvalue = ParamVaue
'							Else If curPeriod = 3 Then
'								Formatvalue = Formatvalue & ParamVaue
'							Else
'								Formatvalue = Formatvalue & "," & ParamVaue
'							End If
							
							'brapi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"ENTPeriodSelection",Formatvalue)
							brapi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"ENTPeriod"&curPeriod," ")
							curPeriod = curPeriod + 1
						  Loop
						  brapi.ErrorLog.LogMessage(si,"outLoop" & Formatvalue)
						  brapi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"ENTPeriodSelection",Formatvalue)
'							Dim monthselect1 As String = String.Empty
'							Dim monthselect2 As String = String.Empty
'							Dim monthselect3 As String = String.Empty
'							Dim monthselect4 As String = String.Empty
'							Dim monthselect5 As String = String.Empty
'							Dim monthselect6 As String = String.Empty
'							Dim monthselect7 As String = String.Empty
'							Dim monthselect8 As String = String.Empty
'							Dim monthselect9 As String = String.Empty
'							Dim monthselect10 As String = String.Empty
'							Dim monthselect11 As String = String.Empty
'							Dim monthselect12 As String = String.Empty
'							Dim selectedPeriods As String = ""
'							'BRApi.State.GetSessionState(si, False, ClientModuleType.External, "", "", si.AppName, $"start_period_{wfName}").TextValue
'							' Dim monthNum As String = String.Empty
'							'monthNum = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, $"CB1_{monthNum}").TextValue
'							'setvalue = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "Month").TextValue
'							brapi.ErrorLog.LogMessage(si,"Out" & selectedPeriods)
'							Dim setvalue1  = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M1")
							
'							If Not setvalue1 Is Nothing Then
'								'brapi.ErrorLog.LogMessage(si,"inside not")	
'								'monthselect1 = setvalue1.TextValue
'								selectedPeriods = setvalue1.TextValue
'								brapi.ErrorLog.LogMessage(si,"CB1" & selectedPeriods)
'							End If
'							Dim setvalue2  = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M2")
'							If Not setvalue2 Is Nothing Then
'								'brapi.ErrorLog.LogMessage(si,"inside not")	
'								monthselect2 = setvalue2.TextValue
'								If Not selectedPeriods Is Nothing Then
'									selectedPeriods = selectedPeriods & "," & setvalue2.TextValue
'								Else
'									selectedPeriods = setvalue2.TextValue
'								End If
'								brapi.ErrorLog.LogMessage(si,"CB2" & selectedPeriods)
'							End If
'							Dim setvalue3  = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M3")
'							If Not setvalue3 Is Nothing Then
'								'brapi.ErrorLog.LogMessage(si,"inside not")	
'								If Not selectedPeriods Is Nothing Then
'									selectedPeriods = selectedPeriods & "," & setvalue3.TextValue
'								Else
'									selectedPeriods = setvalue3.TextValue
'								End If
'								brapi.ErrorLog.LogMessage(si,"CB3" & selectedPeriods)
'							End If
							
'							Dim setvalue4  = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M4")
'							If Not setvalue4 Is Nothing Then
'								'brapi.ErrorLog.LogMessage(si,"inside not")	
'								If Not selectedPeriods Is Nothing Then
'									selectedPeriods = selectedPeriods & "," & setvalue4.TextValue
'								Else
'									selectedPeriods = setvalue4.TextValue
'								End If
'								brapi.ErrorLog.LogMessage(si,"CB4" & selectedPeriods)
'							End If
							
'							Dim setvalue5  = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M5")
'							If Not setvalue5 Is Nothing Then
'								'brapi.ErrorLog.LogMessage(si,"inside not")	
'								If Not selectedPeriods Is Nothing Then
'									selectedPeriods = selectedPeriods & "," & setvalue5.TextValue
'								Else
'									selectedPeriods = setvalue5.TextValue
'								End If
'								brapi.ErrorLog.LogMessage(si,"CB5" & selectedPeriods)
'							End If
							
'							Dim setvalue6  = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M6")
'							If Not setvalue6 Is Nothing Then
'								'brapi.ErrorLog.LogMessage(si,"inside not")	
'								If Not selectedPeriods Is Nothing Then
'									selectedPeriods = selectedPeriods & "," & setvalue6.TextValue
'								Else
'									selectedPeriods = setvalue6.TextValue
'								End If
'								brapi.ErrorLog.LogMessage(si,"CB6" & selectedPeriods)
'							End If
							
'							Dim setvalue7  = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M7")
'							If Not setvalue7 Is Nothing Then
'								'brapi.ErrorLog.LogMessage(si,"inside not")	
'								If Not selectedPeriods Is Nothing Then
'									selectedPeriods = selectedPeriods & "," & setvalue7.TextValue
'								Else
'									selectedPeriods = setvalue7.TextValue
'								End If
'								brapi.ErrorLog.LogMessage(si,"CB7" & selectedPeriods)
'							End If
							
'							Dim setvalue8  = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M8")
'							If Not setvalue8 Is Nothing Then
'								'brapi.ErrorLog.LogMessage(si,"inside not")	
'								If Not selectedPeriods Is Nothing Then
'									selectedPeriods = selectedPeriods & "," & setvalue8.TextValue
'								Else
'									selectedPeriods = setvalue8.TextValue
'								End If
'								brapi.ErrorLog.LogMessage(si,"CB8" & selectedPeriods)
'							End If
							
'							Dim setvalue9  = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M9")
'							If Not setvalue9 Is Nothing Then
'								'brapi.ErrorLog.LogMessage(si,"inside not")	
'								If Not selectedPeriods Is Nothing Then
'									selectedPeriods = selectedPeriods & "," & setvalue9.TextValue
'								Else
'									selectedPeriods = setvalue9.TextValue
'								End If
'								brapi.ErrorLog.LogMessage(si,"CB9" & selectedPeriods)
'							End If
'							Dim setvalue10  = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M10")
'							If Not setvalue10 Is Nothing Then
'								'brapi.ErrorLog.LogMessage(si,"inside not")	
'								If Not selectedPeriods Is Nothing Then
'									selectedPeriods = selectedPeriods & "," & setvalue10.TextValue
'								Else
'									selectedPeriods = setvalue10.TextValue
'								End If
'								brapi.ErrorLog.LogMessage(si,"CB10" & selectedPeriods)
'							End If
							
'							Dim setvalue11  = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M11")
'							If Not setvalue6 Is Nothing Then
'								'brapi.ErrorLog.LogMessage(si,"inside not")	
'								If Not selectedPeriods Is Nothing Then
'									selectedPeriods = selectedPeriods & "," & setvalue11.TextValue
'								Else
'									selectedPeriods = setvalue11.TextValue
'								End If
'								brapi.ErrorLog.LogMessage(si,"CB11" & selectedPeriods)
'							End If
'							Dim setvalue12  = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M12")
'							If Not setvalue12 Is Nothing Then
'								'brapi.ErrorLog.LogMessage(si,"inside not")	
'								If Not selectedPeriods Is Nothing Then
'									selectedPeriods = selectedPeriods & "," & setvalue12.TextValue
'								Else
'									selectedPeriods = setvalue12.TextValue
'								End If
'								brapi.ErrorLog.LogMessage(si,"CB12" & selectedPeriods)
'							End If
							
'						BRApi.State.DeleteSessionState(si, False, ClientModuleType.External, "","",si.AppName,"M1" )
'						BRApi.State.DeleteSessionState(si, False, ClientModuleType.External, "","",si.AppName,"M2" )
'						BRApi.State.DeleteSessionState(si, False, ClientModuleType.External, "","",si.AppName,"M3" )
'						BRApi.State.DeleteSessionState(si, False, ClientModuleType.External, "","",si.AppName,"M4" )
'						BRApi.State.DeleteSessionState(si, False, ClientModuleType.External, "","",si.AppName,"M5" )
'						BRApi.State.DeleteSessionState(si, False, ClientModuleType.External, "","",si.AppName,"M6" )
'						BRApi.State.DeleteSessionState(si, False, ClientModuleType.External, "","",si.AppName,"M7" )
'						BRApi.State.DeleteSessionState(si, False, ClientModuleType.External, "","",si.AppName,"M8" )
'						BRApi.State.DeleteSessionState(si, False, ClientModuleType.External, "","",si.AppName,"M9" )
'						BRApi.State.DeleteSessionState(si, False, ClientModuleType.External, "","",si.AppName,"M10" )
'						BRApi.State.DeleteSessionState(si, False, ClientModuleType.External, "","",si.AppName,"M11" )
'						BRApi.State.DeleteSessionState(si, False, ClientModuleType.External, "","",si.AppName,"M12" )
							
'							monthselect2 = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M2").TextValue
'							monthselect3 = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M3").TextValue
'							monthselect4 = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M4").TextValue
'							monthselect5 = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M5").TextValue
'							monthselect6 = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M6").TextValue
'							monthselect7 = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M7").TextValue
'							monthselect8 = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M8").TextValue
'							monthselect9 = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M9").TextValue
'							monthselect10 = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M10").TextValue
'							monthselect11 = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M11").TextValue
'							monthselect12 = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M12").TextValue
							'selectedPeriods = Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M1").TextValue & "," & Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M2").TextValue & "," & Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M3").TextValue & "," & Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M4").TextValue & "," & Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M5").TextValue & "," & Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M6").TextValue & "," & Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M7").TextValue & "," & Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M8").TextValue & "," & Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M9").TextValue & "," & Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M10").TextValue & "," & Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M11").TextValue & "," & Brapi.State.GetSessionState(si,False,ClientModuleType.External,"","",si.AppName, "M12").TextValue & ","
							'Brapi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"ENTPeriodSelection",selectedPeriods)
							'brapi.ErrorLog.LogMessage(si,"CB-Button" & selectedPeriods)
							'selectedPeriods.Append()
							'Brapi.ErrorLog.LogMessage(si,"CB-Button" & monthselect2)	
												
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="CB_WMTUS_Adj_Block">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.CB_WMTUS_Adj_Block
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
									
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim totalPeriods As Integer = 12
						Dim curPeriod As Integer = 1
						Dim ParamValue As String = String.Empty
						Dim Formatvalue As String = String.Empty
						Dim Flag As Integer = 0
						 Do While curPeriod <= totalPeriods
							
							ParamValue = brapi.Dashboards.Parameters.GetLiteralParameterValue(si,False,"ENTPeriod"&curPeriod)
							If ParamValue <> " "  Then 							
								If Flag = 0 Then
									Flag = 1
									Formatvalue = ParamValue
								Else
									Formatvalue = Formatvalue & "," & ParamValue
								End If																							
							End If

							brapi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"ENTPeriod"&curPeriod," ")
							curPeriod = curPeriod + 1
						  Loop
						  'brapi.ErrorLog.LogMessage(si,"outLoop" & Formatvalue)
						  brapi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"ENTPeriodSelection",Formatvalue)
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="CB_WMTUS_Adj_Copy">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.CB_WMTUS_Adj_Copy
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim totalPeriods As Integer = 12
						Dim curPeriod As Integer = 1
						Dim ParamValue As String = String.Empty
						Dim Formatvalue As String = String.Empty
						Dim Flag As Integer = 0
						 Do While curPeriod <= totalPeriods
						
							ParamValue = brapi.Dashboards.Parameters.GetLiteralParameterValue(si,False,"ENTPeriod"&curPeriod)
							If ParamValue <> " "  Then 							
										
								If Flag = 0 Then
									Flag = 1
									Formatvalue = "T#" & ParamValue.Trim
								Else
									Formatvalue = Formatvalue & "," & "T#" & ParamValue.Trim
								End If																						
							End If							
							brapi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"ENTPeriod"&curPeriod," ")
							curPeriod = curPeriod + 1
						  Loop
						  brapi.ErrorLog.LogMessage(si,"outLoop" & Formatvalue)
						  brapi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"ENTPeriodSelection",Formatvalue)
					
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="CFR_Create_Table">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.CFR_Create_Table
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
			
				Dim sql As New Text.StringBuilder
		
			
					Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					
					
'						sql.AppendLine("DROP TABLE [dbo].[XFT_CFR_Control_Table] ")
'						sql.AppendLine("CREATE TABLE [dbo].[XFT_CFR_Control_Table] ")
'						sql.AppendLine("( ") 
'						sql.AppendLine(" [ID] int NOT NULL IDENTITY(101, 1) PRIMARY KEY,") 
'						sql.AppendLine(" [TimeStamp] DATETIME DEFAULT CURRENT_TIMESTAMP, ")
'						sql.AppendLine(" [CertifiedBy] [varchar] (200), ") 
'						sql.AppendLine(" [ViewName] [varchar] (200) , ") 								
'						sql.AppendLine(" [Scenario] [varchar] (200), ") 
'						sql.AppendLine(" [Year] [varchar] (200), ")
'						sql.AppendLine(" [Status][varchar] (200), ")
'						sql.AppendLine(" [Detail][varchar] (500) ")
'						sql.AppendLine(")")


'						sql.AppendLine("DROP TABLE [dbo].[XFT_CFR_Validate_Control_Table] ")
'						sql.AppendLine("CREATE TABLE [dbo].[XFT_CFR_Validate_Control_Table] ")
'						sql.AppendLine("( ") 
'						sql.AppendLine(" [ID] int NOT NULL IDENTITY(101, 1) PRIMARY KEY,") 
'						sql.AppendLine(" [TimeStamp] DATETIME DEFAULT CURRENT_TIMESTAMP, ")
'						sql.AppendLine(" [CertifiedBy] [varchar] (200), ") 
'						sql.AppendLine(" [ViewName] [varchar] (200) , ") 								
'						sql.AppendLine(" [Scenario] [varchar] (200), ") 
'						sql.AppendLine(" [Year] [varchar] (200), ")
'						sql.AppendLine(" [Status][varchar] (200), ")
'						sql.AppendLine(" [Detail][varchar] (500) ")
'						sql.AppendLine(")")


						sql.AppendLine("DROP TABLE XFT_CFR_AUDIT_AUTOMATION_CT ")
						sql.AppendLine("CREATE TABLE [dbo].[XFT_CFR_AUDIT_AUTOMATION_CT] ")
						sql.AppendLine("( ") 
						sql.AppendLine(" [ID] int NOT NULL IDENTITY(101, 1) PRIMARY KEY,") 
						sql.AppendLine(" [TimeStamp] DATETIME DEFAULT CURRENT_TIMESTAMP, ")
						sql.AppendLine(" [ExecutedBy] [varchar] (200), ") 
						sql.AppendLine(" [View_Scenario_Year]  varchar(max), ") 
						sql.AppendLine(" [Status] varchar(200), ")
						sql.AppendLine(" [Detail] varchar(max) ")
						sql.AppendLine(")")

'						sql.AppendLine("DROP TABLE XFT_CFR_AUDIT_AUTOMATION_EMAIL_CT ")
'						sql.AppendLine("CREATE TABLE [dbo].[XFT_CFR_AUDIT_AUTOMATION_EMAIL_CT] ")
'						sql.AppendLine("( ") 
'						sql.AppendLine(" [Email] [varchar] (200) ") 
'						sql.AppendLine(")")
						

'						sql.AppendLine("DROP TABLE XFT_CFR_Current_Data ")
'						sql.AppendLine("CREATE TABLE [dbo].[XFT_CFR_Current_Data] ")
'						sql.AppendLine("( ") 
'						sql.AppendLine(" [Cube] [varchar] (200), ")
'						sql.AppendLine(" [Entity] [varchar] (200), ") 
'						sql.AppendLine(" [Parent] [varchar] (200) , ") 								
'						sql.AppendLine(" [Cons] [varchar] (200), ") 
'						sql.AppendLine(" [Scenario] [varchar] (200), ")
'						sql.AppendLine(" [Time][varchar] (200), ")
'						sql.AppendLine(" [View] [varchar] (200), ")
'						sql.AppendLine(" [Account] [varchar] (200), ") 
'						sql.AppendLine(" [Flow] [varchar] (200) , ") 								
'						sql.AppendLine(" [Origin] [varchar] (200), ") 
'						sql.AppendLine(" [IC] [varchar] (200), ")
'						sql.AppendLine(" [UD1][varchar] (200), ")
'						sql.AppendLine(" [UD2] [varchar] (200), ")
'						sql.AppendLine(" [UD3] [varchar] (200), ") 
'						sql.AppendLine(" [UD4] [varchar] (200) , ") 								
'						sql.AppendLine(" [UD5] [varchar] (200), ") 
'						sql.AppendLine(" [UD6] [varchar] (200), ")
'						sql.AppendLine(" [UD7][varchar] (200), ")
'						sql.AppendLine(" [UD8] [varchar] (200), ") 
'						sql.AppendLine(" [Amount] [Decimal], ")
'						sql.AppendLine(" [ID] [Int] ") 
'						sql.AppendLine(")")
						
						
'						sql.AppendLine("DROP TABLE XFT_CFR_Certified_Data ")
'						sql.AppendLine("CREATE TABLE [dbo].[XFT_CFR_Certified_Data] ")
'						sql.AppendLine("( ") 
'						sql.AppendLine(" [Cube] [varchar] (200), ")
'						sql.AppendLine(" [Entity] [varchar] (200), ") 
'						sql.AppendLine(" [Parent] [varchar] (200) , ") 								
'						sql.AppendLine(" [Cons] [varchar] (200), ") 
'						sql.AppendLine(" [Scenario] [varchar] (200), ")
'						sql.AppendLine(" [Time][varchar] (200), ")
'						sql.AppendLine(" [View] [varchar] (200), ")
'						sql.AppendLine(" [Account] [varchar] (200), ") 
'						sql.AppendLine(" [Flow] [varchar] (200) , ") 								
'						sql.AppendLine(" [Origin] [varchar] (200), ") 
'						sql.AppendLine(" [IC] [varchar] (200), ")
'						sql.AppendLine(" [UD1][varchar] (200), ")
'						sql.AppendLine(" [UD2] [varchar] (200), ")
'						sql.AppendLine(" [UD3] [varchar] (200), ") 
'						sql.AppendLine(" [UD4] [varchar] (200) , ") 								
'						sql.AppendLine(" [UD5] [varchar] (200), ") 
'						sql.AppendLine(" [UD6] [varchar] (200), ")
'						sql.AppendLine(" [UD7][varchar] (200), ")
'						sql.AppendLine(" [UD8] [varchar] (200), ") 
'						sql.AppendLine(" [Amount] [Decimal], ")
'						sql.AppendLine(" [ID] [Int] ") 
'						sql.AppendLine(")")



'						sql.AppendLine("DROP TABLE [dbo].[XFT_CFR_LISTBOX] ")
'						sql.AppendLine("CREATE TABLE [dbo].[XFT_CFR_LISTBOX] ")
'						sql.AppendLine("( ") 
'						sql.AppendLine(" [View] [varchar] (200), ")
'						sql.AppendLine(" [Scenario] [varchar] (200), ")
'						sql.AppendLine(" [Year] [varchar] (200), ") 
'						sql.AppendLine(")")

						
						
						
				BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)	
				End Using

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="CFR_Execute_Certify">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.CFR_Execute_Certify
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Me.certify(si, globals, api, args)
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Function certify(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs)
			Try
				
				Dim CurrentCV As String = args.NameValuePairs.XFGetValue("CurrentCV",String.Empty)
				Dim CurrentScenario As String = args.NameValuePairs.XFGetValue("CurrentScenario",String.Empty)
				Dim CurrentYear As String = args.NameValuePairs.XFGetValue("CurrentYear",String.Empty)
				Dim JobID As Integer = ConvertHelper.ToInt32(args.NameValuePairs.XFGetValue("JobID",String.Empty))
				
				Dim cfrflowlist As List(Of String) = New List(Of String)({"RPT_USD", "RPT_Peg"})
				Dim cfrud4list As List(Of String) = New List(Of String)({"Ext_Reported", "Ext_Adjusted"})
				
				Dim cvParams As New Dictionary(Of String, String)
				cvParams.Add("cfrScenario", CurrentScenario)
				cvParams.Add("cfrTime", CurrentYear)
				cvParams.Add("cfrflow", "Total_Flow")
				cvParams.Add("cfrud4", "Ext_Adjusted")
				
				Dim dt As New DataTable
				Dim dtt As DataTable = CVRender(si, CurrentCV , cvParams)
				
				If dtt IsNot Nothing AndAlso dtt.Rows.Count > 0  Then
				
					dt = dtt.Clone()
					For Each cfrflow In cfrflowlist
						For Each cfrud4 In cfrud4list
							For M = 1 To 1 Step 1 
								Dim cvParamsLoop As New Dictionary(Of String, String)
								cvParamsLoop.Add("cfrScenario", CurrentScenario)
								cvParamsLoop.Add("cfrTime", CurrentYear)
								cvParamsLoop.Add("cfrflow", cfrflow)
								cvParamsLoop.Add("cfrud4", cfrud4)
								Dim dtTemp As DataTable = CVRender(si, CurrentCV , cvParamsLoop )
								If dtTemp IsNot Nothing Then
									dt.Merge(dtTemp)
								End If
							Next
						Next
					Next
					
					
					If dt IsNot Nothing AndAlso dt.Rows.Count > 0 Then
						dt.Columns.Remove("RowHdr0ParentName")
						dt.Columns.Add(New DataColumn("Amount", System.Type.GetType("System.Decimal")))
						dt.AcceptChanges()
						Dim maxRows As Integer = dt.Rows.Count
						For rowIndex As Integer = 0 To maxRows - 1
							Dim row As DataRow = dt.Rows(rowIndex)
							
							row("Time") = CurrentYear & "M1"
							row("Amount") = row("V" & CurrentYear & "M1")
							
							For M = 2 To 12 Step 1
								Dim newRow As Datarow = dt.NewRow()
								newRow.ItemArray = dt.Rows(rowIndex).ItemArray
								If Math.Abs(newRow("V" & CurrentYear & "M" & M)) <> Decimal.Zero Then
									newRow("Time") = CurrentYear & "M" & M
									newRow("Amount") = newRow("V" & CurrentYear & "M" & M)
									dt.Rows.Add(newRow)
								End If	
							Next
							
						Next
						
						For M = 1 To 12 Step 1
							dt.Columns.Remove("V" & CurrentYear & "M" & M)
						Next	
						dt.AcceptChanges
						
						Me.SaveDataTable(si, "XFT_CFR_Certified_Data", dt, JobID)
					End If	
					
				Else
					Me.UpdateStatus(si, JobID, 0, "Completed")
				End If
				
			Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function		
		
		
		
		Public Function SaveDataTable(ByVal si As SessionInfo, ByVal tableName As String, ByVal dt As DataTable ,ByVal JobID As Integer)
			Try
				
				Dim newColumn As New DataColumn("ID", GetType(Integer))     
				newColumn.DefaultValue = CType(JobID, Integer)
				dt.Columns.Add(newColumn)
					
				BRApi.Database.SaveCustomDataTable(si, "App", tableName, dt, True)
				Me.UpdateStatus(si, JobID, dt.Rows.Count, "Certified")
			Return Nothing
			Catch ex As Exception
			Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
		End Try
		End Function
		
		
		Public Function UpdateStatus(ByVal si As SessionInfo, ByVal JobID As String, ByVal dtCount As Integer, ByVal Status As String )
		Try
			Dim sql As New Text.StringBuilder
			sql.AppendLine("UPDATE XFT_CFR_Control_Table SET Status = '" & Status & "', Detail = 'Row Count " & dtCount & "' WHERE ID = '" & JobID & "' ")
			Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)
			End Using
			
		
		Return Nothing		 
		Catch ex As Exception                
	   		Throw ErrorHandler.LogWrite(si,New XFException(si,ex))
		End Try		 
		End Function	
		
		
		Public Function CVRender(ByRef si As SessionInfo, ByVal cubeViewName As String, ByVal vParams As Dictionary(Of String, String)) As DataTable
			Dim value As New NameValueFormatBuilder 
			Dim instance As New XFIfActionExpr("CVFilter", value)
			value = instance.NameValueFormatBuilder
			value.ApplyNameValuePairsFromDictionary(vParams)
			Dim entityDimensionName As String = ""
			Dim entityMemFilter As String = ""
			Dim scenarioDimName As String = ""
			Dim scenarioMemFilter As String = ""
			Dim timeMemFilter As String = ""
			Dim includeCellTextCols As Boolean = False
			Dim useStandardFactTableFields As Boolean = True
			Dim useGenericTimeColNames As Boolean = True
			Dim parallelQueryCount As Integer = 8
			Dim logStatistics As Boolean = False
			Dim dt As DataTable = Nothing
			Try
				dt = BRApi.Import.Data.FdxExecuteCubeView(si, cubeViewName, entityDimensionName, entityMemFilter, scenarioDimName, scenarioMemFilter, timeMemFilter, value, includeCellTextCols, useStandardFactTableFields, Nothing, parallelQueryCount, logStatistics)
				If dt IsNot Nothing Then					
					Return dt
				Else
					Return Nothing
				End If
			Catch e As Exception
				Brapi.ErrorLog.LogMessage(si,$"getCV({cubeviewName}, {string.Join(":", vParams)}) failed with error - {e}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try
		End Function
		
			
		Public Function PrintDT(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal Desc As String)
		Try
			 'Print Table
			 Dim dtprint As New Text.StringBuilder
				 For Each dc As DataColumn In dt.Columns
					dtprint.Append(dc.ColumnName & ",")
				 Next
				 dtprint.Remove(dtprint.Length - 1, 1)
				 dtprint.Append(Environment.NewLine)
				 For Each dr As DataRow In dt.Rows										
					For Each dc As DataColumn In dt.Columns
						dtprint.Append(dr(dc.ColumnName) & ",")
					Next
					dtprint.Remove(dtprint.Length - 1, 1)
					dtprint.Append(Environment.NewLine)
				 Next
				 BRApi.ErrorLog.LogMessage(si, Desc,dtprint.ToString)
		Return Nothing		 
		Catch ex As Exception                
	   		Throw ErrorHandler.LogWrite(si,New XFException(si,ex))
		End Try		 
		End Function
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="CFR_Execute_Job">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="CFR_Compare_Solution2" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.CFR_Execute_Job
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
				
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						Dim SelectedCV As String = args.NameValuePairs.XFGetValue("SelectedCV")
						Dim SelectedScenario As String = args.NameValuePairs.XFGetValue("SelectedScenario")
						Dim SelectedYear As String = args.NameValuePairs.XFGetValue("SelectedYear")
						
						Dim cfrHelper As New OneStream.BusinessRule.DashboardExtender.CFR_Compare_Solution2.MainClass
						cfrHelper.RunCertifyJob(si, SelectedCV, SelectedScenario, SelectedYear)
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="CFR_Execute_Job_Scheduler">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.CFR_Execute_Job_Scheduler
	Public Class MainClass
		Dim FilePath As String = String.Empty
		Dim jobIDAutomation As String = String.Empty
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Me.ValidateWithEmailNotification(si, globals, api, args)
						
					
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Function ValidateWithEmailNotification(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs)
			Try
				jobIDAutomation = args.NameValuePairs.XFGetValue("jobID",String.Empty)
				Dim sql As New Text.StringBuilder 
				Dim dt As DataTable = Nothing
				Dim dtVariance As DataTable = Nothing
				Dim Fmessage As String = String.Empty
				Dim attachmentInfo As New List(Of String)
				
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt = BRApi.Database.ExecuteSql(dbConnApp, "SELECT * FROM XFT_CFR_LISTBOX Order By Scenario, Year Desc", True)
				End Using
				
				If dt IsNot Nothing AndAlso dt.Rows.Count > 0 Then
						For Each row As DataRow In dt.Rows 
							Dim CurrentCV As String = row("View")
							Dim CurrentScenario As String = row("Scenario")
							Dim CurrentYear As String = row("Year")
							Dim Smessage As String = String.Empty
							
							Dim rrow As Integer = CertifyCheck(si, CurrentCV, CurrentScenario, CurrentYear, False)
							
							If rrow = 1 Then
								
								If Not isConsStatus(si, CurrentScenario, CurrentYear) Then
									Me.ExecuteFConsolidation(si, CurrentScenario, CurrentYear)
								End If
								
								Dim cfrflowlist As List(Of String) = New List(Of String)({"RPT_USD", "RPT_Peg"})
								Dim cfrud4list As List(Of String) = New List(Of String)({"Ext_Reported", "Ext_Adjusted"})
								
								Dim cvParams As New Dictionary(Of String, String)
								cvParams.Add("cfrScenario", CurrentScenario)
								cvParams.Add("cfrTime", CurrentYear)
								cvParams.Add("cfrflow", "Total_Flow")
								cvParams.Add("cfrud4", "Ext_Adjusted")
								
								
								Dim dtt As DataTable = CVRender(si, CurrentCV , cvParams)
								Dim JobID As Integer = CertifyCheck(si, CurrentCV, CurrentScenario, CurrentYear, True)
								
								If dtt IsNot Nothing AndAlso dtt.Rows.Count > 0  Then
								
									dt = dtt.Clone()
									For Each cfrflow In cfrflowlist
										For Each cfrud4 In cfrud4list
											Dim cvParamsLoop As New Dictionary(Of String, String)
												cvParamsLoop.Add("cfrScenario", CurrentScenario)
												cvParamsLoop.Add("cfrTime", CurrentYear)
												cvParamsLoop.Add("cfrflow", cfrflow)
												cvParamsLoop.Add("cfrud4", cfrud4)
												Dim dtTemp As DataTable = CVRender(si, CurrentCV , cvParamsLoop )
												If dtTemp IsNot Nothing Then
													dt.Merge(dtTemp)
												End If
										Next	
									Next
									
									If dt IsNot Nothing AndAlso dt.Rows.Count > 0 
										dt.Columns.Remove("RowHdr0ParentName")
										dt.Columns.Add(New DataColumn("Amount", System.Type.GetType("System.Decimal")))
										dt.AcceptChanges()
										Dim maxRows As Integer = dt.Rows.Count
										For rowIndex As Integer = 0 To maxRows - 1
											Dim xrow As DataRow = dt.Rows(rowIndex)
											
											xrow("Time") = CurrentYear & "M1"
											xrow("Amount") = xrow("V" & CurrentYear & "M1")
											
											For M = 2 To 12 Step 1
												Dim newRow As Datarow = dt.NewRow()
												newRow.ItemArray = dt.Rows(rowIndex).ItemArray
												If Math.Abs(newRow("V" & CurrentYear & "M" & M)) <> Decimal.Zero Then
													newRow("Time") = CurrentYear & "M" & M
													newRow("Amount") = newRow("V" & CurrentYear & "M" & M)
													dt.Rows.Add(newRow)
												End If	
											Next
										Next
										
										For M = 1 To 12 Step 1
											dt.Columns.Remove("V" & CurrentYear & "M" & M)
										Next	
										dt.AcceptChanges
										
										'Me.PrintDT(si, dt, "PRINT DT12:" & dt.Rows.Count.XFToString)
										Me.SaveDataTable(si, "XFT_CFR_Current_Data", dt, JobID)
										
										dtVariance = ExecuteVariance(si, JobID)
										
										If dtVariance IsNot Nothing Then
											If dtVariance.Rows.Count > 0 Then
												Smessage = "Has Variance"
												If CreateFileForAttachment(si, dtVariance, CurrentCV, CurrentScenario, CurrentYear) Then
													attachmentInfo.Add(CurrentCV & "_" & CurrentScenario & "_" & CurrentYear & ".csv")
												End If
											Else
												Smessage = "No Variance"
											End If		
										End If
									End If
								Else	
									Smessage = "No Data Available"
								End If
							Else
								Smessage = "Not Certified"
							End If
						
						
						Fmessage = Fmessage & CurrentCV & "-" & CurrentScenario & "-" & CurrentYear & ":" & Smessage & Environment.NewLine
							
						Next
						
						If (Fmessage.EndsWith(Environment.NewLine)) Then
							Fmessage = Fmessage.Remove(Fmessage.LastIndexOf(Environment.NewLine))
						End If
						
						Me.SendEmail(si, Fmessage, attachmentInfo)
						
						sql.AppendLine("UPDATE XFT_CFR_AUDIT_AUTOMATION_CT SET Status = 'Completed', Detail = '" & Fmessage & "' WHERE ID = '" & jobIDAutomation & "' ")
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)
						End Using
						
						
				End If
				
				
				Return Nothing
			Catch ex As Exception
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					BRAPi.Database.ExecuteSql(dbConnApp, "UPDATE XFT_CFR_AUDIT_AUTOMATION_CT SET Status = 'Error', Detail = '" & ex.Message & "' WHERE ID = '" & jobIDAutomation & "' ", True)
				End Using
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Function CreateFileForAttachment(ByRef si As SessionInfo, ByVal dt As DataTable ,ByVal CurrentCV As String, ByVal CurrentScenario As String, ByVal CurrentYear As String) As Boolean
		Try	
			
			Dim FileName As String = String.Empty
			
			If dt IsNot Nothing Then
				If dt.Rows.Count <> 0 Then
					Dim everyonePath As String = BRApi.FileSystem.GetFileShareFolder(si, FileShareFolderTypes.ApplicationRoot, Nothing) & "\" & si.AppName.Replace(" ", String.Empty) & "\Incoming\CFR_Audit\"
						Using fdxDataFile As System.IO.StreamWriter = New StreamWriter(everyonePath & CurrentCV & "_" & CurrentScenario & "_" & CurrentYear &".csv", False)
							FilePath = everyonePath 
							FileName = CurrentCV & "_" & CurrentScenario & "_" & CurrentYear &".csv"
'							brapi.ErrorLog.LogMessage(si,everyonePath)
								Dim writeThis As New Text.StringBuilder
								For Each dc As DataColumn In dt.Columns
										writeThis.Append(dc.ColumnName)
										writeThis.Append(",")
								Next
								'Remove last comma
								writeThis.Remove(writeThis.Length - 1, 1)
								fdxDataFile.WriteLine(writeThis.ToString)
								
								writeThis.Clear						
								For Each dr As DataRow In dt.Rows										
									For Each dc As DataColumn In dt.Columns
										writeThis.Append(dr(dc.ColumnName) & ",")
									Next
									writeThis.Remove(writeThis.Length - 1, 1)										
									fdxDataFile.WriteLine(writeThis.ToString)
									writeThis.Clear
								Next
								fdxDataFile.Close
								
							End Using
					
					End If
			
				End If
			If System.IO.File.Exists(FilePath & FileName) Then
				Return True
			Else
				Return False
			End If	
			
		Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
		End Try
		
		End Function
		
		Public Sub SendEmail(ByRef si As SessionInfo, ByVal Fmessage As String, ByVal attachmentInfo As List(Of String))
		Try
	
				Dim emailConnectionName As String = "WalmartSMTP"
				Dim toEmail As New List(Of String)
				Dim subject As String = si.AppName & " - Batch Detail Report for DM Job CFR_Audit_Automation"
				Dim dtEmail As DataTable = Nothing
				Dim attachmentFilePaths As New List(Of String)
				Dim getEmailStyle As New Text.StringBuilder
				Dim sizeInBytes As Long = 0 
				Dim temppath As String = FilePath & DateTime.Now.ToString("yyyy_MM_dd_HH_mm")
				'getEmailStyle.AppendLine(args.CustomCalculateArgs.NameValuePairs("00_Email_Style"))
			    getEmailStyle.AppendLine(BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "00_Email_Style"))
				getEmailStyle.AppendLine(getTable(si, Fmessage, attachmentInfo))
				
				For Each Item As String In attachmentInfo
					Dim myFile As New FileInfo(FilePath & Item)
					sizeInBytes += myFile.Length
				Next
				
				If Math.Ceiling( sizeInBytes / 1000000 ) > 15 Then
					System.IO.Directory.CreateDirectory(temppath)
					
					For Each Item2 As String In attachmentInfo
						File.Copy(FilePath & Item2, temppath & "\" & Item2, True)
					Next
					
					getEmailStyle.AppendLine("<br><br><span style='color:white;background-color: #3C7BEC;padding:10px;'>Refrence Path : " & temppath.Substring(temppath.IndexOf("FileShare")) & "</span>")
					
				Else
					For Each Item As String In attachmentInfo
						attachmentFilePaths.Add(FilePath & Item)
					Next
				End If
					
				
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
						dtEmail = BRAPi.Database.ExecuteSql(dbConnApp, "SELECT * FROM XFT_CFR_AUDIT_AUTOMATION_EMAIL_CT", True)
				End Using
				If dtEmail IsNot Nothing Then
					If dtEmail.Rows.Count > 0 Then
						For Each row As DataRow In dtEmail.Rows
							toEmail.Add(row("Email"))
						Next	
					End If
				End If
				
				BRApi.Utilities.SendMail(si, emailConnectionName, toEmail, subject, getEmailStyle.ToString, True,attachmentFilePaths)
			
		Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
		End Try
		
		End Sub
		
		Public Sub ExecuteFConsolidation(ByRef si As SessionInfo, ByVal SelectedScenario As String, ByVal SelectedYear As String)
			Try
		
				
			Dim customSubVars As New Dictionary(Of String, String)
			
			customSubVars.Add("CFRConsoTime", SelectedYear + "M12")
			customSubVars.Add("CFRConsoScenario", SelectedScenario)
			
			BRApi.Utilities.ExecuteDataMgmtSequence(si, "Execute_CFR_Consolidation", customSubVars)
				
				
			Catch e As Exception
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					BRAPi.Database.ExecuteSql(dbConnApp, "UPDATE XFT_CFR_AUDIT_AUTOMATION_CT SET Status = 'Error', Detail = '" & e.Message & "' WHERE ID = '" & jobIDAutomation & "' ", True)
				End Using
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try
		End Sub
		
		
		Public Function CertifyCheck(ByRef si As SessionInfo, ByVal CurrentCV As String, ByVal CurrentScenario As String, ByVal CurrentYear As String, ByVal ReturnID As Boolean) As Integer
			Try
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					Dim dt As DataTable = BRApi.Database.ExecuteSql(dbConnApp, "SELECT * FROM [dbo].[XFT_CFR_Control_Table] Where ViewName='" & $"{CurrentCV}' AND Scenario='" & $"{CurrentScenario}' AND Year='" & $"{CurrentYear}' AND Status='Certified' ", True)
					If dt IsNot Nothing Then
						If ReturnID Then
							Return CType(dt.Rows(0)("ID"),Integer)
						Else
							Return dt.Rows.Count
						End If	
					Else 
						Return 0
					End If
				End Using
			Catch e As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try		
			
		End Function
		
		Public Function CertifyDate(ByRef si As SessionInfo, ByVal CurrentCV As String, ByVal CurrentScenario As String, ByVal CurrentYear As String) As Date
			Try
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					Dim dt As DataTable = BRApi.Database.ExecuteSql(dbConnApp, "SELECT TimeStamp FROM [dbo].[XFT_CFR_Control_Table] Where ViewName='" & $"{CurrentCV}' AND Scenario='" & $"{CurrentScenario}' AND Year='" & $"{CurrentYear}' AND Status='Certified' ", True)
					If dt IsNot Nothing Then
						If dt.Rows.Count > 0 Then
							Return CType(dt.Rows(0)("TimeStamp"),Date)
						End If	
					End If
				End Using
				Return CType("01-01-1990",Date)
			Catch e As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try		
			
		End Function
		
		
		Public Function SaveDataTable(ByVal si As SessionInfo, ByVal tableName As String, ByVal dt As DataTable ,ByVal JobID As String)
			Try
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
						Dim sql As New Text.StringBuilder
						If tableName = "XFT_CFR_Current_Data" Then
							sql.AppendLine("TRUNCATE TABLE [dbo].[XFT_CFR_Current_Data]")
							BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)
						End If	
				End Using
				
				Dim newColumn As New DataColumn("ID", GetType(Decimal))     
				newColumn.DefaultValue = JobID.XFConvertToDecimal
				dt.Columns.Add(newColumn)
					
				BRApi.Database.SaveCustomDataTable(si, "App", tableName, dt, True)
				
			Return Nothing
			Catch ex As Exception
			Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
		End Try
		End Function
		
		
		Public Function getTable(ByRef si As SessionInfo, ByVal Fmessage As String, ByVal attachmentInfo As List(Of String)) As String
		Try
			Dim htmlTable As New Text.StringBuilder
			
			htmlTable.AppendLine("<table id='cfr'>
									  <tr>
									    <th colspan='6' style='text-align:center; background-color: #3C7BEC;'>CFR AUDIT</th>
									  </tr>
									  <tr>
									    <th>Report</th>
									    <th>Scenario</th>
										<th>Last Certified</th>
									    <th>Year</th>
										<th>Status</th>
									    <th>Comment</th>
									  </tr>"
								)
			Dim parts As String() = Fmessage.Split(New String() {Environment.NewLine}, StringSplitOptions.None)
				
			For Each part As String In parts
				htmlTable.AppendLine("<tr>")
				If part.Contains(":") Then	
					Dim combination = part.Split(":")(0)
					Dim status = part.Split(":")(1)
					
					Dim splitComb = combination.Split("-")
					
					htmlTable.AppendLine("<td>" & splitComb(0) & "</td>")
					htmlTable.AppendLine("<td>" & splitComb(1) & "</td>")
					If status.XFContainsIgnoreCase("Not Certified") Then
						htmlTable.AppendLine("<td>NIL</td>")
					Else	
						htmlTable.AppendLine("<td>" & CertifyDate(si, splitComb(0), splitComb(1), splitComb(2)).ToString & "</td>")
					End If
					
					htmlTable.AppendLine("<td>" & splitComb(2) & "</td>")
					
					If status.XFContainsIgnoreCase("Not Certified") Then
						htmlTable.AppendLine("<td>Not Certified</td>")
						htmlTable.AppendLine("<td></td>")
					ElseIf status.XFContainsIgnoreCase("No Variance") Then
						htmlTable.AppendLine("<td style='background-color: #D4FFCE;'>No Variance</td>")
						htmlTable.AppendLine("<td></td>")
					ElseIf status.XFContainsIgnoreCase("Has Variance") Then
						htmlTable.AppendLine("<td style='background-color: #FFCECE;'>Has Variance</td>")
						htmlTable.AppendLine("<td>Variance File Attached</td>")	
					End If
					
				End If	
				htmlTable.AppendLine("</tr>")
			Next
			
			htmlTable.AppendLine("</table>")			
		Return htmlTable.ToString
		Catch e As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try		
			
	End Function
	Public Function ExecuteVariance(ByVal si As SessionInfo, ByVal JobID As String) As DataTable
		Try
			Dim sql As New Text.StringBuilder
			Dim dt As DataTable = Nothing
			sql.AppendLine("

						SELECT 

						[Cert_sub].[ID] ,
						[Cert_sub].[Cube],
						[Cert_sub].[Entity] ,
						[Cert_sub].[Parent],
						[Cert_sub].[Cons] ,
						[Cert_sub].[Scenario] ,
						[Cert_sub].[Time],
						[Cert_sub].[View] ,
						[Cert_sub].[Account],
						[Cert_sub].[Flow] ,
						[Cert_sub].[Origin] ,
						[Cert_sub].[IC] ,
						[Cert_sub].[UD1],
						[Cert_sub].[UD2] ,
						[Cert_sub].[UD3] ,
						[Cert_sub].[UD4] ,
						[Cert_sub].[UD5] ,
						[Cert_sub].[UD6] ,
						[Cert_sub].[UD7] ,
						[Cert_sub].[UD8], 
						[Cert_sub].[Cert], 
						[cur_sub].[Curr],
						ISNULL([Cert_sub].[Cert],0) - ISNULL([Cur_sub].[Curr],0) as Difference

						from 
						(
						select  
						[meta].[ID] ,
						[meta].[Cube],
						[meta].[Entity] ,
						[meta].[Parent],
						[meta].[Cons] ,
						[meta].[Scenario] ,
						[meta].[Time],
						[meta].[View] ,
						[meta].[Account],
						[meta].[Flow] ,
						[meta].[Origin] ,
						[meta].[IC] ,
						[meta].[UD1],
						[meta].[UD2] ,
						[meta].[UD3] ,
						[meta].[UD4] ,
						[meta].[UD5] ,
						[meta].[UD6] ,
						[meta].[UD7] ,
						[meta].[UD8], 
						[Certified].[Amount] as Curr
						from 
						(
						    Select 
						[ID] ,
						[Cube],
						[Entity] ,
						[Parent],
						[Cons] ,
						[Scenario] ,
						[Time],
						[View] ,
						[Account],
						[Flow] ,
						[Origin] ,
						[IC] ,
						[UD1],
						[UD2] ,
						[UD3] ,
						[UD4] ,
						[UD5] ,
						[UD6] ,
						[UD7] ,
						[UD8] from  XFT_CFR_Certified_Data where id = " & JobID & "

						union

						Select 
						[ID] ,
						[Cube],
						[Entity] ,
						[Parent],
						[Cons] ,
						[Scenario] ,
						[Time],
						[View] ,
						[Account],
						[Flow] ,
						[Origin] ,
						[IC] ,
						[UD1],
						[UD2] ,
						[UD3] ,
						[UD4] ,
						[UD5] ,
						[UD6] ,
						[UD7] ,
						[UD8] from  XFT_CFR_Current_Data where id =" & JobID & "

						) as meta  left outer join XFT_CFR_Current_Data as [certified]
						on 
						[Certified].[ID] =[meta].[ID] 
						and [Certified].[Cube]=[meta].[cube]
						and [Certified].[Entity] =[meta].[Entity] 
						and [Certified].[Parent]=[meta].[Parent]
						and [Certified].[Cons] =[meta].[Cons] 
						and [Certified].[Scenario] =[meta].[Scenario] 
						and [Certified].[Time]=[meta].[Time]
						and [Certified].[View] =[meta].[View] 
						and [Certified].[Account]=[meta].[Account]
						and [Certified].[Flow] =[meta].[Flow] 
						and [Certified].[Origin] =[meta].[Origin] 
						and [Certified].[IC] =[meta].[IC] 
						and [Certified].[UD1]=[meta].[UD1]
						and [Certified].[UD2] =[meta].[UD2] 
						and [Certified].[UD3] =[meta].[UD3] 
						and [Certified].[UD4] =[meta].[UD4] 
						and [Certified].[UD5] =[meta].[UD5] 
						and [Certified].[UD6] =[meta].[UD6] 
						and [Certified].[UD7] =[meta].[UD7] 
						and [Certified].[UD8]=[meta].[UD8]
						and certified.id=" & JobID & "

						) cur_sub


						inner join 

						(
						select  
						[meta].[ID] ,
						[meta].[Cube],
						[meta].[Entity] ,
						[meta].[Parent],
						[meta].[Cons] ,
						[meta].[Scenario] ,
						[meta].[Time],
						[meta].[View] ,
						[meta].[Account],
						[meta].[Flow] ,
						[meta].[Origin] ,
						[meta].[IC] ,
						[meta].[UD1],
						[meta].[UD2] ,
						[meta].[UD3] ,
						[meta].[UD4] ,
						[meta].[UD5] ,
						[meta].[UD6] ,
						[meta].[UD7] ,
						[meta].[UD8], 
						[Certified].[Amount] as Cert
						from 
						(
						Select 
						[ID] ,
						[Cube],
						[Entity] ,
						[Parent],
						[Cons] ,
						[Scenario] ,
						[Time],
						[View] ,
						[Account],
						[Flow] ,
						[Origin] ,
						[IC] ,
						[UD1],
						[UD2] ,
						[UD3] ,
						[UD4] ,
						[UD5] ,
						[UD6] ,
						[UD7] ,
						[UD8] from  XFT_CFR_Certified_Data where id=" & JobID & "

						union

						Select 
						[ID] ,
						[Cube],
						[Entity] ,
						[Parent],
						[Cons] ,
						[Scenario] ,
						[Time],
						[View] ,
						[Account],
						[Flow] ,
						[Origin] ,
						[IC] ,
						[UD1],
						[UD2] ,
						[UD3] ,
						[UD4] ,
						[UD5] ,
						[UD6] ,
						[UD7] ,
						[UD8] from  XFT_CFR_Current_Data where id = " & JobID & "

						) as meta  left outer join XFT_CFR_Certified_Data as [certified]
						on 
						[Certified].[ID] =[meta].[ID] 
						and [Certified].[Cube]=[meta].[cube]
						and [Certified].[Entity] =[meta].[Entity] 
						and [Certified].[Parent]=[meta].[Parent]
						and [Certified].[Cons] =[meta].[Cons] 
						and [Certified].[Scenario] =[meta].[Scenario] 
						and [Certified].[Time]=[meta].[Time]
						and [Certified].[View] =[meta].[View] 
						and [Certified].[Account]=[meta].[Account]
						and [Certified].[Flow] =[meta].[Flow] 
						and [Certified].[Origin] =[meta].[Origin] 
						and [Certified].[IC] =[meta].[IC] 
						and [Certified].[UD1]=[meta].[UD1]
						and [Certified].[UD2] =[meta].[UD2] 
						and [Certified].[UD3] =[meta].[UD3] 
						and [Certified].[UD4] =[meta].[UD4] 
						and [Certified].[UD5] =[meta].[UD5] 
						and [Certified].[UD6] =[meta].[UD6] 
						and [Certified].[UD7] =[meta].[UD7] 
						and [Certified].[UD8]=[meta].[UD8]
						and certified.id = " & JobID & "

						) cert_sub

						on
						[cert_sub].[ID] =[cur_sub].[ID] 
						and [cert_sub].[Cube]=[cur_sub].[cube]
						and [cert_sub].[Entity] =[cur_sub].[Entity] 
						and [cert_sub].[Parent]=[cur_sub].[Parent]
						and [cert_sub].[Cons] =[cur_sub].[Cons] 
						and [cert_sub].[Scenario] =[cur_sub].[Scenario] 
						and [cert_sub].[Time]=[cur_sub].[Time]
						and [cert_sub].[View] =[cur_sub].[View] 
						and [cert_sub].[Account]=[cur_sub].[Account]
						and [cert_sub].[Flow] =[cur_sub].[Flow] 
						and [cert_sub].[Origin] =[cur_sub].[Origin] 
						and [cert_sub].[IC] =[cur_sub].[IC] 
						and [cert_sub].[UD1]=[cur_sub].[UD1]
						and [cert_sub].[UD2] =[cur_sub].[UD2] 
						and [cert_sub].[UD3] =[cur_sub].[UD3] 
						and [cert_sub].[UD4] =[cur_sub].[UD4] 
						and [cert_sub].[UD5] =[cur_sub].[UD5] 
						and [cert_sub].[UD6] =[cur_sub].[UD6] 
						and [cert_sub].[UD7] =[cur_sub].[UD7] 
						and [cert_sub].[UD8]=[cur_sub].[UD8]

						where 
						ISNULL([Cert_sub].[Cert],0) - ISNULL([Cur_sub].[Curr],0) <>0")
									
			
			
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
						dt = BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)
				End Using
			
			Return dt
			
			
		Catch e As Exception
			Throw ErrorHandler.LogWrite(si, New XFException(si, e))
		End Try		
	End Function	
	
	
	Public Function isConsStatus(ByVal si As SessionInfo, ByVal CurrentScenario As String, ByVal CurrentYear As String) As Boolean
		Try
		
			Dim cubeName As String = "ENT"
			Dim entityName As String = "Walmart_Total_Company"
			Dim parentName As String = ""
			Dim consName As String = "Local"
			Dim scenarioName As String = CurrentScenario
			Dim timeName As String = CurrentYear
			Dim dt As New DataTable
			Dim lockStatus As Boolean = False
			
			Dim objCalcStatus As CalcStatus = BRApi.Finance.Data.GetCalcStatus(si, cubeName, entityName, parentName, consName, scenarioName, timeName)
			
			Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				dt = BRAPi.Database.ExecuteSql(dbConnApp, "Select JobID from XFT_SM_Status_Log where Status = 'Locked' and Scenario = '" & CurrentScenario & "' and Year = '" & CurrentYear & "' ", True)
			End Using
			
			If dt IsNot Nothing AndAlso dt.Rows.Count > 0 Then 
				lockStatus = True
			End If
			
			If lockStatus Then
				Return True
			ElseIf objCalcStatus.Id = 1 Or objCalcStatus.Id = 2 Then
				Return True
			Else
				Return False
			End If
			
		Return Nothing
		Catch ex As Exception
			Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
		End Try
		
	End Function
		
	
	Public Function CVRender(ByRef si As SessionInfo, ByVal cubeViewName As String, ByVal vParams As Dictionary(Of String, String)) As DataTable
			Dim value As New NameValueFormatBuilder 
			Dim instance As New XFIfActionExpr("CVFilter", value)
			value = instance.NameValueFormatBuilder
			value.ApplyNameValuePairsFromDictionary(vParams)
			Dim entityDimensionName As String = ""
			Dim entityMemFilter As String = ""
			Dim scenarioDimName As String = ""
			Dim scenarioMemFilter As String = ""
			Dim timeMemFilter As String = ""
			Dim includeCellTextCols As Boolean = False
			Dim useStandardFactTableFields As Boolean = True
			Dim useGenericTimeColNames As Boolean = True
			Dim parallelQueryCount As Integer = 8
			Dim logStatistics As Boolean = False
			Dim dt As DataTable = Nothing
			Try
				dt = BRApi.Import.Data.FdxExecuteCubeView(si, cubeViewName, entityDimensionName, entityMemFilter, scenarioDimName, scenarioMemFilter, timeMemFilter, value, includeCellTextCols, useStandardFactTableFields, Nothing, parallelQueryCount, logStatistics)
				If dt IsNot Nothing Then					
					Return dt
				Else
					Return Nothing
				End If
			Catch e As Exception
				Brapi.ErrorLog.LogMessage(si,$"getCV({cubeviewName}, {string.Join(":", vParams)}) failed with error - {e}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try
		End Function
		
		
		Public Function PrintDT(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal Desc As String)
		Try
			 'Print Table
			 Dim dtprint As New Text.StringBuilder
				 For Each dc As DataColumn In dt.Columns
					dtprint.Append(dc.ColumnName & ",")
				 Next
				 dtprint.Remove(dtprint.Length - 1, 1)
				 dtprint.Append(Environment.NewLine)
				 For Each dr As DataRow In dt.Rows										
					For Each dc As DataColumn In dt.Columns
						dtprint.Append(dr(dc.ColumnName) & ",")
					Next
					dtprint.Remove(dtprint.Length - 1, 1)
					dtprint.Append(Environment.NewLine)
				 Next
				 BRApi.ErrorLog.LogMessage(si, Desc,dtprint.ToString)
		Return Nothing		 
		Catch ex As Exception                
	   		Throw ErrorHandler.LogWrite(si,New XFException(si,ex))
		End Try		 
		End Function
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="CFR_Execute_Validate">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="CFR_Utility" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.CFR_Execute_Validate
	Public Class MainClass
		Dim JobID As Integer
		Dim JobIDCertify As Integer
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Me.ValidateSingleEmailNotification(si, globals, api, args)
						
					
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Function ValidateSingleEmailNotification(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs)
			Try
		
				Dim CurrentCV As String = args.NameValuePairs.XFGetValue("CurrentCV",String.Empty)
				Dim CurrentScenario As String = args.NameValuePairs.XFGetValue("CurrentScenario",String.Empty)
				Dim CurrentYear As String = args.NameValuePairs.XFGetValue("CurrentYear",String.Empty)
				JobID = ConvertHelper.ToInt32(args.NameValuePairs.XFGetValue("JobID",String.Empty))
				JobIDCertify = ConvertHelper.ToInt32(args.NameValuePairs.XFGetValue("JobIDCertify",String.Empty))
				Dim CurrentDtName As String = "XFT_CFR_Current_Data"
				Dim attachmentInfo As New List(Of String)
				Dim Smessage As String = String.Empty
				Dim Fmessage As String = String.Empty
				Dim sql As New text.StringBuilder
				Dim CFRUtil As OneStream.BusinessRule.Extender.CFR_Utility.MainClass = Nothing
				CFRUtil = New OneStream.BusinessRule.Extender.CFR_Utility.MainClass
				
				
				Dim dt As DataTable = Nothing
				Dim dtVariance As DataTable = Nothing
				
				Brapi.ErrorLog.LogMessage(si, "Working:" & CurrentCV & CurrentScenario & CurrentYear)
				Brapi.ErrorLog.LogMessage(si, "JobID:" & JobID)
				Brapi.ErrorLog.LogMessage(si, "JobIDCertify:" & JobIDCertify)
				
				dt = CFRUtil.ExecuteCV(si, CurrentCV, CurrentScenario, CurrentYear)
				
				If dt IsNot Nothing AndAlso dt.Rows.Count > 0 Then
				
					CFRUtil.PrintDT(si, dt, "PRINT DT13:" & dt.Rows.Count.XFToString)
					
					CFRUtil.SaveDataTable(si, CurrentDtName, dt, JobIDCertify)
					dtVariance = CFRUtil.ExecuteVariance(si, JobIDCertify)
					
					If dtVariance IsNot Nothing AndAlso dtVariance.Rows.Count > 0 Then
						Smessage = "Has Variance"
						If CFRUtil.CreateFileForAttachment(si, dtVariance, CurrentCV, CurrentScenario, CurrentYear) Then
							attachmentInfo.Add(CurrentCV & "_" & CurrentScenario & "_" & CurrentYear & ".csv")
						End If
					Else
						Smessage = "No Variance"
					End If
				Else
					Smessage = "No Data Available."
				End If
				
				Fmessage = Fmessage & CurrentCV & "-" & CurrentScenario & "-" & CurrentYear & ":" & Smessage & Environment.NewLine
						
				
				If (Fmessage.EndsWith(Environment.NewLine)) Then
					Fmessage = Fmessage.Remove(Fmessage.LastIndexOf(Environment.NewLine))
				End If
				
				
				CFRUtil.SendEmail(si, Fmessage, attachmentInfo)
						
				sql.AppendLine("UPDATE XFT_CFR_Validate_Control_Table SET Status = 'Completed', Detail = '" & Fmessage & " | Email: " & BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName).User.Email & "' WHERE ID = '" & JobID & "' ")
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
						BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)
				End Using
				
				
				
				Return Nothing
			Catch ex As Exception
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					BRAPi.Database.ExecuteSql(dbConnApp, "UPDATE XFT_CFR_Validate_Control_Table SET Status = 'Error', Detail = '" & ex.Message & "' WHERE ID = '" & JobID & "' ", True)
				End Using
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		
		
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="CFR_Utility">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.CFR_Utility
	Public Class MainClass
		Dim FilePath As String = String.Empty
		Dim jobIDAutomation As String = String.Empty
		
		Public Function ExecuteCV(ByVal si As SessionInfo, ByVal CurrentCV As String, ByVal CurrentScenario As String, ByVal CurrentYear As String) As DataTable
		Try
				Dim dt As New DataTable			
				Dim cfrflowlist As List(Of String) = New List(Of String)({"RPT_USD", "RPT_Peg"})
				Dim cfrud4list As List(Of String) = New List(Of String)({"Ext_Reported", "Ext_Adjusted"})
				
				Dim cvParams As New Dictionary(Of String, String)
				cvParams.Add("cfrScenario", CurrentScenario)
				cvParams.Add("cfrTime", CurrentYear)
				cvParams.Add("cfrflow", "Total_Flow")
				cvParams.Add("cfrud4", "Ext_Adjusted")
				
				
				Dim dtt As DataTable = CVRender(si, CurrentCV , cvParams)
				Dim JobID As Integer = CertifyCheck(si, CurrentCV, CurrentScenario, CurrentYear, True)
				
				If dtt IsNot Nothing AndAlso dtt.Rows.Count > 0  Then
				
					dt = dtt.Clone()
					For Each cfrflow In cfrflowlist
						For Each cfrud4 In cfrud4list
							Dim cvParamsLoop As New Dictionary(Of String, String)
								cvParamsLoop.Add("cfrScenario", CurrentScenario)
								cvParamsLoop.Add("cfrTime", CurrentYear)
								cvParamsLoop.Add("cfrflow", cfrflow)
								cvParamsLoop.Add("cfrud4", cfrud4)
								Dim dtTemp As DataTable = CVRender(si, CurrentCV , cvParamsLoop )
								If dtTemp IsNot Nothing Then
									dt.Merge(dtTemp)
								End If
						Next	
					Next
					
					If dt IsNot Nothing AndAlso dt.Rows.Count > 0  Then
						dt.Columns.Remove("RowHdr0ParentName")
						dt.Columns.Add(New DataColumn("Amount", System.Type.GetType("System.Decimal")))
						dt.AcceptChanges()
						Dim maxRows As Integer = dt.Rows.Count
						For rowIndex As Integer = 0 To maxRows - 1
							Dim xrow As DataRow = dt.Rows(rowIndex)
							
							xrow("Time") = CurrentYear & "M1"
							xrow("Amount") = xrow("V" & CurrentYear & "M1")
							
							For M = 2 To 12 Step 1
								Dim newRow As Datarow = dt.NewRow()
								newRow.ItemArray = dt.Rows(rowIndex).ItemArray
								If Math.Abs(newRow("V" & CurrentYear & "M" & M)) <> Decimal.Zero Then
									newRow("Time") = CurrentYear & "M" & M
									newRow("Amount") = newRow("V" & CurrentYear & "M" & M)
									dt.Rows.Add(newRow)
								End If	
							Next
						Next
						
						For M = 1 To 12 Step 1
							dt.Columns.Remove("V" & CurrentYear & "M" & M)
						Next	
						dt.AcceptChanges
						
					End If
				End If	
			Return dt
			Catch e As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try
		End Function 
		
		
		Public Sub SendEmail(ByRef si As SessionInfo, ByVal Fmessage As String, ByVal attachmentInfo As List(Of String))
		Try
	
				Dim emailConnectionName As String = "WalmartSMTP"
				Dim toEmail As New List(Of String)
				Dim subject As String = si.AppName & " - Batch Detail Report for DM Job CFR_Audit_Automation"
				Dim dtEmail As DataTable = Nothing
				Dim attachmentFilePaths As New List(Of String)
				Dim getEmailStyle As New Text.StringBuilder
				
				getEmailStyle.AppendLine(BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "00_Email_Style"))
				getEmailStyle.AppendLine(getTable(si, Fmessage, attachmentInfo))
				
				
				For Each Item As String In attachmentInfo
					attachmentFilePaths.Add(FilePath & Item)
				Next	
				
				toEmail.Add(BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName).User.Email)
						
				
				BRApi.Utilities.SendMail(si, emailConnectionName, toEmail, subject, getEmailStyle.ToString, True,attachmentFilePaths)
			
		Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
		End Try
		
		End Sub
		
		
		Public Function getTable(ByRef si As SessionInfo, ByVal Fmessage As String, ByVal attachmentInfo As List(Of String)) As String
		Try
			Dim htmlTable As New Text.StringBuilder
			
			htmlTable.AppendLine("<table id='cfr'>
									  <tr>
									    <th colspan='6' style='text-align:center; background-color: #3C7BEC;'>CFR AUDIT</th>
									  </tr>
									  <tr>
									    <th>Report</th>
									    <th>Scenario</th>
										<th>Last Certified</th>
									    <th>Year</th>
										<th>Status</th>
									    <th>Comment</th>
									  </tr>"
								)
			Dim parts As String() = Fmessage.Split(New String() {Environment.NewLine}, StringSplitOptions.None)
				
			For Each part As String In parts
				htmlTable.AppendLine("<tr>")
				If part.Contains(":") Then	
					Dim combination = part.Split(":")(0)
					Dim status = part.Split(":")(1)
					
					Dim splitComb = combination.Split("-")
					
					htmlTable.AppendLine("<td>" & splitComb(0) & "</td>")
					htmlTable.AppendLine("<td>" & splitComb(1) & "</td>")
					If status.XFContainsIgnoreCase("Not Certified") Then
						htmlTable.AppendLine("<td>NIL</td>")
					Else	
						htmlTable.AppendLine("<td>" & CertifyDate(si, splitComb(0), splitComb(1), splitComb(2)).ToString & "</td>")
					End If
					
					htmlTable.AppendLine("<td>" & splitComb(2) & "</td>")
					
					If status.XFContainsIgnoreCase("Not Certified") Then
						htmlTable.AppendLine("<td>Not Certified</td>")
						htmlTable.AppendLine("<td></td>")
					ElseIf status.XFContainsIgnoreCase("No Variance") Then
						htmlTable.AppendLine("<td style='background-color: #D4FFCE;'>No Variance</td>")
						htmlTable.AppendLine("<td></td>")
					ElseIf status.XFContainsIgnoreCase("Has Variance") Then
						htmlTable.AppendLine("<td style='background-color: #FFCECE;'>Has Variance</td>")
						htmlTable.AppendLine("<td>Variance File Attached</td>")	
					End If
					
				End If	
				htmlTable.AppendLine("</tr>")
			Next
			
			htmlTable.AppendLine("</table>")			
		Return htmlTable.ToString
		Catch e As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try		
			
		End Function
		
		
		Public Function CertifyDate(ByRef si As SessionInfo, ByVal CurrentCV As String, ByVal CurrentScenario As String, ByVal CurrentYear As String) As Date
			Try
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					Dim dt As DataTable = BRApi.Database.ExecuteSql(dbConnApp, "SELECT TimeStamp FROM [dbo].[XFT_CFR_Control_Table] Where ViewName='" & $"{CurrentCV}' AND Scenario='" & $"{CurrentScenario}' AND Year='" & $"{CurrentYear}' AND Status='Certified' ", True)
					If dt IsNot Nothing Then
						If dt.Rows.Count > 0 Then
							Return CType(dt.Rows(0)("TimeStamp"),Date)
						End If	
					End If
				End Using
				Return CType("01-01-1990",Date)
			Catch e As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try		
			
		End Function
	
		
		Public Function CVRender(ByRef si As SessionInfo, ByVal cubeViewName As String, ByVal vParams As Dictionary(Of String, String)) As DataTable
			Dim value As New NameValueFormatBuilder 
			Dim instance As New XFIfActionExpr("CVFilter", value)
			value = instance.NameValueFormatBuilder
			value.ApplyNameValuePairsFromDictionary(vParams)
			Dim entityDimensionName As String = ""
			Dim entityMemFilter As String = ""
			Dim scenarioDimName As String = ""
			Dim scenarioMemFilter As String = ""
			Dim timeMemFilter As String = ""
			Dim includeCellTextCols As Boolean = False
			Dim useStandardFactTableFields As Boolean = True
			Dim useGenericTimeColNames As Boolean = True
			Dim parallelQueryCount As Integer = 8
			Dim logStatistics As Boolean = False
			Dim dt As DataTable = Nothing
			Try
				dt = BRApi.Import.Data.FdxExecuteCubeView(si, cubeViewName, entityDimensionName, entityMemFilter, scenarioDimName, scenarioMemFilter, timeMemFilter, value, includeCellTextCols, useStandardFactTableFields, Nothing, parallelQueryCount, logStatistics)
				If dt IsNot Nothing Then					
					Return dt
				Else
					Return Nothing
				End If
			Catch e As Exception
				Brapi.ErrorLog.LogMessage(si,$"getCV({cubeviewName}, {string.Join(":", vParams)}) failed with error - {e}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try
		End Function
		
		
		Public Function CreateFileForAttachment(ByRef si As SessionInfo, ByVal dt As DataTable ,ByVal CurrentCV As String, ByVal CurrentScenario As String, ByVal CurrentYear As String) As Boolean
		Try	
			
			Dim FileName As String = String.Empty
			
			If dt IsNot Nothing Then
				If dt.Rows.Count <> 0 Then
					Dim everyonePath As String = BRApi.FileSystem.GetFileShareFolder(si, FileShareFolderTypes.ApplicationRoot, Nothing) & "\" & si.AppName.Replace(" ", String.Empty) & "\Incoming\CFR_Audit\"
						Using fdxDataFile As System.IO.StreamWriter = New StreamWriter(everyonePath & CurrentCV & "_" & CurrentScenario & "_" & CurrentYear &".csv", False)
							FilePath = everyonePath 
							FileName = CurrentCV & "_" & CurrentScenario & "_" & CurrentYear &".csv"
'							brapi.ErrorLog.LogMessage(si,everyonePath)
								Dim writeThis As New Text.StringBuilder
								For Each dc As DataColumn In dt.Columns
										writeThis.Append(dc.ColumnName)
										writeThis.Append(",")
								Next
								'Remove last comma
								writeThis.Remove(writeThis.Length - 1, 1)
								fdxDataFile.WriteLine(writeThis.ToString)
								
								writeThis.Clear						
								For Each dr As DataRow In dt.Rows										
									For Each dc As DataColumn In dt.Columns
										writeThis.Append(dr(dc.ColumnName) & ",")
									Next
									writeThis.Remove(writeThis.Length - 1, 1)										
									fdxDataFile.WriteLine(writeThis.ToString)
									writeThis.Clear
								Next
								fdxDataFile.Close
								
							End Using
					
					End If
			
				End If
			If System.IO.File.Exists(FilePath & FileName) Then
				Return True
			Else
				Return False
			End If	
			
		Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
		End Try
		
		End Function
		
		Public Function SaveDataTable(ByVal si As SessionInfo, ByVal tableName As String, ByVal dt As DataTable ,ByVal JobID As Integer)
			Try
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
						Dim sql As New Text.StringBuilder
						If tableName = "XFT_CFR_Current_Data" Then
							sql.AppendLine("TRUNCATE TABLE [dbo].[XFT_CFR_Current_Data]")
							BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)
						End If	
				End Using
				
				Dim newColumn As New DataColumn("ID", GetType(Integer))     
				newColumn.DefaultValue = CType(JobID, Integer)
				dt.Columns.Add(newColumn)
				
				BRApi.Database.SaveCustomDataTable(si, "App", tableName, dt, True)
				
			Return Nothing
			Catch ex As Exception
			Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
		End Try
		End Function
		
		Public Sub ExecuteFConsolidation(ByRef si As SessionInfo, ByVal SelectedScenario As String, ByVal SelectedYear As String)
			Try
				
				Dim customSubVars As New Dictionary(Of String, String)
				
				customSubVars.Add("CFRConsoTime", SelectedYear + "M12")
				customSubVars.Add("CFRConsoScenario", SelectedScenario)
				
				BRApi.Utilities.ExecuteDataMgmtSequence(si, "Execute_CFR_Consolidation", customSubVars)
				
				
			Catch e As Exception
				
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try
		End Sub
		
		Public Function CertifyCheck(ByRef si As SessionInfo, ByVal CurrentCV As String, ByVal CurrentScenario As String, ByVal CurrentYear As String, ByVal ReturnID As Boolean) As Integer
			Try
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					Dim dt As DataTable = BRApi.Database.ExecuteSql(dbConnApp, "SELECT * FROM [dbo].[XFT_CFR_Control_Table] Where ViewName='" & $"{CurrentCV}' AND Scenario='" & $"{CurrentScenario}' AND Year='" & $"{CurrentYear}' AND Status='Certified' ", True)
					If dt IsNot Nothing Then
						If ReturnID Then
							Return CType(dt.Rows(0)("ID"),Integer)
						Else
							Return dt.Rows.Count
						End If	
					Else 
						Return 0
					End If
				End Using
			Catch e As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try		
			
		End Function
		
		
		
		Public Function ExecuteVariance(ByVal si As SessionInfo, ByVal JobID As String) As DataTable
		Try
			Dim sql As New Text.StringBuilder
			Dim dt As DataTable = Nothing
			sql.AppendLine("

						SELECT 

						[Cert_sub].[ID] ,
						[Cert_sub].[Cube],
						[Cert_sub].[Entity] ,
						[Cert_sub].[Parent],
						[Cert_sub].[Cons] ,
						[Cert_sub].[Scenario] ,
						[Cert_sub].[Time],
						[Cert_sub].[View] ,
						[Cert_sub].[Account],
						[Cert_sub].[Flow] ,
						[Cert_sub].[Origin] ,
						[Cert_sub].[IC] ,
						[Cert_sub].[UD1],
						[Cert_sub].[UD2] ,
						[Cert_sub].[UD3] ,
						[Cert_sub].[UD4] ,
						[Cert_sub].[UD5] ,
						[Cert_sub].[UD6] ,
						[Cert_sub].[UD7] ,
						[Cert_sub].[UD8], 
						[Cert_sub].[Cert], 
						[cur_sub].[Curr],
						ISNULL([Cert_sub].[Cert],0) - ISNULL([Cur_sub].[Curr],0) as Difference

						from 
						(
						select  
						[meta].[ID] ,
						[meta].[Cube],
						[meta].[Entity] ,
						[meta].[Parent],
						[meta].[Cons] ,
						[meta].[Scenario] ,
						[meta].[Time],
						[meta].[View] ,
						[meta].[Account],
						[meta].[Flow] ,
						[meta].[Origin] ,
						[meta].[IC] ,
						[meta].[UD1],
						[meta].[UD2] ,
						[meta].[UD3] ,
						[meta].[UD4] ,
						[meta].[UD5] ,
						[meta].[UD6] ,
						[meta].[UD7] ,
						[meta].[UD8], 
						[Certified].[Amount] as Curr
						from 
						(
						    Select 
						[ID] ,
						[Cube],
						[Entity] ,
						[Parent],
						[Cons] ,
						[Scenario] ,
						[Time],
						[View] ,
						[Account],
						[Flow] ,
						[Origin] ,
						[IC] ,
						[UD1],
						[UD2] ,
						[UD3] ,
						[UD4] ,
						[UD5] ,
						[UD6] ,
						[UD7] ,
						[UD8] from  XFT_CFR_Certified_Data where id = " & JobID & "

						union

						Select 
						[ID] ,
						[Cube],
						[Entity] ,
						[Parent],
						[Cons] ,
						[Scenario] ,
						[Time],
						[View] ,
						[Account],
						[Flow] ,
						[Origin] ,
						[IC] ,
						[UD1],
						[UD2] ,
						[UD3] ,
						[UD4] ,
						[UD5] ,
						[UD6] ,
						[UD7] ,
						[UD8] from  XFT_CFR_Current_Data where id =" & JobID & "

						) as meta  left outer join XFT_CFR_Current_Data as [certified]
						on 
						[Certified].[ID] =[meta].[ID] 
						and [Certified].[Cube]=[meta].[cube]
						and [Certified].[Entity] =[meta].[Entity] 
						and [Certified].[Parent]=[meta].[Parent]
						and [Certified].[Cons] =[meta].[Cons] 
						and [Certified].[Scenario] =[meta].[Scenario] 
						and [Certified].[Time]=[meta].[Time]
						and [Certified].[View] =[meta].[View] 
						and [Certified].[Account]=[meta].[Account]
						and [Certified].[Flow] =[meta].[Flow] 
						and [Certified].[Origin] =[meta].[Origin] 
						and [Certified].[IC] =[meta].[IC] 
						and [Certified].[UD1]=[meta].[UD1]
						and [Certified].[UD2] =[meta].[UD2] 
						and [Certified].[UD3] =[meta].[UD3] 
						and [Certified].[UD4] =[meta].[UD4] 
						and [Certified].[UD5] =[meta].[UD5] 
						and [Certified].[UD6] =[meta].[UD6] 
						and [Certified].[UD7] =[meta].[UD7] 
						and [Certified].[UD8]=[meta].[UD8]
						and certified.id=" & JobID & "

						) cur_sub


						inner join 

						(
						select  
						[meta].[ID] ,
						[meta].[Cube],
						[meta].[Entity] ,
						[meta].[Parent],
						[meta].[Cons] ,
						[meta].[Scenario] ,
						[meta].[Time],
						[meta].[View] ,
						[meta].[Account],
						[meta].[Flow] ,
						[meta].[Origin] ,
						[meta].[IC] ,
						[meta].[UD1],
						[meta].[UD2] ,
						[meta].[UD3] ,
						[meta].[UD4] ,
						[meta].[UD5] ,
						[meta].[UD6] ,
						[meta].[UD7] ,
						[meta].[UD8], 
						[Certified].[Amount] as Cert
						from 
						(
						Select 
						[ID] ,
						[Cube],
						[Entity] ,
						[Parent],
						[Cons] ,
						[Scenario] ,
						[Time],
						[View] ,
						[Account],
						[Flow] ,
						[Origin] ,
						[IC] ,
						[UD1],
						[UD2] ,
						[UD3] ,
						[UD4] ,
						[UD5] ,
						[UD6] ,
						[UD7] ,
						[UD8] from  XFT_CFR_Certified_Data where id=" & JobID & "

						union

						Select 
						[ID] ,
						[Cube],
						[Entity] ,
						[Parent],
						[Cons] ,
						[Scenario] ,
						[Time],
						[View] ,
						[Account],
						[Flow] ,
						[Origin] ,
						[IC] ,
						[UD1],
						[UD2] ,
						[UD3] ,
						[UD4] ,
						[UD5] ,
						[UD6] ,
						[UD7] ,
						[UD8] from  XFT_CFR_Current_Data where id = " & JobID & "

						) as meta  left outer join XFT_CFR_Certified_Data as [certified]
						on 
						[Certified].[ID] =[meta].[ID] 
						and [Certified].[Cube]=[meta].[cube]
						and [Certified].[Entity] =[meta].[Entity] 
						and [Certified].[Parent]=[meta].[Parent]
						and [Certified].[Cons] =[meta].[Cons] 
						and [Certified].[Scenario] =[meta].[Scenario] 
						and [Certified].[Time]=[meta].[Time]
						and [Certified].[View] =[meta].[View] 
						and [Certified].[Account]=[meta].[Account]
						and [Certified].[Flow] =[meta].[Flow] 
						and [Certified].[Origin] =[meta].[Origin] 
						and [Certified].[IC] =[meta].[IC] 
						and [Certified].[UD1]=[meta].[UD1]
						and [Certified].[UD2] =[meta].[UD2] 
						and [Certified].[UD3] =[meta].[UD3] 
						and [Certified].[UD4] =[meta].[UD4] 
						and [Certified].[UD5] =[meta].[UD5] 
						and [Certified].[UD6] =[meta].[UD6] 
						and [Certified].[UD7] =[meta].[UD7] 
						and [Certified].[UD8]=[meta].[UD8]
						and certified.id = " & JobID & "

						) cert_sub

						on
						[cert_sub].[ID] =[cur_sub].[ID] 
						and [cert_sub].[Cube]=[cur_sub].[cube]
						and [cert_sub].[Entity] =[cur_sub].[Entity] 
						and [cert_sub].[Parent]=[cur_sub].[Parent]
						and [cert_sub].[Cons] =[cur_sub].[Cons] 
						and [cert_sub].[Scenario] =[cur_sub].[Scenario] 
						and [cert_sub].[Time]=[cur_sub].[Time]
						and [cert_sub].[View] =[cur_sub].[View] 
						and [cert_sub].[Account]=[cur_sub].[Account]
						and [cert_sub].[Flow] =[cur_sub].[Flow] 
						and [cert_sub].[Origin] =[cur_sub].[Origin] 
						and [cert_sub].[IC] =[cur_sub].[IC] 
						and [cert_sub].[UD1]=[cur_sub].[UD1]
						and [cert_sub].[UD2] =[cur_sub].[UD2] 
						and [cert_sub].[UD3] =[cur_sub].[UD3] 
						and [cert_sub].[UD4] =[cur_sub].[UD4] 
						and [cert_sub].[UD5] =[cur_sub].[UD5] 
						and [cert_sub].[UD6] =[cur_sub].[UD6] 
						and [cert_sub].[UD7] =[cur_sub].[UD7] 
						and [cert_sub].[UD8]=[cur_sub].[UD8]

						where 
						ISNULL([Cert_sub].[Cert],0) - ISNULL([Cur_sub].[Curr],0) <>0")
									
			
			
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
						dt = BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)
				End Using
			
			Return dt
			
			
		Catch e As Exception
			Throw ErrorHandler.LogWrite(si, New XFException(si, e))
		End Try		
	End Function
		
		
		
		Public Function PrintDT(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal Desc As String)
		Try
			 'Print Table
			 Dim dtprint As New Text.StringBuilder
				 For Each dc As DataColumn In dt.Columns
					dtprint.Append(dc.ColumnName & ",")
				 Next
				 dtprint.Remove(dtprint.Length - 1, 1)
				 dtprint.Append(Environment.NewLine)
				 For Each dr As DataRow In dt.Rows										
					For Each dc As DataColumn In dt.Columns
						dtprint.Append(dr(dc.ColumnName) & ",")
					Next
					dtprint.Remove(dtprint.Length - 1, 1)
					dtprint.Append(Environment.NewLine)
				 Next
				 BRApi.ErrorLog.LogMessage(si, Desc,dtprint.ToString)
		Return Nothing		 
		Catch ex As Exception                
	   		Throw ErrorHandler.LogWrite(si,New XFException(si,ex))
		End Try		 
		End Function
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Chitti_RD">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Data.SqlClient

Imports System.Threading.Tasks
Imports System.Text
Imports System.Net
Imports System.Net.Http
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
Imports Newtonsoft.Json.JsonPropertyAttribute
Imports System.IO.Compression

Imports System.Security.Cryptography
Imports System.Text.RegularExpressions
Namespace OneStream.BusinessRule.Extender.Chitti_RD
	Public Class MainClass
		
		Dim failSafe As Integer = 0
		Dim myLog As String = "testlog"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
					Case Is = ExtenderFunctionType.ExecuteExternalDimensionSource
						'Add External Members
					End Select
					'GetCubeDataFromOsFdxQuery(si)
					'Generatetoken(si)
					request_token(si)
'				'---------Working Code starts------------------------------------------------------
'						Dim targetWorkflowUnitClusterPk As New WorkflowUnitClusterPk(New Guid("7aa68126-4a18-4122-a663-0c9e2a4f9b5e"),"1048584","2024000000")
''				Dim targetWorkflowUnitClusterPk As New WorkflowUnitClusterPk(New Guid("e2523421-14e4-4535-aae3-4620030254e7"),"-1","-1")
''				Dim targetWorkflowUnitClusterPk As New WorkflowUnitClusterPk(New Guid("00000000-0000-0000-0000-000000000000"),"-1","-1")
				
				
				
'				Dim configSettings1 As AppServerConfigSettings = AppServerConfig.GetSettings(si)
'				Dim folderPath1 As String = FileShareFolderHelper.GetDataManagementExportUsernameFolderForApp(si, True, configSettings1.FileShareRootFolder, si.AppToken.AppName) & "\" & DateTime.UtcNow.ToString("yyyyMMdd") & "\StageArchives" 
'				'Dim folderPath As String = FileShareFolderHelper.GetGroupsFolderForApp(si,True,configSettings.FileShareRootFolder,si.AppToken.AppName) & "\Administrators"
				
				
'				BRApi.Import.Data.ExportStageArchives(si, targetWorkflowUnitClusterPk, folderPath1, False)
				
'				Return Nothing
'				'--------Working Code starts-------------------------------------------	
'						'Define the workflow cluster used as the starting point to extract from
'				Dim wfClusterPk As New WorkflowUnitClusterPk
'				Dim wfProfileName As String = String.Empty
'				Dim scenarioName As String = String.Empty
'				'Dim timeName As String = String.Empty
				
'				Select Case args.FunctionType					
'					Case Is = ExtenderFunctionType.Unknown
'						'Set the parent workflow unit to extract input profiles for							
'						wfProfileName = "ACTUALS_SAPBI_CORP"'"FCST_eCF_Adj"'"Houston"
'						scenarioName = "Actual"'"Forecast"
'						'timeName = "TEST"
'						'wfClusterPk = BRAPi.Workflow.General.GetWorkflowUnitClusterPk(si, wfProfileName, scenarioName, timeName)								
'					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
'						'Since this is being called from a DataManagement job, get the wfCluster from the parameters defined in the DataMgmt sequence
'						wfProfileName = args.NameValuePairs("WfProfileName")
'						scenarioName = args.NameValuePairs("ScenarioName")
'						'timeName = args.NameValuePairs("TimeName")							
'				End Select
				
'				wfClusterPk = BRAPi.Workflow.General.GetWorkflowUnitClusterPk(si, wfProfileName, scenarioName, Nothing)
'				'brapi.ErrorLog.LogMessage(si,"ScenarioKey: " & wfClusterPk.ScenarioKey & vbnewline & "TimeKey: " & wfClusterPk.TimeKey)
				
'				'Prepare File path
'				Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
'				Dim folderPath As String = FileShareFolderHelper.GetDataManagementExportUsernameFolderForApp(si, True, configSettings.FileShareRootFolder, si.AppToken.AppName) & "\" & DateTime.UtcNow.ToString("yyyyMMdd") & "\StageArchives\" & scenarioName
'				'Dim folderPath As String = FileShareFolderHelper.GetGroupsFolderForApp(si,True,configSettings.FileShareRootFolder,si.AppToken.AppName) & "\Administrators"
				
				
				
				
'				'If Not Directory.Exists(folderPath) Then Directory.CreateDirectory(folderPath)
'				brapi.ErrorLog.LogMessage(si,$"folderPath : {folderPath}")				
'				'Export data for each descendant workflow profile
'				Dim profileInfos As List(Of WorkflowProfileInfo) = BRAPi.Workflow.Metadata.GetRelatives(si, wfClusterPk, WorkflowProfileRelativeTypes.Descendants, WorkflowProfileTypes.InputImportChild)
'				If Not profileInfos Is Nothing Then
'					For Each profileInfo As WorkflowProfileInfo In profileInfos		
'						brapi.ErrorLog.LogMessage(si,profileInfo.Name & " | " & profileInfo.ProfileKey.ToString)
'						'Dim wfClusterPkChild As New WorkflowUnitClusterPk(profileInfo.ProfileKey, wfClusterPk.ScenarioKey, wfClusterPk.TimeKey)
'						'Dim wfClusterPkChild As New WorkflowUnitClusterPk(profileInfo.ProfileKey, wfClusterPk.ScenarioKey, -1)
'						Dim wfClusterPkChild As New WorkflowUnitClusterPk(profileInfo.ProfileKey, -1, -1)
'						'brapi.ErrorLog.LogMessage(si,$"Profile: {profileInfo.ProfileKey}{vbnewline}ScenarioKey: {wfClusterPk.ScenarioKey}")
'						If wfClusterPkChild Is Nothing Then
'							brapi.ErrorLog.LogMessage(si,"No child cluster primary key found to match scenario and time")
'						Else
'							brapi.ErrorLog.LogMessage(si,"exporting files...")
'							BRAPi.Import.Data.ExportStageArchives(si, wfClusterPkChild, folderPath, False)
'						End If
'					Next
'				End If

				Return Nothing
			Catch ex As Exception
				brapi.ErrorLog.LogMessage(si,"Final Log: " & mylog)
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
					
'						CreateFileFromBytes(si)
						'ExtractFile(si)
						'ExtractFile1(si)
'						ExtractStageArchieves(si)
		End Function
	Public Class Bearer
        Public Property expires_in As String
        Public Property refresh_token As String
        Public Property access_token As String
    End Class
	
		Public Sub request_token(si)
			Dim consumerKey As String = "OneStreamWebAPIQA"
            Dim consumerSecret As String = "2SzVFEbQDcYIDj3uQagBP0efTjHLMnGt5KwdUzqP17cZDP0fYQlOQ6JfkkrMcjY3"
			Dim accessToken As String
            Dim byte1 As Byte() = Encoding.ASCII.GetBytes("grant_type=client_credentials")
            Dim bearerReq As HttpWebRequest = TryCast(WebRequest.Create("https://pfedprod.wal-mart.com/as/token.oauth2"), HttpWebRequest)
            bearerReq.Accept = "application/json"
            bearerReq.Method = "POST"
            bearerReq.ContentType = "application/x-www-form-urlencoded"
            bearerReq.ContentLength = byte1.Length
            bearerReq.KeepAlive = False
            bearerReq.Headers.Add("Authorization", "Basic " & Convert.ToBase64String(Encoding.[Default].GetBytes(consumerKey & ":" & consumerSecret)))
            Dim newStream As Stream = bearerReq.GetRequestStream()
			newStream.Write(byte1, 0, byte1.Length)
			Dim bearerResp As WebResponse = bearerReq.GetResponse()
            Using reader = New StreamReader(bearerResp.GetResponseStream(), Encoding.UTF8)
                Dim response = reader.ReadToEnd()
                  'accessToken = Convert.ToString(JsonConvert.DeserializeObject(response))
                'accessToken = bearer.access_token
				   Dim bearer As Bearer = JsonConvert.DeserializeObject(Of Bearer)(response)
                	accessToken = bearer.access_token
            End Using

            brapi.ErrorLog.LogMessage(si,accessToken)
End Sub
		
		Public Function GetCubeDataFromOsFdxQuery(ByVal si As SessionInfo)
			Try
'				If Not fdxInfoItem Is Nothing Then
					Dim dt As New DataTable
					Dim TimeFilter As String="T#2022H1.Base"
'					Dim TimeFilter As String="T#2022H1,T#2022M7,T#2022M8"
'					Dim TimeFilter As String="T#2022H1,T#2022H2"
'					Dim TimeFilter As String="T#2021,T#2022"
					brapi.ErrorLog.LogMessage(si,"Session : "& si.AppName)
					Try
						
						'If fdxInfoItem.timePivot Then
							dt = BRApi.Import.Data.FdxExecuteDataUnitTimePivot(si, 
								"CORP", 
								"E#CORP_OTHER_CORPORATE.Base",'"E#Corporate_Real_Estate.Base","E#Global_Sourcing_w_Elim.Base",' '"E#Global_Sourcing_w_Elim.Base",'
								"USD",
								"3", 
								"S#CorpFcst_Wk01", 
								TimeFilter, 
								"Periodic", 
								True, 
								True,
								String.Empty, 
								True, 
								True)
'								fdxInfoItem.cubeName, 
'								fdxInfoItem.entityMemFilter, 
'								consName, 
'								fdxInfoItem.scenarioTypeId, 
'								fdxInfoItem.scenarioMemFilter, 
'								fdxInfoItem.timeMemFilter, 
'								fdxInfoItem.viewName, 
'								fdxInfoItem.suppressNoData, 
'								fdxInfoItem.useGenericTimeColNames,
'								String.Empty, 
'								fdxInfoItem.parallelQueryCount, 
'								fdxInfoItem.logStatistics)
								'Else							
'							dt = BRApi.Import.Data.FdxExecuteDataUnit(si, 
'								fdxInfoItem.cubeName, 
'								fdxInfoItem.entityMemFilter, 
'								consName, 
'								fdxInfoItem.scenarioTypeId, 
'								fdxInfoItem.scenarioMemFilter, 
'								fdxInfoItem.timeMemFilter, 
'								fdxInfoItem.viewName, 
'								fdxInfoItem.suppressNoData,
'								String.Empty, 
'								fdxInfoItem.parallelQueryCount, 
'								fdxInfoItem.logStatistics)
'						End If
						brapi.ErrorLog.LogMessage(si, "BEFORE EXCEPTION failed")
						
						If dt IsNot Nothing Then
							brapi.ErrorLog.LogMessage(si,TimeFilter & " -- " & dt.Rows.Count)
							'brapi.ErrorLog.LogError(si, $"OS FDX Query (details below) generated {dt.Rows.Count} records.{vbNewLine}{vbTab}Cube Name: {fdxInfoItem.cubeName}{vbNewLine}{vbTab}Entity Member Filter: {fdxInfoItem.entityMemFilter}{vbNewLine}{vbTab}Cons Name: {consName}{vbNewLine}{vbTab}fdxInfoItem.scenarioTypeId: {fdxInfoItem.scenarioTypeId}{vbNewLine}{vbTab}fdxInfoItem.scenarioMemFilter: {fdxInfoItem.scenarioMemFilter}{vbNewLine}{vbTab}fdxInfoItem.timeMemFilter: {fdxInfoItem.timeMemFilter}{vbNewLine}{vbTab}fdxInfoItem.viewName: {fdxInfoItem.viewName}{vbNewLine}{vbTab}fdxInfoItem.filter: String.Empty{vbNewLine}{vbTab}TimePivot: {fdxInfoItem.timePivot}")
						Else
							brapi.ErrorLog.LogMessage(si,TimeFilter & " -No rows found- ")
							'brapi.ErrorLog.LogError(si, $"OS FDX Query (details below) generated 0 records.{vbNewLine}{vbTab}Cube Name: {fdxInfoItem.cubeName}{vbNewLine}{vbTab}Entity Member Filter: {fdxInfoItem.entityMemFilter}{vbNewLine}{vbTab}Cons Name: {consName}{vbNewLine}{vbTab}fdxInfoItem.scenarioTypeId: {fdxInfoItem.scenarioTypeId}{vbNewLine}{vbTab}fdxInfoItem.scenarioMemFilter: {fdxInfoItem.scenarioMemFilter}{vbNewLine}{vbTab}fdxInfoItem.timeMemFilter: {fdxInfoItem.timeMemFilter}{vbNewLine}{vbTab}fdxInfoItem.viewName: {fdxInfoItem.viewName}{vbNewLine}{vbTab}fdxInfoItem.filter: String.Empty{vbNewLine}{vbTab}TimePivot: {fdxInfoItem.timePivot}")
						End If
						
					Catch exFdx As Exception
						brapi.ErrorLog.LogMessage(si, $"FDX failed. {exFdx.message}")
						Return Nothing
					End Try
					
					'Return dt
				'End If
				
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		
		Function Decompress(ByVal toDecompress As Byte()) As Byte()
		    ' Get the stream of the source file.
		    Using inputStream As MemoryStream = New MemoryStream(toDecompress)

		        ' Create the decompressed stream.
		        Using outputStream As MemoryStream = New MemoryStream()
		            Using decompressionStream As DeflateStream =
		                New DeflateStream(inputStream, CompressionMode.Decompress)

		                ' Copy the decompression stream
		                ' into the output file.
		                decompressionStream.CopyTo(outputStream)

		            End Using

		            Decompress = outputStream.ToArray

		        End Using
		    End Using
		End Function	

		
		Public Sub ExtractStageArchieves(ByVal si As SessionInfo)
			Dim wfClusterPk As New WorkflowUnitClusterPk
				Dim wfProfileName As String = String.Empty
				Dim scenarioName As String = String.Empty
				Dim timeName As String = String.Empty
				
				Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
				Dim folderPath As String = FileShareFolderHelper.GetDataManagementExportUsernameFolderForApp(si, True, configSettings.FileShareRootFolder, si.AppToken.AppName)
'				Dim folderPath As String = FileShareFolderHelper.GetDataManagementExportUsernameFolderForApp(si, True, configSettings.FileShareRootFolder, si.AppToken.AppName) & "\" & DateTime.UtcNow.ToString("yyyyMMdd") & "\StageArchives\" & scenarioName & "\" & timeName
				Dim ServerFolderPath As String=$"{folderPath}\Administrators"		
				If Not Directory.Exists(folderPath) Then Directory.CreateDirectory(folderPath)
				
				wfProfileName = "ACM_MetadataImport_default.EntitySource"'"Houston"
				scenarioName = "ACM_Import"
				timeName = "2021M2"
				wfClusterPk = BRAPi.Workflow.General.GetWorkflowUnitClusterPk(si, wfProfileName, scenarioName, timeName)						
			
				BRAPi.Import.Data.ExportStageArchives(si, wfClusterPk, ServerFolderPath, False)
		
				brapi.ErrorLog.LogMessage(si,$"folderPath : {ServerFolderPath}")
				
		End Sub
		
		Public Sub CreateFileFromBytes(ByVal si As SessionInfo)
            'Create the connection
					Dim sqlstr As String = "SELECT TOP (1) [SourceFileBytes] FROM [dbo].[StageArchivesInformation]"
            	Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
                        'Query for the system byte array
                        Dim useCommandTimeoutLarge As Boolean = False
                        Dim dt As DataTable = BRApi.Database.ExecuteSql(dbConn,sqlstr,useCommandTimeoutLarge)
                        Dim sysBytes As Byte() = dt(0)(0)
						Dim filePath As String = BRApi.Utilities.GetFileShareFolder(si, filesharefoldertypes.ApplicationRoot,Nothing) & "\" & stringhelper.RemoveWhiteSpace(si.AppName) & "\Groups\Everyone\chittiTest_1.csv"
						brapi.ErrorLog.LogMessage(si,$"filepath: {filePath}")
                        
                        'Save the file
                       ' File.WriteAllBytes(filePath, sysBytes)
						'File.WriteAllText(filePath,System.Text.Encoding.UTF8.GetString(sysBytes))
						File.WriteAllText(filePath, System.Text.ASCIIEncoding.ASCII.GetString(sysBytes))
'						File.WriteAllLines(filePath,sysBytes)
						brapi.ErrorLog.LogMessage(si,"completed")
	            End Using
		End Sub
	
		Public Sub ExtractFile(ByVal si As SessionInfo)
			Try	
					Dim sqlstr As String = "SELECT TOP (1) convert(convert(varchar(max), [SourceFileBytes], 1) as xml) as [SourceFileBytes2],[SourceFileName],[SourceFileBytes],[UserID] FROM [dbo].[StageArchivesInformation]"
					Dim Table_dt As New DataTable
					Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
						Table_dt = BRAPi.Database.ExecuteSql(dbConnApp,sqlstr, True)   
					End Using
				   Dim FileInbinary As Byte()
					FileInbinary = DirectCast(Table_dt.Rows(0)("SourceFileBytes"), Byte())
					'FileInbinary = DirectCast(System.Text.Encoding.UTF32.GetString(Table_dt.Rows(0)("SourceFileBytes")), String)
					Dim filePath As String = BRApi.Utilities.GetFileShareFolder(si, filesharefoldertypes.ApplicationRoot,Nothing) & "\" & stringhelper.RemoveWhiteSpace(si.AppName) & "\Groups\Everyone\"& Table_dt.Rows(0)("SourceFileName") &".csv"
					File.WriteAllBytes(filePath, FileInbinary)
					'file.WriteAllBytes(filepath,FileInbinary)
					'file.write(filepath,FileInbinary)
					brapi.ErrorLog.LogMessage(si,"1st step completed")
					
''					BRApi.Utilities.SaveFileBytesToUserTempFolder(si, si.UserName, Table_dt.Rows(0)("SourceFileName") & ".csv", FileInbinary)
					brapi.ErrorLog.LogMessage(si,$"FileName : {Table_dt.Rows(0)("SourceFileName")}")
					
				Catch ex As Exception
					brapi.ErrorLog.LogMessage(si,$"Exception : {ex.Message}")
				End Try	
		End Sub
		
		Public Sub ExtractFile1(ByVal si As SessionInfo)
			Try	
					Dim sqlstr As String = "SELECT TOP (1) [SourceFileName],[SourceFileBytes],[UserID] FROM [dbo].[StageArchivesInformation]"
					Dim Table_dt As New DataTable
					Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
						Table_dt = BRAPi.Database.ExecuteSql(dbConnApp,sqlstr, True)   
					End Using
					
				    'Dim FileInbinary As Byte()
				   ' Dim FileInbinary1 As String
					'FileInbinary = DirectCast(Table_dt.Rows(0)("SourceFileBytes"), Byte())
					'FileInbinary1 = Convert.ToChar(Table_dt.Rows(0)("SourceFileBytes")).ToString()
					
				'----------------------Sample Encoding and decoding--------------
'					Dim str As String="sample text to convert bytes from OS."
'					Dim bytes = System.Text.Encoding.UTF8.GetBytes(str)
'					Dim decoded = System.Text.Encoding.UTF8.GetString(bytes)
'					brapi.ErrorLog.LogMessage(si,$"str : {str}")
'					brapi.ErrorLog.LogMessage(si,$"bytes : {bytes}")
'					brapi.ErrorLog.LogMessage(si,$"decoded : {decoded}")
				'----------------------Sample Encoding and decoding--------------
				
					Dim decoded = System.Text.Encoding.UTF8.GetString(Table_dt.Rows(0)("SourceFileBytes"))
					Dim decoded1 = System.Text.Encoding.UTF7.GetString(Table_dt.Rows(0)("SourceFileBytes"))
					Dim decoded2 = System.Text.Encoding.UTF32.GetString(Table_dt.Rows(0)("SourceFileBytes"))
					Dim decoded3 = System.Text.Encoding.BigEndianUnicode.GetString(Table_dt.Rows(0)("SourceFileBytes"))
					Dim decoded4 = System.Text.Encoding.ASCII.GetString(Table_dt.Rows(0)("SourceFileBytes"))
					Dim decoded5 = System.Text.Encoding.Unicode.GetString(Table_dt.Rows(0)("SourceFileBytes"))
					Dim decoded6 = System.Text.Encoding.Default.GetString(Table_dt.Rows(0)("SourceFileBytes"))
					brapi.ErrorLog.LogMessage(si,$"UTF8 : {decoded1}")
					brapi.ErrorLog.LogMessage(si,$"UTF7 : {decoded1}")
					brapi.ErrorLog.LogMessage(si,$"UTF32 : {decoded2}")
					brapi.ErrorLog.LogMessage(si,$"BigEndianUnicode : {decoded3}")
					brapi.ErrorLog.LogMessage(si,$"ASCII : {decoded4}")
					brapi.ErrorLog.LogMessage(si,$"Unicode : {decoded5}")
					brapi.ErrorLog.LogMessage(si,$"Default : {decoded6}")

					
'					FileInbinary = System.Text.Encoding.ASCII.GetBytes(FileInbinary)
'					Dim filePath As String = BRApi.Utilities.GetFileShareFolder(si, filesharefoldertypes.ApplicationRoot,Nothing) & "\" & stringhelper.RemoveWhiteSpace(si.AppName) & "\Groups\Everyone\"& Table_dt.Rows(0)("SourceFileName") &".csv"
'					Dim ms As MemoryStream = New memoryStream(FileInbinary)
'					Dim file  As FileStream = New FileStream(filepath, FileMode.Create, FileAccess.Write)
'            		ms.WriteTo(file)
'					file.Close()
'            		ms.Close()
					'brapi.ErrorLog.LogMessage(si,$"data : {FileInbinary1}")
					brapi.ErrorLog.LogMessage(si,$"FileName : {Table_dt.Rows(0)("SourceFileName")}")
				Catch ex As Exception
					brapi.ErrorLog.LogMessage(si,$"Exception : {ex.Message}")
				End Try	
		End Sub
		
		Public Sub SaveExtractFile(ByVal si As SessionInfo,ByVal Dt As DataTable,ByVal filePath As String)
			Try
			If Not Directory.Exists(filepath) Then Directory.CreateDirectory(filepath)
				
			Using sw As StreamWriter = file.CreateText(filepath)
				For Each DC As DataColumn In dt.Columns
					sw.Write(DC.ColumnName & ",")
				Next
					sw.Write(vbnewline)
				For Each DR As DataRow In dt.Rows
					For Each DC As DataColumn In dt.Columns
						sw.Write(DR(DC.ColumnName).ToString & ",")	
					Next 
						sw.Write(vbnewline)
				Next
			End Using
			brapi.ErrorLog.LogMessage(si,$"filepath {filepath}")
			brapi.ErrorLog.LogMessage(si,"SaveExtractFile completed")
		Catch ex As Exception
			brapi.ErrorLog.LogMessage(si,$"exception SaveExtractFile : - {ex.Message}")
		End Try
		
		End Sub

		'This method is used to export the data to excel
		Protected Sub download(ByVal si As SessionInfo,ByVal dt As DataTable,ByVal filePath As String)
		Try
			If Not Directory.Exists(filepath) Then Directory.CreateDirectory(filepath)
			Using FS As New FileStream(filePath, System.IO.FileMode.Append, System.IO.FileAccess.Write)			
						'Create a binary writer, and write all bytes to the FileStream at once
					   Using BW As New BinaryWriter(FS)
	    	  				brapi.ErrorLog.LogMessage(si,"started")
					    	BW.Write(dt.Rows(0)("SourceFileBytes2"))
					   End Using
	    	  				brapi.ErrorLog.LogMessage(si,"completed :- file generated")
					End Using

'			Using sw As StreamWriter = file.CreateText(filepath)
'			 Dim oFileStream As System.IO.FileStream
'           	 oFileStream = New System.IO.FileStream(filePath, System.IO.FileMode.Append)
'               Dim data As Byte() = dt.Rows(0)("SourceFileBytes")
'               oFileStream.Write(data, 0, data.Length)
'               oFileStream.Close()
'	    	  brapi.ErrorLog.LogMessage(si,"completed :- file generated")
'	    	  brapi.ErrorLog.LogMessage(si,$"data :- {data}")
'		  End Using
	  Catch ex As Exception
	    	  brapi.ErrorLog.LogMessage(si,$"Exception in Download : {ex.Message}")
	  End Try
		End Sub
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ClearLog_Test">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.ClearLog_Test
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Dim sql As New Text.StringBuilder			
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
						
'					Dim sqlcommand = $"select count(*) from [OneStream_Framework_Dev].[dbo].[ErrorLog] where ErrorLevel=0;"
'					Dim result= BRApi.Database.ExecuteSqlUsingReader(dbConnApp, sqlcommand, True)
'					Dim recordcount = result.Rows(0)(0)
'					BRApi.ErrorLog.LogMessage(si, $"Record Count Before Delete: {recordcount}")
				
					
'					Dim uniqueIDLastRec = 	$"Select TOP 1 [UniqueID] From [OneStream_Framework_Dev].[dbo].[ErrorLog] Where ErrorLevel=0 Order By ErrorTime ASC"
'					result= BRApi.Database.ExecuteSqlUsingReader(dbConnApp, uniqueIDLastRec, True)
'					Dim x = result.Rows(0)(0).ToString
					
					
'					BRApi.ErrorLog.LogMessage(si, $"Last Rec Before Delete: {x}")
					
'					uniqueIDLastRec = 	$"Select TOP 1 [UniqueID] From [OneStream_Framework_Dev].[dbo].[ErrorLog] Where ErrorLevel=0 Order By ErrorTime ASC"
'					result= BRApi.Database.ExecuteSqlUsingReader(dbConnApp, uniqueIDLastRec, True)
'					x = result.Rows(0)(0).ToString
					
'					BRApi.ErrorLog.LogMessage(si, $"Last Rec Before Delete Confirm: {x}")
					
					
'					sql.AppendLine("delete top(2000) From [OneStream_Framework_Dev].[dbo].[ErrorLog] Where ErrorLevel=0 Order By ErrorTime ASC")
'					sql.AppendLine("DELETE From [OneStream_Framework_Dev].[dbo].[ErrorLog] Where UniqueID In (Select TOP 1000 [UniqueID] From [OneStream_Framework_Dev].[dbo].[ErrorLog] where ErrorLevel=0 Order By ErrorTime ASC )")
					sql.AppendLine("Truncate Table [OneStream_Framework_Dev].[dbo].[ErrorLog]")
					
					BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)
					
'					uniqueIDLastRec = 	$"Select TOP 1 [UniqueID] From [OneStream_Framework_Dev].[dbo].[ErrorLog] Where ErrorLevel=0 Order By ErrorTime ASC"
'					result= BRApi.Database.ExecuteSqlUsingReader(dbConnApp, uniqueIDLastRec, True)
'					x = result.Rows(0)(0).ToString
					
'					BRApi.ErrorLog.LogMessage(si, $"Last Rec after Delete: {x}")
					
					
'					Dim sqlcommand2 = $"select count(*) from [OneStream_Framework_Dev].[dbo].[ErrorLog] where ErrorLevel=0;"
'					Dim result2= BRApi.Database.ExecuteSqlUsingReader(dbConnApp, sqlcommand2, True)
'					Dim recordcount2 = result2.Rows(0)(0)
'					BRApi.ErrorLog.LogMessage(si, $"Record Count After Delete: {recordcount2}")
					
				End Using
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="CMD_TEST">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.CMD_TEST
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs)
			Try
				Dim selectionChangedTaskResult As New XFSelectionChangedTaskResult()
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
					Dim test As New Execution
					test.Test(si)

				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
	#Region "OMD"
	Public Class Execution
		Private JOB_ID As Guid
		Private INT_ID As Guid
		Private IMP_ID As Guid
		Private TRN_ID As Guid
		Private VAL_ID As Guid
		Private LOAD_ID As Guid
		Private CONS_ID As Guid
		Private UID As String
		Private Created_TS As DateTime

		Public Sub Test(ByVal si As SessionInfo)
'		      ID=Guid.NewGuid()
'			  BRAPI.ErrorLog.LogMessage(si,"inside "+ ID.ToString)
		End Sub
	End Class
	Public Class Process
		Private PID As Guid
		Private PRC_ID As Guid
		Private RCDS_IN As Integer
		Private RCDS_OUT As Integer
		Private ERR_CODE As String
		Private ERR_DESC As String
		Private START_TS As DateTime
		Private Status As String
		Private END_TS As DateTime
	End Class
	
	Public Class Interfaces
		Private ID As Guid
		Private DESCRIPTION As String
		Private SRC As String
		Private SRC_ADDTLINFO As String
		Private TRG As String
		Private TRG_ADDTLINFO As String
		Private METHOD As String
	End Class
	
	
	#End Region
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="CommandCenter_Utility">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_VARIABLES" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_GATEWAY" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_UTILITY" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports System.Net
Imports System.Net.Http
Imports System.Timers
Imports System.Threading
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
Imports Newtonsoft.Json.JsonPropertyAttribute
Imports System.Diagnostics
Imports System.Net.Mail
 
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_VARIABLES
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_GATEWAY
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_UTILITY
Imports OneStream.BusinessRule.Extender.OS_Models

Namespace OneStream.BusinessRule.Extender.CommandCenter_Utility
	
	Public Class MainClass
		'Private m_moduleName As String = "CommandCenter_PUTnCFR"
		
		'Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs)
		Public Sub New(ByVal si As SessionInfo, ByVal api As Object, ByVal args As ExtenderArgs)
	
		End Sub
		
		Public Sub GeneratePayloadForCC(ByVal si As SessionInfo,ScenarioType As String, segment As String, Year As String,APIEvent As String,DMUName As String, Status As String,RecordCount As Int32,ErrorDesc As String,m_moduleName As String,CCSeqName As String) 
				 	
					Dim ccGateway = New IntegrationGateWay(Of CCParams)(si, m_moduleName, OSModuleType.CC)	
					Dim dmNamesInScope As String
					dmNamesInScope= ccGateway.Params.DMUNames
					'Dim dmNamesInScope = New String() {"FCP_PUT_Parameters_CORP_ES_CorpFcst_Sub","FCP_PUT_Parameters_CORP_ES_Fcst_Sub","FCP_PUT_Parameters_INTL_ES_CorpFcst_Sub","FCP_PUT_Parameters_INTL_ES_Fcst_Sub"}
					Dim timeStamp As DateTime = DateTime.UtcNow
					Dim jsonPayLoad As String=String.Empty
					Dim dmErrorMsg As String = String.Empty
					'BRApi.ErrorLog.LogMessage(si, $"{ccGateway.Params.EndPoint} -  moduleParams, m_moduleName :- {m_moduleName}")
				Try
						If Not APIEvent = "CFR" Then
							If dmNamesInScope.Contains(DMUName) Then'Posting PUT API events to Command Center
								Dim result = New With { _
															.scenario = ScenarioType, _
															.segment = segment, _
															.name = CCSeqName, _
															.year = Year, _
															.event = APIEvent, _
															.status = Status, _
															.totalRecords = RecordCount, _
															.ts = timeStamp.ToString("G", CultureInfo.CreateSpecificCulture("en-US")), _
															.error=ErrorDesc, _
															.appName=CommonUtility.GetAppAndEnvName(si), _
															.userId = si.UserName _
														  }
									jsonPayLoad = JsonConvert.SerializeObject(result)
									BRApi.ErrorLog.LogMessage(si, $" PutPayload : {jsonPayLoad} -  Payload")
		 							
		'							'notify the command center team in case of failure with payload information 
										Dim response = ccGateway.PutData(si, jsonPayLoad, False)
										If  response.Result.Success Then
											BRApi.ErrorLog.LogMessage(si, $"{m_moduleName} - PUTAPI Payload sent successfully")
										Else
											Dim subject As String = $"Command center post failed for DMJob {DMUName}"
											BRApi.ErrorLog.LogMessage(si, $"{m_moduleName} - Command center post failed for DMJob")
											CommonUtility.SendMail(si, subject, jsonPayLoad, m_moduleName, ccGateway.Params)
										End If	
							End If
						ElseIf  APIEvent = "CFR" Then
								Dim result = New With { _
														.scenario = ScenarioType, _
														.segment = segment, _
														.name = CCSeqName, _
														.year = Year, _
														.event = APIEvent, _
														.status = Status, _
														.totalRecords = RecordCount, _
														.ts = timeStamp.ToString("G", CultureInfo.CreateSpecificCulture("en-US")), _
														.error=ErrorDesc, _
														.appName=CommonUtility.GetAppAndEnvName(si), _
														.userId = si.UserName _
													  }

								jsonPayLoad = JsonConvert.SerializeObject(result)
									BRApi.ErrorLog.LogMessage(si, $"{jsonPayLoad} -  Payload")
								
								
	 							Dim response = ccGateway.PutData(si, jsonPayLoad, False)
								
	'							'notify the command center team in case of failure with payload information 
								If  response.Result.Success Then
									BRApi.ErrorLog.LogMessage(si, $"CFR fcst events Payload sent successfully to command center")
								Else
									Dim subject As String = $"Command center post failed for CFR fcst events"
									BRApi.ErrorLog.LogMessage(si, $"Command center post failed for CFR fcst Event")
									CommonUtility.SendMail(si, subject, jsonPayLoad, m_moduleName, ccGateway.Params)
								End If	
						ElseIf  APIEvent = "CFRActuals" Then
								Dim result = New With { _
														.scenario = ScenarioType, _
														.segment = segment, _
														.name = CCSeqName, _
														.year = Year, _
														.event = APIEvent, _
														.status = Status, _
														.totalRecords = RecordCount, _
														.ts = timeStamp.ToString("G", CultureInfo.CreateSpecificCulture("en-US")), _
														.error=ErrorDesc, _
														.appName=CommonUtility.GetAppAndEnvName(si), _
														.userId = si.UserName _
													  }

								jsonPayLoad = JsonConvert.SerializeObject(result)
									BRApi.ErrorLog.LogMessage(si, $"{jsonPayLoad} -  Payload")
								
	 							Dim response = ccGateway.PutData(si, jsonPayLoad, False)
	'							'notify the command center team in case of failure with payload information 
								If  response.Result.Success Then
									BRApi.ErrorLog.LogMessage(si, $"CFR actuals events Payload sent successfully to command center")
								Else
									Dim subject As String = $"Command center post failed for CFR Actuals events"
									BRApi.ErrorLog.LogMessage(si, $"Command center post failed for CFR Actuals Event")
									CommonUtility.SendMail(si, subject, jsonPayLoad, m_moduleName, ccGateway.Params)
								End If
						ElseIf  APIEvent = "AOP" Then
								Dim result = New With { _
														.scenario = ScenarioType, _
														.segment = segment, _
														.name = CCSeqName, _
														.year = Year, _
														.event = APIEvent, _
														.status = Status, _
														.totalRecords = RecordCount, _
														.ts = timeStamp.ToString("G", CultureInfo.CreateSpecificCulture("en-US")), _
														.error=ErrorDesc, _
														.appName=CommonUtility.GetAppAndEnvName(si), _
														.userId = si.UserName _
													  }

								jsonPayLoad = JsonConvert.SerializeObject(result)
								BRApi.ErrorLog.LogMessage(si, $"{jsonPayLoad} -  Payload")
								
	 							Dim response = ccGateway.PutData(si, jsonPayLoad, False)
	'							'notify the command center team in case of failure with payload information 
								If  response.Result.Success Then
									BRApi.ErrorLog.LogMessage(si, $"AOP PUT events Payload sent successfully to command center")
								Else
									Dim subject As String = $"Command center post failed for AOP PUT events"
									BRApi.ErrorLog.LogMessage(si, $"Command center post failed for AOP PUT Event")
									CommonUtility.SendMail(si, subject, jsonPayLoad, m_moduleName, ccGateway.Params)
								End If
								
						End If
					Catch ex As Exception
						brapi.ErrorLog.LogMessage(si,$"Exception : {ex.Message}")
					End Try
		End Sub
		
	End Class
	
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Corp_WF_Stage_Clear">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.Corp_WF_Stage_Clear
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
													
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim vScenario As String= "Forecast_Working"
						Dim curPeriodID As Integer = si.WorkflowClusterPk.TimeKey
						Dim curYear As String = TimeDimHelper.GetNameFromId(curPeriodID)
						'Dim curPeriod As String = si.WorkflowClusterPk.TimeKey
						BRapi.ErrorLog.LogMessage(si,"WF Details" & curYear & vScenario)
						'Dim wfUnitPKToClear As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, "Admin_corp.Corp_Admin_Adj", "Actual", "2021M12")
						Dim wfUnitPKToClear1 As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, "Corporate.Corp_Fcst_Functional Adj",vScenario , curYear)
						Dim wfUnitPKToClear2 As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, "Corporate.Corp_GlobalSourcing_Functional_Adj",vScenario , curYear)
						Dim wfUnitPKToClear3 As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, "Corporate.Corp_Core_Finance_Functional_Adj",vScenario , curYear)
						Dim wfUnitPKToClear4 As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, "Corporate.Corp_Affairs_Total_Functional_Adj",vScenario , curYear)
						Dim wfUnitPKToClear5 As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, "Corporate.Corp_GlobalGovernance_Functional_Adj",vScenario , curYear)
						Dim wfUnitPKToClear6 As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, "Corporate.Corp_People_Benefits_Functional_Adj",vScenario , curYear)
						Dim wfUnitPKToClear7 As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, "Corporate.Corp_GlobalTechRollup_Functional_Adj",vScenario , curYear)
						Dim wfUnitPKToClear8 As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, "Corporate.Corp_Corporate_RealEstate_Functional_Adj",vScenario , curYear)
						
						'brapi.Import.Process.ExecuteRetransform(si, wfUnitPKToClear)						
						brapi.Import.Process.ClearStageData(si, wfUnitPKToClear1, Nothing)
						brapi.Import.Process.ClearStageData(si, wfUnitPKToClear2, Nothing)
						brapi.Import.Process.ClearStageData(si, wfUnitPKToClear3, Nothing)
						brapi.Import.Process.ClearStageData(si, wfUnitPKToClear4, Nothing)
						brapi.Import.Process.ClearStageData(si, wfUnitPKToClear5, Nothing)
						brapi.Import.Process.ClearStageData(si, wfUnitPKToClear6, Nothing)
						brapi.Import.Process.ClearStageData(si, wfUnitPKToClear7, Nothing)
						brapi.Import.Process.ClearStageData(si, wfUnitPKToClear8, Nothing)
					
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="CORPtoENT">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_SharedConstants" />
            </referencedAssemblies>
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports OneStream.BusinessRule.DashboardStringFunction.EP_SharedConstants

#End Region

#Region "Rule Change Mgmt"
'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 - - Integration Functions
	'Mods:		
'--------------------------------------------------------------------------------------------------------------------------------------------
#End Region

Namespace OneStream.BusinessRule.Extender.CORPtoENT
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim DEBUG As Boolean = True
						Dim func As String = args.NameValuePairs.XFGetValue("Function")
						'Dim corp_register As String = 
						
						If func.XFEqualsIgnoreCase("extractSourceData")
							Dim extractSourceData_status As Boolean = extractSourceData(si,globals)
							
							If Not extractSourceData_status Then Return Nothing
						End If
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		#Region "Helper Function"
		
		Private Function extractSourceData(ByVal si As SessionInfo, ByRef globals As BRGLobals) As Boolean
			Dim extractSourceData_status As Boolean = False
			Try
				Dim dt As DataTable = Nothing
				Dim sqlQuery As String = "Select CostCenter,Account,CenterType,SUM(M1) As M1,SUM(M2) As M2,SUM(M3) As M3,SUM(M4) As M4,SUM(M5) As M5,
				SUM(M6) As M6,SUM(M7) As M7,SUM(M8) As M8,SUM(M9) As M9,SUM(M10) As M10,SUM(M11) As M11,SUM(M12) As M12,SUM(YearTotal) As YearTotal,
				TypeofConv From XFW_CorpAllocAdj_calc WHERE Allow_Exclude ='Yes' AND (TypeofConv='TRG_LCL' or TypeofConv='SRC_LCL') GROUP BY CostCenter,
				Account,CenterType,TypeofConv"
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt = BRAPi.Database.ExecuteSql(dbConnApp,sqlQuery , False)
				End Using
				Dim cclist As New List(Of String)
				Dim ccstr As String = String.Empty
				For Each dtrow In dt.Rows
					If Not cclist.Contains(dtrow("CostCenter"))
						cclist.Append(dtrow("CostCenter"))
						ccstr = ccstr + dtrow("CostCenter") + ","
					End If
				Next
				If ccstr.Length > 0 Then
					ccstr = ccstr.Remove(ccstr.Length-1,1)
				End If
				Dim sql As New Text.StringBuilder
				sql.Append("SELECT COST_CENTER,VBO_NAME FROM [dbo].[" & EPSharedConstants.sVBOCCMappingTable & "] ")
				
				Dim VBOCCdt As DataTable = Nothing
				Dim VBOCCdict As New Dictionary(Of String, String)
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					VBOCCdt = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, sql.ToString, True)
				End Using
				
				If VBOCCdt.Rows.Count > 0
					For Each VBOCCdr As DataRow In VBOCCdt.Rows
						If Not VBOCCdict.ContainsKey(VBOCCdr("COST_CENTER"))
							VBOCCdict.Add(VBOCCdr("COST_CENTER"),VBOCCdr("VBO_NAME"))
						End If
					Next
				End If
				Dim sql_ecomm As String = "SELECT DISTINCT VBO FROM " & EPSharedConstants.sRACITable & " WHERE AnaplanECF_Filter LIKE '%Anaplan%'"
				Dim dt_ecomm As New DataTable
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_ecomm = BRApi.Database.ExecuteSql(dbConnApp, sql_ecomm, False)
				End Using
				
				Dim ecomm_entityList As New List(Of String)
				If dt_ecomm IsNot Nothing AndAlso dt_ecomm.Rows.Count>0
					For Each dr_ecomm In dt_ecomm.Rows
						ecomm_entityList.Add(dr_ecomm("VBO"))
					Next	
				End If
				'sams additional ecomm cc list
				Dim sql_ecomm_cc As String = "SELECT CC FROM XFW_EP_CC_Attribute WHERE Attribute1  = 'Y'"
				Dim dt_ecomm_cc As New DataTable
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_ecomm_cc = BRApi.Database.ExecuteSql(dbConnApp, sql_ecomm_cc, False)
				End Using
				Dim ecomm_entityList_cc As New List(Of String)
				If dt_ecomm_cc IsNot Nothing AndAlso dt_ecomm_cc.Rows.Count>0
					For Each dr_ecomm_cc In dt_ecomm_cc.Rows
						ecomm_entityList_cc.Add(dr_ecomm_cc("CC"))
					Next	
				End If
				globals.SetObject("cclist",ccstr)
				globals.SetObject("VBOCCdict_mapping",VBOCCdict)
				globals.SetObject("ecomm_entityList",ecomm_entityList)
				globals.SetObject("ecomm_entityList_cc",ecomm_entityList_cc)
				globals.SetObject("CORPtoENT_extractSourceData", dt)
				extractSourceData_status = True
			Catch ex As Exception
				extractSourceData_status = False
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		Return extractSourceData_status
		End Function
		
		Private Function PrintDT(dt As DataTable) As Text.StringBuilder
			Dim sCSV As New Text.StringBuilder
			If dt IsNot Nothing Then
				If dt.Rows.Count > 0 Then
					
					For Each dc As DataColumn In dt.Columns
						sCSV.Append(dc.ColumnName & ",")
					Next
					sCSV.Remove(sCSV.Length-1,1)
					sCSV.Append(Environment.NewLine)
					For Each dr As DataRow In dt.Rows
						For Each dc As DataColumn In dt.Columns
	     					sCSV.Append(dr(dc).ToString & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
					Next
				End If
			End If
			Return sCSV
    	End Function
		#End Region
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Create_Tables">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.Create_Tables
	Public Class MainClass
		Private ID As Guid
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Dim sql As New Text.StringBuilder
				ID = Guid.NewGuid()
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)

'					BRAPi.Database.ExecuteSql(dbConnApp, "Drop Table [dbo].[XFT_App2App_Status_Log_Plan];", True)	
'					sql.AppendLine("DROP TABLE [dbo].[XFT_App2App_Status_Log_Plan1]")
					sql.AppendLine("CREATE TABLE [dbo].[XFT_App2App_Status_Log_Plan]")
					sql.AppendLine("( ") 
					sql.AppendLine(" [Job_ID] [INT] NOT NULL IDENTITY(1,1) PRIMARY KEY, ") 
					sql.AppendLine(" [Start_Time] [DATETIME] DEFAULT GETDATE(), ")
					sql.AppendLine(" [Source_Scenario] [varchar] (200), ")
					sql.AppendLine(" [Source_Year] [varchar] (200) , ")
					sql.AppendLine(" [Target_Scenario] [varchar] (200), ") 						
					sql.AppendLine(" [Target_Year] [varchar] (200) , ")
					sql.AppendLine(" [Triggered_From] [varchar] (200), ")
					sql.AppendLine(" [Import] [varchar] (200), ")
					sql.AppendLine(" [Transformation] [varchar] (200), ")
					sql.AppendLine(" [Validation] [varchar] (200), ")
					sql.AppendLine(" [Load_Cube] [varchar] (200), ")
					sql.AppendLine(" [Process_Cube] [varchar] (200), ")
					sql.AppendLine(" [Executed_By][varchar] (200), ")					
					sql.AppendLine(" [End_Time] [DATETIME] DEFAULT GETDATE(), ")				
					sql.AppendLine(" [Details] [varchar] (2000) ")
					sql.AppendLine(")")
				BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)
					
				End Using
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
'		Public Function Main1(ByVal si1 As SessionInfo, ByVal globals1 As BRGlobals, ByVal api1 As Object, ByVal args1 As ExtenderArgs) As Object
'			Try
'				Dim sql1 As New Text.StringBuilder
'				ID = Guid.NewGuid()				
'				Using dbConnApp1 As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si1)
'					sql1.AppendLine("DROP TABLE [dbo].[XFT_App2App_Status_Log_Forecast1]")
'					sql1.AppendLine("CREATE TABLE [dbo].[XFT_App2App_Status_Log_Forecast1]")
'					sql1.AppendLine("( ") 
'					sql1.AppendLine(" [Job_ID] [INT] NOT NULL IDENTITY(1,1) PRIMARY KEY, ") 
'					sql1.AppendLine(" [Start_Time] [DATETIME] DEFAULT GETDATE(), ")
'					sql1.AppendLine(" [Source_Scenario] [varchar] (200), ")
'					sql1.AppendLine(" [Source_Year] [varchar] (200) , ")
'					sql1.AppendLine(" [Target_Scenario] [varchar] (200), ") 						
'					sql1.AppendLine(" [Target_Year] [varchar] (200) , ")
'					sql1.AppendLine(" [Triggered_From] [varchar] (200), ")
'					sql1.AppendLine(" [Import] [varchar] (200), ")
'					sql1.AppendLine(" [Transformation] [varchar] (200), ")
'					sql1.AppendLine(" [Validation] [varchar] (200), ")
'					sql1.AppendLine(" [Load_Cube] [varchar] (200), ")
'					sql1.AppendLine(" [Process_Cube] [varchar] (200), ")
'					sql1.AppendLine(" [Executed_By][varchar] (200), ")					
'					sql1.AppendLine(" [End_Time] [DATETIME] DEFAULT GETDATE(), ")				
'					sql1.AppendLine(" [Details] [varchar] (2000) ")
'					sql1.AppendLine(")")
'					BRAPi.Database.ExecuteSql(dbConnApp1, sql1.ToString, True)
'				End Using	
'				Return Nothing
'			Catch ex As Exception
'				Throw ErrorHandler.LogWrite(si1, New XFException(si1, ex))
'			End Try
'		End Function
		
'		Public Function Main2(ByVal si2 As SessionInfo, ByVal globals2 As BRGlobals, ByVal api2 As Object, ByVal args2 As ExtenderArgs) As Object
'			Try
'				Dim sql2 As New Text.StringBuilder
'				ID = Guid.NewGuid()											
'				Using dbConnApp2 As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si2)
'					sql1.AppendLine("DROP TABLE [dbo].[XFT_App2App_Actuals_Status_Log1]")
'					sql2.AppendLine("CREATE TABLE [dbo].[XFT_App2App_Actuals_Status_Log1]")
'					sql2.AppendLine("( ") 
'					sql2.AppendLine(" [Job_ID] [INT] NOT NULL IDENTITY(1,1) PRIMARY KEY, ")
'					sql2.AppendLine(" [Process] [varchar] (200) , ")
'					sql2.AppendLine(" [Year] [varchar] (200) , ")
'					sql2.AppendLine(" [Year] [varchar] (200) , ")
'					sql2.AppendLine(" [Period] [varchar] (200) , ")
'					sql2.AppendLine(" [Start_Time] [DATETIME] DEFAULT GETDATE(), ")
'					sql2.AppendLine(" [End_Time] [DATETIME] DEFAULT GETDATE(), ")
'					sql2.AppendLine(" [ExecutedBy][varchar] (200), ")
'					sql2.AppendLine(" [Triggered_From] [varchar] (200), ")
'					sql2.AppendLine(" [Import] [varchar] (200), ")
'					sql2.AppendLine(" [Transformation] [varchar] (200), ")
'					sql2.AppendLine(" [Validation] [varchar] (200), ")
'					sql2.AppendLine(" [Load_Cube] [varchar] (200), ")
'					sql2.AppendLine(" [Process_Cube] [varchar] (200), ")									
'					sql2.AppendLine(" [Details] [varchar] (2000) ")
'					sql2.AppendLine(" [Source_Scenario] [varchar] (200), ")
'					sql2.AppendLine(")")
'					BRAPi.Database.ExecuteSql(dbConnApp2, sql2.ToString, True)
'				End Using	
				
'				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'					sql.AppendLine("INSERT INTO [dbo].[XFW_OMD_INTERFACE] ")
'					sql.AppendLine("VALUES ('e2ddc666-a7b2-5876-9320-8947632b7e47','ENTERPRISE:ENT->INTL:INTL','ENTERPRISE','ENT','INTL','INTL','APPTOAPP','Actual1','Actual1') ") 
						
'					sql.AppendLine("INSERT INTO [dbo].[XFW_OMD_INTERFACE] ")
'					sql.AppendLine("VALUES ('s6thx814-r4p7-4820-1426-6258981m5f93','ENTERPRISE:ENT->INTL:INTL','ENTERPRISE','ENT','INTL','INTL','APPTOAPP','Forecast1','Forecast1') ") 
						
'					sql.AppendLine("INSERT INTO [dbo].[XFW_OMD_INTERFACE] ")
'					sql.AppendLine("VALUES ('fa1a8a5d-e3be-4e4e-98c4-e55a246912eb','ENTERPRISE:ENT->INTL:INTL','ENTERPRISE','ENT','INTL','INTL','APPTOAPP','Plan_Working1','Plan_Working1') ") 
''						sql.AppendLine("VALUES ('{ID}.ToString','{desc}','{src}','{src_addtlinfo}','{tar}','{tar_addtlinfo}','{method}','{src_scenario}','{trg_scenario}') ") 
''						sql.AppendLine(" [JobID] [INT] NOT NULL IDENTITY(1,1), ")
''						sql.AppendLine(" [Scenario] [varchar] (200), ")
''						sql.AppendLine(" [Year] [varchar] (200), ")
''						sql.AppendLine(" [StartMonth] [varchar] (200), ")
''						sql.AppendLine(" [EndMonth] [varchar] (200), ")	
''						sql.AppendLine(" [UpdateTime] [DATETIME] DEFAULT CURRENT_TIMESTAMP, ")
''						sql.AppendLine(" [UpdateBy][varchar] (200),")
''						sql.AppendLine(" [Status][varchar] (200),")
''						sql.AppendLine(" PRIMARY KEY ([Scenario],[Year],[Status])")
''						sql.AppendLine(")")


''					sql.AppendLine("TRUNCATE TABLE XFT_CFR_Certified_Data")
'					BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)
					
'				End Using

'				Return Nothing
'			Catch ex As Exception
'				Throw ErrorHandler.LogWrite(si2, New XFException(si2, ex))
'			End Try
'		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Createdummytable">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
#End Region

Namespace OneStream.BusinessRule.Extender.Createdummytable
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
					
						Dim sql As New Text.StringBuilder
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
	

							sql.AppendLine("CREATE TABLE [XFT_SM_Status_Log](
							[JobID] [Integer] Not Null,
							[Scenario] [nvarchar](100) ,
							[Year] [Integer],
							[StartMonth] [Integer],
							[EndMonth] [Integer],
							[Updatetime] [Datetime],
							[Updated by] [nvarchar](100),
							[Status] [nvarchar](100),

							CONSTRAINT [PK_XFT_SM_Status_Log] PRIMARY KEY CLUSTERED 
							(						
								[JobID] ASC
							)
							)")
													
							BRApi.Database.ExecuteActionQuery (dbConnApp, sql.ToString, False, False)
						End Using

						
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="CTtest">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.CTtest
	
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					
					Case Is = ExtenderFunctionType.CustomCalculate
						If args.CustomCalculateArgs.FunctionName.XFEqualsIgnoreCase("CopyActuals") Then
							
							api.Data.Calculate("Cb#ENT:E#Walmart_US:A#Income_Statement:C#Local:S#Plan_Working:V:Periodic:T#2022M1:F#Total_Flow:O#Import:IC#Top:U1#None:U2#CT_G:U3#NoneU4#Audit_Trail:U5#None:U6#None:U7#None:U8#None = SCb#ENT:E#Walmart_US:A#Income_Statement:C#Local:S#Plan_Working:V:Periodic:T#2022M1:F#Total_Flow:O#Import:IC#Top:U1#None:U2#CT_Y:U3#NoneU4#Audit_Trail:U5#None:U6#None:U7#None:U8#None")
						End If
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Custom_Table">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.Custom_Table
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
		Try
			Dim sql As New Text.StringBuilder
												
			Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)				
			
						sql.AppendLine("CREATE TABLE [dbo].[XFT_App2App_Actuals_Status_Log] ")
						sql.AppendLine("( ") 
						sql.AppendLine(" [Job_ID] [INT] NOT NULL IDENTITY(1,1) PRIMARY KEY, ")
						sql.AppendLine(" [Process] [varchar] (200), ")
						sql.AppendLine(" [Year] [varchar] (30) NOT NULL,")
							
						sql.AppendLine(" [Period] [varchar] (200) , ")
						sql.AppendLine(" [Start_Time] [DATETIME] DEFAULT GETDATE(), ")
						sql.AppendLine(" [End_Time] [DATETIME] DEFAULT GETDATE(), ")
						sql.AppendLine(" [ExecutedBy][varchar] (200), ")					
						sql.AppendLine(" [Triggered_From] [varchar] (200), ")
						sql.AppendLine(" [Import] [varchar] (200), ")
						sql.AppendLine(" [Transformation] [varchar] (200), ")
						sql.AppendLine(" [Validation] [varchar] (200), ")
						sql.AppendLine(" [Load_Cube] [varchar] (200), ")
						sql.AppendLine(" [Process_Cube] [varchar] (200), ")
						sql.AppendLine(" [Details] [varchar] (2000) ")
						sql.AppendLine(")")
						BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)
			End Using		

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	
	End Class
End Namespace]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Data_Check">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.Data_Check
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
					
					Dim wfClusterPk As New WorkflowUnitClusterPk
					Dim povDataCellPk As DataCellPk = New DataCellPk()
					
					Dim objDataCellDisplayOptions As New DataCellDisplayOptions(False, False)
					Dim objCubeNameAndMemberScript As New List(Of CubeNameAndMemberScript)
					Dim objCNAMS As CubeNameAndMemberScript
					Dim objList As List(Of DataCellInfoUsingMemberScript) = New List(Of DataCellInfoUsingMemberScript)
			
					Dim accountList As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "Detail_Account", "A#GMV,A#A401_000,A#A500_000,A#A302_104,A#A650_000,A#A630_000,A#A6201010,A#A302_103,A#A302_100,A#A302_104,A#A6503000,A#Depreciation and Amortization,A#ROI Rent,A#A101_1_wo_IC,A#A101_2_wo_IC,A#A101_3_wo_IC,A#A101_401,A#A102_1,A#A103_015,A#A103_025,A#A104,A#A105_3_wo_IC,A#A201_201_wo_IC,A#A201_4,A#A302_101,A#CF_Dep_Amort,A#CF_Unrealized_Gains_Losses,A#CF_Gain_DiscOps,A#CF_Def_IncTax,A#CF_Acc_Tax,A#CF_Other_Oper_Tot,A#CF_AR,A#CF_Inventories,A#CF_AP,A#CF_AL_Tot,A#CF_FA_Tot", True)
					Dim ud4List As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "Audit_Trail", "U4#Ext_Reported,U4#Ext_Adjusted", True)
					Dim flowList As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "Total_Flow", "F#RPT_USD,F#RPT_PEG", True)
					Dim msb1 As New Text.StringBuilder
					Dim objlistlog As New Text.StringBuilder
					
					For Each accountmbr In accountList
						For Each ud4mbr In ud4List
							For Each flowmbr In flowList

								Dim msb As New MemberScriptBuilder("Cb#ENT:E#Walmart_Total_Company:C#USD:S#Actual:T#2021:V#Periodic:A#" & accountmbr.Member.Name  & ":F#" & flowmbr.Member.Name & ":O#Top:I#Top:U1#Total_Segment_Mdse:U2#CT_Tot:U3#Total_Channel_Fulfillment:U4#" & ud4mbr.Member.Name & ":U5#Status:U6#None:U7#None:U8#None")
								msb1.AppendLine(msb.GetMemberScript)
								objCNAMS = New CubeNameAndMemberScript("ENT",msb.GetMemberScript)
								objCubeNameAndMemberScript.Add(objCNAMS)
							
							Next
						Next	
					Next
			
			
					objList = BRApi.Finance.Data.GetDataCellsUsingMemberScript(si, wfClusterPk, povDataCellPk, objCubeNameAndMemberScript, objDataCellDisplayOptions)
					Dim Datacheck As Decimal = Decimal.Zero
					For Each objitem In objList
						Datacheck = objitem.DataCellEx.DataCell.CellAmount + Datacheck
						objlistlog.AppendLine(objitem.DataCellEx.DataCell.ToString)
					Next	
				BRApi.ErrorLog.LogMessage(si, "DataCheck:" & Datacheck.ToString)
				BRApi.ErrorLog.LogMessage(si, "msb1:", msb1.ToString)
				BRApi.ErrorLog.LogMessage(si, "objlist:", objlistlog.ToString)
				
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="DataManagementEventHandler" name="DataManagementEventHandler">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_VARIABLES" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_GATEWAY" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_UTILITY" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports System.Net
Imports System.Net.Http
Imports System.Timers
Imports System.Threading
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
Imports Newtonsoft.Json.JsonPropertyAttribute
Imports System.Diagnostics
Imports System.Net.Mail

Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_GATEWAY
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_VARIABLES
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_UTILITY
Imports OneStream.BusinessRule.Extender.OS_Models

Namespace OneStream.BusinessRule.DataManagementEventHandler.DataManagementEventHandler
	'13 Jul 2021 - HP - h0p029b - Added Scenario Management sections
	Public Class MainClass
		
#Region "Scenario Management"
		Dim lockedTimeFrame As New Dictionary(Of String, HashSet(Of String))
#End Region
		
		Private m_moduleName As String = "CommandCenter_MEC"
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As DataManagementEventHandlerArgs) As Object
			Dim sendRequest As Boolean = False
			Dim returnValue As Object = args.DefaultReturnValue
			args.UseReturnValueFromBusinessRule = False
			args.Cancel = False

			Try
				
				Dim dmNamesInScope = New List(Of String) ({ "EXECUTE_ACTUALS_HFM", "EXECUTE_ACTUALS_HFM_ADJS", "EXECUTE_ACTUALS_SAPBI", "EXECUTE_ACTUALS_SLEDG_ADJ", _
												    "EXECUTE_CONS_SAMS", "EXECUTE_CONS_CORP", "EXECUTE_CONS_WMTUS", "EXECUTE_CONS_ENT", _
													"EXECUTE_ANAPLAN_PLAN_WORKING_SAMS", "EXECUTE_ECF_PLAN_WORKING_AND_ADJ_WMTUS_ECOMM","CORP_FCST_STEPS_MERGE","CORP_FCST_STEPS_MERGE_ALLMONTHS"})
				'To Identify AOP DM Jobs and update the Module name 													
				Dim AOPdmNamesInScope = New List(Of String) ({"EXECUTE_PLAN_ANAPLAN", "EXECUTE_PLAN_ECF"})		
				Dim WMTUSAutomationdmNamesInScope = New List(Of String) ({"CORP_FCST_STEPS_MERGE","CORP_FCST_STEPS_MERGE_ALLMONTHS"})							
				Dim taskInfo As TaskActivityItem = DirectCast(args.inputs(1), TaskActivityItem)
				Dim dmJobDescription As String = taskInfo.Description.Trim.ToUpper
				Dim dmJobName As String = String.Empty						
				
				If dmNamesInScope.Any(Function(x) 
										If dmJobDescription.EndsWith(x) 
											dmJobName = x
											Return True
										Else
											Return False
										End If 
									  End Function) Then
					
					If AOPdmNamesInScope.Contains(dmJobName) Then
						m_moduleName ="CommandCenter_AOP"
					End If	
					Dim ccGateway As IntegrationGateWay(Of IntegrationParams)
					If WMTUSAutomationdmNamesInScope.Contains(dmJobName) Then
						m_moduleName ="WMTUSAutomationdmNamesInScope"
						 ccGateway = New IntegrationGateWay(Of IntegrationParams)(si, m_moduleName, Nothing)
						 BRApi.ErrorLog.LogMessage(si,"WMTUS")
					Else
						 ccGateway = New IntegrationGateWay(Of IntegrationParams)(si, m_moduleName, OSModuleType.CC)	
					End If	
'					Dim ccGateway = New IntegrationGateWay(Of IntegrationParams)(si, m_moduleName, OSModuleType.CC)	

					If Not args.IsBeforeEvent Then
						Dim timeStamp As DateTime = DateTime.UtcNow
						Dim status As String = ""
						Dim [step] As String = ""
						Dim dmErrorMsg As String = ""
						
					 	Select Case args.OperationName()
						 	Case Is = BREventOperationType.DataManagement.StartSequence
								sendRequest = True
								status = "Started"
								[step] = "Start"
							Case Is = BREventOperationType.DataManagement.EndSequence
								sendRequest = True
								[step] = "End"
								status = If(taskInfo.HasError, "Failed", "Success")
								dmErrorMsg = If(taskInfo.HasError, GetError(si, taskInfo.ErrorLogID), "")
						End Select
						
						If sendRequest Then
							Dim result = New With { _
													.eventType = "JOB", _
													.name = dmJobName, _
													.batchId = 0, _
													.scenario = "", _
													.period = "", _
													.startTime = timeStamp.ToString("G", CultureInfo.CreateSpecificCulture("en-US")), _
													.endTime = timeStamp.ToString("G", CultureInfo.CreateSpecificCulture("en-US")), _
													.duration = 0, _
													.cubeName = "", _
													.step = [step], _
													.status = status, _
													.fcpRecordCount = 0, _
													.osRecordCount = 0, _
													.error = dmErrorMsg, _
													.appName = CommonUtility.GetAppAndEnvName(si), _
													.userId = si.UserName _
												  }

							Dim jsonPayLoad As String = JsonConvert.SerializeObject(result)
							'brapi.ErrorLog.LogMessage(si,$"{jsonPayLoad}")
							Dim response = ccGateway.PutData(si, jsonPayLoad, False)
							'notify the command center team in case of failure with payload information 
							If Not response.Result.Success Then
								Dim subject As String = $"Command center post failed for DMJob {dmJobName}"
								CommonUtility.SendMail(si, subject, jsonPayLoad, m_moduleName & " - DataManagementEventHandler", ccGateway.Params)
							Else
								If ccGateway.Params.Debugger Then
									BRApi.ErrorLog.LogMessage(si, $"{m_moduleName} - DataManagementEventHandler Payload sent successfully")
								End If
							End If	
						End If
					End If
				End If
				
				#Region "Scenario Management"				
				If args.isBeforeEvent Then
					args.Cancel = True
					Dim log As New Text.StringBuilder
					For Each i In args.inputs
						If i.GetType.ToString.XFContainsIgnoreCase("DataMgmtStepMetadataInfo")
							Me.getLockedTimeFrame(si)
							Me.validateTimeFrame(si, i)
						End If
					Next
					args.Cancel = True
					args.UseReturnValueFromBusinessRule = True
				End If
				#End Region			
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
			Return returnValue
		End Function
		
		Private Function GetError(ByVal si As SessionInfo, ByVal errorId As Guid) As String
			Dim errorMsg As String = ""
			
			Try
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si) 
					Dim sqlStr = "SELECT Description FROM ErrorLog WHERE UniqueId = '{errorId.ToString}'"
					Using dt As DataTable = BRAPi.Database.ExecuteSql(dbConnApp, sqlStr, True)
						If dt.Rows.Count > 0 Then
							errorMsg = dt.Rows(0)(0).ToString.Split(New String() {Environment.NewLine}, StringSplitOptions.None).Where(Function(line) line.XFContainsIgnoreCase("Summary")).FirstOrDefault()
						Else
							errorMsg = "Error occured in DataManagement Job"
						End If
					End Using
				End Using
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
			
			Return errorMsg
		End Function
		
#Region	"Scenario Management"
	Public Sub validateTimeFrame(ByVal si As SessionInfo, ByVal metaInfo As DataMgmtStepMetadataInfo)
			Dim listOfScenarios As New HashSet(Of String)
			Dim listOfTimes As New HashSet(Of String)
			
			If metaInfo.ScenarioInfos IsNot Nothing Then
				For Each scenario In metaInfo.ScenarioInfos
					If scenario.Member IsNot Nothing Then
						listOfScenarios.Add(scenario.Member.Name)
					End If
				Next
			End If
			
			If metaInfo.DestScenarioInfo IsNot Nothing Then
				listofScenarios.Add(metaInfo.DestScenarioInfo.member.Name)
			End If
			
			
			If metaInfo.ScenarioInfo IsNot Nothing Then
				listofScenarios.Add(metaInfo.ScenarioInfo.Member.Name)
			End If
			
			If metaInfo.TimeInfos IsNot Nothing Then
				For Each time In metaInfo.TimeInfos
					If time.Member IsNot Nothing Then
						listOfTimes.Add(time.Member.Name)
					End If
				Next
			End If
			
			If metaInfo.DestTimeInfos IsNot Nothing Then
				For Each t In metaInfo.DestTimeInfos
					If t.Member IsNot Nothing Then
						listOfTimes.Add(t.Member.Name)
					End If
				Next
			End If
			
			For Each t In listOfTimes.ToList
				If t.Length = 4 Then
					For cnt = 1 To 12 
						listOftimes.Add($"{t}M{cnt}")
					Next
				End If
			Next 
			
			For Each s In listOfScenarios
				If Me.lockedTimeFrame.containsKey(s) Then
					For Each t In listOfTimes
						If Me.lockedTimeFrame(s).Contains(t) Then
							Throw New Exception($"{Environment.NewLine}{s} is locked for {t}")
						End If
					Next  
				End If
			Next 
			
			
		End Sub
		
		Public Sub getLockedTimeFrame(ByVal si As SessionInfo)
			Dim sql As New Text.StringBuilder
			sql.Append("Select * from [XFT_SM_Status_Log] where [Status] = 'Locked'")
			Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				Using dt As DataTable = BRApi.Database.ExecuteSql(dbConnApp, sql.ToString, False)
					If (dt IsNot Nothing) AndAlso (dt.Rows.Count > 0) Then
						For Each dr As DataRow In dt.Rows
							Dim startMonth = dr("StartMonth").ToString.XFConvertToInt
							Dim endMonth = dr("EndMonth").ToString.XFConvertToInt
							Dim year = dr("Year").ToString
							
						
							If Not Me.lockedTimeFrame.ContainsKey(dr("Scenario")) Then
								Dim timeFrame As New HashSet(Of String) 
								For i = startMonth To endMonth
									timeFrame.Add($"{year}M{i}")
								Next
								Me.lockedTimeFrame.Add(dr("Scenario"), timeFrame)
							Else
								Dim timeframe As HashSet(Of String) = Me.lockedTimeFrame(dr("Scenario"))
								For i = startMonth To endMonth
									timeFrame.Add($"{year}M{i}")
								Next
								Me.lockedTimeFrame.Remove(dr("Scenario"))
								Me.lockedTimeFrame.Add(dr("Scenario"), timeFrame)
							End If
						Next
					End If
				End Using
			End Using
		End Sub
#End Region		

	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="DataQualityEventHandler" name="DataQualityEventHandler">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq

Namespace OneStream.BusinessRule.DataQualityEventHandler.DataQualityEventHandler

	Public Class MainClass 
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As DataQualityEventHandlerArgs) As Object 
			Try
						
			'Define a switch to control event processing, since many of these are reference examples we do not want them to run all the time
				Dim processEvents As Boolean = False
				'Set the default return values
				Dim returnValue As Object = args.DefaultReturnValue
				args.UseReturnValueFromBusinessRule = False
				args.Cancel = False
				'Evaluate the operation type in order to determine which subroutine to process
				Select Case args.OperationName
					Case Is = BREventOperationType.DataQuality.ProcessCube.NoCalculate
						'Execute a Data Management job after process Cube runs
						Me.XFR_HandleProcessCubeNoCalculate(si, globals, api, args)
						
					'Case Is = BREventOperationType.DataQuality.Certify.FinalizeSetCertifyState
						'Send an email after a Workflow Profile executes its certification
						'Me.XFR_HandleFinalizeSetCertifyState(si, globals, api, args)
				End Select
				
				Return returnValue
			Catch ex As Exception 
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex)) 
			End Try 
		End Function
		
		
		#Region "ProcessCube.NoCalculate Helpers" 
		Private Sub XFR_HandleProcessCubeNoCalculate(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As DataQualityEventHandlerArgs) 
			Try 
			'Get the DataUnitInfo from the Event arguaments so that we can get the name of the DataManagement sequence to process.
				'BRApi.ErrorLog.LogMessage(si, $"args: {JsonConvert.SerializeObject(args)}")
				'Dim wfProfilePKUnit As WorkflowUnitClusterPk = DirectCast(args.Inputs(0), WorkflowUnitClusterPk)
				'wfProfilePKUnit.TimeKey
				
				Dim calcInfo As DataUnitInfo = DirectCast(args.Inputs(2), DataUnitInfo)
				If Not calcInfo Is Nothing Then
					'Make sure that a Sequence name as assigned to the filter value of the Calc Definition of the executing Workflow Profile
		
					If calcInfo.FilterValue <> String.Empty Then
						
						'Added this logic to parametarize the Timefilter in the DMU
						'Added by vn516zx - 11/01/2021
						'JIRA # DPA-27482
						If calcInfo.FilterValue = "INTL_Actual" Then
							Dim myWorkflowUnitPk As WorkflowUnitPk = BRApi.Workflow.General.GetWorkflowUnitPk(si)
							Dim wfPeriod As Integer = BRApi.Finance.Time.GetYearFromId(si, myWorkflowUnitPk.TimeKey)
							BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, False, "prm_DB_FCP_PUT_INTL_ES_INPUT_Year_Actual", wfPeriod.ToString)
							
							'Now, execute the DataMgmt Sequence that was specified in the FilterValue (In a background thread)
							BRApi.Utilities.StartDataMgmtSequence(si, calcInfo.FilterValue, Nothing)
							
						ElseIf calcInfo.FilterValue.XFContainsIgnoreCase("PopulateQueue") Then
							
							Dim dt_queue As New DataTable 
							
							dt_queue.Columns.Add(New DataColumn("UniqueID", GetType(String)))
							dt_queue.Columns.Add(New DataColumn("PlanYear", GetType(Integer)))
							dt_queue.Columns.Add(New DataColumn("CostCenter", GetType(String)))
							dt_queue.Columns.Add(New DataColumn("UserID", GetType(String)))
							dt_queue.Columns.Add(New DataColumn("Submitted_On", GetType(Date)))

							Dim dr_watcher As DataRow = dt_queue.NewRow
						
							dr_watcher("UniqueID") = Guid.NewGuid
							dr_watcher("PlanYear") = BRApi.Finance.Time.GetNameFromId(si, si.WorkflowClusterPk.TimeKey)
							dr_watcher("CostCenter") = calcinfo.DataUnitNames.EntityName
							dr_watcher("UserID") = BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName).User.Description
							dr_watcher("Submitted_On") = DateTime.Now
							
							dt_queue.rows.Add(dr_watcher)
							
							If dt_queue IsNot Nothing AndAlso dt_queue.Rows.Count > 0 Then
								BRApi.Database.SaveCustomDataTable(si, "Application", "XFW_ExpensePlanning_Queue", dt_queue, False)
							End If	
								
							
						End If
						
						
					End If
				End If
				Catch ex As Exception 
					Throw ErrorHandler.LogWrite(si, New XFException(si, ex)) 
				End Try
			End Sub 
			#End Region

	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="DPNL_CreateTables">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.DPNL_CreateTables
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Dim sql As New Text.StringBuilder	
			
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					sql.AppendLine("CREATE TABLE [dbo].[XFT_DPNL_Job_Summary] ")
					sql.AppendLine("( ") 
					sql.AppendLine(" [Job_ID] [INT] NOT NULL IDENTITY(1,1) PRIMARY KEY, ") 
					sql.AppendLine(" [Trigger_Time] [DATETIME] NOT NULL DEFAULT GETDATE(), ") 								
					sql.AppendLine(" [Trigger_By] [varchar] (200) , ") 								
					sql.AppendLine(" [Cube_View_Selected] [varchar] (3000), ") 
					sql.AppendLine(" [Period_Selected] [varchar] (3000), ")
					sql.AppendLine(" [Status][varchar] (2000), ")
					sql.AppendLine(" [Detail][varchar] (3000) ")
					sql.AppendLine(")")	
					BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)	
					
				End Using
				
				sql = New Text.StringBuilder		

				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					sql.AppendLine("CREATE TABLE [dbo].[XFT_DPNL_Job_Details] ")
					sql.AppendLine("( ") 
					sql.AppendLine(" [Job_ID] [INT],") 
					sql.AppendLine(" [Start_Time] [DATETIME] NOT NULL DEFAULT GETDATE(), ") 								
					sql.AppendLine(" [Cube_View] [varchar] (200) , ") 								
					sql.AppendLine(" [Period] [varchar] (200), ") 
					sql.AppendLine(" [Status][varchar] (3000), ")
					sql.AppendLine(" [Detail][varchar] (3000), ")
					sql.AppendLine(" [RecordsSent] [INT]")
					sql.AppendLine(")")	
					BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)	
							
				End Using

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="DPNL_Metadata_Sync">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Text
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports System.Net.Http
Imports System.Diagnostics
Imports System.Net
Imports System.Collections.Concurrent 
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Threading.Tasks
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq

Namespace OneStream.BusinessRule.Extender.DPNL_Metadata_Sync
	Public Class MainClass
		Public Shared Dim RESTClient As HttpClient
		Public Shared Dim si As SessionInfo
		Private Dim vDimType As String()
		Private Dim vDimName As String()
		Private m_ExtenderLog As New Text.StringBuilder
		Private Dim baseURL As String = String.Empty
		
		
		
	
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Me.baseURL = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, $"Param_DPNL_BaseURL")
			RESTClient = New HttpClient()
			RESTClient.Timeout = TimeSpan.FromMinutes(1)
			RESTClient.DefaultRequestHeaders.Clear()
			RESTClient.DefaultRequestHeaders.ConnectionClose = False
			RESTClient.DefaultRequestHeaders.Add("Cache-Control", "no-cache")
			
			Dim headers As New Dictionary(Of String, String)
			Dim headersParam As String = String.empty
			If Me.baseURL.XFContainsIgnoreCase("dev")
'				headersParam = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, $"Param_DPNL_BE_Headers_dev")
'				BRApi.ErrorLog.LogMessage(si, headersParam.ToString)
'				Dim headersParam As String = args.CustomCalculateArgs.NameValuePairs("$Param_DPNL_BE_Headers_dev")
				Dim headersParam As String = args.ExternalDimSourceArgs.NameValuePairs("$Param_DPNL_BE_Headers_dev")
				BRApi.ErrorLog.LogMessage(si, headersParam.ToString)
		 	Else If Me.baseURL.XFContainsIgnoreCase("prod")
				headersParam = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, $"Param_DPNL_BE_Headers_prod")
			Else If Me.baseURL.XFContainsIgnoreCase("stg")
				headersParam = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, $"Param_DPNL_BE_Headers_stg")
			End If
			
			
			
			Dim headersPair As New NameValueFormatBuilder(headersParam)
			For Each header In headersPair.NameValuePairs
				RESTClient.DefaultRequestHeaders.Add(header.key, header.value)
			Next
			
			Me.validateArgs(si,args)
			Try
				
				Dim mbrInfoList As New List(Of MemberInfo)
				Dim vDimTypeID As Integer
				Dim dt As New DataTable
				
					dt.Columns.Add(New DataColumn("Member", GetType(String)))
					dt.Columns.Add(New DataColumn("Parent", GetType(String)))
					dt.Columns.Add(New DataColumn("Description", GetType(String)))
					'brapi.ErrorLog.LogMessage(si,vDimType.Length.ToString & "/" & vDimName.Length.ToString)
				
				If 	vDimType.Length <> 0 And vDimName.Length <> 0 Then
					For i = 0 To ( vDimType.Length - 1 )
							 mbrInfoList.Clear
							 dt.Rows.Clear
							 mbrInfoList = getDimList(si,vDimType(i),vDimName(i))
							 'brapi.ErrorLog.LogMessage(si, i & "/" & vDimType(i) & " - " & vDimName(i), String.Join(",",mbrInfoList))
						 	
							If vDimType(i) = "Entity"
							 	vDimTypeID = DimType.Entity.Id
							Else If vDimType(i) = "Account"
								vDimTypeID = DimType.Account.Id	
						 	End If
						 For Each e In mbrInfoList
							Dim dr As DataRow = dt.NewRow
							dr("Member") = e.Member.Name
								 If BRApi.Finance.Members.GetParents(si, BRApi.Finance.Dim.GetDimPk(si, vDimName(i)), e.Member.MemberId, True).Count <> 0 Then
										dr("Parent") = BRApi.Finance.Members.GetParents(si, BRApi.Finance.Dim.GetDimPk(si, vDimName(i)), e.Member.MemberId, True)(0).Name
									Else 
										dr("Parent") = "Root"
								 End If
							If e.Member.Name.XFContainsIgnoreCase("Fresh_Traffic")
								dr("Description") = "Traffic"
							Else
								dr("Description") = e.Member.Description
							End If
							dt.Rows.Add(dr)
						 Next
						 
						 Me.AddLogMessage(si, $"DT Created for {vDimType(i)} and {vDimName(i)} with {dt.Rows.Count} Rows")
						 If dt IsNot Nothing Then
								Dim jObj As JObject = New Jobject
								jObj("dimType") = vDimType(i)
								If vDimType(i).XFEqualsIgnoreCase("Account") Then
									jObj("dimName") = "SAMS_ALL"
								Else
									jObj("dimName") = vDimName(i)
								End If
								jObj("data") = JArray.FromObject(dt, JsonSerializer.CreateDefault)
									 
								PutDT(dt, jObj.toString)
							   
'							  Dim everyonePath As String = BRApi.FileSystem.GetFileShareFolder(si, FileShareFolderTypes.ApplicationRoot, Nothing) & "\" & si.AppName.Replace(" ", String.Empty) & "\Groups\DataExport\"
'								Using fdxDataFile As System.IO.StreamWriter = New StreamWriter(everyonePath & vDimType(i) & "_" & vDimName(i) & "file_metatable.txt", False)
'									fdxDataFile.WriteLine(jObj.ToString)
'								   	fdxDataFile.Close
'							  End Using 

						End If
					Next
				Else 
					 Me.AddLogMessage(si,"Number of rows in DimType and DimName is 0")
				End If
					
'					For Each deleteFile In Directory.GetFiles(BRApi.FileSystem.GetFileShareFolder(si, FileShareFolderTypes.ApplicationRoot, Nothing) & "\" & si.AppName.Replace(" ", String.Empty) & "\Groups\DataExport\" ,"*.*",SearchOption.TopDirectoryOnly)
'					    File.Delete(deleteFile)
'					Next
						

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			Finally
'				brapi.ErrorLog.LogMessage(si,$"DPNL PUT METADATA - {Date.Now.ToString}", $"{vbNewLine}{vbTab}{vbTab}{vbTab}{vbTab}****************** OS POST Log ******************{vbNewLine}{m_ExtenderLog.ToString}")	
			End Try

		End Function
		
		Public Sub validateArgs(ByVal si As SessionInfo, ByVal args As ExtenderArgs)
			
			vDimType = args.NameValuePairs.XFGetValue("dimType").Split("|"c)
			vDimName = args.NameValuePairs.XFGetValue("dimName").Split("|"c)
			Try
				If vDimType.Length <> vDimName.Length
					Me.AddLogMessage(si,$"Invalid Param 'dimType' or 'dimName'. Number of dimType should be equal to dimName. Terminate.")
					Throw New XFUserMsgException(si, New Exception($"Invalid Param 'dimType' or 'dimName'. Number of dimType should be equal to dimName. Terminate."))
				End If
			Catch e As Exception
				Me.AddLogMessage(si,$"Invalid Param 'dimType' or 'dimName'. Number of dimType should be equal to dimName. Terminate.")
				Throw New XFUserMsgException(si, New Exception($"Invalid Param 'dimType' or 'dimName'. Number of dimType should be equal to dimName. Terminate."))
			End Try
			
		End Sub
		Public Function getDimList(ByVal si As SessionInfo, ByVal dimType As String, ByVal dimName As String) As List(Of MemberInfo)
			 	Dim dimList As New List(Of MemberInfo)
				Dim DimPk As DimPk = BRApi.Finance.Dim.GetDimPk(si, dimName)
				Dim PreFix As String = String.Empty
				Select dimType
					Case "Entity"
					 	PreFix = "E#"
					Case "Account"
						PreFix = "A#"
					Case "UD1"
						PreFix = "U1#"
				End Select
				
				Dim ListMinfo As List(Of MemberInfo) = BRApi.Finance.Members.GetMembersUsingFilter(si, DimPk, PreFix & "Root.DescendantsInclusive", True)				
					For Each vMembers As MemberInfo In ListMinfo							
						dimList.Add(vMembers)
					Next
				Return dimList
		End Function
		
		
		Public Function PutDT(ByRef dt As DataTable, ByVal payload As String) As Boolean
			Try
				Dim swThreadSafe As Stopwatch = New Stopwatch
				swThreadSafe.Start()
				Dim URL As String = Me.baseURL & "loadMeta"
				
				Dim asyncWebRequest As List(Of Task(Of HttpResponseMessage)) = New List(Of Task(Of HttpResponseMessage))
								
				asyncWebRequest.Add(webRequest(RESTClient, URL, payload ,3))
				
				Dim webRequests As Task
				webRequests = Task.WhenAll(asyncWebRequest.ToArray)
				Try
					webRequests.Wait()
					swThreadSafe.Stop()
					For Each res As Task(Of HTTPResponseMessage) In asyncWebRequest				
						Dim taskResponseContent As Task(Of String) = res.result.content.ReadAsStringAsync()
						taskResponseContent.Wait
						Me.AddLogMessage(MainClass.si,$"Reponse {taskResponseContent.Result}")
					Next 
					Me.AddLogMessage(MainClass.si,$"All payloads in DT sent in {swThreadSafe.Elapsed.TotalSeconds} seconds")
					Return True
				Catch e As Exception
					Me.AddLogMessage(MainClass.si,$"webRequests wait for DT failed, {e}")
					Return False
				End Try	
			Catch e As Exception
				Me.AddLogMessage(MainClass.si,$"uploadDT failed, {e}")
				Return False
			End Try
		End Function
		
		Public Async Function webRequest(ByVal client As HTTPclient, ByVal URL As String, ByVal content As String, ByVal maxTry As Short) As Task(Of HttpResponseMessage)
			Dim response As New HTTPResponseMessage
			If content = Nothing Then
				For attempt As Short = 1 To maxTry
					Try
						response = Await client.GetAsync(URL)
						If response IsNot Nothing Then
							Return response
						End If						 
					Catch ex As Exception
						Me.AddLogMessage(MainClass.si,$"Exception in GET webRequest, {ex}")
					End Try
					Me.AddLogMessage(MainClass.si,"Retry after 5 seconds.")
					Await Task.Delay(TimeSpan.FromSeconds(5).TotalMilliseconds)
				Next attempt				
			Else
				Dim body As Httpcontent = New Http.StringContent(content, System.Text.Encoding.UTF8, "application/json")
				For attempt As Short = 1 To maxTry
					Try
						response = Await client.PostAsync(URL, body)
						If response IsNot Nothing Then
							Return response
						End If						 
					Catch ex As Exception
						Me.AddLogMessage(MainClass.si,"Exception in GET webRequest, {ex}")
					End Try
					Me.AddLogMessage(MainClass.si,"Retry after 5 seconds.")
					Await Task.Delay(TimeSpan.FromSeconds(5).TotalMilliseconds)
				Next attempt
			End If
			Return Nothing
		End Function
		
		Public Sub AddLogMessage(ByVal si As SessionInfo, ByVal message As String)
			Try
				
				m_ExtenderLog.AppendLine("-------------------------------------------------------------------------------------------------------------------")
				m_ExtenderLog.AppendLine($"Time:{vbTab}{vbTab}{Date.Now.ToString}")
				m_ExtenderLog.AppendLine($"Message:{vbTab}{message}")
				m_ExtenderLog.AppendLine("-------------------------------------------------------------------------------------------------------------------")
				m_ExtenderLog.AppendLine(String.Empty)
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
	End Class
End Namespace



]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="DPNL_PUT">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Text
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports System.Net.Http
Imports System.Diagnostics
Imports System.Net
Imports System.Collections.Concurrent 
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Threading
Imports System.Threading.Tasks
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
Imports System.Configuration
Imports System.Net.Configuration

Namespace OneStream.BusinessRule.Extender.DPNL_PUT
	Public Class MainClass		
		Private Dim Util As Util
		Private Dim logHeader As String
		Private Dim baseURL As String = String.Empty
		Private Dim entitiesGroupSize As Integer = 100		
		Private Dim exportDataToFile As Boolean = False
		Private Dim printDebugLogs As Boolean = True
		Private Dim jobID As String = String.Empty
		Private Dim StepId As String = String.Empty
		Private Dim cubeViewName As String = String.Empty
		Private Dim entityTopMember As String = String.Empty
		Private Dim listOfPeriods As New HashSet(Of String)
'		Update to run for multiple CV at once
		Private Dim listOfCV As New HashSet(Of String)
		'Number of thread(s) to deploy
		Private Dim noOfThreads As Integer = 1
		'No of retries incase of API server connection issues
		Private Dim maxWebReqTries As Integer = 3
		
		' Parameters with sample values:
		' [FDXCVName=FDX_OPIS_PNL_OPS_ACT] Name of the Cube View. CV should follow the structure with 3 columns (Periodic, QTD & YTD) with suppression disabled. Rows can be dynamic with supression enabled.
		' [FDXPeriod=2020|2021M1] | Delimited list of time members. If only Year is given: all 12 months are considered.
		' [FDXEntityChunkSize=100] No of entities to be considered at a time while fetching CV. Lower the number if CV exceeds the threshold. 
		' [exportDataToFile=False] Switch to control data export to file. Extracted as CSV to Fileshare/application/everyone/DPNL
		' [printDebugLogs=True] Switch to control Debug level messages in error log.
		' [BaseURL=https://dpnl-be.dev10.gbs.ase.southcentralus.us.walmart.net/] Endpoint Hostname
		' [JobID=10] ID of the Job Submitted in Summary Table
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				'Validate the params received
				Me.validateArgs(si, args)
				Dim swm As New Stopwatch
				swm.Start
				Dim procedureListName As New HashSet(Of String)
				'Loop thorugh each time period & generate summary log incase of error
				Dim listOfErrors As String = ""
				Dim maxCount = listOfCV.Count * listOfPeriods.Count
				Dim counter = 1
				
				For Each cv As String In listOfCV
					Me.cubeViewName = cv
					procedureListName.Add(cubeViewName.remove(cubeViewName.Length - 3, 3) & "PHY")
				Next
				
				For Each cv As String In listOfCV
					Me.cubeViewName = cv
					For Each timePovFilter As String In listOfPeriods
						Util.updateSummaryTable(si, Me.jobID, "Running", $"{counter} of {maxCount} - Executing for {cubeViewName} {timePovFilter}")
						If Not runForTimePeriod(si, timePovFilter)
							listOfErrors = listOfErrors & $"{cubeViewName} - {timePovFilter}{Environment.NewLine}"
							procedureListName.Remove(cubeViewName.remove(cubeViewName.Length - 3, 3) & "PHY")
						End If
						counter = counter + 1
					Next
				Next
				
				For Each procedure In procedureListName
					Util.appendLog(0, $"Procedure to Run: {Procedure}")
				Next
				Dim procedureCounter = 1
				'Run SQL Procedure endpoints
				For Each procedure In procedureListName
					Dim procSW As Stopwatch = stopwatch.StartNew
					Try
						Me.runProc(procedure)
					Catch e As exception
						Util.appendLog(0, $"Error from Server while triggering procedure {procedure}")
						Util.updateDetailsTable(si, Me.jobID, procedure, "NA", "Failed", $"Error from Server while triggering procedure", "0")
						listOfErrors = listOfErrors & $"{procedure}{Environment.NewLine}"
						Continue For
					End Try
					Try
						Thread.Sleep(Timespan.FromSeconds(2))
						Util.updateSummaryTable(si, Me.jobID, "Running", $"{procedureCounter} of {procedureListName.Count} - Executing Server Procedure: {procedure}")
						procedureCounter = procedureCounter + 1
						Dim trackLoop As Integer = 0
						While Me.isProcComplete(procedure) = False
							'30 mins timeout
							If trackLoop < 1800 Then 
								Thread.sleep(TimeSpan.FromSeconds(20))
								trackLoop = trackLoop + 20
								Util.appendLog(0, $"Waiting for {procedure} ")
							Else 
								Util.appendLog(0, $"Server failed to complete {procedure} in 30 minutes")
								listOfErrors = listOfErrors & $"{procedure}{Environment.NewLine}"
								Util.updateDetailsTable(si, Me.jobID, procedure, "NA", "Failed", $"Server failed to complete {procedure} in 30 minutes", "0")
								Exit While
							End If
						End While
					Catch e As Exception
						Util.appendLog(0, $"Error while getting {procedure} status from server: {e}")
						Util.updateDetailsTable(si, Me.jobID, procedure, "NA", "Failed", $"Error while getting {procedure} status from server", "0")
						listOfErrors = listOfErrors & $"{procedure}{Environment.NewLine}"
					End Try	
					procSW.Stop
					
					Util.updateDetailsTable(si, Me.jobID, procedure, "NA", "Completed", $"Processed in {procSW.Elapsed.Seconds.toString} seconds", "0")
				Next 
				swm.Stop
				If Not listOfErrors = "" Then
					Me.logHeader = Me.logHeader & " - Summary"
					Util.appendLog(0, $"Errors {Environment.NewLine}" & listOfErrors)
					Util.submitLog(si, Me.logHeader)
					Util.updateSummaryTable(si, Me.jobID, "Failed", $"Errors {Environment.NewLine}" & listOfErrors)
				Else
					Me.logHeader = Me.GetType.Namespace & " - Done"
					Util.submitLog(si, Me.logHeader)
					If swm.Elapsed.Minutes = 0 Then
						Util.updateSummaryTable(si, Me.jobID, "Completed", $"Processed in {swm.Elapsed.Seconds} seconds")
					Else
						Util.updateSummaryTable(si, Me.jobID, "Completed", $"Processed in {swm.Elapsed.Minutes} minutes")
					End If
				End If
			Catch e As Exception
				Util.appendLog(0, $"Exception in Main: {e}")
				util.submitLog(si, Me.logHeader)
				Dim mes = util.trimString(e.Message, 100)
				Util.updateSummaryTable(si, Me.jobID, "Failed", $"Exception {mes}")
				Throw e
			End Try
			Return Nothing
		End Function
		
		'Control function for extract CV & send to API for a particular Period
		Public Function runForTimePeriod(ByVal si As SessionInfo, ByVal timePovFilter As String) As Boolean
			Me.logHeader = Me.GetType.Namespace & "-" & cubeViewName & "-" & timePovFilter

			Dim TotalRows As ConcurrentBag(Of Integer) = New ConcurrentBag(Of Integer)
			Dim DTBag As ConcurrentBag(Of DataTable) = New ConcurrentBag(Of DataTable)
			Dim sw As Stopwatch = New StopWatch
				
			Try 	
				sw.start()
				'Generate list of group of entites (number of entities in one group specified in parameter)
				'E#Sams_US.DescendantsInclusive
				Dim entities As List(Of String) = getMembersGroupFromFilter(si, "SAMS", "E#" & entityTopMember & ".DescendantsInclusive", entitiesGroupSize)
				If Not entities Is Nothing AndAlso entities.Count > 0 Then
					Util.appendLog(0, $"Entity group size: {entitiesGroupSize}, Total groups: {entities.Count}")
				Else
					Util.appendLog(0, $"No entities found. Terminate.")
					Util.submitLog(si, Me.logHeader)
					Util.updateDetailsTable(si, Me.jobID, Me.cubeViewName, timePovFilter, "Failed", $"No Descendants found for: {entityTopMember}", "0")
					Throw New XFUserMsgException(si, New Exception($"No entities to process"))
					Return False
				End If
				
				'Generate Unique TOken for a period from API
				Dim token As String = getToken(cubeViewName, timePovFilter)
				If Not token Is Nothing Then
					Util.appendLog(0, $"Token for {cubeviewName}|{timePovFilter}: {token}")
				Else
					Util.appendLog(0, $"getToken dint return a token. Terminate")
					util.updateDetailsTable(si, Me.jobID, Me.cubeViewName, timePovFilter, "Failed", $"Server dint return a token", "0")
					Throw New XFUserMsgException(si, New Exception($"Server didnt return a token."))
				End If
				
				'Clear Previous Data for time period
				Dim clearTask = clearData(timePOVFilter, token)
				If clearTask Then
					Util.appendLog(0, $"clearData success.")
				Else
					util.updateDetailsTable(si, Me.jobID, Me.cubeViewName, timePovFilter, "Failed", $"Error while clearing Data on Server", "0")
					Throw New XFUserMsgException(si, New Exception($"Error while clearing Data on Server"))
				End If
				
				'Loop for each entity group, Extract CV & send send to API in parallel 
				Dim resultFlag As Boolean = True
				Util.appendLog(0, $"Starting process using {noOfThreads} threads.")
				Dim parallelOptions As ParallelOptions = New ParallelOptions()
				parallelOptions.MaxDegreeOfParallelism = noOfThreads
			    Parallel.ForEach(entities, parallelOptions, 
					Sub(e, state, i)
						Dim index As Integer = i + 1
						Util.appendLog(0, $"Starting entity group: {index}")
						Try							
							Dim cvParams As New Dictionary(Of String, String)
							cvParams.Add("timePov", timePovFilter)
							'cvParams.Add("viewPov", viewPovFilter)
							'cvParams.Add("scenarioPov", scenarioPovFilter)
							cvParams.Add("entityRow", e)
							Dim swThreadsafe = New Stopwatch
							swThreadsafe.start()
							Dim dt As New DataTable
							'Extract CV
							dt = getCV(si, cubeViewName, cvParams)
							swThreadsafe.stop()				
							If dt Is Nothing Then
								TotalRows.add(0)
								Util.appendLog(0, $"Cube View for entity group: {index} returned 0 rows in {swThreadsafe.Elapsed.TotalSeconds} seconds. Upload skipped.")
								Exit Sub
							End If
							If dt IsNot Nothing AndAlso dt.Rows.Count > 1
								For extraHeaderCount = 1 To 5 
									If dt.Columns.Contains("RowHdr" & extraHeaderCount & "ParentName") Then
										dt.Columns.Remove("RowHdr" & extraHeaderCount & "ParentName")
									End If
								Next
								'Pivot DT
								If Not Util.pivotDT(dt) Then
									resultFlag = False
									Util.appendLog(0, $"Pivot DT failed for entity group: {index}. Check the format of the Cube View.")
									util.updateDetailsTable(si, Me.jobID, Me.cubeViewName, timePovFilter, "Failed", $"Pivot Failed. Check the format of the Cube View.", "0")
									state.Stop
								End If
								TotalRows.add(dt.Rows.Count)
								DTBag.Add(dt)
								Util.appendLog(0, $"Cube View for entity group: {index} returned {dt.Rows.Count} rows in {swThreadsafe.Elapsed.TotalSeconds} seconds")
								
								'Util.printDT(dt, 2, True)
								'Upload Data API
								If Not uploadDT(index, dt, 5000, timePovFilter, token) Then
									resultFlag = False
									Util.appendLog(0, $"Uploading data for entity group: {index} failed. Instruct to terminate all threads.")
									util.updateDetailsTable(si, Me.jobID, Me.cubeViewName, timePovFilter, "Failed", $"Upload Data to server Failed", "0")
									state.Stop
								End If
							Else
								Util.appendLog(0, $"Cube View for entity group: {index} returned 0 rows in {swThreadsafe.Elapsed.TotalSeconds} seconds. Upload skipped.")
							End If
							
						Catch ex As Exception
							resultFlag = False
							util.updateDetailsTable(si, Me.jobID, Me.cubeViewName, timePovFilter, "Failed", $"Exception in Parallel Execution: {ex.Message}", "0")
							Util.appendLog(0, $"Error in parallel function entity group: {index} - {ex}")
							state.Stop
						End Try
					End Sub
				)
				sw.Stop()
				
				Dim totalCount As Integer = 0
				For Each i As Integer In TotalRows
					totalCount = totalCount + i
				Next 
				If Not resultFlag Then
					Me.logHeader = Me.logHeader & " - ERR"
					Util.appendLog(0, $"Atleast one request failed. Kindly refer logs for details. {sw.Elapsed.Minutes} minutes elapsed")
				Else
					util.updateDetailsTable(si, Me.jobID, Me.cubeViewName, timePovFilter, "Completed", $"Uploaded in {sw.Elapsed.TotalSeconds} seconds", totalCount.toString)
					Me.logHeader = Me.logHeader & $" - OK - {totalCount} rows"
					Util.appendLog(0, $"{totalCount} rows processed & uploaded in {sw.Elapsed.Minutes} minutes.")
				End If

				If exportDataToFile Then
					sw.Start()
					Util.writeDTBagToFile(si, DTBag, cubeViewName & "_" & timePovFilter & "_DataExport.csv")
					sw.Stop()
					Util.appendLog(0, $"Data exported to file in {sw.Elapsed.TotalSeconds} seconds.")
				End If
				Util.submitLog(si, Me.logHeader)
				Return resultFlag
			Catch e As Exception
				Me.logHeader = Me.logHeader & " - ERR"
				Util.appendLog(0, $"Error in main {e}")
				If String.Equals(e.GetType.Name, "XFUserMsgException", StringComparison.InvariantCultureIgnoreCase) Then
					Util.submitLog(si, Me.logHeader)
					'Throw New XFUserMsgException(si, New Exception($"Error in main function {e.GetType.Name}: {e}"))
					Return False
				Else
					util.updateDetailsTable(si, Me.jobID, Me.cubeViewName, timePovFilter, "Failed", $"Exception: {e.Message}", "0")
					Util.submitLog(si, Me.logHeader)
					Return False
				End If
			End Try
		End Function	
		
#Region "ValidateArgs"		
		Public Sub validateArgs(ByRef si As SessionInfo, ByRef args As ExtenderArgs)
			'-----------------------------------------------
			'Changes - HP - 23 May 21
			'Fetch headers from Param
			'-----------------------------------------------
			Try
				Me.baseURL = args.NameValuePairs.XFGetValue("BaseURL")
				Try
					Dim baseURI	As New URI(Me.baseURL)
					If Not (baseURI.Scheme = Uri.UriSchemeHttp Or baseURI.Scheme = Uri.UriSchemeHttps) Then
						Throw New XFUserMsgException(si, New Exception($"Invalid param value for BaseURL: {Me.baseURL}."))
					End If
					If Not Me.baseURL(Me.baseURL.Length - 1) = "/" Then
						Me.baseURL = Me.baseURL & "/"
					End If
				Catch e As Exception
					Throw New XFUserMsgException(si, New Exception($"Invalid param value for BaseURL: {Me.baseURL}."))
				End Try
				
				Dim headers As New Dictionary(Of String, String)
				headers.Add("Cache-Control", "no-cache")
				headers.Add("Accept", "text/html, application/xhtml+xml, */*")
				Dim headersParam As String = String.empty
				If Me.baseURL.XFContainsIgnoreCase("dev")
					headersParam = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, $"Param_DPNL_BE_Headers_dev")
			 	Else If Me.baseURL.XFContainsIgnoreCase("prod")
					headersParam = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, $"Param_DPNL_BE_Headers_prod")
				Else If Me.baseURL.XFContainsIgnoreCase("stg")
					headersParam = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, $"Param_DPNL_BE_Headers_stg")
				End If
				
				Dim headersPair As New NameValueFormatBuilder(headersParam)
				For Each header In headersPair.NameValuePairs
					headers.Add(header.key, header.value)
				Next
				
				util = New Util(Me.printDebugLogs, maxWebReqTries, 5, headers)
				Util.appendLog(0, "Headers:")
				For Each header In headersPair.NameValuePairs
					Util.appendLog(0, $"{header.key}:{header.value}")
				Next
				logHeader = Me.GetType.Namespace
			Catch e As Exception
				Throw New XFUserMsgException(si, New Exception($"Error while setting backend environment headers for {Me.baseURL}, {e}"))
			End Try
			
			Me.entityTopMember = "Sams_Operating_Clubs"
		
			Util.appendLog(0, "Parameters Selection:")
			
			
			jobID = args.NameValuePairs.XFGetValue("JobID")
			If String.IsNullOrWhiteSpace(JobID) Then
				Throw New XFUserMsgException(si, New Exception($"Invalid JobID: {JobID}."))
			End If
			
			Dim enityChunkSize As String = args.NameValuePairs.XFGetValue("FDXEntityChunkSize")
			Try
				entitiesGroupSize = Integer.Parse(enityChunkSize)
				Util.appendLog(0, $"Number of entities in one CV Request: {entitiesGroupSize}")
			Catch e As Exception
				Util.appendLog(0, $"Number of entities in one CV Request: {entitiesGroupSize}. Default value set due to invalid param value: {enityChunkSize}")
			End Try
			
			Dim exportDataToFileParam As String = args.NameValuePairs.XFGetValue("exportDataToFile")
			If String.Equals(exportDataToFileParam, "True", StringComparison.CurrentCultureIgnoreCase) Then
				Me.exportDataToFile = True	
			End If
			Util.appendLog(0, $"Export data to file: {Me.exportDataToFile}.")
		
			Dim printDebugLogs As String = args.NameValuePairs.XFGetValue("printDebugLogs")
			If String.Equals(printDebugLogs, "True", StringComparison.CurrentCultureIgnoreCase) Then
				Me.printDebugLogs = True	
			End If
			Util.appendLog(0, $"Print debug logs: {Me.printDebugLogs}.")
			
			'Update to support multiple CV at once
			Dim cubeviews  = args.NameValuePairs.XFGetValue("FDXCVName") 
			If String.IsNullOrWhiteSpace(cubeviews) Then
				Throw New XFUserMsgException(si, New Exception($"Invalid param value for FDXCVName: {cubeviews}."))
			End If
			Dim cvs = cubeviews.split("|")
			For Each cv As String In cvs
				Me.listOfCV.Add(cv.Trim)
			Next
			
			Dim timeFilter As String = args.NameValuePairs.XFGetValue("FDXPeriod")
			If String.IsNullOrWhiteSpace(timeFilter) Then
				Throw New XFUserMsgException(si, New Exception($"Invalid param value for FDXPeriod: {timeFilter}."))
			End If
			Dim timePeriods = timeFilter.split("|")
			For Each period As String In timePeriods
				period = period.Trim
				If period.Length = 4 Then
					Dim allMonths = Util.getMonthsForYear(period)
					For Each month As String In allMonths
						listOfPeriods.Add(month)
					Next
				Else
					listOfPeriods.Add(period)
				End If
			Next
			Dim logP As String = "Start exectuing for - "
			For Each cvn In listOfCV
				For Each p As String In listOfPeriods 
					logP = logP & Environment.NewLine & $"CubeView: {cvn} - Period: " & p
				Next
			Next
			brapi.ErrorLog.LogMessage(si, Me.GetType.Namespace & " - Start", logP)
			
		End Sub
#End Region

#Region "getCV"
		Public Function getCV(ByRef si As SessionInfo, ByVal cubeviewName As String, ByRef params As Dictionary(Of String, String)) As DataTable
			Dim value As New NameValueFormatBuilder 
			Dim instance As New XFIfActionExpr("CVFilter", value)
			value = instance.NameValueFormatBuilder
			value.ApplyNameValuePairsFromDictionary(params)
			Dim entityMemFilter As String = ""
			Dim entityDimensionName As String = ""
			Dim scenarioName As String = ""
			Dim scenarioMemFilter As String = ""
			Dim timeMemFilter As String = ""
			Dim includeCellTextCols As Boolean = False
			Dim useStandardFactTableFields As Boolean = True
			Dim useGenericTimeColNames As Boolean = False
			Dim parallelQueryCount As Integer = 8
			Dim logStatistics As Boolean = False
			Dim dt As DataTable = Nothing
			Try
				dt = BRApi.Import.Data.FdxExecuteCubeView(si, cubeViewName, entityDimensionName, entityMemFilter, scenarioName, scenarioMemFilter, timeMemFilter, value, includeCellTextCols, useStandardFactTableFields, Nothing, parallelQueryCount, logStatistics)
				If dt IsNot Nothing Then
					Return dt
				Else
					Return Nothing
				End If
			Catch e As Exception
				Util.appendLog(0, $"getCV({cubeviewName}, {string.Join(":", params)}) failed with error - {e}")
				Return Nothing
			End Try
		End Function
#End Region

#Region "uploadDT"
		Public Function uploadDT(ByVal groupID As Integer, ByRef dt As DataTable, ByVal maxRowsInPayload As Integer, ByVal time As String, ByVal token As String) As Boolean
			Try
				Dim swThreadSafe As Stopwatch = New Stopwatch
				swThreadSafe.Start()
				Dim URL As String = Me.baseURL & "loadData/" & time & "/" & token				
				Dim payloads As List(Of DataTable) = Util.toChunks(dt, maxRowsInPayload)
				Util.appendLog(0, $"Total payloads in entity group {groupID}: {payloads.Count}")
				'Util.appendLog(1, $"Export DT endpoint: {URL}")
				
				Dim payloadCounter As Integer = 1
				Dim payloadStatus As Boolean = True
				For Each payload As DataTable In payloads
					Dim jObj As JObject = New Jobject
					jObj("rowCount") = payload.Rows.Count
					jObj("data") = JArray.FromObject(payload, JsonSerializer.CreateDefault)
					'Util.appendLog(1, jObj.ToString)
					Dim res As task(Of String) = Util.webRequest(URL, jObj.ToString)
					'block thread while request happends
					res.wait
					If res.Result Is Nothing Then
						Util.appendLog(1, $"Received no reponse for entity group: {groupID}, payload: {payloadCounter}.")
						payloadStatus = False
						'payloadCounter = payloadCounter + 1
						Exit For
					Else
						Util.appendLog(1, $"POST Response for entity group {groupID}, payload: {payloadCounter}, Records Sent: {payload.Rows.Count} - Server Response: {res.Result}")
					End If
					
					If Not Me.waitTillTokenCompletes(token)
						Util.appendLog(0, $"Failed while waiting for token status {token}.")
						payloadStatus = False
						Exit For
					End If
					payloadCounter = payloadCounter + 1
				Next
				
'				If payloadCounter < 6 Then
'					If Not Me.waitTillTokenCompletes(token)
'						Util.appendLog(0, $"Failed while waiting for token status {token}.")
'						payloadStatus = False
'					End If
'				End If
				
				If payloadStatus Then
					Util.appendLog(0, $"All payloads in entity group {groupID} sent in {swThreadSafe.Elapsed.TotalSeconds} seconds")
				Else
					Util.appendLog(0, $"Atleast one payload in entity group {groupID} failed.")
					Return False
				End If
				Return True
			Catch e As Exception
				Util.appendLog(0, $"uploadDT for entity group {groupID} failed, {e}")
				Return False
			End Try
		End Function
#End Region
	
#Region "waitTillTokenComplete"
		Public Function waitTillTokenCompletes(ByVal token As String) As Boolean
			Try
				Dim trackLoop As Integer = 0
				While Me.isTokenComplete(token) = False
					If trackLoop < 1800 Then
						Util.appendLog(0, $"Waiting for {token} to complete.")
						Thread.sleep(TimeSpan.FromSeconds(5))
						trackLoop = trackLoop + 5
					Else 
						Util.appendLog(0, $"Server failed to process token {token} in 30 minutes")
						Return False
						Exit While
					End If
				End While
				Return True
			Catch ex As Exception
				Util.appendLog(0, $"Error while waiting for Token Status {token} ,{ex}")
				Return False
			End Try
		End Function
#End Region

#Region "getToken"
		Public Function getToken(ByVal cubeView As String, ByVal time As String) As String
			Dim URL As String = $"{Me.baseURL}getToken/{cubeView}/{time}"
			Util.appendLog(1, $"Get Token Endpoint: {URL}")
			Try
				Dim response As String
				Dim responseTask As Task(Of String) = Util.webRequest(URL, Nothing)
				responseTask.Wait
				response = responseTask.Result
				If response Is Nothing Then
					Util.appendLog(0, $"getToken No reponse while fetching token.")
					Return Nothing
				Else 
					Return response
				End If
			Catch e As Exception
				Util.appendLog(0, $"getToken failed: {e}")
				Return Nothing
			End Try
		End Function
#End Region

#Region "clearData"
		Public Function clearData(ByVal time As String, ByVal token As String) As Boolean
			Dim URL As String = $"{Me.baseURL}cleanData/{time}/{token}"
			Util.appendLog(1, $"Clear Data Endpoint: {URL}")
			Try
				Dim response As String
				Dim responseTask As Task(Of String) = Util.webRequest(URL, "clearData")
				responseTask.Wait
				response = responseTask.Result
				If response Is Nothing Then
					Util.appendLog(0, $"clearData got no reponse.")
					Return False
				Else
					Util.appendLog(0, $"clearData reponse: {response}")
					Return True
				End If
			Catch e As Exception
				Util.appendLog(0, $"clearData failed: {e}")
				Return False
			End Try
		End Function
#End Region

#Region "isTokenComplete"
		Public Function isTokenComplete(ByVal token As String) As Boolean
			Dim URL As String = $"{Me.baseURL}tokenStatus/{token}"
			Dim response As String
			Dim responseTask As Task(Of String) = Util.webRequest(URL, Nothing)
			responseTask.Wait
			response = responseTask.Result
			If response Is Nothing
				Throw New Exception("Error while communicating with server for /tokenStats")
			End If
			If response.XFContainsIgnoreCase("completed") Then
				Return True
			Else 
				Return False
			End If
		End Function
#End Region	

#Region "isProcComplete"
		Public Function isProcComplete(ByVal processName As String)
			Dim URL As String = $"{Me.baseURL}getprocStatus/{processName}"
			Dim response As String
			Dim responseTask As Task(Of String) = Util.webRequest(URL, Nothing)
			responseTask.Wait
			response = responseTask.Result
			Util.appendLog(0, $"Proc Complete: {URL}: {response}")
			If response Is Nothing
				Throw New Exception("Error while communicating with server for /getprocStatus")
			End If
			If response.XFContainsIgnoreCase("completed") Then
				Return True
			Else 
				Return False
			End If
		End Function
#End Region

#Region "runProc"
		Public Function runProc(ByVal processName As String)
			Dim URL As String = $"{Me.baseURL}runPhy/{processName}"
			Dim response As String
			Dim responseTask As Task(Of String) = Util.webRequest(URL, "RunPHY")
			responseTask.Wait
			response = responseTask.Result
			Util.appendLog(0, $"Run Proc: {URL} {response}")
			If response Is Nothing
				Throw New Exception("Error while communicating with server for /runProc")
			End If
			If response.XFContainsIgnoreCase("completed") Then
				Return True
			Else 
				Return False
			End If
		End Function
#End Region

#Region "GetMembersGroupFromFilter"
		Public Function getMembersGroupFromFilter(ByRef si As SessionInfo, ByVal dimensionName As String, ByVal filter As String, ByVal maxMembers As Short) As List(Of String)
			Try
				Dim dimensionPackage As DimPk = BRApi.Finance.Dim.GetDimPk(si, dimensionName)
				If dimensionPackage Is Nothing Then
					Util.appendLog(1, "Dimension Pakage returned Nothing. Check the Dimension Name: {dimensionName}")
					Return Nothing
				End If
				Dim membersInfo As List(Of MemberInfo) = BRApi.Finance.Members.GetMembersUsingFilter(si, dimensionPackage, filter, True)				
				If membersInfo Is Nothing OrElse membersInfo.Count = 0 Then
					util.appendLog(1, $"Member filter returned nothing: {filter}")
					Return Nothing
				End If
				Dim membersList As List(Of String) = New List(Of String)
				Dim currentMember As Short = 1
				Dim MembersName As StringBuilder = New StringBuilder
				Util.appendLog(1, $"Number of members recieved from filter: {membersInfo.Count}")
				For Each mi As MemberInfo In membersInfo		
					If MembersName.Length <> 0 Then
						MembersName.append($", {mi.Member.DimType.Name(0)}#{mi.Member.Name}")
					Else
						MembersName.append($"{mi.Member.DimType.Name(0)}#{mi.Member.Name}")
					End If
					If currentMember = maxMembers Then
						membersList.Add(membersName.ToString)
						MembersName = New StringBuilder
						currentMember = 1
					Else
						currentMember = currentMember + 1
					End If
				Next
				If currentMember < maxMembers
					membersList.Add(membersName.ToString)
				End If
				If membersList.Count > 0 Then
					Dim counter As Integer = 1
					For Each m As String In membersList
						Util.appendLog(1, $"Group: {counter}: {m}")
						counter = counter + 1
					Next 
					Return membersList
				Else
					Return Nothing
				End If
			Catch e As Exception
				Util.appendLog(0, $"getMembersGroupFromFilter error - {e}")
				Return Nothing
			End Try
		End Function
#End Region	
	End Class

#Region	"Util Class"
	Public Class Util
		Private Dim RESTClient As HttpClient
		Private IST As TimeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById("India Standard Time")
		Private Dim printDebugLogs As Boolean = False
		Private Dim messages As New Text.StringBuilder()
		Private Dim maxTries As Int64

		Public Sub New(ByVal debugLogs As Boolean,ByVal RestTries As Int64, ByVal RestTimeoutMinutes As Int64, ByVal headers As Dictionary(Of String, String) )
			Me.printDebugLogs = debugLogs
			Me.maxTries = RestTries
			
			Me.RESTClient = New HttpClient()
			'Timout control for API Rrequest
			Me.RESTClient.Timeout = TimeSpan.FromMinutes(RestTimeoutMinutes)
			Me.RESTClient.DefaultRequestHeaders.Clear()
			Me.RESTClient.DefaultRequestHeaders.ConnectionClose = False
			For Each header As KeyValuePair(Of String, String) In headers
				Me.RESTClient.DefaultRequestHeaders.Add(header.Key, header.Value)
			Next
		End Sub
		
		Public Sub appendLog(ByVal DebugLevel As Integer, ByVal message As String)
			Dim isDebug As Boolean = False
			'1 = Debug Level Message
			'DebugLevel Integer for additional categories in case required
			If DebugLevel = 1 Then
				isDebug = True
			End If
			If isDebug AndAlso printDebugLogs Then
				appendLog(message)
			Else
				appendLog(message)
			End If
		End Sub
		
		Private Sub appendLog(ByVal Message)
			'Lock shared resource before update
			SyncLock messages
				messages.Append($"[{TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, IST).tostring}] {Message}{Environment.NewLine}")
			End SyncLock 
		End Sub
		
		Public Function getLog() As String
			SyncLock messages
				Return messages.ToString
			End SyncLock 
		End Function
		
		Public Sub submitLog(ByRef si As SessionInfo, ByVal header As String)
			Try				
				brapi.ErrorLog.LogMessage(si, header, Me.getLog)				
			Catch e As Exception
				brapi.ErrorLog.LogMessage(si, header, $"Error frpm BRAPI while submitting log to OneStream: {e}")
			End Try
			SyncLock messages
				messages.Clear
			End SyncLock
		End Sub
		
		'-------------------------------------------------------------------------------------------------
		'Pivot Periodic, QTD & YTD columns to rows. Update the data column header as VNone to align with 
		'payload Structure. 
		'The dataTable must have proper Structure (Cube must exactly 3 columns - Periodic, QTD, YTD In 
		'sequence even if the column has no data
		'-------------------------------------------------------------------------------------------------
		Public Function pivotDT(ByRef dt As DataTable) As Boolean
			'the OrElse Operator performs short-circuiting logical disjunction on two Boolean expressions. 
			'If the first expression In an OrElse expression evaluates To True, Then the second expression 
			'Is Not evaluated because it cannot alter the final result
			If dt Is Nothing OrElse dt.Rows.Count = 0 Then
				Return True
			End If
			If Not dt.Columns.Count = 22 Then
				Me.appendLog(0, $"Invalid table structure found during pivot.")
				Me.appendLog(1, $"Expected 22 columns to pivot, got {dt.Columns.Count}")
				Return False
			End If
			Try
				'Me.appendLog(1, $"pivotDT - Number of Rows,Columns before pivot: {dt.Rows.Count},{dt.Columns.Count}")
				'Add new column in DataTable structure "VNone" which will be the Data Field
				dt.Columns.Add(New DataColumn("VNone", System.Type.GetType("System.Decimal")))
				dt.AcceptChanges()
				Dim maxRows As Integer = dt.Rows.Count
				'Loop through each row persent in DataTable
				For rowIndex As Integer = 0 To maxRows - 1
					'Copy the Data from Periodic Column to new Data Column
					Dim row As DataRow = dt.Rows(rowIndex)
					row("View") = "Periodic"
					row("VNone") = row("VPeriodic")
					
					'Create new row for QTD value, Update the View & Data field & add it to the end of DataTable
					Dim newQTDRow As Datarow = dt.NewRow()
					newQTDROw.ItemArray = dt.Rows(rowIndex).ItemArray
					newQTDRow("View") = "QTD"
					newQTDRow("VNone") = newQTDRow("VQTD")
					dt.Rows.Add(newQTDRow)
					
					'Create new row for YTD value, Update the View & Data field & add it to the end of DataTable
					Dim newYTDRow As Datarow = dt.NewRow()
					newYTDROw.ItemArray = dt.Rows(rowIndex).ItemArray
					newYTDRow("View") = "YTD"
					newYTDRow("VNone") = newYTDRow("VYTD")
					dt.Rows.Add(newYTDRow)
				Next
				'Delete the Period, QTD & YTD columns from DataTable since all the values has been copied to new Data Column
				dt.Columns.Remove("VPeriodic")
				dt.Columns.Remove("VQTD")
				dt.Columns.Remove("VYTD")
				dt.AcceptChanges
				'Me.appendLog(1, $"pivotDT - Number of Rows,Columns after pivot: {dt.Rows.Count},{dt.Columns.Count}")
				Return True
			Catch e As Exception
				Me.appendLog(0, $"Exception in PivotDT: {e}")
				Return False
			End Try
		End Function
		
		'This method prints the DataTable object as String with option to specify maximum number of rows to print
		'Will only display output if printDebugLogs is enabled
		Public Sub printDT(ByRef dt As DataTable, ByRef maxRows As Integer, ByVal containsHeader As Boolean)
			If (dt Is Nothing OrElse dt.Rows.Count = 0) OrElse maxRows < 1 Then
				Exit Sub
			End If
			
			Dim currentRow As Integer = 0
			Dim logLines As StringBuilder = New StringBuilder
			logLines.Append(Environment.NewLine)
			If containsHeader Then
				For Each Col As DataColumn In Dt.Columns
					logLines.Append($"{col.ColumnName},")
				Next	
			End If
			'Remove extra trailing comma from header row
			logLines.Length = logLines.Length - 1
			logLines.Append(Environment.NewLine)
			For Each row As DataRow In dt.Rows	
				If currentRow < maxRows Then					
					logLines.Append(String.Join(",", row.ItemArray))
					logLines.Append(Environment.NewLine)
					currentRow = currentRow + 1
				Else
					Exit For
				End If
			Next
			Me.appendLog(1, logLines.ToString)
		End Sub
		
		'Return x chars from a string
		Public Function trimString(ByRef content As String, ByVal maxChar As Integer) As String
			If maxChar < 0 Then
				Return Nothing
			End If
			Try
				If maxChar <= content.Length
					Return content.subString(0, maxChar)
				Else
					Return content
				End If
			Catch e As Exception
				Return content
			End Try
		End Function
		
		'Dump all the Datatables from a Bag as a CSV File
		Public Function writeDTBagToFile(ByRef si As SessionInfo, ByRef DTBag As ConcurrentBag(Of DataTable), ByVal filename As String) As Boolean
			Dim adminFolderPath As String = BRApi.FileSystem.GetFileShareFolder(si, FileShareFolderTypes.ApplicationRoot, Nothing) & "\" & si.AppName.Replace(" ", String.Empty) & "\Groups\Everyone\DPNL\"
			Try
				System.IO.Directory.CreateDirectory(adminFolderPath)
			Catch e As Exception
			End Try 
			adminFolderPath = adminFolderPath & filename
			Me.appendLog(0, $"Exporting data to file: {adminFolderPath}")
			Try
				Using fdxDataFile As System.IO.StreamWriter = New StreamWriter(adminFolderPath, False, Encoding.UTF8, 65536)
					Dim isFirstDT = True
					For Each t As DataTable In DTBag
						If isFirstDT Then
							Dim headers As New StringBuilder
							For Each Col As DataColumn In t.Columns
								headers.Append($"{col.ColumnName},")
							Next
							headers.Length = headers.Length - 1
							fdxDataFile.WriteLine(headers.ToString)
							isFirstDT = False
						End If
						
						For Each row As DataRow In t.Rows
							fdxDataFile.WriteLine(String.Join(",", row.ItemArray))
						Next 
					Next
				  	fdxDataFile.Close
					Return True
			  	End Using 
			Catch e As Exception
				Me.appendLog(0, $"writeDTBagToFile: {e}")
				Return False
			End Try 
		End Function

		'Send a Asynchronous HTTP Request 
		'Tries to re attempt the failed connection for maxTries set
		'Will not retry if any (Failed(ex. authentication error)/Success) HTTP Response is returned
		'Returns Nothing if HTTP Response Code is not a SuccessStatusCode
		Public Async Function webRequest(ByVal URL As String, ByVal content As String) As Task(Of String)
			For attempt As Integer = 1 To maxTries
				Dim secondsToWait As Integer = attempt '+ 1
				If content = Nothing Then
					If attempt > 1 Then
						Me.appendLog(1, $"Waiting {secondsToWait} seconds before resending the GET request, attempt: {attempt}")
						Await Task.Delay(TimeSpan.FromSeconds(secondsToWait).TotalMilliseconds)
					End If
					Try
						Dim response As New HTTPResponseMessage
						response = Await RESTClient.GetAsync(URL)
						If response IsNot Nothing Then
							Dim taskResponseContent As Task(Of String) = response.content.ReadAsStringAsync()
							taskResponseContent.Wait
							
							If response.IsSuccessStatusCode Then
								Return taskResponseContent.Result
							Else
								Me.appendLog(1, $"webRequest GET Unsuccesful response in attempt: {attempt},{Environment.NewLine}Endpoint: {URL}{Environment.NewLine}Error Code: {response.StatusCode},{Environment.NewLine} Content: {taskResponseContent.Result}")
								Return Nothing
							End If
						Else
							Me.appendLog(1, $"webRequest GET attempt: {attempt}, reponse is Nothing")
						End If
					Catch timeoutEx As TaskCanceledException
						Me.appendLog(1, $"webRequest GET attempt: {attempt}, Server Time Out.")
					Catch ex As Exception
						Me.appendLog(1, $"webRequest GET attempt: {attempt}, Failed: {ex}")
					End Try			
				Else					
					Try
						Dim body As Httpcontent = New Http.StringContent(content, System.Text.Encoding.UTF8, "application/json")
						If attempt > 1 Then
							Me.appendLog(1, $"Waiting {secondsToWait} seconds before resending the POST request, attempt: {attempt}.")
							Await Task.Delay(TimeSpan.FromSeconds(secondsToWait).TotalMilliseconds)
						End If
						Dim response As New HTTPResponseMessage
						response = Await RESTClient.PostAsync(URL, body)
						If response IsNot Nothing Then
							Dim taskResponseContent As Task(Of String) = response.content.ReadAsStringAsync()
							taskResponseContent.Wait
							Dim responseString = taskResponseContent.Result
							If response.IsSuccessStatusCode Then
								Return responseString
							Else
								Dim logLine As New StringBuilder
								logLine.Append($"webRequest POST Unsuccesful response in attempt: {attempt},{Environment.NewLine}Error Code: {response.StatusCode},")
								logLine.Append( $"{Environment.NewLine}Content: {responseString}")
								logLine.Append( $"{Environment.NewLine}Endpoint: {URL}")
								Dim trimContent = Me.trimString(content, 1000)
								logLine.Append( $"{Environment.NewLine}Payload: {trimContent}")
								Me.appendLog(1, logLine.ToString)
								Return Nothing
							End If
						Else
							Me.appendLog(1, $"webRequest POST attempt: {attempt}, reponse is Nothing")
						End If
					Catch timeoutEx As TaskCanceledException
						Me.appendLog(1, $"webRequest POST attempt: {attempt}, Server Time Out.")
					Catch ex As Exception
						Dim logLine As New StringBuilder
						logLine.Append($"Exception in webRequest POST attempt: {attempt},{Environment.NewLine},")
						logLine.Append( $"{Environment.NewLine}Exception: {ex}")
						logLine.Append( $"{Environment.NewLine}Endpoint: {URL}")
'						Using fdxDataFile As System.IO.StreamWriter = New StreamWriter("\\az0260769a99e1\OneStreamShare\FileShare\Applications\SAMsDev\Groups\Everyone\RestError.txt", True, Encoding.UTF8, 65536)	
'							fdxDataFile.WriteLine(logLine.ToString)
'							fdxDataFile.WriteLine($"{Environment.NewLine}Payload: {content}")
'						  	fdxDataFile.Close
'					  	End Using 
						Dim trimContent = Me.trimString(content, 1000)
						logLine.Append( $"{Environment.NewLine}Payload: {trimContent}")
						Me.appendLog(1, logLine.ToString)
					End Try
				End If
			Next attempt
			Me.appendLog(1, $"webRequest failed {maxTries} time(s) in a row.")
			Return Nothing
		End Function
		
		'Splits the DataTable into list of many DataTables each with specified number of rows or less
		Public Function toChunks(ByRef dt As DataTable, ByVal maxRows As Integer) As List(Of DataTable)
			Dim chunks As List (Of DataTable) = New List(Of DataTable)
			Dim startRow As Integer = 0			
			While startRow < dt.Rows.Count
				chunks.Add(dt.Rows.Cast(Of System.Data.DataRow).Skip(startRow).Take(maxRows).CopyToDataTable())
				startRow = startRow + maxRows
			End While
			Return chunks
		End Function
		
		'return list of string with each month suffixed to year
		'"2021" returns {2021M1, "2021M2",........"2021M12"}
		Public Function getMonthsForYear(ByVal year As String) As String()
			Return New String () {
									year & "M1",
									year & "M2",
									year & "M3",
									year & "M4",
									year & "M5",
									year & "M6",
									year & "M7",
									year & "M8",
									year & "M9",
									year & "M10",
									year & "M11",
									year & "M12"
								}
		End Function
		
		Public Sub updateDetailsTable(ByRef si As SessionInfo, ByVal jobId As String, ByVal CubeView As String, ByVal Period As String, ByVal Status As String, ByVal Detail As String, ByVal Records As String)
			'Truncate the string length if large
			Status = Me.trimString(Status,3000)
			Detail = Me.trimString(Detail,3000)
			
			Dim sql As New Text.StringBuilder
			sql.Append($"INSERT INTO [dbo].[XFT_DPNL_Job_Details] ([Job_id], [Cube_View], [Period], [Status], [Detail], [RecordsSent])")
			sql.Append($"VALUES (")
			sql.Append($"{JobID}, ")
			sql.Append($"'{CubeView}', ")
			sql.Append($"'{Period}', ")
			sql.Append($"'{Status}', ")
			sql.Append($"'{Detail}', ")
			sql.Append($"{Records})")
			Me.appendLog(1,$"Update Details Table: {sql.toString}")
			Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)	
			End Using
		End Sub
		
		Public Sub updateSummaryTable(ByRef si As SessionInfo,ByVal jobId As String, ByVal Status As String, ByVal Details As String)
			'Truncate the string length if large
			Details = Me.trimString(Details,3000)
			
			Dim sql As New Text.StringBuilder
			sql.Append($"UPDATE [dbo].[XFT_DPNL_Job_Summary] SET [Status]='{status}', [Detail]='{Details}' ")
			sql.Append($"WHERE [Job_ID]={jobId}")
			Me.appendLog(1,$"Update Summary Table: {sql.toString}")
			Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)	
			End Using
		End Sub
		
		#Region "Unused Functions for debugging"
		Public Function writeDTBagToFileAsJson(ByRef si As SessionInfo, ByRef DTBag As ConcurrentBag(Of DataTable), ByVal filename As String) As Boolean
			Dim adminFolderPath As String = BRApi.FileSystem.GetFileShareFolder(si, FileShareFolderTypes.ApplicationRoot, Nothing) & "\" & si.AppName.Replace(" ", String.Empty) & "\Groups\Everyone\"
			adminFolderPath = adminFolderPath & filename
			Me.appendLog(0, $"Exporting data to file: {adminFolderPath}")
			Try
				Using fdxDataFile As System.IO.StreamWriter = New StreamWriter(adminFolderPath, False, Encoding.UTF8, 65536)
					For Each t As DataTable In DTBag
						Dim jObj As JObject = New Jobject
						jObj("rowCount") = t.Rows.Count
						jObj("data") = JArray.FromObject(t, JsonSerializer.CreateDefault)				
						fdxDataFile.WriteLine(jObj.ToString)
					Next
				  	fdxDataFile.Close
					Return True
			  	End Using 
			Catch e As Exception
				Me.appendLog(0, $"writeDTBagToFile: {e}")
				Return False
			End Try 
		End Function
		
		Public Function writeDTToFile(ByRef si As SessionInfo, ByRef dt As DataTable, ByVal filename As String) As Boolean
			Dim adminFolderPath As String = BRApi.FileSystem.GetFileShareFolder(si, FileShareFolderTypes.ApplicationRoot, Nothing) & "\" & si.AppName.Replace(" ", String.Empty) & "\Groups\Everyone\DPNL\"
			adminFolderPath = adminFolderPath & filename
			Me.appendLog(0, $"Exporting data to file: {adminFolderPath}")
			Try
				Using fdxDataFile As System.IO.StreamWriter = New StreamWriter(adminFolderPath, False, Encoding.UTF8, 65536)
					Dim headers As New StringBuilder
					For Each Col As DataColumn In dt.Columns
						headers.Append($"{col.ColumnName},")
					Next
					headers.Length = headers.Length - 1
					fdxDataFile.WriteLine(headers.ToString)
					For Each row As DataRow In dt.Rows
						fdxDataFile.WriteLine(String.Join(",", row.ItemArray))
					Next
				  	fdxDataFile.Close
					Return True
			  	End Using 
			Catch e As Exception
				Me.appendLog(0, $"writeDTToFile: {e}")
				Return False
			End Try
		End Function
		#End Region
		
	End Class
#End Region

End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Email_Helper">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports System.Xml
Imports Newtonsoft.Json

Imports OneStream.BusinessRule.Extender.OS_Models

Namespace OneStream.BusinessRule.Extender.Email_Helper
	Public Class MainClass
		
		#Region "Settings"
			'Define 'company colors' for the title bar
	        Public _foreColor As String = "#FFB81C" 
			Public _backColor As String = "#0072CE"
			
			'Automation phrase - must match automation business rule
			Public _automationPhrase As String = "automate"
		
		#End Region
		
		#Region "Dev Only"
			Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
	            Try
	                Return Nothing
	            Catch ex As Exception
	                Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	            End Try
	        End Function
		#End Region
		
		Public Sub GetBatchDetailsAndSendEmail(ByVal si As SessionInfo, ByVal batchInfo As WorkflowBatchFileCollection, ByVal distributionList As List(Of String), ByVal subjectPreText As String, ByVal bodyPreText As String, ByVal emailServer As String, ByVal dmJobName As String)
			Dim fileAttachmentPaths As New List(Of String)
			
			Try
				
				Dim subject As String = subjectPreText & $"- Batch Detail Report for DM Job {dmJobName}"
				Dim eResult As New EmailResults
				
				If Not batchInfo Is Nothing Then					
					Using objDbConnInfoApp As DbConnInfoApp = BRApi.Database.CreateApplicationDbConnInfo(si)
						For Each kvp As keyValuePair(Of Integer, List(Of WorkflowBatchFileInfo)) In batchInfo.FileGroups							
							For Each wfBatchInfo As WorkflowBatchFileInfo In kvp.Value
								
								Dim importStatus As String = "N/A"
								Dim transformationStatus As String = "N/A"
								Dim intersectionStatus As String = "N/A"
								Dim loadStatus As String = "N/A"
								Dim processCubeStatus As String = "N/A"
								Dim fullFilePathName As String = "N/A"
								
								Dim wfPOVId As String = $"{wfBatchInfo.ProfileInfo.Name.ToUpper}_{ScenarioDimHelper.GetNameFromId(si, wfBatchInfo.CurrentWorkflowUnitPk.ScenarioKey).ToUpper}_{TimeDimHelper.GetNameFromId(wfBatchInfo.CurrentWorkflowUnitPk.TimeKey).ToUpper}"
								
								Dim response As ResponseStatus = Nothing
								Try
									Dim objXFUserState As XFUserState = BRApi.State.GetSessionState(si, False, ClientModuleType.External, String.Empty, String.Empty, wfPOVId + "_response", String.Empty)
									If objXFUserState IsNot Nothing Then
										 response  = JsonConvert.DeserializeObject(Of ResponseStatus)(objXFUserState.TextValue)
									End If
								Catch
								End Try
																
								Dim updatedWorkflowUnitPksCount As Integer = 0
								For Each batchWFUnitPk As WorkflowUnitPk In wfBatchInfo.ProcessInfo.UpdatedWorkflowUnitPks
									updatedWorkflowUnitPksCount += 1
									
									Dim wfName As String = BRApi.Workflow.Metadata.GetProfile(si, batchWFUnitPk.ProfileKey).Name									
									Dim wfInfoStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, batchWfUnitPk)

									importStatus = If(response IsNot Nothing, If(response.Success, $"Completed with {response.FcpRecordCount} rows received from FCP and {response.OsRecordCount} rows loaded to OneStream.", importStatus), _
														$"{wfInfoStatus.GetStepStatus(StepClassificationTypes.DataLoadTransform).ToString} and {wfBatchInfo.ProcessInfo.RowCount} rows loaded to OneStream.")
									transformationStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateTransform).ToString
									intersectionStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateIntersection).ToString
									loadStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.LoadCube).ToString
									processCubeStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ProcessCube).ToString
									
									If Not wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateTransform).Equals(WorkflowStatusTypes.Completed) Then
										'Generate Validation Error Report
										fullFilePathName = BRApi.FileSystem.GetFileShareFolder(si, FileShareFolderTypes.ApplicationOutgoing, Nothing) & "\" & wfPOVId & "_ValidationErrors.html"
										
										If wfBatchInfo.ValTransProcessInfoErrors.ContainsKey(batchWFUnitPk.CreateWorkflowUnitClusterPk) Then
											If Me.GenerateValidationReport(si, wfBatchInfo.ValTransProcessInfoErrors.Item(batchWFUnitPk.CreateWorkflowUnitClusterPk), fullFilePathName) Then
												fileAttachmentPaths.Add(fullFilePathName)
												transformationStatus += $" - See Attachement {wfPOVId}_ValidationErrors.html" 
											Else
												transformationStatus += "Report was not creataed but validation errors were found"
											End If
										End If
									End If
									
									If Not wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateIntersection).Equals(WorkflowStatusTypes.Completed) Then
										'Generate Intersection Validation Error Report
										fullFilePathName = BRApi.FileSystem.GetFileShareFolder(si, FileShareFolderTypes.ApplicationOutgoing, Nothing) & "\" & wfPOVId & "_IntersectionErrors.html"
										
										If wfBatchInfo.ValIntersectProcessInfoErrors.ContainsKey(batchWFUnitPk.CreateWorkflowUnitClusterPk) Then
											Dim intErrCount As Integer = Me.CheckIntersectionErrorCount(si, objDbConnInfoApp, batchWFUnitPk)
											If intErrCount < 0 Then 'Error occurred
												intersectionStatus = $"Error occurred getting intersection error count."
											ElseIf intErrCount < 150 Then
												If Me.GenerateIntersectionReport(si, objDbConnInfoApp, batchWFUnitPk, fullFilePathName) Then
													intersectionStatus = $"{intErrCount} Intersection Errors generated</br><b>See {wfPOVId}_IntersectionErrors.html for more details</b>"
													fileAttachmentPaths.Add(fullFilePathName)
												Else
													intersectionStatus = $"Report failed to generate but {intErrCount} intersection errors were found"
												End If
											Else
												intersectionStatus = $"Report was not creataed. Too many errors to report. {intErrCount} intersection errors were found."
											End If											
										End If
									End If
									
									Dim status As String
									If Not wfBatchInfo.FileProcessed Then
										status = "Fail"
									Else
										status = "Success"
									End If
									Dim firstName As String = String.Empty 
									Dim lastName As String = String.Empty 
									GetUserDescription(si,firstName,lastName)'DPA-29476/vn50tv8/DEC 29th 2021	
									eResult.Add(si, _
												$"{wfBatchInfo.ProfileInfo.Name}</br>{wfBatchInfo.TimeName}</br>{wfBatchInfo.ScenarioName}", _
												status, _
												importStatus, _
												transformationStatus, _
												intersectionStatus, _
												loadStatus, _
												processCubeStatus, _
												$"{firstName}</br>{lastName}")'DPA-29476/vn50tv8/DEC 29th 2021	
								Next
								If updatedWorkflowUnitPksCount = 0 Then
									'Import error - Check if SessionStage is available
									Try
										Dim objXFUserState As XFUserState = BRApi.State.GetSessionState(si, False, ClientModuleType.External, String.Empty, String.Empty, wfPOVId, String.Empty)
										If objXFUserState IsNot Nothing Then
											If objXFUserState.TextValue.XFContainsIgnoreCase("Could not get data from FCP") Or objXFUserState.TextValue.XFContainsIgnoreCase("ERROR") Then
												
												'Save the Connection Log to file
												fullFilePathName = BRApi.FileSystem.GetFileShareFolder(si, FileShareFolderTypes.ApplicationOutgoing, Nothing) & "\" & wfPOVId & "_GET-LOG.txt"
												
												Using fdxDataFile As System.IO.StreamWriter = New StreamWriter(fullFilePathName, False)
													fdxDataFile.Write(objXFUserState.TextValue)
													fdxDataFile.Close									
												End Using
																
												fileAttachmentPaths.Add(fullFilePathName)
												
												importStatus = $"Import failed. See attachement {wfPOVId}_GET-LOG.txt for more info."
											Else
												importStatus = "Failed"
											End If
										Else
											importStatus = "Failed"
										End If
									Catch
										importStatus = "Failed"
									End Try
									
									If response IsNot Nothing Then
										If Not response.Success Then
											importStatus = $" {importStatus} </br> Summary: {response.StatusCode} - {response.ReasonPhrase}"
										End If
									End If
									Dim firstName As String = String.Empty 
									Dim lastName As String = String.Empty 
									GetUserDescription(si,firstName,lastName)'DPA-29476/vn50tv8/DEC 29th 2021	
									eResult.Add(si, _
												$"{wfBatchInfo.ProfileInfo.Name}</br>{wfBatchInfo.TimeName}</br>{wfBatchInfo.ScenarioName}", _
												"Fail", _
												importStatus, _
												"N/A", _
												"N/A", _
												"N/A", _
												"N/A", _
												$"{firstName}</br>{lastName}")'DPA-29476/vn50tv8/DEC 29th 2021	
								End If
							Next
						Next
					End Using
				End If
									
				Dim body As New StringBuilder
				Dim rowHeaders As New List(Of String)
				rowHeaders.Add("Workflow Info")
				rowHeaders.Add("Batch Status")
				rowHeaders.Add("Import Status")
				rowHeaders.Add("Transformation Status")
				rowHeaders.Add("Intersection Status")
				rowHeaders.Add("Load Cube Status")
				rowHeaders.Add("Process Cube Status")
				rowHeaders.Add("Triggered By")'DPA-29476/vn50tv8/DEC 29th 2021	
				
				body.AppendLine(bodyPreText)
				body.AppendLine(StartHTMLTable)
				body.AppendLine(NewHTMLTableRowHeader(rowHeaders))
				Dim r As Integer = 0
				Dim rowValues As New List(Of String)
	            For Each rslt As EmailResult In eResult.Results
					rowValues.Add(rslt.wfDetails)
					rowValues.Add(rslt.Status)
					rowValues.Add(rslt.ImportStatus)
					rowValues.Add(rslt.TransformationStatus)
					rowValues.Add(rslt.IntersectionStatus)
					rowValues.Add(rslt.LoadStatus)
					rowValues.Add(rslt.ProcessCubeStatus)
					rowValues.Add(rslt.TriggeredBy)'DPA-29476/vn50tv8/DEC 29th 2021	
					body.AppendLine(NewHTMLTableRow((rowValues)))
					rowValues.Clear
	            Next
	    	    body.AppendLine(EndHTMLTable)
	            					
				BRApi.Utilities.SendMail(si, emailServer, distributionList, subject, body.ToString, True, fileAttachmentPaths)
'BRApi.Utilities.SendMail(si, emailServer, distributionList, subject, body.ToString,)
				
			Catch ex As Exception
				brapi.ErrorLog.LogMessage(si, ex.Message)
			Finally
				'Delete file attachement(s) from FileShare
				For Each fileFullName As String In fileAttachmentPaths
					File.Delete(fileFullName)
				Next
			End Try
		End Sub
		
		Public Sub SendRequestsInitiatedEmail(ByVal si As SessionInfo, ByVal requests As DataTable, ByVal fileAttachmentPaths As List(Of String),
											  ByVal subjectPreText As String, ByVal bodyPreText As String, ByVal appName As String, ByVal paramEmailServer As String, 
											  ByVal distributionList As List(Of String), Optional ByVal err As List(Of String) = Nothing,Optional ByVal wrn As List(Of String) = Nothing,
											  Optional ByVal autoCommit As Boolean = False)
			
			'Set up additional info string
			Dim addInfo As String = $"Ran on {subjectPreText}</br>FCP data from {appName}"
					
			'Subject
			Dim subject As String = $"{subjectPreText} - ACM Metadata Import Status"
					
			'Body
			Dim body As New StringBuilder
			
			If requests IsNot Nothing And requests.Rows.Count > 0 Then
				body.AppendLine(bodyPreText)
				body.AppendLine(NewHTMLParagraph("Metadata Import/Stage Complete."))
				body.AppendLine(NewHTMLParagraph(addInfo))
				body.AppendLine(StartHTMLTable)
				body.AppendLine(NewHTMLTableRowHeader(requests.Columns.Cast(Of DataColumn).Select(Function(x) x.ColumnName).ToList()))
				For Each requestRow As DataRow In requests.rows
					body.AppendLine(NewHTMLTableRow(requestRow.ItemArray.Cast(Of String).Select(Function(x) x.ToString).ToList()))
				Next
				body.AppendLine(EndHTMLTable)
				If Not autoCommit Then body.AppendLine(NewHTMLParagraph("Pending Review and Commit."))
				
				If wrn IsNot Nothing And wrn.Count > 0 Then
					Dim wrnText As String = "<span style='color:#FFC300'>Note(s):</span>"
					For Each w As String In wrn
						wrnText += "</br>" & w
					Next
					body.AppendLine(NewHTMLParagraph(wrnText))
				End If
				
				If err IsNot Nothing And err.Count > 0 Then
					Dim errText As String = "<span style='color:#ff030b'>Error(s):</span>"
					For Each e As String In err
						errText += "</br>" & e
					Next
					body.AppendLine(NewHTMLParagraph(errText))
				End If
				
'				If err <> "" Then
'					body.AppendLine(NewHTMLParagraph($"<span style='color:#ff030b'>ERROR:</span> {err}"))
'				End If
			Else

				'Show completion if no error
				If err Is Nothing Or err.Count = 0 Then
					body.AppendLine(NewHTMLParagraph($"Metadata Import/Stage Complete."))
					body.AppendLine(NewHTMLParagraph(addInfo))
					body.AppendLine(NewHTMLParagraph($"No changes found.</br>No request generated."))
				End If
				
				' Add any warnings
				If wrn IsNot Nothing And wrn.Count > 0 Then
					Dim wrnText As String = "<span style='color:#FFC300'>Warning:</span>"
					For Each w As String In wrn
						wrnText += "</br>" & w
					Next
					body.AppendLine(NewHTMLParagraph(wrnText))
				End If				
				
				' Add any errors
				If err IsNot Nothing And err.Count > 0 Then
					body.AppendLine(NewHTMLParagraph(addInfo))
					Dim errText As String = "<span style='color:#ff030b'>Error:</span>"
					For Each e As String In err
						errText += "</br>" & e
					Next
					body.AppendLine(NewHTMLParagraph(errText))					
				End If				
			End If
			
			'Send email
			BRApi.Utilities.SendMail(si, paramEmailServer, distributionList, subject, body.ToString, True, fileAttachmentPaths)
			
		End Sub
		Public Sub SendRequestsInitiatedEmail(ByVal si As SessionInfo, ByVal requests As DataTable, ByVal fileAttachmentPaths As List(Of String),
											  ByVal envName As String, ByVal appName As String, ByVal paramEmailServer As String, ByVal distributionList As List(of String), 
											  Optional ByVal err As String = "")

			'Get current environenment
			Dim xEnv As New XFEnvironment
			Dim xSet As XFEnvironmentSettings = xEnv.GetAppServerConfigEnvironmentSettings()
			Dim curEnvName As String = xSet.EnvironmentName
			
			'Set up additional info string
			Dim addInfo As String = $"Ran on: {curEnvName} - {si.AppName}</br>Data from: {envName} - {appName}"
					
			'Subject
			Dim subject As String = $"ACM Metadata Import Status - {si.AppName}"
					
			'Body
			Dim body As New StringBuilder
			
			If requests IsNot Nothing And requests.Rows.Count > 0 Then
				body.AppendLine(NewHTMLParagraph("Metadata Import/Stage Complete."))
				body.AppendLine(NewHTMLParagraph(addInfo))
				body.AppendLine(StartHTMLTable)
				body.AppendLine(NewHTMLTableRowHeader(requests.Columns.Cast(Of DataColumn).Select(Function(x) x.ColumnName).ToList()))
				For Each requestRow As DataRow In requests.rows
					body.AppendLine(NewHTMLTableRow(requestRow.ItemArray.Cast(Of String).Select(Function(x) x.ToString).ToList()))
				Next
				body.AppendLine(EndHTMLTable)
				body.AppendLine(NewHTMLParagraph("Pending Review and Commit."))
			Else
				If err <> "" Then
					body.AppendLine(NewHTMLParagraph($"Error importing metadata."))
					body.AppendLine(NewHTMLParagraph(addInfo))
					body.AppendLine(NewHTMLParagraph(err))
				Else
					body.AppendLine(NewHTMLParagraph($"Metadata Import/Stage Complete."))
					body.AppendLine(NewHTMLParagraph(addInfo))
					body.AppendLine(NewHTMLParagraph($"No changes found.</br>No request generated."))
				End If
			End If
			
			'Send email
			BRApi.Utilities.SendMail(si, paramEmailServer, distributionList, subject, body.ToString, True, fileAttachmentPaths)
			
		End Sub
		Public Sub SendDataTableEmail(ByVal si As SessionInfo, ByVal subject As String, ByVal dt As DataTable, ByVal distributionList As List(Of String), ByVal emailServer As String,
										Optional ByVal fileAttachmentPaths As List(Of String) = Nothing,
										Optional ByVal preParagraph As String = "",
										Optional ByVal postParagraph As String = "")
			'Build Body
			Dim body As New StringBuilder
			If dt IsNot Nothing And dt.Rows.Count > 0 Then
				If preParagraph <> "" Then body.AppendLine(NewHTMLParagraph(preParagraph))
				body.AppendLine(StartHTMLTable)
				body.AppendLine(NewHTMLTableRowHeader(dt.Columns.Cast(Of DataColumn).Select(Function(x) x.ColumnName).ToList()))
				For Each requestRow As DataRow In dt.rows
					body.AppendLine(NewHTMLTableRow(requestRow.ItemArray.Cast(Of String).Select(Function(x) x.ToString).ToList()))
				Next
				body.AppendLine(EndHTMLTable)
				If postParagraph <> "" Then body.AppendLine(NewHTMLParagraph(postParagraph))
			Else
				body.AppendLine(NewHTMLParagraph("No data found"))
			End If
			
			'Attachments
			If fileAttachmentPaths Is Nothing Then fileAttachmentPaths = New List(Of String)({""})
				
			'Send
			BRApi.Utilities.SendMail(si,emailServer,distributionList,subject,body.ToString,True,fileAttachmentPaths)
			
		End Sub

				
		Public Function GenerateValidationReport(ByVal si As SessionInfo, ByVal valProcessInfo As ValidationTransformationProcessInfo, ByVal fullFilePathName As String) As Boolean
			Try
				Dim unMappedItemsFound As Boolean
				
				Dim body As New StringBuilder
				body.AppendLine(StartHTMLTable)
				
				Dim rowHeaders As New List(Of String)
				rowHeaders.Add("Dimension")
				rowHeaders.Add("Source Value")
				rowHeaders.Add("Output Value")
				
				body.AppendLine(NewHTMLTableRowHeader(rowHeaders))
				For Each kvpDimValInfo As KeyValuePair(Of String, DimensionValidationInfo) In valProcessInfo.DimensionValidationInfos
					For Each valErrorItem As DimensionValidationErrorItemInfo In kvpDimValInfo.Value.UnmappedItems
						unMappedItemsFound = True
						Dim rowValues As New List(Of String)
						rowValues.Add(kvpDimValInfo.Key)
						rowValues.Add(valErrorItem.RuleName)
						rowValues.Add(valErrorItem.OutputValue)
						body.AppendLine(NewHTMLTableRow((rowValues)))
					Next
				Next
				body.AppendLine(EndHTMLTable)
				
				If unMappedItemsFound Then
					Using fdxDataFile As System.IO.StreamWriter = New StreamWriter(fullFilePathName, True)
						fdxDataFile.Write(body)
						fdxDataFile.Close									
					End Using
					
					Return True
				Else
					Return False
				End If
				
			Catch ex As Exception
				'Error
				brapi.ErrorLog.LogMessage(si, $"Exception generating validation report. {ex.Message}")
				Return False
			End Try
		End Function
		Public Function CheckIntersectionErrorCount(ByVal si As SessionInfo, ByVal objDbConnInfoApp As DbConnInfoApp, ByVal currentWorkflowUnitPk As WorkflowUnitPk) As Integer
			Try
				Dim dt As DataTable = BRApi.Database.ExecuteSqlUsingReader(objDbConnInfoApp, Me.GetIntersectionValidationErrorsCountQuery(si, currentWorkflowUnitPk), False)
				If dt IsNot Nothing Then
					Return dt.Rows(0)(0)
				Else
					Return -1
				End If
				
			Catch ex As Exception
				brapi.ErrorLog.LogMessage(si, $"Exception getting intersection error count. {ex.Message}")
				Return -1
			End Try
		End Function
		Public Function GenerateIntersectionReport(ByVal si As SessionInfo, ByVal objDbConnInfoApp As DbConnInfoApp, ByVal currentWorkflowUnitPk As WorkflowUnitPk, ByVal fullFilePathName As String) As Boolean
			Try
				Dim fileCreated As Boolean
				
				Dim dt As DataTable = BRApi.Database.ExecuteSqlUsingReader(objDbConnInfoApp, Me.GetIntersectionValidationErrorsCountQuery(si, currentWorkflowUnitPk), False)
				If dt IsNot Nothing Then
					If dt.Rows(0)(0) < 150 Then
						If Me.WriteIntersectionErrorsToFile(si, objDbConnInfoApp, currentWorkflowUnitPk, fullFilePathName) Then
							fileCreated = True
						End If
					End If
				End If
				
				If fileCreated Then
					Return True
				Else
					Return False
				End If
				
			Catch ex As Exception
				brapi.ErrorLog.LogMessage(si, $"Exception generating intersection report. {ex.Message}")
				Return False
			End Try
		End Function
		Public Function WriteIntersectionErrorsToFile(ByVal si As SessionInfo, ByVal dbConn As DbConnInfo, ByVal wfPk As WorkflowUnitPk, ByVal fullFilePathName As String) As Boolean
			Try
				
				Dim dt As DataTable = BRApi.Database.ExecuteSqlUsingReader(dbConn, Me.GetIntersectionValidationErrorsQuery(si, wfPk), False)
				If dt IsNot Nothing Then
				
					Dim body As New StringBuilder
					body.AppendLine(StartHTMLTable)
					
					Dim rowHeaders As New List(Of String)
					For Each dc As DataColumn In dt.Columns
						rowHeaders.Add(dc.ColumnName)
					Next
					
					body.AppendLine(NewHTMLTableRowHeader(rowHeaders))
					Dim r As Integer = 0
					
					Dim rowValues As New List(Of String)
		            For Each dr As DataRow In dt.Rows
						For Each dc As DataColumn In dt.Columns
							If dc.ColumnName.XFContainsIgnoreCase("ValidationMessagesXml") Then
								If r = 0 Then
									r += 1
								End If
								
								rowValues.Add(Me.GetXMLErrorMessage(si, dr(dc.ColumnName)))
							Else
								rowValues.Add(dr(dc.ColumnName))
							End If
						Next
						body.AppendLine(NewHTMLTableRow((rowValues)))
						rowValues.Clear
		            Next
		    	    body.AppendLine(EndHTMLTable)
					
					Using fdxDataFile As System.IO.StreamWriter = New StreamWriter(fullFilePathName, True)
						fdxDataFile.Write(body)
						fdxDataFile.Close									
					End Using
					
					Return True
				End If
				
				Return False
			Catch ex As Exception
				brapi.ErrorLog.LogMessage(si, $"Exception writing intersection errors to file. {ex.Message}")
				Return False
			End Try
		End Function
		Public Function GetXMLErrorMessage(ByVal si As SessionInfo, ByVal xml As String) As String
			Try
				
				Dim retValue As New Text.StringBuilder
				
				Dim xmlDoc As New xmlDocument
				xmlDoc.LoadXml(xml)
				Dim root As XmlElement = xmlDoc.DocumentElement
				
				'always will have only one message
				For Each message As XmlElement In xmlDoc.DocumentElement.SelectNodes("/dataCellValidationMsgList/messages/*")
					Dim errorMsg As String = message("errorMsg").InnerXml
					Dim sParams As New List(Of String)
					For Each stringParams As XmlElement In message.GetElementsByTagName("stringParam")
						sParams.Add(stringParams.InnerText)
					Next
					If sParams.Count > 0 Then
						retValue.AppendLine(String.Format(errorMsg,sParams.ToArray))
					Else
						retValue.AppendLine(errorMsg)
					End If
				Next
				
				Return retValue.ToString
				
			Catch ex As Exception
				Return xml
			End Try
		End Function
		Public Function GetIntersectionValidationErrorsQuery(ByVal si As SessionInfo, ByVal currentWorkflowUnitPk As WorkflowUnitPk) As String
			Try
				Dim sql As New Text.StringBuilder
				
				sql.Append("Select ")
				'sql.Append("	WorkflowProfileHierarchy.HierarchyIndex, ")
				'sql.Append("	WorkflowProfileHierarchy.ProfileKey,")
				sql.Append("	WorkflowProfileHierarchy.ProfileName,")
				'sql.Append("	StageToFinanceValidationError.WorkflowProfileKey,")
				'sql.Append("	StageToFinanceValidationError.SummaryRowID, ")
'					sql.Append("	StageSummaryTargetData.SnT, ")
'					sql.Append("	StageSummaryTargetData.Cube, ")
'					sql.Append("	StageSummaryTargetData.TmT, ")
'					sql.Append("	StageSummaryTargetData.Am, ")
				sql.Append("	StageSummaryTargetData.EtT, ")
'					sql.Append("	StageSummaryTargetData.PrT, ")
'					sql.Append("	StageSummaryTargetData.CnT, ")
'					sql.Append("	StageSummaryTargetData.VwT, ")
				sql.Append("	StageSummaryTargetData.AcT, ")
'					sql.Append("	StageSummaryTargetData.FwT, ")
'					sql.Append("	StageSummaryTargetData.OgT, ")
				sql.Append("	StageSummaryTargetData.IcT, ")
				sql.Append("	StageSummaryTargetData.U1T, ")
				sql.Append("	StageSummaryTargetData.U2T, ")
				sql.Append("	StageSummaryTargetData.U3T, ")
				sql.Append("	StageSummaryTargetData.U4T, ")
				sql.Append("	StageSummaryTargetData.U5T, ")
				sql.Append("	StageSummaryTargetData.U6T, ")
				sql.Append("	StageSummaryTargetData.U7T, ")
				sql.Append("	StageSummaryTargetData.U8T, ")
				sql.Append("	StageToFinanceValidationError.ValidationMessagesXml ")
				
'					sql.Append("CAST(REPLACE(CAST(StageToFinanceValidationError.ValidationMessagesXml As NVARCHAR(MAX)),'utf-8','utf-16') AS XML).value('(dataCellValidationMsgList/messages/message/errorMsg)[1]', 'varchar(max)'),")
'					sql.Append("CAST(REPLACE(CAST(StageToFinanceValidationError.ValidationMessagesXml As NVARCHAR(MAX)),'utf-8','utf-16') AS XML).value('(dataCellValidationMsgList/messages/message/stringParams/stringParam)[1]', 'varchar(max)'),")
'					sql.Append("CAST(REPLACE(CAST(StageToFinanceValidationError.ValidationMessagesXml As NVARCHAR(MAX)),'utf-8','utf-16') AS XML).value('(dataCellValidationMsgList/messages/message/stringParams/stringParam)[2]', 'varchar(max)')")
				
				sql.Append("From")
				sql.Append("	StageToFinanceValidationError ")
				sql.Append("INNER Join WorkflowProfileHierarchy On StageToFinanceValidationError.WorkflowProfileKey = WorkflowProfileHierarchy.ProfileKey ")
				sql.Append("INNER Join StageSummaryTargetData On StageSummaryTargetData.SummaryRowID = StageToFinanceValidationError.SummaryRowID ")

				sql.Append("Where")
				sql.Append("	WorkflowProfileHierarchy.ProfileKey = '" & currentWorkflowUnitPk.ProfileKey.ToString & "' ")
				sql.Append("	And StageToFinanceValidationError.WorkflowScenarioKey = " & currentWorkflowUnitPk.ScenarioKey.ToString)
				sql.Append("	And StageToFinanceValidationError.WorkflowTimeKey = " & currentWorkflowUnitPk.TimeKey.ToString & " ")
				sql.Append("Order By")
				sql.Append("	WorkflowProfileHierarchy.HierarchyIndex,  ")
				sql.Append("	StageToFinanceValidationError.AccountId")
				
				Return sql.ToString
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		Public Function GetIntersectionValidationErrorsCountQuery(ByVal si As SessionInfo, ByVal currentWorkflowUnitPk As WorkflowUnitPk) As String
			Try
				Dim sql As New Text.StringBuilder
				
				sql.Append("Select Count (*) ")
				sql.Append("From")
				sql.Append("	StageToFinanceValidationError ")
				
				sql.Append("Where")
				sql.Append("	WorkflowProfileKey = '" & currentWorkflowUnitPk.ProfileKey.ToString & "' ")
				sql.Append("	And WorkflowScenarioKey = " & currentWorkflowUnitPk.ScenarioKey.ToString)
				sql.Append("	And WorkflowTimeKey = " & currentWorkflowUnitPk.TimeKey.ToString & " ")
				
				Return sql.ToString
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
        ''DPA-29476/vn50tv8/DEC 29th 2021- app2appNotification
		Public Sub GetApp2AppDetailsAndSendEmail(ByVal si As SessionInfo, ByVal statevalue As String, ByVal distributionList As List(Of String), ByVal subjectPreText As String, ByVal dictWorkflowInfo As  Dictionary(Of String, String), ByVal emailServer As String)
			Try				
					Dim subject As String = subjectPreText & $"- Batch Detail Report for DM Job"
					Dim eResult As New EmailResults
					Dim importStatus As String = "N/A"
					Dim transformationStatus As String = "N/A"
					Dim intersectionStatus As String = "N/A"
					Dim loadStatus As String = "N/A"
					Dim processCubeStatus As String = "N/A"
					Dim fullFilePathName As String = "N/A"	
					Dim workflowInfo As String = "N/A"
					Dim rowCount As String = String.Empty
					Dim wfName As String = String.Empty
					Dim wfScen As String = String.Empty
					Dim wfTime As String = String.Empty
					Dim targetApp As String = String.Empty
					Dim SourceApp As String = String.Empty
					Dim errorInfo As String = String.Empty
					Dim app2AppCopy As String = String.Empty
					Dim appNames As String = String.Empty
					Dim triggeredBy As String=String.Empty
					
					 ' Loop over pairs.
				        For Each wfInfo In dictWorkflowInfo
							Select wfInfo.Key.ToLower 
								Case "wfname"
									wfName = wfInfo.Value 
								Case "wftime"
									wfTime = wfInfo.Value
								Case "wfscen"
									wfScen = wfInfo.Value
								Case "targetapp"
									targetApp ="Target : " + wfInfo.Value
								Case "app2appcopy"
									app2AppCopy =  wfInfo.Value
								Case "appnames"
									appNames =  wfInfo.Value
								Case "rowcount"
									rowCount = wfInfo.Value
								Case "errorinfo"
									errorInfo = wfInfo.Value
							End Select							
				      Next
					
					Dim listMessages As String() = statevalue.Split(New String() {Environment.NewLine},
                                       StringSplitOptions.None)
					For i As Integer = 0 To listMessages.Length - 1
    						Dim message = listMessages(i).Replace(" ", "")	
							brapi.ErrorLog.LogMessage(si,message)
							 If(message.ToLower.Trim.Contains("dataloadtransform")) Then
								importStatus= IIf(message.ToLower.Trim.Contains("dataloadtransformcompleted"),"Completed with " & rowCount & " rows ","Import failed." & $"</br> {errorInfo}")
							 ElseIf(message.ToLower.Trim.Contains("validatetransform")) Then
								transformationStatus= IIf(message.ToLower.Trim.Contains("validatetransformcompleted"),"Completed","Validate Transform Failed" & Environment.NewLine & errorInfo)
							 ElseIf(message.ToLower.Trim.Contains("validateintersection")) Then
								intersectionStatus= IIf(message.ToLower.Trim.Contains("validateintersectioncompleted"),"Completed","Validate Intersection Failed" & Environment.NewLine & errorInfo)
							 ElseIf(message.ToLower.Trim.Contains("loadcube")) Then
								loadStatus= IIf(message.ToLower.Trim.Contains("loadcubecompleted"),"Completed","Loadcube Failed" & Environment.NewLine & errorInfo)
							 ElseIf(message.ToLower.Trim.Contains("processcube")) Then
								processCubeStatus= IIf(message.ToLower.Trim.Contains("processcubecompleted"),"Completed","Processcube Failed" & Environment.NewLine & errorInfo)
							 End If							
					
					 Next
				    Dim status As String = String .Empty 
					If (importStatus.ToLower().Contains("fail") Or (transformationStatus.ToLower().Contains("fail")) Or (intersectionStatus.ToLower().Contains("fail")) Or (loadStatus.ToLower().Contains("fail")) Or (processCubeStatus.ToLower().Contains("fail"))) Then
						status = "Fail"
						brapi.ErrorLog.LogMessage(si,"status" & status)
					ElseIf (importStatus.ToLower().Contains("completed") And (transformationStatus.ToLower().Contains("completed")) And (intersectionStatus.ToLower().Contains("completed")) And (loadStatus.ToLower().Contains("completed")) And (processCubeStatus.ToLower().Contains("completed"))) Then
						status = "Success"
						brapi.ErrorLog.LogMessage(si,"status" & status)
					Else 
						brapi.ErrorLog.LogMessage(si,"status" & status)
						Exit Sub
					End If
					
					Dim firstName As String = String.Empty 
					Dim lastName As String = String.Empty 
					GetUserDescription(si,firstName,lastName)
					eResult.Add(si, _
								$"{wfName}</br>{wfTime}</br>{wfScen}</br>{app2AppCopy}</br>{appNames}", _
									status, _
									importStatus, _
									transformationStatus, _
									intersectionStatus, _
									loadStatus, _
									processCubeStatus, _
									$"{firstName}</br>{lastName}")					
															
					Dim body As New StringBuilder
					Dim rowHeaders As New List(Of String)
					rowHeaders.Add("Workflow Info")
					rowHeaders.Add("Batch Status")
					rowHeaders.Add("Import Status")
					rowHeaders.Add("Transformation Status")
					rowHeaders.Add("Intersection Status")
					rowHeaders.Add("Load Cube Status")
					rowHeaders.Add("Process Cube Status")
					rowHeaders.Add("Triggered By")
				
					body.AppendLine(StartHTMLTable)
					body.AppendLine(NewHTMLTableRowHeader(rowHeaders))
					Dim r As Integer = 0
					Dim rowValues As New List(Of String)
		            For Each rslt As EmailResult In eResult.Results
						rowValues.Add(rslt.wfDetails)
						rowValues.Add(rslt.Status)
						rowValues.Add(rslt.ImportStatus)
						rowValues.Add(rslt.TransformationStatus)
						rowValues.Add(rslt.IntersectionStatus)
						rowValues.Add(rslt.LoadStatus)
						rowValues.Add(rslt.ProcessCubeStatus)
						rowValues.Add(rslt.TriggeredBy)
						body.AppendLine(NewHTMLTableRow((rowValues)))
						rowValues.Clear
		            Next
		    	    body.AppendLine(EndHTMLTable)
	            					
					BRApi.Utilities.SendMail(si, emailServer, distributionList, subject, body.ToString, True, nothing)
				
			Catch ex As Exception
				brapi.ErrorLog.LogMessage(si, ex.Message)
			
			End Try 
					
		End Sub
		#Region "HTML Helpers"
			Public Function GetErrorEmailBody(ByVal parentIntegrationName As String) As String
				Return $"<b>An Error has Occurred</b></br>{parentIntegrationName} has failed to run."
			End Function
			
	        ''' <summary>
	        ''' Return a formatted html row
	        ''' </summary>
	        ''' <param name="si"></param>
	        ''' <param name="rowValues"></param>
	        ''' <returns></returns>
	        Public Function NewHTMLTableRow(ByVal rowValues As List(Of String), Optional ByVal paddingPx As String = "10px", Optional ByVal colSpan As Integer = 0, Optional ByVal lastColRowSpan As Integer = 0) As String
	            Dim strBldr As New StringBuilder
	            strBldr.Append("<tr>")
	            Dim styl As String
	            Dim cnt As Short = 0
	            For Each val As String In rowValues
	                cnt += 1
	                If cnt = 1 Then
	                    styl = $" style='color:{_foreColor};background-color:{_backColor};padding: {paddingPx}; text-align:left; vertical-align:top'"
	                Else If val.StartsWith("Fail") Then
	                    styl = " style='background-color:#ffe6e6;padding: 10Px; text-align:left; vertical-align:top'"
	                Else If val.StartsWith("Warning") Then
	                    styl = " style='background-color:#ffffb3;padding: 10Px; text-align:left; vertical-align:top'"
	                Else If val.StartsWith("Success") Then
	                    styl = " style='background-color:#ccffcc;padding: 10Px; text-align:left; vertical-align:top'"                              
	                Else If colSpan > 0 Then
	                    styl = $" style='color:{_foreColor};background-color:{_backColor};padding: {paddingPx}; text-align:left; vertical-align:top'"
	                Else
	                    styl = $" style='padding: {paddingPx}; text-align:left; vertical-align:top'"
	                End If
	                val = val.Replace(",","</br>")
	                If colSpan > 0 Then
	                    strBldr.Append($"<td{styl} colspan='{colSpan}'>{val}</td>")
	                Else If lastColRowSpan > 0 And cnt = rowValues.Count Then
	                    strBldr.Append($"<td{styl} rowspan='{lastColRowSpan}'>{val}</td>")
	                Else     
	                    strBldr.Append($"<td{styl}>{val}</td>")
	                End If
	            Next
	            strBldr.AppendLine("</tr>")
	            Return strBldr.toString
	        End Function
	        
	        ''' <summary>
	        ''' Return a formatted table header row
	        ''' </summary>
	        ''' <param name="si"></param>
	        ''' <param name="headerValues"></param>
	        ''' <returns></returns>
	        Public Function NewHTMLTableRowHeader(ByVal headerValues As List(Of String), Optional ByVal colWidths As Integer() = Nothing) As String
	            Dim styl As String = $"style='color:{_foreColor};background-color:{_backColor};text-align:left;padding: 8px;'"
	            Dim strBldr As New StringBuilder
	            strBldr.Append("<tr>")
	            Dim i As Short = 0
	            For Each val As String In headerValues
	                If colWidths IsNot Nothing Then
	                    styl = $"style='width:{colWidths(i)}%; color:{_foreColor};background-color:{_backColor}; text-align:left; padding:8px;'"
	                End If
	                strBldr.Append($"<th {styl}>{val}</th>")
	                i += 1
	            Next
	            strBldr.AppendLine("</tr>")
	            Return strBldr.toString
	        End Function
	        
	        Public Function StartHTMLUnorderedList() As String
	            Return "<ul>"
	        End Function
	        
	        Public Function EndHTMLUnorderedList() As String
	            Return "</ul>"
	        End Function
	        
	        Public Function NewListItem(ByVal item As String) As String
	            Return $"<li>{item}</li>"
	        End Function
	        
	        Public Function StartHTMLTable() As String
	            'Return "<table border='1' style='border-collapse:collapse; width:100%; table-layout: fixed; word-wrap: break-word'>"
				Return "<table border='1' style='border-collapse:collapse; max-width:100%; word-wrap:break-word; white-space:nowrap;'>"
	        End Function
	        
	        Public Function EndHTMLTable() As String
	            Return "</table>"
	        End Function              
	        
	        Public Function NewHTMLParagraph(ByVal p As String) As String
	            Return $"<p>{p}</p>"
	        End Function
		
    	#End Region
		'vn50tv8/DPA-29476/Dec29th
	#Region "GetUserDescription"
		Public Sub GetUserDescription(ByVal si As SessionInfo,ByRef firstName As String,ByRef lastName As String) 
			Dim currentUserName As String = si.AuthToken.UserName
			Dim userInfo As UserInfo = BRApi.Security.Admin.GetUser(si, currentUserName)
			Dim description As String = userInfo.User.Description
			Try
	            firstName = Description.Split(" ")(0)
				lastName = Description.Split(" ")(1)
	        Catch ex As Exception
				firstName = "System"
				lastName = "User"
				brapi.ErrorLog.LogMessage(si,ex.Message)
	        End Try
		End Sub
		#End Region
    End Class
    
	#Region "Email Classes"
	    Public Class EmailResults
	        Public Property Results As List(Of EmailResult)
	        Public Sub Add(si As SessionInfo, 
							wfDetails As String, 
							status As String, 
							importStatus As String, 
							transformationStatus As String,
							intersectionStatus As String,
							loadStatus As String,
							processCubeStatus As String,
							triggeredBy As String)
	            Dim eResult As New EmailResult
	            eResult.wfDetails = wfDetails
	            eResult.Status = status
	            eResult.ImportStatus = importStatus
				eResult.TransformationStatus = transformationStatus
				eResult.IntersectionStatus = intersectionStatus
	            eResult.LoadStatus = loadStatus
				eResult.ProcessCubeStatus = processCubeStatus
				eResult.TriggeredBy = triggeredBy 'DPA-29476
	            If Results Is Nothing Then Results = New List(Of EmailResult)
	            Results.Add(eResult)
	        End Sub
	    End Class
	    
	    Public Class EmailResult
	        Public Property wfDetails As String
	        Public Property Status As String
	        Public Property ImportStatus As String
			Public Property TransformationStatus As String
			Public Property IntersectionStatus As String
	        Public Property LoadStatus As String
			Public Property ProcessCubeStatus As String
		    Public Property TriggeredBy As String
	    End Class
    #End Region
	
	
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ENT_PUT_Create_table">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
#End Region
Namespace OneStream.BusinessRule.Extender.ENT_PUT_Create_table
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
'						Dim query As New Text.StringBuilder
'						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'						    query.AppendLine("CREATE TABLE [dbo].[XFW_FCP_ENT_PUT_CRED]")
'						    query.AppendLine("(")
'						    query.AppendLine(" [ID] [varchar] (1000) NOT NULL PRIMARY KEY,")
'						    query.AppendLine(" [Base_URI] [varchar] (100),")
'						    query.AppendLine(" [ConsumerId] [varchar] (1000),")
'						    query.AppendLine(" [Name] [varchar] (1000),")
'						    query.AppendLine(" [ENV] [varchar] (1000),")
'						    query.AppendLine(" [App] [varchar] (1000)")
'						    query.AppendLine(")")
'						    BRAPi.Database.ExecuteSql(dbConnApp, query.ToString, True)
'						End Using
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
					Case Is = ExtenderFunctionType.ExecuteExternalDimensionSource
						'Add External Members
						Dim externalMembers As New List(Of NameValuePair)
						externalMembers.Add(New NameValuePair("YourMember1Name","YourMember1Value"))
						externalMembers.Add(New NameValuePair("YourMember2Name","YourMember2Value"))
						Return externalMembers
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ENT_to_WMTUS_App2App">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics

Namespace OneStream.BusinessRule.Extender.ENT_to_WMTUS_App2App
	Public Class MainClass
		Dim JobID As String = ""
		Dim JobStatus As String = "Success"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				'************************************************************************************************************
				'**
				'** This is a BR to allow for automating batchjobs for Connector driven workflows.
				'** To use, you need to create a DataManagement Job, and you need to pass the following parameters to it:
				'** 	wfTop = <Top Workflow you want to loop through all descendants of>
				'**		T3Tag = <What is the tag in the Text3 field of the specific import workflow>
				'**		globScen = <which scenario to run for>
				'**		globTime = <which time to run for>
				'**
				'** Example to put in Parameter field of DataManagement Step:
				'**		wfTop = Clubs, T3Tag = AutoLoad, globScen = |GlobalScenario|, globTime = |GlobalTime|, ParallelCountTag = 10 
				'**  ParallelCountTag is optional, not needed. If not used Batch will will be serialized, if used it will run in parallel
				'**
				'************************************************************************************************************
				
			
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.Unknown, ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
					Dim newSeshInfo = GetOtherAppConnectionString(si, globals, api, args)					
					'Note for testing purpose
					Dim testing As Boolean = False
					Dim sw As New Stopwatch
					'Set all the needed variables
					Dim sourceScenario As String = "Plan_Working"
					Dim myWorkflowUnitPk As WorkflowUnitPk = BRApi.Workflow.General.GetWorkflowUnitPk(si)
					Dim sourceYear As Integer = BRApi.Finance.Time.GetYearFromId(si, myWorkflowUnitPk.TimeKey)
					
					
					Dim globScen As String = args.NameValuePairs("globScen")
					Dim globTime As String = sourceYear
					Dim systemTime As String = globTime
					Dim fixedScenario As String = globScen
					'BrApi.ErrorLog.LogMessage(si, "fixedScenario" &fixedScenario)
					Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(newSeshInfo)
					Dim bolError As Boolean = False
					Dim wfTop As String = args.NameValuePairs("WfTop")
					
						If fixedScenario.contains ("Plan") Then 
							wfTop = "ENT_to_WMTUS_App2App_Import"
						End If
							
					'Dim T3Tag As String = args.NameValuePairs("T3Tag")
					Dim wfProfileInfo As WorkflowProfileInfo = BRApi.Workflow.Metadata.GetProfile(newSeshInfo, wfTop)
					'BrApi.ErrorLog.LogMessage(si, "wfProfileInfo : " &wfProfileInfo.ToString)
					Dim wfClusterPk As WorkflowUnitClusterPk
					Dim wfClusterPk2 As WorkflowUnitClusterPk
					Dim scenarioMemberID As Integer = BRApi.Finance.Members.GetMemberId(newSeshInfo, dimTypeId.Scenario, fixedScenario)
					'BrApi.ErrorLog.LogMessage(si, "scenarioMemberID : " &scenarioMemberID.ToString)
					Dim scentypeID As Integer = BRApi.Finance.Scenario.GetScenarioType(newSeshInfo,scenarioMemberID).Id
					'BrApi.ErrorLog.LogMessage(si, "scentypeID : " &scentypeID.ToString)
					Dim wfList As New List(Of String)
					Dim ParallelCountTag As String = args.NameValuePairs.XFGetValue("ParallelCountTag","1")
					
					'OMD initializations
					Dim ens_si As SessionInfo = GetOtherAppConnectionString(si, globals, api, args)
					Dim jobid As Guid = Guid.NewGuid
'					Dim WFPtoENSTAIStatus As TaskActivityItem
					Dim SubmitJobTAI As TaskActivityItem
'					Dim SubmitJobTAIStatus As TaskActivityItem
					Dim customSubstVars As New Dictionary(Of String, String)
					
					
					'Insert Job Details into Table
					Dim param As New Dictionary(Of String, String)
					param.Add("Process", "App2App")
					param.Add("sourceScenario", sourceScenario)
					param.Add("targetScenario", globScen)
					param.Add("sourceYear", sourceYear)
					param.Add("systemTime", globTime)
					param.Add("import",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("validation",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("transformation",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("loadCube",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("processCube",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("details", "Running")
					Me.addLog(si, param)
					
					
					'Get all the Import WFs under WFTop with the correct T3Tag and add to list
					wfClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(newSeshInfo, WfTop, fixedScenario, systemTime)
	
					Dim objList As List(Of WorkFlowProfileInfo) = BRApi.Workflow.Metadata.GetRelatives(newSeshInfo, wfClusterPk, WorkflowProfileRelativeTypes.Descendants, WorkflowProfileTypes.InputImportChild)
					
					Dim scenarioFlag As String = "False"
					Dim src_scenario As String = ""
					Dim trg_scenario As String = ""
					If sourceScenario.XFContainsIgnoreCase("Plan_Final") AndAlso globScen.XFContainsIgnoreCase("Plan_Working") Then
						scenarioFlag = "True"
						src_scenario = "Plan_Final"
						trg_scenario = "Plan_Working"
					End If
					
					If scenarioFlag.XFContainsIgnoreCase("True")
						'OMD execution
						customSubstVars.Add("JobId", jobid.ToString)
	'					customSubstVars.Add("Description","ENTERPRISE:SAMS->SAMS:SAMS")
						customSubstVars.Add("Source","SAMS")
						customSubstVars.Add("SourceAddInfo","SAMS")
						customSubstVars.Add("SourceScenario",src_scenario)
						customSubstVars.Add("Target","ENTERPRISE")
						customSubstVars.Add("TargetAddInfo","SAMS")
						customSubstVars.Add("TargetScenario",trg_scenario)
						
						' Create main subtask
						SubmitJobTAI = BRApi.Utilities.ExecuteDataMgmtSequence(ens_si, "Sqnc_Submit_Job", customSubstVars)
						Dim dt_mainTask As DataTable
							Dim mainTaskQuery As String = $"SELECT Top(1) * FROM [OneStream_Framework_Dev].[dbo].[TaskActivity] where [UserName] = '{si.UserName}' And Description ='Sams_To_EnS_App2App_Automation' Order by [StartTime] Desc"
							Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								dt_mainTask = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, mainTaskQuery, True)
							End Using
							CreateSubTask(si, ens_si, jobid.ToString, dt_mainTask(0)("UniqueID").ToString, "Sqnc_Submit_SubTask","Yes")
					End If
					
					
					For Each wfItem As WorkflowProfileInfo In objList
						'If wfItem.GetAttributeValue(scentypeID,SharedConstants.WorkflowProfileAttributeIndexes.Text3) = T3Tag Then
							'If WF is locked, do nothing
							wfCLusterPk2 = BRApi.Workflow.General.GetWorkflowUnitClusterPk(newSeshInfo, wfItem.Name, fixedScenario, systemTime)		
							Dim wfStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(newSeshInfo, wfClusterPk2)	
							If Not wfStatus.Locked Then
								wfList.Add(stringhelper.ReplaceString(wfItem.Name,".",";",True))
							End If
							'Clear Stage Data
							Try
							Dim objLoadTransformProcessInfo As LoadTransformProcessInfo = BRApi.Import.Process.ClearStageData(newSeshInfo, wfClusterPk2, "SAMS FDX Stage Query for E&S  - Plan")
							
							Catch Ex As Exception
							'Update Job Details into Table
										param = New Dictionary(Of String, String)
										param.Add("import", Me.getImage("HasError"))
										param.Add("validation", Me.getImage("Nothing"))
										param.Add("transformation", Me.getImage("Nothing"))
										param.Add("loadCube", Me.getImage("Nothing"))
										param.Add("processCube", Me.getImage("Nothing"))
'										param.Add("details", Me.JobStatus & $". Processd in: {sw.Elapsed.Seconds} seconds")
										param.Add("details", "Failed")
										Me.updateLog(newSeshInfo, param)
										'Me.SendEmailNotification(si, args, "Unable to start process as there is an existing process running")
								Return Nothing
							End Try
							'End If
						brapi.ErrorLog.LogMessage(newSeshInfo,  "Clear Stage Completed ")
						
					Next	

					'Loop through the generated list of WFs, and create trigger file
					If wfList.Count > 0 Then
						For Each wfMem As String In WfList
						'Create GL WF Batch Trigger File
							Me.CreateBatchFileTrigger(newSeshInfo,FileShareFolderHelper.GetBatchHarvestFolderForApp(newSeshInfo, True, configSettings.FileShareRootFolder, configSettings.FileShareBatchHarvestRootFolder,si.AppToken.AppName),wfMem.ToString,fixedScenario,systemTime, Testing)
				    	Next
					'end Loop WFs
					End If
					

					'Set Processing Switches	
					Dim valTransform As Boolean = True
					Dim valIntersect As Boolean = True

					Dim loadCube As Boolean = True
					
					Dim processCube As Boolean = True
					Dim confirm As Boolean = False
					Dim autoCertify As Boolean = False
		
					
					If Not testing Then
						Dim Batchinfo As WorkflowBatchFileCollection 
''						Execute Batch		
						If ParallelCountTag = "" Or ParallelCountTag = "1" Then
							batchInfo = BRApi.Utilities.ExecuteFileHarvestBatch(newSeshInfo, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, False)
						Else 
							Dim ParallelCount As Integer = ParallelCountTag.XFConvertToInt
'								Dim batchInfo As WorkflowBatchFileCollection = BRApi.Utilities.ExecuteFileHarvestBatch(si, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, False)								
							batchInfo = BRApi.Utilities.ExecuteFileHarvestBatchParallel(newSeshInfo, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, ParallelCount)
						End If					
	

						If Not batchInfo Is Nothing Then					
							For Each kvp As keyValuePair(Of Integer, List(Of WorkflowBatchFileInfo)) In batchInfo.FileGroups							
								For Each wfBatchInfo As WorkflowBatchFileInfo In kvp.Value
									Dim importStatus As String = "N/A"
									Dim transformationStatus As String = "N/A"
									Dim intersectionStatus As String = "N/A"
									Dim loadStatus As String = "N/A"
									Dim processCubeStatus As String = "N/A"
									Dim fullFilePathName As String = "N/A"
									
									sw.Stop
									
									Dim updatedWorkflowUnitPksCount As Integer = 0
									If wfBatchInfo.ProcessInfo.UpdatedWorkflowUnitPks.Count = 0 Then
										'Update Job Details into Table
										param = New Dictionary(Of String, String)
										param.Add("import", Me.getImage("HasError"))
										param.Add("validation", Me.getImage("Nothing"))
										param.Add("transformation", Me.getImage("Nothing"))
										param.Add("loadCube", Me.getImage("Nothing"))
										param.Add("processCube", Me.getImage("Nothing"))
'										param.Add("details", Me.JobStatus & $". Processd in: {sw.Elapsed.Seconds} seconds")
										param.Add("details", Me.JobStatus)
										Me.updateLog(si, param)
									End If
									
									For Each batchWFUnitPk As WorkflowUnitPk In wfBatchInfo.ProcessInfo.UpdatedWorkflowUnitPks
										
										updatedWorkflowUnitPksCount += 1
										
										Dim wfName As String = BRApi.Workflow.Metadata.GetProfile(newSeshInfo, batchWFUnitPk.ProfileKey).Name									
										Dim wfInfoStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(newSeshInfo, batchWfUnitPk)

										importStatus =  wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateTransform).ToString
										transformationStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateTransform).ToString
										intersectionStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateIntersection).ToString
										loadStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.LoadCube).ToString
										processCubeStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ProcessCube).ToString
										
										
										
										If Not wfBatchInfo.FileProcessed Then
											Me.JobStatus = "Fail"
											'Me.SendEmailNotification(si, args, "Failed")
										Else
											Me.JobStatus = "Success"
											'Me.SendEmailNotification(si, args, "Success")
										End If

										'Update Job Details into Table
										param = New Dictionary(Of String, String)
										param.Add("import", Me.getImage(importStatus))
										param.Add("validation", Me.getImage(intersectionStatus))
										param.Add("transformation", Me.getImage(transformationStatus))
										param.Add("loadCube", Me.getImage(loadStatus))
										param.Add("processCube", Me.getImage(processCubeStatus))
										param.Add("details", Me.JobStatus & $"")
										
										'Create sub tasks
										If scenarioFlag.XFEqualsIgnoreCase("True")
											checkSubTaskStatus(si, ens_si, jobid.ToString, 2000, importStatus)
											checkSubTaskStatus(si, ens_si, jobid.ToString, 5000, intersectionStatus)
											checkSubTaskStatus(si, ens_si, jobid.ToString, 6000, transformationStatus)
											checkSubTaskStatus(si, ens_si, jobid.ToString, 7000, loadStatus)
											checkSubTaskStatus(si, ens_si, jobid.ToString, 8000, processCubeStatus)
											
											Dim validation_params As New Dictionary(Of String, String)		
											validation_params.Add("JobId", jobid.ToString)
											validation_params.Add("EntityList", "SAMS_US")
											validation_params.Add("JsonFile","sams_ens_plan.json")
											validation_params.Add("Year",globTime)
											
											Dim TaskActivityItem_validation As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(ens_si, "Sqnc_run_validation", validation_params)
											CreateSubTask(si,ens_si,jobid.ToString,TaskActivityItem_validation.UniqueID.ToString,"Sqnc_Submit_SubTask",String.Empty)
										End If
										
										Me.updateLog(si, param)
									Next
								Next
							Next
						Else
							brapi.ErrorLog.LogMessage(si, "batch Info Empty ")
						End If
'						If batchInfo IsNot Nothing Then
						
''							--------- Email Notification --------- 
''							the following dashboard parameters are stored In the '99_WMT_Notifications'- Dashboard Maintenance Unity (DMU)
'							Dim paramEmailBusiness As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "EnS_to_Sams_App2App_EmailNotification")
							
'							Dim emailList As New List(Of String)
'							emailList.AddRange(paramEmailBusiness.Split(",").ToList()) ' to be commented out when not in test
							
							
'''							hardcode emaillist For testing
''								Dim emailList As New List(Of String)
''								emailList.Add("Hiren.Parmar@walmartlabs.com")
''								emailList.Add("gm.vishwas@walmart.com")
''''								emailList.Add("Panchanan.Bharali@walmartlabs.com")
'								Dim paramEmailServer = "WalmartSMTP"
							
''							Dim emailHelper As New OneStream.BusinessRule.Extender.EStoSams_ApptoApp_Email_Helper.MainClass
''							emailHelper.GetBatchDetailsAndSendEmail(si, batchInfo, emailList, paramEmailServer, "ENS App to SAMS App Copy")
'						End If
						
					End If
							
				
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
#Region "General Helpers"
		Private Sub CreateBatchFileTrigger(ByVal si As SessionInfo, ByVal harvestPath As String, ByVal wfName As String, ByVal wfScenario As String, ByVal wfTime As String, ByVal Testing As Boolean)
			Dim newSeshInfo = GetOtherAppConnectionString(si, Nothing, Nothing, Nothing)	
	
			Dim Path As String = String.Empty

			If Not Testing Then
				Dim harvestFolderPath As String = BRApi.FileSystem.GetFileShareFolder(newSeshInfo, Filesharefoldertypes.Batch, Nothing) & "\Harvest"
'					path = harvestPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-R.txt"
				path = harvestFolderPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-RB.txt"
			Else
			Dim testingFolderPath As String = BRApi.FileSystem.GetFileShareFolder(newSeshInfo, Filesharefoldertypes.Batch, Nothing) & "\_Testing"
			If Not Directory.Exists(testingFolderPath) Then directory.CreateDirectory(testingFolderPath) 
				
				path = testingFolderPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-RB.txt"
			End If
				
			If Not File.Exists(path) Or Testing = True Then
				' Create a file to write to. 
				Using sw As StreamWriter = File.CreateText(path)
					sw.WriteLine("Batch File Trigger")
				End Using
			End If
		End Sub		

			
Private Function GetOtherAppConnectionString(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Transformer, ByVal args As ExtenderArgs) As Object
	Try		
	
'						'define the unique ID of the app you want to connect to - figure this out by logging the unique ID in the app you are pulling data from: "brapi.ErrorLog.LogMessage(si, "App UniqueID: " & si.AppUniqueID.ToString)"
'						Dim appUniqueID As Guid = ConvertHelper.ToGuid("9e3aa78c-7bd0-4602-ac0e-0d35e7319034")				
'						'pass in the app name and app unique id of the app you want to pull data from
'						Dim varAppToken As New ApplicationToken(si.AppToken.SHA1HashCode, "Walmart Dev", appUniqueID)
'						'create a new session in the app you want to pull data from
'						Dim newSeshInfoOtherApp As New SessionInfo(ClientModuleType.Silverlight, si.WebServerUrlUsedByClient, si.AuthToken, varAppToken, si.Culture)
							
						Dim destinationAppName As String = "WMTUS"
						Dim newSeshInfoOtherApp As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si, destinationAppName, openAppResult.Success)


						Return newSeshInfoOtherApp
						

		Catch ex As Exception
			Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	End Try
End Function
			
				
		#End Region
		
'		Private Function GetOtherAppConnectionString(ByVal si As SessionInfo) As Object
'			Try	
'				Dim appUniqueID As Guid = ConvertHelper.ToGuid("78e8c697-a957-4fd1-9a1d-2c42886fdc95")
'				Dim varAppToken As New ApplicationToken(si.AppToken.SHA1HashCode, "Enterprise", appUniqueID)
'				Dim newSeshInfoOtherApp As New SessionInfo(ClientModuleType.Silverlight, si.WebServerUrlUsedByClient, si.AuthToken, varAppToken, si.Culture)
					
'				Return newSeshInfoOtherApp

'			Catch ex As Exception
'				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'			End Try
'		End Function

		'Public Function	getImage(ByVal status As String) As String
		'	If status.XFEqualsIgnoreCase("Completed") Then		
		'		Return XFClientImageTypes.StatusGreenBall.Name
		Private Sub checkSubTaskStatus(ByVal si As SessionInfo, ByVal ens_si As SessionInfo, ByVal jobid As String, ByVal status_code As Integer, ByVal status As String)
			If status.XFEqualsIgnoreCase("Completed") Then
				subTaskHelper(si, ens_si, jobid , status_code)
			End If	
		End Sub
		Private Sub subTaskHelper(ByVal si As SessionInfo, ByVal ens_si As SessionInfo, ByVal jobid As String, ByVal status_code As Integer)
			Try
				Dim sqlQuery As String = $"SELECT Top(1) * FROM [OneStream_Framework_Dev].[dbo].[TaskActivity] where [UserName] = '{si.UserName}' And TaskActivityType = '{status_code}' Order by [StartTime] Desc"
				Dim dt_taskActivity As DataTable
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_taskActivity = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, sqlQuery, True)
				End Using
				CreateSubTask(si, ens_si, jobid.ToString, dt_taskActivity(0)("UniqueID").ToString, "Sqnc_Submit_SubTask", String.Empty)
			
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub
		Private Sub CreateSubTask(ByVal si As SessionInfo, ByVal ens_si As SessionInfo, ByVal taskid As String, ByVal subtaskid As String, ByVal sequenceName_subtask As String, ByVal status As String)
			Try
				Dim subtask_dict As New Dictionary(Of String, String)
				subtask_dict.Add("JobId", taskid)
				subtask_dict.Add("SubTaskId", subtaskid)
				subtask_dict.Add("Status", status)
				BRApi.Utilities.ExecuteDataMgmtSequence(ens_si, sequenceName_subtask, subtask_dict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub

		Private Sub processlog(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal logmessage As String)
			Try
				globals.GetObject("WFPtoENS_PROCESS_LOG").AppendLine(Environment.NewLine & "[" & DateTime.Now.ToString & "] - " & logmessage)
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	

		End Sub
		
		Public Sub addLog(ByRef si As SessionInfo, ByRef data As Dictionary(Of String, String))
			Dim query As New Text.StringBuilder
			
			query.Append( $"INSERT INTO [XFT_App2App_Status_Log] ([Process],[Source_Scenario],[Target_Scenario], [Source_Year], [Target_Year], [Start_Time], [ExecutedBy], [Triggered_From], [Import], [Transformation], [Validation], [Load_Cube], [Process_Cube], [Details], [End_Time]) VALUES ( ")
			query.Append($"'{data.item("Process")}','{data.item("sourceScenario")}', '{data.item("targetScenario")}', '{data.item("sourceYear")}', '{data.item("systemTime")}', GETDATE(), '{si.userName}', '{si.AppName}', '{data.item("import")}', '{data.item("transformation")}', '{data.item("validation")}', '{data.item("loadCube")}', '{data.item("processCube")}', '{data.item("details")}', NULL ) ")
			
			brapi.ErrorLog.LogMessage(si, "InsertLog", query.ToString)
			
			Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				BRAPi.Database.ExecuteSql(dbConnApp, query.ToString, True)	
				Me.jobID = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, "SELECT SCOPE_IDENTITY() as [SCOPE_IDENTITY]", True)(0)(0)
			End Using
		End Sub
		
		
		Public Sub updateLog(ByRef si As SessionInfo, ByRef data As Dictionary(Of String, String))
			Dim query As New Text.StringBuilder
			
			query.Append($"UPDATE [dbo].[XFT_App2App_Status_Log] SET [Import] = '{data.Item("import")}' , [Transformation] = '{data.Item("transformation")}', ")
			query.Append($" [Validation] = '{data.Item("validation")}', [Load_Cube] = '{data.Item("loadCube")}', [Process_Cube] = '{data.Item("processCube")}', [Details] = '{data.Item("details")}', [End_Time] = CURRENT_TIMESTAMP")
			query.Append($" where [job_ID] = {Me.JobID}")
			
			brapi.ErrorLog.LogMessage(si, "uploadLog", query.ToString)
			
			
			Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				BRAPi.Database.ExecuteSql(dbConnApp, query.ToString, True)	
			End Using
		End Sub
				
		Public Function	getImage(ByVal status As String) As String
			If status.XFEqualsIgnoreCase("Completed") Then
				Return XFClientImageTypes.StatusGreenBall.Name
			Else If status.XFEqualsIgnoreCase("HasError") Then
				Me.JobStatus = "Failed" 
				Return XFClientImageTypes.StatusRedBall.Name
			Else If status.XFEqualsIgnoreCase("NotExecuted") Then
				Me.JobStatus = "Failed" 
				Return XFClientImageTypes.StatusOrangeBall.Name
				'Return XFClientImageTypes.StatusWhiteBall.Name
			Else 
				Me.JobStatus = "Failed" 
				Return XFClientImageTypes.StatusOrangeBall.Name
			End If
		End Function
		
		
'		Public Function SendEmailNotification(ByRef si As SessionInfo, ByVal args As ExtenderArgs, ByVal MsgBody As String) As Object
'			Try
				
'							'Connection to the mail server (Defined in Application Server setup)
'							Dim emailConnectionName As String = "WalmartSMTP"
							   
'							'Email content (Subject & Body)
'							Dim subject As String = "EnS to SAMs App2App Notification"
'							'Dim messageBody As String = "The copy was completed " 
							   
'							'Add email addresses
'							Dim EmailIDList As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "EnS_to_Sams_App2App_EmailNotification")
'							Dim toEmail As New List(Of String)
'							toEmail.AddRange(EmailIDList.Split(",").ToList())
							
							   
'							'Add Attachments
'							Dim attachments As New List(Of String)
'							'Dim fileAttachmentPath As String = ""

'							'If File.Exists(fileAttachmentPath) Then
'							  '  attachments.Add(fileAttachmentPath)
'							'End If

'							'Send the message
'							BRApi.Utilities.SendMail(si, emailConnectionName, toEmail, subject, MsgBody, attachments)


'			Return Nothing
'			Catch ex As Exception
'			Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'			End Try
'		End Function

	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ENTtoEP_ITAM">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics
Imports System.Data.SqlClient
#End Region

'push package specific driver based GLs from segment cubes to expense register

Namespace OneStream.BusinessRule.Extender.ENTtoEP_ITAM
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim DEBUG As Boolean = True
						Dim sp As New Stopwatch()
						sp.Start()
						
						Dim scenarioName As String = ScenarioDimHelper.GetNameFromID(si, si.WorkflowClusterPk.ScenarioKey)
						Dim timeName As String = BRApi.Finance.Time.GetNameFromId(si, si.WorkflowClusterPk.TimeKey)
						Dim packageName As String = args.NameValuePairs.XFGetValue("packageName")
						
						Dim CurrentCV As String = String.Empty
						Dim param_GLlist As String = String.Empty
						
						If packageName.XFEqualsIgnoreCase("ITAM")
							CurrentCV = "FDX_Data_Extract_ITAM"
							param_GLlist = "ITAM_GLs"
						ElseIf packageName.XFEqualsIgnoreCase("ANAPLAN_MKT")
'							CurrentCV = "FDX_Data_Extract_PK05"
'							param_GLlist = "PK05_DriverBased_GLs"
						End If
						
						If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "packageName:" & packageName)
						If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "CurrentCV:" & CurrentCV)
						If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "param_GLlist:" & param_GLlist)
						
						Dim cvParams As New Dictionary(Of String, String)
						Dim dt As New DataTable
						'create dt by cube view rendering
						dt = CVRender(si, CurrentCV , cvParams)
						If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "ENT_to_EXP dt1:", PrintDT(si,dt).ToString)
						
						'get gl list for selected pkg
						Dim gl_list As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, param_GLlist)
						gl_list = gl_list.Replace(",", "','")
						If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "gl list:", gl_list)
						
						
						
						If dt IsNot Nothing AndAlso dt.Rows.Count > 0 Then
							
							'transform dt into loadable format
							Dim cube_dt As New DataTable
							cube_dt = Me.TransformDT(si, dt, scenarioName, timeName)
							If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "ENT_to_EXP dt2:", PrintDT(si,cube_dt).ToString)
							
							'load to expense register
							Dim sql As New Text.StringBuilder
							sql.Append("DELETE FROM [XFW_NonWage_Register] Where GL IN ('" & gl_list & "')")
							Using dbExtConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								BRAPi.Database.ExecuteActionQuery(dbExtConn, sql.ToString, False, False)
								Using objSQLBulkCopy As New SqlBulkCopy(dbExtConn.ConnectionString)
									For Each dc As DataColumn In cube_dt.Columns
				                        objSQLBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName)
				                    Next
				                    objSQLBulkCopy.DestinationTableName = "XFW_NonWage_Register"
				                    objSQLBulkCopy.WriteToServer(cube_dt)
								End Using
							End Using
							
						End If
						
						
						sp.Stop()
						If DEBUG Then BRApi.ErrorLog.LogMessage(si, "ENT_to_EXP Execution Time(ms):" & sp.ElapsedMilliseconds)
					
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		#Region "Helper Functions"
		Public Function CVRender(ByRef si As SessionInfo, ByVal cubeViewName As String, ByVal vParams As Dictionary(Of String, String)) As DataTable
			Dim value As New NameValueFormatBuilder 
			Dim instance As New XFIfActionExpr("CVFilter", value)
			value = instance.NameValueFormatBuilder
			value.ApplyNameValuePairsFromDictionary(vParams)
			Dim entityDimensionName As String = ""
			Dim entityMemFilter As String = ""
			Dim scenarioDimName As String = ""
			Dim scenarioMemFilter As String = ""
			Dim timeMemFilter As String = ""
			Dim includeCellTextCols As Boolean = False
			Dim useStandardFactTableFields As Boolean = True
			Dim useGenericTimeColNames As Boolean = True
			Dim parallelQueryCount As Integer = 8
			Dim logStatistics As Boolean = False
			Dim dt As DataTable = Nothing
			Try
				dt = BRApi.Import.Data.FdxExecuteCubeViewTimePivot(si, cubeViewName, entityDimensionName, entityMemFilter, scenarioDimName, scenarioMemFilter, timeMemFilter, value, includeCellTextCols, useStandardFactTableFields, True, Nothing, parallelQueryCount, logStatistics)
				If dt IsNot Nothing Then					
					Return dt
				Else
					Return Nothing
				End If
			Catch e As Exception
				Brapi.ErrorLog.LogMessage(si,$"getCV({cubeviewName}, {string.Join(":", vParams)}) failed with error - {e}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try
		End Function
		
		'to print datatable in log
		Private Function PrintDT(ByVal si As SessionInfo, ByVal dt As DataTable) As Text.StringBuilder
			Try
				Dim sCSV As New Text.StringBuilder
				If dt IsNot Nothing Then
					If dt.Rows.Count > 0 Then
						
						For Each dc As DataColumn In dt.Columns
							sCSV.Append(dc.ColumnName & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
						For Each dr As DataRow In dt.Rows
							For Each dc As DataColumn In dt.Columns
		     					sCSV.Append(dr(dc).ToString & ",")
							Next
							sCSV.Remove(sCSV.Length-1,1)
							sCSV.Append(Environment.NewLine)
						Next
					End If
				End If
				Return sCSV
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
    	End Function
		
		'transform dt to load to expense register
		Private Function TransformDT(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal scenarioName As String, ByVal timeName As String) As DataTable
			Try	
						'select required column
						Dim view As New DataView(dt)
						dt = view.ToTable(False, "Entity","Account","UD2","Time1","Time2","Time3","Time4","Time5","Time6","Time7","Time8","Time9","Time10","Time11","Time12","Time13")
						
'						rename colmuns 
						dt.Columns("Entity").ColumnName = "CostCenter"
						dt.Columns("Account").ColumnName = "GL"
						dt.Columns("UD2").ColumnName = "TF_2"
						dt.Columns("Time1").ColumnName = "P01"
						dt.Columns("Time2").ColumnName = "P02"
						dt.Columns("Time3").ColumnName = "P03"
						dt.Columns("Time4").ColumnName = "P04"
						dt.Columns("Time5").ColumnName = "P05"
						dt.Columns("Time6").ColumnName = "P06"
						dt.Columns("Time7").ColumnName = "P07"
						dt.Columns("Time8").ColumnName = "P08"
						dt.Columns("Time9").ColumnName = "P09"
						dt.Columns("Time10").ColumnName = "P10"
						dt.Columns("Time11").ColumnName = "P11"
						dt.Columns("Time12").ColumnName = "P12"
						dt.Columns("Time13").ColumnName = "YearTotal"
						
						'prepare dt to push to expense register
						Dim VBOCCdict As New Dictionary(Of String, String)
						Dim VBOCCdt As New DataTable
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							VBOCCdt = BRAPi.Database.ExecuteSql(dbConnApp,"SELECT WORKFLOW_PROFILE_VBO,COST_CENTER FROM [dbo].[XFW_ExpensePlanning_VBO_CC_Mappings]", False)   
						End Using	
						For Each VBOCCdr As DataRow In VBOCCdt.Rows
							Try
								VBOCCdict.Add(VBOCCdr("COST_CENTER"),VBOCCdr("WORKFLOW_PROFILE_VBO"))
							Catch ex As Exception
								Continue For
							End Try
						Next
						dt.Columns.Add("UniqueID",GetType(Guid))
						dt.Columns.Add("TF_3")
						dt.Columns.Add("WFProfileName")
						dt.Columns.Add("WFScenarioName")
						dt.Columns.Add("WFTimeName")
						dt.Columns.Add("LineItem")
						dt.Columns.Add("TF_11")
						dt.Columns.Add("UserID")
						
						If dt.Rows.Count > 0
							For Each dr As DataRow In dt.Rows
								dr("UniqueID") = Guid.NewGuid
								If VBOCCDict.ContainsKey(dr("CostCenter"))
									dr("WFProfileName") = VBOCCdict.Item(dr("CostCenter")) & ".ITAM"
								End If
								dr("WFScenarioName") = scenarioName
								dr("WFTimeName") = timeName
								dr("LineItem") = 1
								dr("YearTotal")= dr("P01").TOString.XFConvertToDecimal + dr("P02").TOString.XFConvertToDecimal + dr("P03").ToString.XFConvertToDecimal + dr("P04").ToString.XFConvertToDecimal + dr("P05").ToString.XFConvertToDecimal + dr("P06").ToString.XFConvertToDecimal + dr("P07").ToString.XFConvertToDecimal + dr("P08").ToString.XFConvertToDecimal + dr("P09").ToString.XFConvertToDecimal + dr("P10").ToString.XFConvertToDecimal + dr("P11").ToString.XFConvertToDecimal + dr("P12").ToString.XFConvertToDecimal
								dr("TF_11") = "Local Currency"
								dr("UserID") = BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName).User.Description
							Next	
						End If
						Return dt
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EP_AuditLog">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.EP_AuditLog
	Public Class MainClass
		
		Public Const days = 5
		Public Const tablename = "XFW_NonWage_Register_AuditLog"
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown, ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						RunArchive(si, tablename, days)
					
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Sub RunArchive(ByVal si As SessionInfo, ByVal table As String, ByVal day As Integer)
			Try
				Dim sql As New Text.StringBuilder
				Dim ts As String = DateTime.Now.ToString("yyyyMMdd_HHmmss")
				
'				sql.AppendLine("DROP TABLE " & table & "_Archived")
				sql.AppendLine("If NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '" & table & "_Archived_" & ts & "' )")
				sql.AppendLine("BEGIN")
				sql.AppendLine("SELECT * INTO " & table & "_Archived_" & ts & " FROM " & table & " WHERE Updated_On>= DATEADD(day, -" & day.ToString & ", CURRENT_TIMESTAMP)")
				sql.AppendLine("END")
				sql.AppendLine("DELETE FROM " & table & " WHERE Updated_On>= DATEADD(day, -" & day.ToString & ", CURRENT_TIMESTAMP)")
				
				Using dbconnApp As DbConnInfoApp = BRApi.Database.CreateApplicationDbConnInfo(si)
					BRApi.Database.ExecuteActionQuery(dbconnApp, sql.ToString, False, False)
				End Using
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub	
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EP_Backup">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_SharedConstants" />
            </referencedAssemblies>
            <sourceCode><![CDATA['Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports OneStream.BusinessRule.DashboardStringFunction.EP_SharedConstants

Namespace OneStream.BusinessRule.Extender.EP_Backup
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown, ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
'					Dim Year As String = args.NameValuePairs.XFGetValue("Year")
'					Dim Scenario As String = args.NameValuePairs.XFGetValue("Scenario")
'					Dim VBO As String = args.NameValuePairs.XFGetValue("VBO")
					Dim ts As String = DateTime.Now.ToString("yyyyMMdd")
					Dim sql As String=String.Empty
'					If VBO.XFContainsIgnoreCase("Walmart_Total_Company")
'						Dim AllVBOList As New Text.StringBuilder
'						Dim dt As New DataTable
'						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'							dt = BRAPi.Database.ExecuteSql(dbConnApp,"SELECT DISTINCT WORKFLOW_PROFILE_VBO FROM [dbo].[" & EPSharedConstants.sVBOCCMappingTable & "]", False)   
'						End Using
						
'						If dt IsNot Nothing
'							If dt.Rows.Count > 0
'								For Each dr As DataRow In dt.Rows
'									AllVBOList.Append("'" & dr("WORKFLOW_PROFILE_VBO") &  "',")
'								Next
'							End If
'						End If
'						AllVBOList.Remove(AllVBOList.Length-1,1)
						
						
'						sql  = "SELECT * INTO XFW_NonWage_Register_" & ts & " FROM XFW_NonWage_Register WHERE WFTimeName ='" & Year & "' AND WFScenarioName='" & Scenario & "' AND WFProfileName IN '" & AllVBOList.ToString & "' "
'                    Else
'						sql  = "SELECT * INTO XFW_NonWage_Register_" & ts & " FROM XFW_NonWage_Register WHERE WFTimeName ='" & Year & "' AND WFScenarioName='" & Scenario & "' AND WFProfileName LIKE '%"& VBO &"%' "
'			        End If
'					Dim userid As String = si.UserName
					sql  = "SELECT * INTO XFW_NonWage_Register_Bkp_" & ts & " FROM XFW_NonWage_Register"

					Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
						BRApi.Database.ExecuteActionQuery(dbConnApp, sql, False, False)
					End Using
					
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EP_CORP_ALLOC_ADJ_CALC">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.EP_CORP_ALLOC_ADJ_CALC
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Corp_Alloc_Adj_Calc(si)
					
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		Public Function Corp_Alloc_Adj_Calc(ByVal si As SessionInfo) 
'			 BRApi.ErrorLog.LogMessage(si,"inside function corp")
			 Dim dt_src As New DataTable
			 Dim dt_src_calc As DataTable = Nothing
			  Dim dt_trg_calc As New DataTable
			  Dim dt_trg As New DataTable
			  Dim scenarioName As String = ScenarioDimHelper.GetNameFromID(si, si.WorkflowClusterPk.ScenarioKey)
				Dim timeName As String = BRApi.Finance.Time.GetNameFromId(si, si.WorkflowClusterPk.TimeKey)	
			 Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'										dt_src = BRAPi.Database.ExecuteSql(dbConnApp, "Select UniqueID, WFProfileName, WFScenarioName, WFTimeName, Src_Cube, Src_Cur, Src_CC, Src_Acc, Src_CT,Trg_Cur, UserID, TS, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, YearTotal From XFW_CorpAllocAdj_Input", False)
										dt_src = BRAPi.Database.ExecuteSql(dbConnApp, "Select UniqueID,WFProfileName,WFScenarioName,WFTimeName,Src_Cube,Src_Cur,Src_CC,Src_Acc,Src_CT,Trg_Cur,UserID,TS,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,YearTotal From XFW_CorpAllocAdj_Input", False)
										End Using
			Dim dt3 As New DataTable
'			 Dim col1 As New DataColumn	
'			 col1.ColumnName = "TypeofConv"
'			 col1.DataType = GetType(String)
'			 col1.DefaultValue = "Sender in Local"
			 
'			 dt_src.Columns.Add(col1)
'				dt_src.Columns.Add(New DataColumn("TypeofConv", GetType(String)))
'			 dt_src.Columns("TypeofConv").Expression="'Sender in Local'"
'			 dt_src.Columns("TypeofConv").ReadOnly=False				
'			 BRApi.ErrorLog.LogMessage(si,"after1",CSVBuilder(dt_src).ToString)
				BRApi.ErrorLog.LogMessage(si,"before1",CSVBuilder(dt_src).ToString)
			 dt_src_calc=dt_src.Copy()
			 BRApi.ErrorLog.LogMessage(si,"before2",CSVBuilder(dt_src_calc).ToString)
			 
			 For Each dr As datarow In dt_src_calc.Rows
				               Dim fxRateUSD As New fxratepkusingnames("AverageRate_USD_Plan",timeName,dr("Src_Cur"),dr("Trg_Cur"))
							   Dim fxrate As Decimal = BRApi.Finance.Data.GetStoredFxRate(si, fxRateUSD).Amount
							   If dr("Src_Cur").ToString.XFEqualsIgnoreCase("USD")
										fxrate = 1.0
							   End If
							   dr("UniqueID") = Guid.NewGuid
							   dr("M1")=dr("M1")*fxrate
							   dr("M2")=dr("M2")*fxrate
							   dr("M3")=dr("M3")*fxrate
							   dr("M4")=dr("M4")*fxrate
							   dr("M5")=dr("M5")*fxrate
							   dr("M6")=dr("M6")*fxrate
							   dr("M7")=dr("M7")*fxrate
							   dr("M8")=dr("M8")*fxrate
							   dr("M9")=dr("M9")*fxrate
							   dr("M10")=dr("M10")*fxrate
							   dr("M11")=dr("M11")*fxrate
							   dr("M12")=dr("M12")*fxrate
							   dr("YearTotal")=dr("YearTotal")*fxrate
'							   dr("TypeofConv")="Sender in USD"
							  
							   
			 Next
			 BRApi.ErrorLog.LogMessage(si,"after1",CSVBuilder(dt_src_calc).ToString)
			  BRApi.ErrorLog.LogMessage(si,"after11",CSVBuilder(dt_src).ToString)
 			
			 dt_src_calc.Merge(dt_src)
			 
			 BRApi.ErrorLog.LogMessage(si,"after2:" & dt_src_calc.Rows.Count.ToString,CSVBuilder(dt_src_calc).ToString)
								
								
'								log.AppendLine("entity - " + curEntity + " target amount -- " + source_amt_usd.ToString)
								
								
'			 Dim rows() As DataRow = dt.Select("Currency = '" & r("TF_3") & "' AND Scenario='" & r("WFScenarioName") & "'AND Time='" & r("WFTimeName") & "'")								 	 

'			 Dim dt_corp As New DataTable
'			 Dim sql As String = String.Empty
'			 sql = "SELECT *  FROM XFW_CorpAllocAdj_Input" 
'			 Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'					dt_corp = BRAPi.Database.ExecuteSql(dbConnApp, sql, False)   
'			 End Using
Return Nothing
    	End Function
		Public Function CSVBuilder(dt As DataTable) As Text.StringBuilder
			Dim sCSV As New Text.StringBuilder
			If dt IsNot Nothing Then
				If dt.Rows.Count > 0 Then
					
					For Each dc As DataColumn In dt.Columns
						sCSV.Append(dc.ColumnName & ",")
					Next
					sCSV.Remove(sCSV.Length-1,1)
					sCSV.Append(Environment.NewLine)
					For Each dr As DataRow In dt.Rows
						For Each dc As DataColumn In dt.Columns
	     					sCSV.Append(dr(dc).ToString & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
					Next
				End If
			End If
			Return sCSV
    	End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EP_CSV_Validations">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.EP_CSV_Validations
	Public Class MainClass
		Public Function CSV_Validation(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs, ByVal profileName As String, ByVal dt As DataTable) As Object
			Try
				For Each dr As DataRow In dt.Rows
				If dr("YearTotal") = "" Then
					dr("Error_Code") = "Warning"
					dr("Error_Message") = "Please enter yeartotal amount. The record will be ignored during import to table"
				Else
					If dr("CostCenter") = "" And dr("GL") = ""  Then
						errorflag = False
						dr("Error_Code") = "Error"
						dr("Error_Message") = "CostCenter/GL cannot be empty"
					ElseIf  dr("CostCenter") = "" And Not dr("GL") = ""  Then
						errorflag = False
						dr("Error_Code") = "Error"
						dr("Error_Message") = "CostCenter cannot be empty"
					ElseIf Not dr("CostCenter") = "" And dr("GL") = ""  Then
						errorflag = False
						dr("Error_Code") = "Error"
						dr("Error_Message") = "GL cannot be empty"
					Else
						If Not profileNameArray(0).Contains("ALL")
							If profileNameArray(1) = "Financial_Only"
								If Not VBOCCDict.ContainsKey(dr("CostCenter")) And Not GLNameDict.ContainsKey(dr("GL"))
									errorflag = False
									dr("Error_Code") = "Error"
									dr("Error_Message") = "CostCenter and GL do not exist"
								ElseIf Not VBOCCDict.ContainsKey(dr("CostCenter")) And GLNameDict.ContainsKey(dr("GL"))
									errorflag = False
									dr("Error_Code") = "Error"
									dr("Error_Message") = "CostCenter does not exist"
								ElseIf VBOCCDict.ContainsKey(dr("CostCenter")) And Not GLNameDict.ContainsKey(dr("GL"))
									errorflag = False
									dr("Error_Code") = "Error"
									dr("Error_Message") = "GL does not exist"
								Else
									If Not entityNameList.Contains(dr("CostCenter")) And Not GLNameDict.Item(dr("GL"))(1).XFEqualsIgnoreCase("Financial")
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "CostCenter does not belong to selected VBO and GL does not belong to financial planning methodology"
									ElseIf entityNameList.Contains(dr("CostCenter")) And Not GLNameDict.Item(dr("GL"))(1).XFEqualsIgnoreCase("Financial")
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "GL does not belong to financial planning methodology"
									ElseIf Not entityNameList.Contains(dr("CostCenter")) And GLNameDict.Item(dr("GL"))(1).XFEqualsIgnoreCase("Financial")
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "CostCenter does not belong to selected VBO"
									Else
										dr("Error_Code") = "Success"
									End If
								End If
							  ElseIf profileNameArray(1).Substring(0,2) = "16"
							  	Dim profservcdt As New DataTable
								Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
										profservcdt = BRAPi.Database.ExecuteSql(dbConnApp, "Select Value From [dbo].[XFW_ExpensePlanning_DropDowns] Where DropDown_Type='Professional_Services_Type'", False)   
								End Using
								Dim profservclist As New List(Of String)
								If profservcdt.Rows.Count > 0 Then
									For Each profservcdr As DataRow In profservcdt.Rows
										profservclist.Add(profservcdr("Value"))
									Next	
								End If
							  	If Not VBOCCDict.ContainsKey(dr("CostCenter")) And Not GLNameDict.ContainsKey(dr("GL")) And Not profservclist.Contains(dr("TF_5"))
									errorflag = False
									dr("Error_Code") = "Error"
									dr("Error_Message") = "CostCenter,GL and Professional Services Type do not exist"
								ElseIf VBOCCDict.ContainsKey(dr("CostCenter")) And Not GLNameDict.ContainsKey(dr("GL")) And Not profservclist.Contains(dr("TF_5"))
									errorflag = False
									dr("Error_Code") = "Error"
									dr("Error_Message") = "GL and Professional Services Type do not exist"
								ElseIf Not VBOCCDict.ContainsKey(dr("CostCenter")) And GLNameDict.ContainsKey(dr("GL")) And Not profservclist.Contains(dr("TF_5"))
									errorflag = False
									dr("Error_Code") = "Error"
									dr("Error_Message") = "CostCenter and Professional Services Type do not exist"
								ElseIf Not VBOCCDict.ContainsKey(dr("CostCenter")) And Not GLNameDict.ContainsKey(dr("GL")) And profservclist.Contains(dr("TF_5"))
									errorflag = False
									dr("Error_Code") = "Error"
									dr("Error_Message") = "CostCenter and GL do not exist"
								ElseIf Not VBOCCDict.ContainsKey(dr("CostCenter")) And GLNameDict.ContainsKey(dr("GL")) And profservclist.Contains(dr("TF_5"))
									errorflag = False
									dr("Error_Code") = "Error"
									dr("Error_Message") = "CostCenter does not exist"
								ElseIf  VBOCCDict.ContainsKey(dr("CostCenter")) And Not GLNameDict.ContainsKey(dr("GL")) And profservclist.Contains(dr("TF_5"))
									errorflag = False
									dr("Error_Code") = "Error"
									dr("Error_Message") = "GL does not exist"
								ElseIf VBOCCDict.ContainsKey(dr("CostCenter")) And GLNameDict.ContainsKey(dr("GL")) And Not profservclist.Contains(dr("TF_5"))
									errorflag = False
									dr("Error_Code") = "Error"
									dr("Error_Message") = "Professional Services Type does not exist"
								Else
									If Not entityNameList.Contains(dr("CostCenter")) And Not GLNameDict.Item(dr("GL"))(1).XFEqualsIgnoreCase("Itemized_Standard")
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "CostCenter does not belong to selected VBO and GL does not belong to itemized/standard planning methodology"
									ElseIf entityNameList.Contains(dr("CostCenter")) And Not GLNameDict.Item(dr("GL"))(1).XFEqualsIgnoreCase("Itemized_Standard")
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "GL does not belong to itemized/standard planning methodology"
									ElseIf Not entityNameList.Contains(dr("CostCenter")) And GLNameDict.Item(dr("GL"))(1).XFEqualsIgnoreCase("Itemized_Standard")
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "CostCenter does not belong to selected VBO"
									Else
										dr("Error_Code") = "Success"
									End If
								End If
							ElseIf profileNameArray(1).Substring(0,2) = "09"
								Dim ofcsupplydt As New DataTable
								Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
										ofcsupplydt = BRAPi.Database.ExecuteSql(dbConnApp, "Select Value From [dbo].[XFW_ExpensePlanning_DropDowns] Where DropDown_Type='Office_Supply_Type'", False)   
								End Using
								Dim ofcsupplylist As New List(Of String)
								If ofcsupplydt.Rows.Count > 0 Then
									For Each ofcsupplydr As DataRow In ofcsupplydt.Rows
										ofcsupplylist.Add(ofcsupplydr("Value"))
									Next	
								End If
							  	If Not VBOCCDict.ContainsKey(dr("CostCenter")) And Not GLNameDict.ContainsKey(dr("GL")) And Not ofcsupplylist.Contains(dr("TF_9"))
									errorflag = False
									dr("Error_Code") = "Error"
									dr("Error_Message") = "CostCenter,GL and Office Supply Type do not exist"
								ElseIf VBOCCDict.ContainsKey(dr("CostCenter")) And Not GLNameDict.ContainsKey(dr("GL")) And Not ofcsupplylist.Contains(dr("TF_9"))
									errorflag = False
									dr("Error_Code") = "Error"
									dr("Error_Message") = "GL and Office Supply Type do not exist"
								ElseIf Not VBOCCDict.ContainsKey(dr("CostCenter")) And GLNameDict.ContainsKey(dr("GL")) And Not ofcsupplylist.Contains(dr("TF_9"))
									errorflag = False
									dr("Error_Code") = "Error"
									dr("Error_Message") = "CostCenter and Office Supply Type do not exist"
								ElseIf Not VBOCCDict.ContainsKey(dr("CostCenter")) And Not GLNameDict.ContainsKey(dr("GL")) And ofcsupplylist.Contains(dr("TF_9"))
									errorflag = False
									dr("Error_Code") = "Error"
									dr("Error_Message") = "CostCenter and GL do not exist"
								ElseIf Not VBOCCDict.ContainsKey(dr("CostCenter")) And GLNameDict.ContainsKey(dr("GL")) And ofcsupplylist.Contains(dr("TF_9"))
									errorflag = False
									dr("Error_Code") = "Error"
									dr("Error_Message") = "CostCenter does not exist"
								ElseIf  VBOCCDict.ContainsKey(dr("CostCenter")) And Not GLNameDict.ContainsKey(dr("GL")) And ofcsupplylist.Contains(dr("TF_9"))
									errorflag = False
									dr("Error_Code") = "Error"
									dr("Error_Message") = "GL does not exist"
								ElseIf VBOCCDict.ContainsKey(dr("CostCenter")) And GLNameDict.ContainsKey(dr("GL")) And Not ofcsupplylist.Contains(dr("TF_9"))
									errorflag = False
									dr("Error_Code") = "Error"
									dr("Error_Message") = "Office Supply Type does not exist"
								Else
									If Not entityNameList.Contains(dr("CostCenter")) And Not GLNameDict.Item(dr("GL"))(1).XFEqualsIgnoreCase("Itemized_Standard")
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "CostCenter does not belong to selected VBO and GL does not belong to itemized/standard planning methodology"
									ElseIf entityNameList.Contains(dr("CostCenter")) And Not GLNameDict.Item(dr("GL"))(1).XFEqualsIgnoreCase("Itemized_Standard")
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "GL does not belong to itemized/standard planning methodology"
									ElseIf Not entityNameList.Contains(dr("CostCenter")) And GLNameDict.Item(dr("GL"))(1).XFEqualsIgnoreCase("Itemized_Standard")
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "CostCenter does not belong to selected VBO"
									Else
										dr("Error_Code") = "Success"
									End If
								End If
							ElseIf profileNameArray(1).Substring(0,2) = "11"
								If Not VBOCCDict.ContainsKey(dr("CostCenter")) And Not GLNameDict.ContainsKey(dr("GL"))
									errorflag = False
									dr("Error_Code") = "Error"
									dr("Error_Message") = "CostCenter and GL do not exist"
								ElseIf Not VBOCCDict.ContainsKey(dr("CostCenter")) And GLNameDict.ContainsKey(dr("GL"))
									errorflag = False
									dr("Error_Code") = "Error"
									dr("Error_Message") = "CostCenter does not exist"
								ElseIf VBOCCDict.ContainsKey(dr("CostCenter")) And Not GLNameDict.ContainsKey(dr("GL"))
									errorflag = False
									dr("Error_Code") = "Error"
									dr("Error_Message") = "GL does not exist"
								Else
									If Not entityNameList.Contains(dr("CostCenter")) And Not GLNameDict.Item(dr("GL"))(1).XFEqualsIgnoreCase("Itemized_Standard")
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "CostCenter does not belong to selected VBO and GL does not belong to itemized/standard planning methodology"
									ElseIf entityNameList.Contains(dr("CostCenter")) And Not GLNameDict.Item(dr("GL"))(1).XFEqualsIgnoreCase("Itemized_Standard")
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "GL does not belong to financial itemized/standard methodology"
									ElseIf Not entityNameList.Contains(dr("CostCenter")) And GLNameDict.Item(dr("GL"))(1).XFEqualsIgnoreCase("Itemized_Standard")
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "CostCenter does not belong to selected VBO"
									Else
										dr("Error_Code") = "Success"
									End If
								End If
							ElseIf profileNameArray(1).Substring(0,2) = "12"
								Dim PK12_subpackage As String = BRApi.State.GetSessionState(si, False, clientModuleType.Windows, String.Empty, String.Empty, "PK12_SelectedSubPackage", String.Empty).TextValue
								If PK12_subpackage.XFEqualsIgnoreCase("0_frame_ExpensePlanning_PK12_03") Then
									Dim casualtyfeetypedt As New DataTable
									Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
										casualtyfeetypedt = BRAPi.Database.ExecuteSql(dbConnApp, "Select Value From [dbo].[XFW_ExpensePlanning_DropDowns] Where DropDown_Type='Casualty Insurance or Fee Type'", False)   
									End Using
									Dim casualtyfeetypelist As New List(Of String)
									If casualtyfeetypedt.Rows.Count > 0 Then
										For Each casualtyfeetypedr As DataRow In casualtyfeetypedt.Rows
											casualtyfeetypelist.Add(casualtyfeetypedr("Value"))
										Next
									End If
									If Not VBOCCDict.ContainsKey(dr("CostCenter")) And Not GLNameDict.ContainsKey(dr("GL")) And Not casualtyfeetypelist.Contains(dr("TF_7"))
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "CostCenter,GL and Casualty Insurance or Fee Type do not exist"
									ElseIf VBOCCDict.ContainsKey(dr("CostCenter")) And Not GLNameDict.ContainsKey(dr("GL")) And Not casualtyfeetypelist.Contains(dr("TF_7"))
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "GL and Casualty Insurance or Fee Type do not exist"
									ElseIf Not VBOCCDict.ContainsKey(dr("CostCenter")) And GLNameDict.ContainsKey(dr("GL")) And Not casualtyfeetypelist.Contains(dr("TF_7"))
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "CostCenter and Casualty Insurance or Fee Type do not exist"
									ElseIf Not VBOCCDict.ContainsKey(dr("CostCenter")) And Not GLNameDict.ContainsKey(dr("GL")) And casualtyfeetypelist.Contains(dr("TF_7"))
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "CostCenter and GL do not exist"
									ElseIf Not VBOCCDict.ContainsKey(dr("CostCenter")) And GLNameDict.ContainsKey(dr("GL")) And casualtyfeetypelist.Contains(dr("TF_7"))
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "CostCenter does not exist"
									ElseIf  VBOCCDict.ContainsKey(dr("CostCenter")) And Not GLNameDict.ContainsKey(dr("GL")) And casualtyfeetypelist.Contains(dr("TF_7"))
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "GL does not exist"
									ElseIf VBOCCDict.ContainsKey(dr("CostCenter")) And GLNameDict.ContainsKey(dr("GL")) And Not casualtyfeetypelist.Contains(dr("TF_7"))
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "Casualty Insurance or Fee Type does not exist"
									Else
										If Not entityNameList.Contains(dr("CostCenter")) And Not GLNameDict.Item(dr("GL"))(1).XFEqualsIgnoreCase("Itemized_Standard")
											errorflag = False
											dr("Error_Code") = "Error"
											dr("Error_Message") = "CostCenter does not belong to selected VBO and GL does not belong to itemized/standard planning methodology"
										ElseIf entityNameList.Contains(dr("CostCenter")) And Not GLNameDict.Item(dr("GL"))(1).XFEqualsIgnoreCase("Itemized_Standard")
											errorflag = False
											dr("Error_Code") = "Error"
											dr("Error_Message") = "GL does not belong to itemized/standard planning methodology"
										ElseIf Not entityNameList.Contains(dr("CostCenter")) And GLNameDict.Item(dr("GL"))(1).XFEqualsIgnoreCase("Itemized_Standard")
											errorflag = False
											dr("Error_Code") = "Error"
											dr("Error_Message") = "CostCenter does not belong to selected VBO"
										Else
											dr("Error_Code") = "Success"
										End If
									End If
								ElseIf PK12_subpackage.XFEqualsIgnoreCase("0_frame_ExpensePlanning_PK12_04") Then
									Dim propertyfeetypedt As New DataTable
									Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
										propertyfeetypedt = BRAPi.Database.ExecuteSql(dbConnApp, "Select Value From [dbo].[XFW_ExpensePlanning_DropDowns] Where DropDown_Type='Property Insurance Expense Type'", False)   
									End Using
									Dim propertyfeetypelist As New List(Of String)
									If propertyfeetypedt.Rows.Count > 0 Then
										For Each propertyfeetypedr As DataRow In propertyfeetypedt.Rows
											propertyfeetypelist.Add(propertyfeetypedr("Value"))
										Next
									End If
									If Not VBOCCDict.ContainsKey(dr("CostCenter")) And Not GLNameDict.ContainsKey(dr("GL")) And Not propertyfeetypelist.Contains(dr("TF_8"))
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "CostCenter,GL and Property Insurance Expense Type do not exist"
									ElseIf VBOCCDict.ContainsKey(dr("CostCenter")) And Not GLNameDict.ContainsKey(dr("GL")) And Not propertyfeetypelist.Contains(dr("TF_8"))
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "GL and Property Insurance Expense Type do not exist"
									ElseIf Not VBOCCDict.ContainsKey(dr("CostCenter")) And GLNameDict.ContainsKey(dr("GL")) And Not propertyfeetypelist.Contains(dr("TF_8"))
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "CostCenter and Property Insurance Expense Type do not exist"
									ElseIf Not VBOCCDict.ContainsKey(dr("CostCenter")) And Not GLNameDict.ContainsKey(dr("GL")) And propertyfeetypelist.Contains(dr("TF_8"))
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "CostCenter and GL do not exist"
									ElseIf Not VBOCCDict.ContainsKey(dr("CostCenter")) And GLNameDict.ContainsKey(dr("GL")) And propertyfeetypelist.Contains(dr("TF_8"))
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "CostCenter does not exist"
									ElseIf  VBOCCDict.ContainsKey(dr("CostCenter")) And Not GLNameDict.ContainsKey(dr("GL")) And propertyfeetypelist.Contains(dr("TF_8"))
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "GL does not exist"
									ElseIf VBOCCDict.ContainsKey(dr("CostCenter")) And GLNameDict.ContainsKey(dr("GL")) And Not propertyfeetypelist.Contains(dr("TF_8"))
										errorflag = False
										dr("Error_Code") = "Error"
										dr("Error_Message") = "Property Insurance Expense Type does not exist"
									Else
										If Not entityNameList.Contains(dr("CostCenter")) And Not GLNameDict.Item(dr("GL"))(1).XFEqualsIgnoreCase("Itemized_Standard")
											errorflag = False
											dr("Error_Code") = "Error"
											dr("Error_Message") = "CostCenter does not belong to selected VBO and GL does not belong to itemized/standard planning methodology"
										ElseIf entityNameList.Contains(dr("CostCenter")) And Not GLNameDict.Item(dr("GL"))(1).XFEqualsIgnoreCase("Itemized_Standard")
											errorflag = False
											dr("Error_Code") = "Error"
											dr("Error_Message") = "GL does not belong to itemized/standard planning methodology"
										ElseIf Not entityNameList.Contains(dr("CostCenter")) And GLNameDict.Item(dr("GL"))(1).XFEqualsIgnoreCase("Itemized_Standard")
											errorflag = False
											dr("Error_Code") = "Error"
											dr("Error_Message") = "CostCenter does not belong to selected VBO"
										Else
											dr("Error_Code") = "Success"
										End If
									End If
								End If
							End If
						End If
					End If
				End If
			Next

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EP_CurrencyConversion">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_SharedConstants" />
            </referencedAssemblies>
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports OneStream.BusinessRule.DashboardStringFunction.EP_SharedConstants
#End Region
#Region "Rule Change Mgmt"
'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 - - Integration Functions
	'Mods:		
'--------------------------------------------------------------------------------------------------------------------------------------------
#End Region
Namespace OneStream.BusinessRule.Extender.EP_CurrencyConversion
	Public Class MainClass
		#Region "Main"
		Dim DEBUG As Boolean = False
		Public Shared UniqueIdsCurr As String
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
'						Dim uniqueid_local As String = String.Empty
''						BRApi.ErrorLog.LogMessage(si, "fx rates", GetFXRates(si, "2023M1", "GJ07248").ToString)
'						If BRApi.State.GetSessionState(si, False, clientModuleType.Windows, String.Empty, String.Empty, "uniqueIDsToAdd", String.Empty) IsNot Nothing
'							uniqueid_local  = BRApi.State.GetSessionState(si, False, ClientModuleType.Windows, String.Empty, String.Empty, "uniqueIDsToAdd", String.Empty).TextValue
'						End If
'						If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "uniqueid_local", uniqueid_local)
'						Dim dt_tempreg As DataTable = Nothing
'						Dim sqltemp =  "Select * From [dbo].[XFW_NonWage_TempRegister] Where UniqueID IN (" & uniqueid_local & ") AND UserID = '" & BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName).User.Description & "' AND Error_Code='Success'"
'						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'							dt_tempreg = BRAPi.Database.ExecuteSql(dbConnApp,sqltemp.ToString, False)
'						End Using
'						If DEBUG Then PrintDT(si, "dt_tempreg", dt_tempreg)
''						Dim uniqueid_reporting As Dictionary(Of String,DataTable) = CurrencyConversion(si,2023,dt_tempreg,"Spreadsheet")
'						If DEBUG Then BRApi.ErrorLog.LogMessage(si, "uniqueid_reporting", uniqueid_reporting.Keys.ToString)
'						GetAllFXRates(si,"Plan_Working",2023)
'						Dim Source_Scenario As String = args.NameValuePairs.XFGetValue("Source_Scenario")
'						Dim Source_PlanYear As String = args.NameValuePairs.XFGetValue("Source_PlanYear")
						Dim Scenario As String = args.NameValuePairs.XFGetValue("Scenario")
						Dim PlanYear As String = args.NameValuePairs.XFGetValue("PlanYear").ToString
						Dim TargetApp As String = args.NameValuePairs.XFGetValue("TargetApp")
						Dim target_si As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si,TargetApp,openAppResult.Success)
						SetAllFXRates(si,target_si,Scenario,PlanYear)
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		#Region "Helper Functions"
		Public Function GetFXRates(ByVal si As SessionInfo, ByVal time As String, ByVal costcenter As String) As Decimal
			Try	
				Dim ratetype As String = "AverageRate_USD_Plan"
				Dim	iEntityID As Integer = BRApi.Finance.Members.GetMemberId(si,dimtype.Entity.Id,costcenter)
				Dim fxRateUSD As New fxratepkusingnames(ratetype,time,BRApi.Finance.Entity.GetLocalCurrency(si, iEntityID).Name,"USD")
				Dim rate As Decimal = BRApi.Finance.Data.GetCalculatedFxRate(si,BRApi.Finance.Entity.GetLocalCurrency(si, iEntityID).Id,fxRateUSD)
				Return rate
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		'get fx rates in dt and store in a global obj
		Public Function GetAllFXRates(ByVal si As SessionInfo, ByVal scenarioName As String, ByVal planYear As Integer) As DataTable
			Try	
				Dim DEBUG_GetAllFXRates As Boolean = False
				Dim currencylist As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "Consolidation", "C#Currencies.Base", True)	
				
				Dim dt As New DataTable
				dt.Columns.Add("Scenario", GetType(String))
				dt.Columns.Add("Time", GetType(String))
				dt.Columns.Add("Currency", GetType(String))
				For i As Integer = 1 To 12
					dt.Columns.Add("M" & i.ToString, GetType(Decimal))
				Next
				
				
				Dim scenarioId As String = ScenarioDimHelper.GetIdFromName(si, scenarioName).ToString
				Dim objFxRateType As FxRateType = BRApi.Finance.Scenario.GetFxRateTypeForRevenueExpense(si, scenarioId)
				Dim ratetype As String = objFxRateType.Name
				
				For Each currency In currencylist
					Dim row As DataRow = dt.NewRow
					row("Scenario") = scenarioName
					row("Time") = planYear.ToString
					row("Currency") = currency.Member.Name
					For i As Integer = 1 To 12
						Dim fxRateUSD As New fxratepkusingnames(ratetype,planYear.ToString & "M" & i,"USD",currency.Member.Name)
						If currency.Member.Name.XFEqualsIgnoreCase("USD")
							row("M" & i.ToString) = 1.00
						Else
							row("M" & i.ToString) = BRApi.Finance.Data.GetStoredFxRate(si, fxRateUSD).Amount
						End If
					Next
					dt.Rows.Add(row)
				Next
'				If DEBUG_GetAllFXRates Then PrintDT(si, "EP_FXRate dt", dt)
'				globals.SetObject("EP_FXRate", dt)
			Return dt
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		'set fx rates in other applications
		Public Sub SetAllFXRates(ByVal source_si As SessionInfo, ByVal target_si As SessionInfo, ByVal scenarioName As String, ByVal planYear As String)
			Try
				Dim scenarioId As String = ScenarioDimHelper.GetIdFromName(source_si, scenarioName).ToString
				Dim objFxRateType As FxRateType = BRApi.Finance.Scenario.GetFxRateTypeForRevenueExpense(source_si, scenarioId)
'				BRApi.ErrorLog.LogMessage(source_si, "scenarioName:" & scenarioName)
'				BRApi.ErrorLog.LogMessage(source_si, "planYear:" & planYear)
				
				Dim ratetype As String = objFxRateType.Name
'				BRApi.ErrorLog.LogMessage(source_si, "ratetype:" & ratetype)
				Dim currencylist As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(source_si, "Consolidation", "C#Currencies.Base", True)
				
				For Each currency In currencylist
					
					For i As Integer = 1 To 12
						Dim getfxRateUSD As New fxratepkusingnames(ratetype,planYear & "M" & i.ToString,"USD",currency.Member.Name)
						Dim amount As Decimal =  BRApi.Finance.Data.GetStoredFxRate(source_si, getfxRateUSD).Amount
					If amount <> Decimal.Zero
						Dim setfxRateUSD As New FxRateUsingNames(getfxRateUSD,amount)
						BRApi.Finance.Data.SetFxRate(target_si, setfxRateUSD)
					End If
					Next
					
				Next
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(source_si, New XFException(source_si, ex))
			End Try
		End Sub
		
		Public Function CurrencyConversion(ByVal si As SessionInfo, ByVal planyear As Integer, ByVal dt As DataTable, ByVal type As String ) As DataTable
			Try
				
'				
                Dim scenarioName As String = ScenarioDimHelper.GetNameFromID(si, si.WorkflowClusterPk.ScenarioKey)
'				Dim timeName As String = BRApi.Finance.Time.GetNameFromId(si, si.WorkflowClusterPk.TimeKey)
				Dim timeName As String=String.Empty
'				If type="ITAM"
					timeName="2023"
'				Else 
'					timeName="2022"
'				End If
'				If DEBUG Then PrintDT(si,"dtstart1",dt)
                Dim dt_curr_rates As DataTable= Me.GetAllFXRates(si,scenarioName,timename)
'				If DEBUG Then PrintDT(si,"dt_curr_rates",dt_curr_rates)
				Dim main_clone As  DataTable=dt.Copy()
'				If DEBUG Then PrintDT(si,"dtstart",main_clone)
			    
					For Each r As DataRow In main_clone.Rows
						Dim rows() As DataRow = dt_curr_rates.Select("Currency = '" & r("TF_3") & "' AND Scenario='" & r("WFScenarioName") & "'AND Time='" & timeName & "'")								 	 
                        If rows.Count > 0 Then
						
						r("UniqueID")= Guid.NewGuid
'						
						r("TF_3")= "USD"
						r("WFTimeName")=planyear
						r("TF_11")= "Reporting Currency"
						If Not IsDbNull(r("P01")) And Not IsDbNull(rows(0).Item("M1")) And (rows(0).Item("M1"))<>0  Then r("P01") = r("P01")/rows(0).Item("M1")
						If Not IsDbNull(r("P02")) And Not IsDbNull(rows(0).Item("M2")) And  (rows(0).Item("M2"))<>0  Then r("P02") = r("P02")/rows(0).Item("M2")
				    	If Not IsDbNull(r("P03")) And Not IsDbNull(rows(0).Item("M3")) And (rows(0).Item("M3"))<>0 Then r("P03") = r("P03")/rows(0).Item("M3")
				    	If Not IsDbNull(r("P04")) And Not IsDbNull(rows(0).Item("M4")) And  (rows(0).Item("M4"))<>0 Then r("P04") = r("P04")/rows(0).Item("M4")
						If Not IsDbNull(r("P05")) And Not IsDbNull(rows(0).Item("M5")) And  (rows(0).Item("M5"))<>0 Then r("P05") = r("P05")/rows(0).Item("M5")
						If Not IsDbNull(r("P06")) And Not IsDbNull(rows(0).Item("M6")) And  (rows(0).Item("M6"))<>0 Then r("P06") = r("P06")/rows(0).Item("M6")
						If Not IsDbNull(r("P07")) And Not IsDbNull(rows(0).Item("M7"))And  (rows(0).Item("M7"))<>0 Then r("P07") = r("P07")/rows(0).Item("M7")
						If Not IsDbNull(r("P08")) And Not IsDbNull(rows(0).Item("M8"))And  (rows(0).Item("M8"))<>0 Then r("P08") = r("P08")/rows(0).Item("M8")
						If Not IsDbNull(r("P09")) And Not IsDbNull(rows(0).Item("M9"))And  (rows(0).Item("M9"))<>0 Then r("P09") = r("P09")/rows(0).Item("M9")
						If Not IsDbNull(r("P10"))And Not IsDbNull(rows(0).Item("M10")) And (rows(0).Item("M10"))<>0  Then r("P10") = r("P10")/rows(0).Item("M10")
						If Not IsDbNull(r("P11")) And Not  IsDbNull(rows(0).Item("M11"))And  (rows(0).Item("M11"))<>0 Then r("P11") = r("P11")/rows(0).Item("M11")
						If Not IsDbNull(r("P12")) And Not IsDbNull(rows(0).Item("M12"))And  (rows(0).Item("M12"))<>0 Then r("P12") = r("P12")/rows(0).Item("M12")
						r("YearTotal") =r("P01").ToString.XFConvertToDecimal+r("P02").ToString.XFConvertToDecimal+r("P03").ToString.XFConvertToDecimal+r("P04").ToString.XFConvertToDecimal+r("P05").ToString.XFConvertToDecimal+r("P06").ToString.XFConvertToDecimal+r("P07").ToString.XFConvertToDecimal+r("P08").ToString.XFConvertToDecimal+r("P09").ToString.XFConvertToDecimal+r("P10").ToString.XFConvertToDecimal+r("P11").ToString.XFConvertToDecimal+r("P12").ToString.XFConvertToDecimal
							     
						 
					
				End If
				Next
				
				dt.Merge(main_clone)
				
'				If DEBUG Then PrintDT(si,"dtfin",dt)
'				
				
			Return dt
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		'to print datatable in log
		Public Sub PrintDT(ByVal si As SessionInfo, ByVal desc As String, ByVal dt As DataTable)
			Try
				Dim sCSV As New Text.StringBuilder
				If dt IsNot Nothing Then
					If dt.Rows.Count > 0 Then
						
						For Each dc As DataColumn In dt.Columns
							sCSV.Append(dc.ColumnName & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
						For Each dr As DataRow In dt.Rows
							For Each dc As DataColumn In dt.Columns
		     					sCSV.Append(dr(dc).ToString & ",")
							Next
							sCSV.Remove(sCSV.Length-1,1)
							sCSV.Append(Environment.NewLine)
						Next
					End If
				End If
				BRApi.ErrorLog.LogMessage(si, desc, sCSV.ToString)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
    	End Sub
		#End Region
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EP_CurrencyConversion_All">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_CurrencyConversion" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Data.SqlClient
Imports System.Diagnostics

Namespace OneStream.BusinessRule.Extender.EP_CurrencyConversion_All
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown, ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
					Dim Function_name As String=args.NameValuePairs.XFGetValue("Function_name")
					If Function_name.XFEqualsIgnoreCase("CurrencyConversion")
						Me.CurrencyConversion(si)
					End If
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		
        Public Sub CurrencyConversion(ByVal si As SessionInfo)
				Dim dt_curr As New DataTable
				Dim scenarioName As String = ScenarioDimHelper.GetNameFromID(si, si.WorkflowClusterPk.ScenarioKey)
				Dim timeName As String = BRApi.Finance.Time.GetNameFromId(si, si.WorkflowClusterPk.TimeKey)
				Dim obj = New OneStream.BusinessRule.Extender.EP_CurrencyConversion.MainClass
				dt_curr = obj.GetAllFXRates(si,scenarioName,timename)
				Dim Year As String=BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "AOP_Year")

				Dim dt_all_cc_mainreg As New DataTable
				Dim sql =  "Select * From [dbo].[XFW_NonWage_Register] Where TF_11='Local Currency'AND WFTimeName='" & Year & "'"
				
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_all_cc_mainreg = BRAPi.Database.ExecuteSql(dbConnApp,sql.ToString, False)
				End Using
				If dt_all_cc_mainreg.Rows.Count>0 And dt_all_cc_mainreg IsNot Nothing
				For Each datarow As DataRow In dt_all_cc_mainreg.Rows
				   
					 Dim rows() As DataRow = dt_curr.Select("Currency = '" & datarow("TF_3") & "'  AND Scenario='" & datarow("WFScenarioName") & "' AND Time='" & Year & "'")
					 
					 If rows.Count > 0 Then
						 datarow("WFProfileName") = datarow("WFProfileName")
						 datarow("UniqueID")= Guid.NewGuid
						 datarow("WFScenarioName") = datarow("WFScenarioName")
					 	 datarow("WFTimeName") = datarow("WFTimeName")
						 datarow("CostCenter")= datarow("CostCenter")
						 datarow("TF_3")= "USD"
						 datarow("LineItem")= datarow("LineItem")
						 datarow("GL")= datarow("GL")
						 datarow("TF_11") = "Reporting Currency"
						 If Not IsDbNull(datarow("P01")) And Not IsDbNull(rows(0).Item("M1"))  And (rows(0).Item("M1"))<>0 Then datarow("P01") = datarow("P01")/rows(0).Item("M1")
						 If Not IsDbNull(datarow("P02")) And Not IsDbNull(rows(0).Item("M2"))  And (rows(0).Item("M2"))<>0 Then datarow("P02") = datarow("P02")/rows(0).Item("M2")
						 If Not IsDbNull(datarow("P03")) And  Not IsDbNull(rows(0).Item("M3")) And (rows(0).Item("M3"))<>0 Then datarow("P03") = datarow("P03")/rows(0).Item("M3")
						 If Not IsDbNull(datarow("P04")) And Not IsDbNull(rows(0).Item("M4"))  And (rows(0).Item("M4"))<>0 Then datarow("P04") = datarow("P04")/rows(0).Item("M4")
						 If Not IsDbNull(datarow("P05")) And Not IsDbNull(rows(0).Item("M5"))  And (rows(0).Item("M5"))<>0 Then datarow("P05") = datarow("P05")/rows(0).Item("M5")
						 If Not IsDbNull(datarow("P06")) And Not IsDbNull(rows(0).Item("M6"))  And (rows(0).Item("M6"))<>0 Then datarow("P06") = datarow("P06")/rows(0).Item("M6")
					     If Not IsDbNull(datarow("P07")) And Not IsDbNull(rows(0).Item("M7"))  And (rows(0).Item("M7"))<>0 Then datarow("P07") = datarow("P07")/rows(0).Item("M7")
						 If Not IsDbNull(datarow("P08")) And Not IsDbNull(rows(0).Item("M8"))  And (rows(0).Item("M8"))<>0 Then datarow("P08") = datarow("P08")/rows(0).Item("M8")
						 If Not IsDbNull(datarow("P09")) And Not IsDbNull(rows(0).Item("M9"))  And (rows(0).Item("M9"))<>0 Then datarow("P09") = datarow("P09")/rows(0).Item("M9")
						 If Not IsDbNull(datarow("P10"))And Not IsDbNull(rows(0).Item("M10"))  And (rows(0).Item("M10"))<>0 Then datarow("P10") = datarow("P10")/rows(0).Item("M10")
						 If Not IsDbNull(datarow("P11")) And Not IsDbNull(rows(0).Item("M11")) And (rows(0).Item("M11"))<>0 Then datarow("P11") = datarow("P11")/rows(0).Item("M11")
						 If Not IsDbNull(datarow("P12")) And Not IsDbNull(rows(0).Item("M12")) And (rows(0).Item("M12"))<>0 Then datarow("P12") = datarow("P12")/rows(0).Item("M12")
						
						 datarow("YearTotal") =datarow("P01").ToString.XFConvertToDecimal+datarow("P02").ToString.XFConvertToDecimal+datarow("P03").ToString.XFConvertToDecimal+datarow("P04").ToString.XFConvertToDecimal+datarow("P05").ToString.XFConvertToDecimal+datarow("P06").ToString.XFConvertToDecimal+datarow("P07").ToString.XFConvertToDecimal+datarow("P08").ToString.XFConvertToDecimal+datarow("P09").ToString.XFConvertToDecimal+datarow("P10").ToString.XFConvertToDecimal+datarow("P11").ToString.XFConvertToDecimal+datarow("P12").ToString.XFConvertToDecimal
	   	 
					 End If
			    Next
			    End If
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								Dim objUserInfo As UserInfo = BRApi.Security.Admin.GetUser(si, si.UserName)
								BRAPi.Database.ExecuteActionQuery(dbConnApp,"DELETE From [dbo].[XFW_NonWage_Register] WHERE TF_11='Reporting Currency'" ,False,False)   
				End Using
				Using dbExtConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
		        Using objSQLBulkCopy As New SqlBulkCopy(dbExtConn.ConnectionString)
						
	                    For Each dc As DataColumn In dt_all_cc_mainreg.Columns
	                        objSQLBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName)
	                    Next
	                    objSQLBulkCopy.DestinationTableName = "XFW_NonWage_Register"
	                    objSQLBulkCopy.WriteToServer(dt_all_cc_mainreg)
			    End Using
			    End Using
			
		
	End Sub
	Public Function PrintDT(ByVal si As SessionInfo, ByVal desc As String ,ByVal dt As DataTable) As Text.StringBuilder
			Dim sCSV As New Text.StringBuilder
			If dt IsNot Nothing Then
				If dt.Rows.Count > 0 Then
					
					For Each dc As DataColumn In dt.Columns
						sCSV.Append(dc.ColumnName & ",")
					Next
					sCSV.Remove(sCSV.Length-1,1)
					sCSV.Append(Environment.NewLine)
					For Each dr As DataRow In dt.Rows
						For Each dc As DataColumn In dt.Columns
	     					sCSV.Append(dr(dc).ToString & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
					Next
				End If
			End If
			BRApi.ErrorLog.LogMessage(si, desc, sCSV.ToString)
			Return sCSV
    	End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EP_d0r06fa_splitfilebyVBO">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.EP_d0r06fa_splitfilebyVBO
	Public Class MainClass
		
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown, ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
					
					
						Dim fileName As String = "register_data.csv"
						Dim subfolder As String = "\Groups\Everyone\"
						Dim folder As String = BRAPi.Utilities.GetFileShareFolder(si, FileShareFolderTypes.ApplicationIncoming, Nothing).Replace("\Incoming","") & subfolder
						Dim dt As New DataTable
						
						Using fileReader As New fileIO.TextFieldParser(folder & filename)
							'read header
							fileReader.TextFieldType = FileIO.FieldType.Delimited
						    fileReader.SetDelimiters(",")
						    Dim headers =  fileReader.ReadFields()
							For Each head In headers
								dt.Columns.Add(head)
							Next
							
							'read content
							While Not fileReader.EndOfData
								Dim currentRow = fileReader.ReadFields()
								Dim tablefield As New List(Of Object)
					            For Each item In currentRow
									tablefield.Add(item)
								Next
								dt.Rows.Add(tablefield.ToArray())
							End While
							
						End Using
						
						
						
						Dim listofVBOs As New List(Of String)
						If dt IsNot Nothing AndAlso dt.Rows.Count>0
							For Each dr In dt.Rows
								
							Next	
						End If	
						
						Dim dt2 As New DataTable
						Dim sql As String = "SELECT None FROM XFW_NonWage_Register"
						Using dbconn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							dt2 = BRApi.Database.ExecuteSql(dbconn,sql,False)
						End Using
						
				End Select

				Return Nothing
			Catch ex As Exception
				BRApi.ErrorLog.LogMessage(si, "sql ex print", ex.StackTrace)
				
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'				Return Nothing
			End Try
		End Function
		
		Public Function CSVBuilder(dt As DataTable) As Text.StringBuilder
			Dim sCSV As New Text.StringBuilder
			If dt IsNot Nothing Then
				If dt.Rows.Count > 0 Then
					
					For Each dc As DataColumn In dt.Columns
						sCSV.Append(dc.ColumnName & ",")
					Next
					sCSV.Remove(sCSV.Length-1,1)
					sCSV.Append(Environment.NewLine)
					For Each dr As DataRow In dt.Rows
						For Each dc As DataColumn In dt.Columns
	     					sCSV.Append(dr(dc).ToString & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
					Next
				End If
			End If
			Return sCSV
    	End Function
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EP_Delete_Bkp_Tables">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.EP_Delete_Bkp_Tables
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown, ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
					Dim Function_name As String=args.NameValuePairs.XFGetValue("Function_name")
					Dim No_Of_Days_Old As String=args.NameValuePairs.XFGetValue("No_Of_Days_Old")
					If Function_name.XFEqualsIgnoreCase("Delete_Bkp_Tables")
						Me.Delete_Bkp_Tables(si,No_Of_Days_Old)
					Else If Function_name.XFEqualsIgnoreCase("Delete_Bkp_Files")
						Me.Delete_Bkp_Files(si,No_Of_Days_Old)
					End If
'						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		Public Sub Delete_Bkp_Tables(ByVal si As SessionInfo,ByVal No_Of_Days_Old As Integer)
				Dim sql As String = "SELECT name FROM sys.tables WHERE   name LIKE  '%XFW_NonWage_Register_Bkp%' and   DATEDIFF(day, create_date, getdate()) > " & No_Of_Days_Old
				Dim dt_tab_list As DataTable = Nothing
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_tab_list = BRAPi.Database.ExecuteSql(dbConnApp,sql,False)
				End Using
				
				Me.Export_dttoCSV(si,dt_tab_list) 

	   End Sub
	   Public Sub Export_dttoCSV(ByVal si As SessionInfo,ByVal dt_inp As DataTable)
	   		Dim sSubFolder As String = "\Groups\Everyone\ExpensePlanning\"
	    	Dim AdminRespFolderPath As String = BRAPi.Utilities.GetFileShareFolder(si, FileShareFolderTypes.ApplicationIncoming, Nothing).Replace("\Incoming","") & sSubFolder
			Dim delimiter As String = ","
	   		For Each row As DataRow In dt_inp.Rows
'				Dim sTargetFileSW As StreamWriter =  New StreamWriter(AdminRespFolderPath & row("name").ToString)
				Using sTargetFileSW As IO.StreamWriter = New StreamWriter(AdminRespFolderPath & row("name").ToString &".csv")
    'Use fs to read or write the file
			
			 Try
				
		   		Dim sql As String = "SELECT * FROM " & row("name").ToString
				Dim dt As DataTable = Nothing
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt = BRAPi.Database.ExecuteSql(dbConnApp,sql,False)
				End Using
 				'Build the CSV file data as a Comma separated string.
			     Dim csv As String = String.Empty
			 	If dt IsNot Nothing AndAlso dt.Rows.Count > 0 Then
			     For Each column As DataColumn In dt.Columns
			         'Add the Header row for CSV file.
			         sTargetFileSW.Write(column.ColumnName)
					 sTargetFileSW.Write(delimiter)
			     Next
			     'Add new line.
			      sTargetFileSW.WriteLine("")
			      For Each oRow As DataRow In  dt.Rows
					  
						Dim fieldCounter As Integer = 1
						For Each sField As DataColumn  In dt.Columns
								sTargetFileSW.Write(oRow(sField).ToString)
								If fieldCounter < dt.Columns.Count Then							
									sTargetFileSW.Write(delimiter)
									fieldCounter = fieldCounter + 1              
							    Else			 				
									sTargetFileSW.WriteLine("")
							    End If
						Next      
				 Next oRow
'			 	  sTargetFileSW.Close
			     Else
							sTargetFileSW.Write("No rows returned in data table")
'							 sTargetFileSW.Close
				 End If	              
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								Dim objUserInfo As UserInfo = BRApi.Security.Admin.GetUser(si, si.UserName)
								BRAPi.Database.ExecuteActionQuery(dbConnApp,"DROP TABLE " & row("name").ToString ,False,False)
				End Using 
			Catch ex As Exception
'				sTargetFileSW.Close
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
			End Using
			Next
	   End Sub
	   Public Sub Delete_Bkp_Files(ByVal si As SessionInfo,ByVal No_Of_Days_Old As Integer)
			Dim sSubFolder As String = "\Groups\Everyone\ExpensePlanning\"
	    	Dim AdminRespFolderPath As String = BRAPi.Utilities.GetFileShareFolder(si, FileShareFolderTypes.ApplicationIncoming, Nothing).Replace("\Incoming","") & sSubFolder
	        Dim directory As New IO.DirectoryInfo(AdminRespFolderPath)

			For Each file As IO.FileInfo In directory.GetFiles
	            If file.Extension.Equals(".csv") AndAlso (Now - file.CreationTime).Days > No_Of_Days_Old Then
	                file.Delete()
	            End If
        Next 

	   End Sub
	   Public Function CSVBuilder(dt As DataTable) As Text.StringBuilder
			Dim sCSV As New Text.StringBuilder
			If dt IsNot Nothing Then
				If dt.Rows.Count > 0 Then
					
					For Each dc As DataColumn In dt.Columns
						sCSV.Append(dc.ColumnName & ",")
					Next
					sCSV.Remove(sCSV.Length-1,1)
					sCSV.Append(Environment.NewLine)
					For Each dr As DataRow In dt.Rows
						For Each dc As DataColumn In dt.Columns
	     					sCSV.Append(dr(dc).ToString & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
					Next
				End If
			End If
			Return sCSV
    	End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EP_ExportToExcel">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="false" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="F:\OneStream Software\OneStreamAppRoot\OneStreamApp\bin\DevExpress.Spreadsheet.v19.2.Core.dll" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="false" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="F:\OneStream Software\OneStreamAppRoot\OneStreamApp\bin\DevExpress.Printing.v19.2.Core.dll" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="false" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="F:\OneStream Software\OneStreamAppRoot\OneStreamApp\bin\DevExpress.Data.v19.2.dll" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="false" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="C:\Windows\Microsoft.NET\Framework\v4.0.30319\System.Drawing.dll" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports DevExpress.Export.Xl
Imports DevExpress.Spreadsheet
Imports System.Drawing


Namespace OneStream.BusinessRule.Extender.EP_ExportToExcel
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown, ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
					
						Dim exporter As IXlExporter = XlExport.CreateExporter(XlDocumentFormat.Xlsx)
						Dim filepath = BRAPi.Utilities.GetFileShareFolder(si, FileShareFolderTypes.ApplicationRoot, Nothing)
'						Using stream As New FileStream(filepath & "\Enterprise\Groups\Everyone\EP_Export.xlsx", FileMode.Create, FileAccess.ReadWrite)
'               				Using document As IXlDocument = exporter.CreateDocument(stream)
'                            	document.Options.Culture = CultureInfo.CurrentCulture
'                            	Using sheet As IXlSheet = document.CreateSheet()
'	                                 sheet.Name = "Table"                                                                                  
''	                                 Me.PopulateSheet(si,sheet)
'								End Using
'							End Using
'						End Using

						

				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Private Sub PopulateSheet(ByVal si As SessionInfo, ByVal sheet As IXlSheet)
			Try
				'get data from register
				Dim sql As String = "SELECT TOP 10 * FROM XFW_NonWage_Register"
				Dim dt As DataTable = Nothing
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt = BRAPi.Database.ExecuteSql(dbConnApp, sql, False)
				End Using
				
				If dt IsNot Nothing AndAlso dt.Rows.Count>0 Then
					
					'create columns in sheet
					Dim colindex As Integer = 0
					For Each dc In dt.Columns
						Using column As IXlColumn = sheet.CreateColumn(colindex)
				        	column.WidthInPixels = 150
				    	End Using
						colindex = colindex + 1
					Next
					
					'add header row in sheet
					Using row As IXlRow = sheet.CreateRow()
						For Each dc In dt.Columns
							Using cell As IXlCell = row.CreateCell()
					           cell.Value = dc.ColumnName.ToString
							   cell.ApplyFormatting(XlFill.SolidFill(Color.LightGray))
					    	End Using
						Next	
					End Using
					
					'add data rows in sheet
					For Each dr In dt.Rows
						Using row As IXlRow = sheet.CreateRow()
							For Each dc In dt.Columns
								 Using cell As IXlCell = row.CreateCell()
						            cell.Value = dr(dc.ColumnName).ToString
						         End Using
							Next
						End Using
					Next
						
				End If
				
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub	
		
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EP_GetTableView_Utility">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.EP_GetTableView_Utility
	Public Class MainClass
		
		Public Function GetTableView_Utility(ByVal si As SessionInfo) As TableView
		 Try	
		 
			Dim scenarioName As String = ScenarioDimHelper.GetNameFromID(si, si.WorkflowClusterPk.ScenarioKey)
			Dim timeName As String = BRApi.Finance.Time.GetNameFromId(si, si.WorkflowClusterPk.TimeKey) 
			 
		    Dim dt As DataTable = Nothing	
			Dim sql As New Text.StringBuilder
			Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				sql.Append("SELECT * FROM [dbo].[XFW_NonWage_TempRegister] WHERE UserID = '" &  BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName).User.Description & "' AND WFScenarioName ='" & scenarioName & "' AND WFTimeName ='" & timeName & "'")
				dt = BRAPi.Database.ExecuteSql(dbConnApp,sql.ToString, False)
			End Using
			
			
			Dim tableView As New TableView()
			tableView.CanModifyData = True
			If dt.Rows.Count > 0 Then
				'create column header
				Dim tableViewRowHeader As New TableViewRow()
				'return all columns from data table
				For Each dataColumn As DataColumn In dt.Columns					             
					Dim column As New TableViewColumn()                            
					column.Name = dataColumn.ColumnName                        
					column.Value = dataColumn.ColumnName                       
					tableView.Columns.Add(column)
					tableViewRowHeader.Items.Add(column.Name,column)  	
				Next dataColumn
				tableViewRowHeader.IsHeader = True
				tableView.Rows.Add(tableViewRowHeader)
					
				'create data row records
				For Each dataRow As DataRow In dt.Rows                    
					Dim tableViewRow As New TableViewRow()                        
			 		For Each tableViewColumn As TableViewColumn In tableView.Columns
						Dim column As New TableViewColumn()                                
						Dim columnValue As String=""                            
						column.Name = tableViewColumn.Name                            
						columnValue = dataRow.Item(tableViewColumn.Name).ToString
						column.Value = columnValue                            
						column.IsHeader = False  
						tableViewRow.Items.Add(tableViewColumn.Name,column) 
						
					Next TableViewColumn     
				tableView.Rows.Add(tableViewRow)
				
				tableView.HeaderFormat.BackgroundColor = XFColors.XFDarkBlueBackground
				tableView.HeaderFormat.TextColor = XFColors.White
				tableView.HeaderFormat.IsBold = True
				tableView.NumberOfEmptyRowsToAdd = 1
				tableView.EmptyRowsBackgroundColor = XFColors.XFDarkBlueBackground
				
				Next dataRow
			End If
			
		Return tableView
	    Catch ex As Exception                
		   	Throw ErrorHandler.LogWrite(si,New XFException(si,ex))
		End Try
		End Function
		
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EP_RACI_Export">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
#End Region
Namespace OneStream.BusinessRule.Extender.EP_RACI_Export
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						Dim CurrentCV As String = "RACI_Matrix"
						Dim entitylist As New List(Of String)
						Dim entitylist_chunk As New List(Of String)
						'Dim entitylist_meminfo As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "ENT", "E#SAMS_SITE_OPERATIONS_VBO.Base", True)
'						Dim entitylist_meminfo As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "ENT", "E#Walmart_Total_Company.Base", True)
'						For Each entity In entitylist_meminfo
'							entitylist.Add(entity.Member.Name)
'						Next
						Dim pkg_list As New List(Of String)
						Dim accountlist_meminfo1 = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "Detail_Account", "A#PK_Wages.Children", True)	
						Dim accountlist_meminfo2 = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "Detail_Account", "A#PK_NonWages.Children", True)
						Dim accountlist_meminfo3 = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "Detail_Account", "A#PK_Accounting.Children", True)
						accountlist_meminfo1.AddRange(accountlist_meminfo2)
						accountlist_meminfo1.AddRange(accountlist_meminfo3)
						
						For Each accmeminfo In accountlist_meminfo1
							pkg_list.Add(accmeminfo.Member.Name)
						Next
						
						Dim dt_final As New DataTable
						Dim cclist As String = args.NameValuePairs.XFGetValue("cclist")
						Dim c = 1
						Dim log As New Text.StringBuilder
						
						For Each pkg In pkg_list
							Dim cvParams As New Dictionary(Of String, String)
								cvParams.Add("Entity", cclist)
								cvParams.Add("Account", "A#" & pkg & ".Base")
								
								Dim dt_temp As New DataTable
								dt_temp = CVRender(si, CurrentCV , cvParams)
								Dim collist_del As New List(Of String) ({"Cube","Parent","Cons","Scenario","View","Account","Flow","Origin","IC","UD1","UD3","UD4","UD5","UD6","UD7","UD8","RowHdr0ParentName"})
								
								For Each col In collist_del
									dt_temp.Columns.Remove(col)
								Next
								
								For Each dc As DataColumn  In dt_temp.Columns
									If dc.ColumnName.Substring(0,1) = "V"
										dc.ColumnName = dc.ColumnName.Substring(1)
									End If	
									If dc.ColumnName = "UD2"
										dc.ColumnName = "CenterType"
									End If
								Next
								If dt_temp IsNot Nothing AndAlso dt_temp.Rows.Count > 0
									dt_final.Merge(dt_temp)
								End If
								c=c+1
						Next
'						
'								Dim cvParams As New Dictionary(Of String, String)
'								cvParams.Add("Entity", cclist)
'								cvParams.Add("Account", "A#PK_Total.Base")
								
'								Dim dt_temp As New DataTable
'								dt_temp = CVRender(si, CurrentCV , cvParams)
'								Dim collist_del As New List(Of String) ({"Cube","Parent","Cons","Scenario","View","Account","Flow","Origin","IC","UD1","UD3","UD4","UD5","UD6","UD7","UD8","RowHdr0ParentName"})
								
'								For Each col In collist_del
'									dt_temp.Columns.Remove(col)
'								Next
								
'								For Each dc As DataColumn  In dt_temp.Columns
'									If dc.ColumnName.Substring(0,1) = "V"
'										dc.ColumnName = dc.ColumnName.Substring(1)
'									End If	
'									If dc.ColumnName = "UD2"
'										dc.ColumnName = "CenterType"
'									End If
'								Next
'								If dt_temp IsNot Nothing AndAlso dt_temp.Rows.Count > 0
'									dt_final.Merge(dt_temp)
'								End If
''								If dt_final.Rows.Count > 50000 Then
''									Exit For
''								End If
'								c += 1
'							Next	
''							If dt_final.Rows.Count > 50000 Then
''									Exit For
''							End If
'						Next
						globals.SetObject("EP_RACItoFCP_extractSourceData", dt_final)
'						Dim sCSV As Text.StringBuilder = CSVBuilder(dt_final)
						BRApi.ErrorLog.LogMessage(si, "raci merged dt " & c.ToString, dt_final.Rows.Count.ToString)
'						Dim filename As String = "Ak_RACI_Matrix.csv"
'						Dim folder As String = BRApi.Utilities.GetFileShareFolder(si,FileShareFolderTypes.ApplicationIncoming, Nothing).Replace("Incoming",String.Empty) & "\Groups\Everyone"
'						Dim filepath As String = folder & "\"  & filename
'						Using writer As System.IO.StreamWriter = New StreamWriter(filepath)
'							writer.WriteLine(sCSV.ToString)
'						End Using
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		#Region "Helper Functions"
		Public Function CVRender(ByRef si As SessionInfo, ByVal cubeViewName As String, ByVal vParams As Dictionary(Of String, String)) As DataTable
			Dim value As New NameValueFormatBuilder 
			Dim instance As New XFIfActionExpr("CVFilter", value)
			value = instance.NameValueFormatBuilder
			value.ApplyNameValuePairsFromDictionary(vParams)
			Dim entityDimensionName As String = ""
			Dim entityMemFilter As String = ""
			Dim scenarioDimName As String = ""
			Dim scenarioMemFilter As String = ""
			Dim timeMemFilter As String = ""
			Dim includeCellTextCols As Boolean = False
			Dim useStandardFactTableFields As Boolean = True
			Dim useGenericTimeColNames As Boolean = True
			Dim parallelQueryCount As Integer = 8
			Dim logStatistics As Boolean = False
			Dim dt As DataTable = Nothing
			Try
				dt = BRApi.Import.Data.FdxExecuteCubeView(si, cubeViewName, entityDimensionName, entityMemFilter, scenarioDimName, scenarioMemFilter, timeMemFilter, value, includeCellTextCols, useStandardFactTableFields,Nothing, parallelQueryCount, logStatistics)
				If dt IsNot Nothing Then					
					Return dt
				Else
					Return Nothing
				End If
			Catch e As Exception
				Brapi.ErrorLog.LogMessage(si,$"getCV({cubeviewName}", $"{string.Join(":", vParams)}) failed with error - {e}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try
		End Function
		
		Private Function toChunks(ByVal si As SessionInfo, ByVal entitylist As List(Of String), ByVal chunk_size As Integer) As List(Of String)
			Try	
				Dim noOfChunk As Integer = 0
				Dim chunkList As New List(Of String)
				Dim templist As New Text.StringBuilder
				Dim temp As String = String.Empty
				Dim tchunk As Integer = chunk_size
				Dim x As Integer = 0
				noOfChunk = Math.Ceiling(entitylist.Count / chunk_size)
			
				For i = 0 To noOfChunk - 1
					Dim j As Integer = x
					While j < tchunk 
						If j < entitylist.Count Then
							templist.Append(entitylist(j) & ",")
						End If	
						j += 1
					End While
					x += chunk_size 
					tchunk = tchunk + chunk_size
					temp = templist.ToString
					temp = temp.Remove(temp.Length - 1, 1)
					chunkList.Add(temp)
					
'					brapi.ErrorLog.LogMessage(si, "templist-" & i & ":" & temp & Environment.NewLine & "Length:" & temp.Length & environment.NewLine & "x:" & x )
					templist.Clear
				Next
				Return chunkList			
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function	
		
		Public Function CSVBuilder(dt As DataTable) As Text.StringBuilder
			Dim sCSV As New Text.StringBuilder
			If dt IsNot Nothing Then
				If dt.Rows.Count > 0 Then
					
					For Each dc As DataColumn In dt.Columns
						sCSV.Append(dc.ColumnName & ",")
					Next
					sCSV.Remove(sCSV.Length-1,1)
					sCSV.Append(Environment.NewLine)
					For Each dr As DataRow In dt.Rows
						For Each dc As DataColumn In dt.Columns
	     					sCSV.Append(dr(dc).ToString & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
					Next
				End If
			End If
			Return sCSV
    	End Function
		#End Region
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EP_RACI_toFCP_Load">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics
Imports System.Net
Imports System.Net.Http
Imports System.Reflection
Imports System.Threading.Tasks
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
#End Region
'/******************************************* EP_RACI to FCP PUT  *****************************/

Namespace OneStream.BusinessRule.Extender.EP_RACI_toFCP_Load
	Public Class MainClass
		#Region "Main"
		Const m_PUT_PageSize As Integer = 50000
		Const m_Timeout As Short = 10
		Private m_Base_URI As String
		Private m_Client As HttpClient
		Private m_asyncGets As New List(Of Task(Of HttpResponseMessage))
		Private m_PutPageCount As Integer = 0
		Private m_PutErrorOccurred As Boolean
		Private m_PutTotalRecordCount As Integer = 0
		Private m_ExtenderLog As New Text.StringBuilder
		
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.Unknown
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						Dim dt As DataTable = Nothing
						dt = DirectCast(globals.GetObject("EP_RACItoFCP_extractSourceData"), DataTable)
						Me.setClientParam(si,globals)
'						BRApi.ErrorLog.LogMessage(si, "EP_RACItoFCP_extractSourceData rows: ", dt.Rows.Count.ToString)
'						Dim cred_dt As DataTable
'						Dim dml As String = String.Format( "SELECT * FROM [dbo].[XFW_FCP_ENT_PUT_CRED] where App='EP_RACI-DEV'")
						
'						Using dbConnApp As DBConnInfo = BRAPi.Database.CreateApplicationDbConnInfo(si)
'						    cred_dt = BRApi.Database.ExecuteSql(dbConnApp, dml.ToString, True)
'						End Using
						
'						m_Base_URI = cred_dt.Rows(0)("Base_URI").ToString
'						Dim svcConsumerId As String = cred_dt.Rows(0)("ConsumerId").ToString
'						Dim	svcName As String = cred_dt.Rows(0)("Name").ToString
'						Dim	svcEnv As String = cred_dt.Rows(0)("ENV").ToString
'						m_Base_URI = DirectCast(globals.GetObject("baseUrl"),String)
'						Dim svcConsumerId As String = DirectCast(globals.GetObject("svcConsumerId"),String)
'						Dim	svcName As String = DirectCast(globals.GetObject("svcName"),String)
'						Dim	svcEnv As String = DirectCast(globals.GetObject("svcEnv"),String)
'						m_Base_URI = "https://fcp-os-mesh-gcp-02-dev.fin-dpa-fcp.k8s.glb.us.walmart.net"
'						Dim svcConsumerId As String = "8359e569-eaf2-48fb-b6b9-2235f95ae735"
'						Dim	svcName As String = "DPA-FCP-API-OS"
'						Dim	svcEnv As String = "DPA-FCP-DEV"
						
'						m_Client = New HttpClient()
'						m_Client.Timeout = TimeSpan.FromMinutes(m_Timeout)
'						m_Client.DefaultRequestHeaders.Clear()
'						m_Client.DefaultRequestHeaders.ConnectionClose = False
'						m_Client.DefaultRequestHeaders.Add("cache-control", "no-cache")
'						m_Client.DefaultRequestHeaders.Add("WM_CONSUMER.ID", svcConsumerId)
'						m_Client.DefaultRequestHeaders.Add("WM_SVC.ENV", svcEnv)
'						m_Client.DefaultRequestHeaders.Add("WM_SVC.NAME", svcName)
						
						Dim startTime As DateTime= DateTime.Now
						'------------------------------------------get batch id from FCP----------------------------------------------
						'Dim batchId As String =Me.getBatchIdFromFCP(si)
						Dim batchId As String = DirectCast(globals.GetObject("batchId"),String)
						'globals.GetObject("EP_RACItoFCP_PROCESS_LOG").AppendLine("Time to fetch BatchId: " & (DateTime.Now-startTime).ToString)
						'------------------------------------------post register data to FCP------------------------------------------
						startTime = DateTime.Now
						Me.PutEpRaciDTToFCP(si,dt,batchId,globals)
						globals.GetObject("EP_RACItoFCP_PROCESS_LOG").AppendLine("------------------> Time to FCP post data: " & (DateTime.Now-startTime).ToString)
						'------------------------------------------put mark completion from FCP----------------------------------------
'						startTime = DateTime.Now
'						Me.PutMarkCompletionFromFCP(si,batchId)
'						globals.GetObject("EP_RACItoFCP_PROCESS_LOG").AppendLine("------------------> Time to FCP mark completion: " & (DateTime.Now-startTime).ToString)
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			Finally
				globals.GetObject("EP_RACItoFCP_PROCESS_LOG").AppendLine(m_ExtenderLog.ToString)
				'BRApi.ErrorLog.LogMessage(si,"log for epRACI_fcp",m_ExtenderLog.ToString)
			End Try
		End Function
		#End Region
		#Region "Helper"
		Public Function setClientParam(ByVal si As SessionInfo, ByVal globals As BRGlobals)
			Try
				m_Base_URI = DirectCast(globals.GetObject("baseUrl"),String)
				Dim svcConsumerId As String = DirectCast(globals.GetObject("svcConsumerId"),String)
				Dim	svcName As String = DirectCast(globals.GetObject("svcName"),String)
				Dim	svcEnv As String = DirectCast(globals.GetObject("svcEnv"),String)
				
				m_Client = New HttpClient()
				m_Client.Timeout = TimeSpan.FromMinutes(m_Timeout)
				m_Client.DefaultRequestHeaders.Clear()
				m_Client.DefaultRequestHeaders.ConnectionClose = False
				m_Client.DefaultRequestHeaders.Add("cache-control", "no-cache")
				m_Client.DefaultRequestHeaders.Add("WM_CONSUMER.ID", svcConsumerId)
				m_Client.DefaultRequestHeaders.Add("WM_SVC.ENV", svcEnv)
				m_Client.DefaultRequestHeaders.Add("WM_SVC.NAME", svcName)
				
				Return Nothing
				Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		Public Function getBatchIdFromFCP(ByVal si As SessionInfo, ByVal globals As BRGlobals)
			Try
				'setup http client
				m_ExtenderLog = New Text.StringBuilder
				Me.setClientParam(si,globals)
				'get batch id from FCP
				Dim jsonResult As Object = Nothing
				Dim batchId As String =""
				Dim jObj As JObject = New Jobject
				jObj("Type") = "RACI"
				Dim rTask As Task(Of HttpResponseMessage) = Me.PutDataToFcpAsync(si, "fetchBatchID" , jObj.ToString)
				Dim result As String = rTask.Result.Content.ReadAsStringAsync().Result
				If rTask.Result.IsSuccessStatusCode Then
					jsonResult = JsonConvert.DeserializeObject(result)
					batchId= jsonResult("BatchId")
					Me.AddLogMessage(si,"FCP PUT batchId fetched successfully." & result)
				Else
					m_PutErrorOccurred = True
					Me.AddLogMessage(si,"Error occured in fetching batch id: " & result)
					Throw New System.Exception("Batch Id not fetched. " & result)
				End If
				Return batchId
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			Finally
				globals.GetObject("EP_RACItoFCP_PROCESS_LOG").AppendLine(m_ExtenderLog.ToString)
			End Try
		End Function
		Public Sub PutEpRaciDTToFCP(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal batchId As String, ByVal globals As BRGlobals) 
		    Try
				Dim numOfPages As Integer = Math.Ceiling(dt.Rows.Count / m_PUT_PageSize)
				Me.AddLogMessage(si, $"Preparing to send data to FCP. Row Count: {dt.Rows.Count}. Number of pages: {numOfPages}")
				Dim pageChunckCount As Integer = 0
				Dim successCount As Integer = 0
				Dim startTime As DateTime = DateTime.Now
				'breaking dt by columns
				Dim dv As DataView = New DataView(dt)
				Dim dt_non_acc As DataTable = dv.ToTable(False,"Entity","Time","CenterType")
				
				Dim dt_acc As New DataTable
				dt_acc = dt.Copy
				dt_acc.Columns.Remove("Entity")
				dt_acc.Columns.Remove("Time")
				dt_acc.Columns.Remove("CenterType")
				'BRApi.ErrorLog.LogMessage(si,"len " & dt.Rows.Count.ToString)
				For page As Integer = 1 To numOfPages
					'put m_PUT_PageSize records
					Dim dtPage_non_acc As DataTable = dt_non_acc.Rows.Cast(Of System.Data.DataRow).Skip((page - 1) * m_PUT_PageSize).Take(m_PUT_PageSize).CopyToDataTable()
                    Dim dtPage_acc As DataTable = dt_acc.Rows.Cast(Of System.Data.DataRow).Skip((page - 1) * m_PUT_PageSize).Take(m_PUT_PageSize).CopyToDataTable()
                    pageChunckCount +=1
					If dtPage_non_acc IsNot Nothing AndAlso dtPage_acc IsNot Nothing Then
						Dim jObj As JObject = New Jobject
						Dim jObjER As JObject = New Jobject
						Dim jObjAcc As JObject = New JObject
						jObj("Dataset_Type") = "RACI"
						
						
						m_PutTotalRecordCount += dtPage_non_acc.Rows.Count
						m_PutPageCount = DirectCast(globals.GetObject("currentPage"),Integer) + page
						jObj("page") = m_PutPageCount
						jObj("Batch_ID") = batchId
						jObjER("rowcount") = dtPage_non_acc.Rows.Count
						jObjER("data") = JArray.FromObject(dtPage_non_acc, JsonSerializer.CreateDefault)
						jObjAcc("Accounts")=  JArray.FromObject(dtPage_acc, JsonSerializer.CreateDefault)
						'BRApi.ErrorLog.LogMessage(si,"len json " & jObjAcc("Accounts").Count.ToString & "-----" & jObjER("data").Count.ToString)
						For x As Integer =0 To jObjAcc("Accounts").Count-1
							'BRApi.ErrorLog.LogMessage(si,"jtoken",jObjAcc("Accounts")(x).ToString)
							For Each keys In jObjAcc("Accounts")(x).Children().ToList()
'								BRApi.ErrorLog.LogMessage(si,keys.ToString)
'								BRApi.ErrorLog.LogMessage(si,keys.ToString.Split(":").ToList()(0).Replace(ChrW(34),""))
								Dim key As String = keys.ToString.Split(":").ToList()(0).Replace(ChrW(34),"").Trim()
								'BRApi.ErrorLog.LogMessage(si,"done --- ",jObjAcc("Accounts")(x)(key).ToString)
								If jObjAcc("Accounts")(x)(key).ToString.XFEqualsIgnoreCase("") Or jObjAcc("Accounts")(x)(key) Is Nothing Then
									keys.Remove()
								End If
							Next
							'BRApi.ErrorLog.LogMessage(si,"jtoken",jObjAcc("Accounts")(x).ToString)
							jObjER("data")(x)("Accounts") = jObjAcc("Accounts")(x)
						Next
						jObj("RACI") = jObjER
						'BRApi.ErrorLog.LogMessage(si,"step2 json for raci fcp",jObj.ToString)
						'm_asyncGets.Add(Me.TryPutToFcpAsync(si, "postData" , jObj.ToString))
						m_asyncGets.Add(Me.PutDataToFcpAsync(si, "postData" , jObj.ToString))
											
					End If
					If pageChunckCount=5 Or page=numOfPages Then
						Dim result As Task
						pageChunckCount = 0
						result = Task.WhenAll(m_asyncGets.ToArray)
						Try
							result.Wait()
						Catch e As Exception
							Me.AddLogMessage(si,"FCP PUT exception in async post data : " & e.Message & result.Status.ToString)
							Throw ErrorHandler.LogWrite(si, New XFException(si, e))
						End Try
					End If
		        Next
'				
				
				Dim content As String
				
				Dim i As Integer =0 
				For Each tResults As Task(Of HttpResponseMessage) In m_asyncGets
					i=  DirectCast(globals.GetObject("currentPage"),Integer) +1
					content = tResults.Result.Content.ReadAsStringAsync().Result
					If tResults.Result.IsSuccessStatusCode = False Then
						Me.AddLogMessage(si,"FCP PUT to post data error at page: " & i & "with error: " & content)
						m_PutErrorOccurred = True
						Exit For
					Else
						successCount += 1
						Me.AddLogMessage(si,"FCP PUT to post data successful at page: " & i & "with response: " & content)
					End If
				Next
				m_asyncGets.Clear
				globals.SetObject("currentPage",m_PutPageCount)
				
				Dim duration As TimeSpan = DateTime.Now - startTime
				If successCount <> numOfPages Then
					Me.AddLogMessage(si, $"Error:- PUT with errors in {duration.Minutes} minutes {duration.Seconds} seconds")
					Throw New System.Exception("Error:- FCP PUT to post data error." )
				Else
					Me.AddLogMessage(si, $"Completed PUT (all {numOfPages} pages) in {duration.Minutes} minutes {duration.Seconds} seconds")
				End If
			Catch ex As Exception
				m_PutErrorOccurred = True
				Me.AddLogMessage(si,"FCP PUT exception: " & ex.Message)
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		#Region "Mark Completion"
		Public Sub PutMarkCompletionFromFCP(ByVal si As SessionInfo, ByVal batchId As String, ByVal globals As BRGlobals)
			Try
				m_ExtenderLog = New Text.StringBuilder
				Me.setClientParam(si,globals)
				Dim jObj4 As JObject = New Jobject
				Dim jObj5 As JObject = New Jobject
				jObj4("Type") = "RACI"
				jObj4("Batch_ID") = batchId
				Dim rTask As Task(Of HttpResponseMessage) = Me.PutDataToFcpAsync(si, "loadTrigger" , jObj4.ToString)
				Dim result As String = rTask.Result.Content.ReadAsStringAsync().Result
				If rTask.Result.IsSuccessStatusCode = False Then
					Me.AddLogMessage(si,"FCP PUT mark completion error : " & result)
					m_PutErrorOccurred = True
					Throw New System.Exception("FCP PUT mark completion error : " & result)
				Else
					Me.AddLogMessage(si,"FCP PUT mark completion successful : " & result)
				End If
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			Finally
				globals.GetObject("EP_RACItoFCP_PROCESS_LOG").AppendLine(m_ExtenderLog.ToString)
			End Try
		End Sub
		#End Region
		
		#Region "Try Put"
		Public Async Function TryPutToFcpAsync(ByVal si As SessionInfo, ByVal api As String, ByVal json As String) As Task(Of HttpResponseMessage)
			Try
				Dim rTask As HttpResponseMessage = Nothing
				For i As Integer = 1 To 3
					rTask = Await Me.PutDataToFcpAsync(si, api,json)
					If rTask IsNot Nothing Then							
						Return rTask
					End If
					If i = 1 Then
						Me.AddLogMessage(si, $"Trying again in 5 seconds")
						Await Task.Delay(TimeSpan.FromSeconds(5))
					ElseIf i = 2 Then
						Me.AddLogMessage(si, $"Trying again in 5 seconds")
						Await Task.Delay(TimeSpan.FromSeconds(5))
					Else
						Throw New System.Exception("Could not send data to FCP")
					End If
				Next
				Return rTask
			Catch ex As Exception
				m_PutErrorOccurred = True
				Me.AddLogMessage(si, $"TryPutToFcpAsync Exception: {ex.Message}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Function
		#End Region
		Public Async Function PutDataToFcpAsync(ByVal si As SessionInfo, ByVal api As String, ByVal json As String) As Task(Of HttpResponseMessage)
			Dim content As Http.StringContent
			Try				
				content = New Http.StringContent(json, System.Text.Encoding.UTF8, "application/json")
				Return Await m_Client.PostAsync(m_Base_URI & "/" & api, content, New System.Threading.CancellationToken(False))
				
			Catch ex As Exception
				m_PutErrorOccurred = True
				Me.AddLogMessage(si, $"PutDataToFcpAsync Exception: {ex.Message}")		
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Sub AddLogMessage(ByVal si As SessionInfo, ByVal message As String)
			Try
				m_ExtenderLog.AppendLine("-------------------------------------------------------------------------------------------------------------------")
				m_ExtenderLog.AppendLine($"Time:{vbTab}{vbTab}{Date.Now.ToString}")
				m_ExtenderLog.AppendLine($"Message:{vbTab}{message}")
				m_ExtenderLog.AppendLine("-------------------------------------------------------------------------------------------------------------------")
				m_ExtenderLog.AppendLine(String.Empty)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		Private Function PrintDT(dt As DataTable) As Text.StringBuilder
			Dim sCSV As New Text.StringBuilder
			If dt IsNot Nothing Then
				If dt.Rows.Count > 0 Then
					
					For Each dc As DataColumn In dt.Columns
						sCSV.Append(dc.ColumnName & ",")
					Next
					sCSV.Remove(sCSV.Length-1,1)
					sCSV.Append(Environment.NewLine)
					For Each dr As DataRow In dt.Rows
						For Each dc As DataColumn In dt.Columns
	     					sCSV.Append(dr(dc).ToString & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
					Next
				End If
			Else 
				Dim result As New Text.StringBuilder
				result.Append("dt nothing")
				Return result
			End If
			
			Return sCSV
    	End Function
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EP_ReadExcel">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="false" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="F:\OneStream Software\OneStreamAppRoot\OneStreamApp\bin\DevExpress.Spreadsheet.v19.2.Core.dll" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="false" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="F:\OneStream Software\OneStreamAppRoot\OneStreamApp\bin\DevExpress.Printing.v19.2.Core.dll" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="false" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="F:\OneStream Software\OneStreamAppRoot\OneStreamApp\bin\DevExpress.Data.v19.2.dll" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="false" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="C:\Windows\Microsoft.NET\Framework\v4.0.30319\System.Drawing.dll" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports DevExpress.Export.Xl
Imports DevExpress.Spreadsheet
Imports System.Drawing


Namespace OneStream.BusinessRule.Extender.EP_ReadExcel
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown, ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						Dim filepath = BRAPi.Utilities.GetFileShareFolder(si, FileShareFolderTypes.ApplicationRoot, Nothing) &  "\Enterprise\Groups\Everyone\"
						Dim filename = "EP_Export.xlsx"
						Dim exporter As IXlExporter = XlExport.CreateExporter(XlDocumentFormat.Xlsx)
						Using stream As New FileStream(filepath & "\Enterprise\Groups\Everyone\EP_Export.xlsx", FileMode.Create, FileAccess.ReadWrite)
               				Using document As IXlDocument = exporter.CreateDocument(stream)
                            	document.Options.Culture = CultureInfo.CurrentCulture
                            	
							End Using
						End Using

						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EP_Utility">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_CurrencyConversion" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_SharedConstants" />
            </referencedAssemblies>
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Data.SqlClient
Imports System.Diagnostics
Imports OneStream.BusinessRule.DashboardStringFunction.EP_SharedConstants
#End Region
#Region "Rule Change Mgmt"
'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 - - EP UTILITY Functions
	'Mods:		
'--------------------------------------------------------------------------------------------------------------------------------------------
#End Region
Namespace OneStream.BusinessRule.Extender.EP_Utility
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown, ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
					Dim Function_name As String=args.NameValuePairs.XFGetValue("Function_name")
					If Function_name.XFEqualsIgnoreCase("CurrencyConversion")
						Me.CurrencyConversion(si)
					End If
'						Me.Set_SEGMENT_VBO_table(si)
'						UpdateGLPlanner_fm_RACI(si)
'						GetSecurityGroups(si)
'						AssignUserToGroup(si)
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		#Region "Helper Function"
		Private Sub Set_SEGMENT_VBO_table(ByVal si As SessionInfo)
			Try
				Dim attributelist As New Text.StringBuilder
				Dim timeid As Integer = BRApi.Finance.Members.GetMemberId(si, DimTypeID.Time, "2023")
				
				Dim dt As New DataTable
				dt.Columns.Add("VBO_NAME",GetType(String))
				dt.Columns.Add("VBO_DESCRIPTION",GetType(String))
				dt.Columns.Add("SEGMENT",GetType(String))
				dt.Columns.Add("GLOBAL_TECH",GetType(String))
				
				
				
				Dim seg_list As New List(Of String)
				seg_list.Add("Walmart_US")
				seg_list.Add("Sams_US")
				seg_list.Add("Walmart_Corp")
				
				For Each item In seg_list
					
						Dim entityList As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "ENT", "E#" & item & ".Base", True)
						Dim globaltech_entityList As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "ENT", "E#Global_Tech_Rollup.Base", True)
						For Each entity In entityList
							Dim entityId As Integer = BRApi.Finance.Members.GetMemberId(si, DimTypeID.Entity, entity.Member.Name)
							Dim vbo_attribute As String = BRApi.Finance.Entity.Text(si, entityId, 5, ScenarioTypeId.Budget, timeid)
							
							If Not attributelist.ToString.Contains(vbo_attribute)
								
									attributelist.Append(vbo_attribute & ",")
									Dim row As DataRow = dt.NewRow
									row("VBO_NAME") = vbo_attribute.Replace("Att_","")
									row("VBO_DESCRIPTION") = "EP_" & vbo_attribute.Replace("Att_","")
									row("SEGMENT") = item
									If globaltech_entityList.Contains(entity)
										row("GLOBAL_TECH") = "Yes"
									End If
									dt.Rows.Add(row)
							End If
						Next
					
				Next
				
				
				
'				PrintDT(si, "segvbo dt", dt)
				
				Dim sql As String = "DELETE FROM " & EPSharedConstants.sSEGVBOMappingTable 
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					BRAPi.Database.ExecuteActionQuery(dbConnApp,sql,False,False)
				End Using
				
				BRApi.Database.SaveCustomDataTable(si, "Application", EPSharedConstants.sSEGVBOMappingTable, dt, True)
				
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		Public Function PrintDT(ByVal si As SessionInfo, ByVal desc As String ,ByVal dt As DataTable) As Text.StringBuilder
			Dim sCSV As New Text.StringBuilder
			If dt IsNot Nothing Then
				If dt.Rows.Count > 0 Then
					
					For Each dc As DataColumn In dt.Columns
						sCSV.Append(dc.ColumnName & ",")
					Next
					sCSV.Remove(sCSV.Length-1,1)
					sCSV.Append(Environment.NewLine)
					For Each dr As DataRow In dt.Rows
						For Each dc As DataColumn In dt.Columns
	     					sCSV.Append(dr(dc).ToString & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
					Next
				End If
			End If
			BRApi.ErrorLog.LogMessage(si, desc, sCSV.ToString)
			Return sCSV
    	End Function
		
		Public Sub UpdateGLPlanner_fm_RACI(ByVal si As SessionInfo)
			Try
				Dim sql As String = "SELECT Package_ID, SubPackage_ID, GL, MethodID FROM " & EPSharedConstants.sRACITable & " WHERE MethodID IN (7,8)"
				Dim dt_temp1 As DataTable = Nothing
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_temp1 = BRAPi.Database.ExecuteSql(dbConnApp,sql,False)
				End Using
				
				Dim dt_temp2 As DataTable = dt_temp1.DefaultView.ToTable(True,"GL","MethodID")
				
'				PrintDT(si,"gl-planner",dt_temp2)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		Public Sub GetSecurityGroups(ByVal si As SessionInfo)
			Try
				Dim sql As New Text.StringBuilder
				sql.AppendLine("Select Name ")
				sql.AppendLine("From [SecGroup] ")
				sql.AppendLine("Where Name LIKE 'EP_%' OR ")
				sql.AppendLine("Name LIKE 'WFP_%' OR ")
				sql.AppendLine("Name LIKE 'CE_%'")
				
				Dim dt As DataTable = Nothing
				
				Using dbConnFw As DBConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
					dt = BRAPi.Database.ExecuteSql(dbConnFw, sql.ToString, True)
				End Using
				
				PrintDT(si,"sec-dt",dt)
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		Public Sub Enable_Disable_ScheduledJobs(ByVal si As SessionInfo)
			Try
				Dim sql As New Text.StringBuilder
				sql.AppendLine("UPDATE DataMgmtScheduleItem")
				sql.AppendLine("SET IsEnabledByManager = False, IsEnabledByManager = False ")
				sql.AppendLine("Where Name LIKE 'EP_%' OR ")
				sql.AppendLine("Name LIKE 'WFP_%' OR ")
				sql.AppendLine("Name LIKE 'CE_%'")
				
				Dim dt As DataTable = Nothing
				
				Using dbConnFw As DBConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
					dt = BRAPi.Database.ExecuteSql(dbConnFw, sql.ToString, True)
				End Using
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
        Public Sub CurrencyConversion(ByVal si As SessionInfo)
				Dim dt_curr As New DataTable
				Dim scenarioName As String = ScenarioDimHelper.GetNameFromID(si, si.WorkflowClusterPk.ScenarioKey)
				Dim timeName As String = BRApi.Finance.Time.GetNameFromId(si, si.WorkflowClusterPk.TimeKey)
				Dim obj = New OneStream.BusinessRule.Extender.EP_CurrencyConversion.MainClass
				dt_curr = obj.GetAllFXRates(si,scenarioName,timename)
'				Dim sql As New Text.StringBuilder
				Dim Year As String=BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "AOP_Year")

				Dim dt_all_cc_mainreg As New DataTable
				Dim sql =  "Select * From [dbo].[" & EPSharedConstants.sMainRegExpenseTable & "] Where TF_11='Local Currency'AND WFTimeName='" & Year & "'"
				
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_all_cc_mainreg = BRAPi.Database.ExecuteSql(dbConnApp,sql.ToString, False)
				End Using
				If dt_all_cc_mainreg.Rows.Count>0 And dt_all_cc_mainreg IsNot Nothing
				For Each datarow As DataRow In dt_all_cc_mainreg.Rows
				   
					 Dim rows() As DataRow = dt_curr.Select("Currency = '" & datarow("TF_3") & "'  AND Scenario='" & datarow("WFScenarioName") & "' AND Time='" & Year & "'")
					 
					 If rows.Count > 0 Then
                         
						 datarow("WFProfileName") = datarow("WFProfileName")
						 datarow("UniqueID")= Guid.NewGuid
						 datarow("WFScenarioName") = datarow("WFScenarioName")
					 	 datarow("WFTimeName") = datarow("WFTimeName")
						 datarow("CostCenter")= datarow("CostCenter")
						 datarow("TF_3")= "USD"
						 datarow("LineItem")= datarow("LineItem")
						 datarow("GL")= datarow("GL")
						 datarow("TF_11") = "Reporting Currency"
						 If Not IsDbNull(datarow("P01")) And Not IsDbNull(rows(0).Item("M1"))  And (rows(0).Item("M1"))<>0 Then datarow("P01") = datarow("P01")/rows(0).Item("M1")
						 If Not IsDbNull(datarow("P02")) And Not IsDbNull(rows(0).Item("M2"))  And (rows(0).Item("M2"))<>0 Then datarow("P02") = datarow("P02")/rows(0).Item("M2")
						 If Not IsDbNull(datarow("P03")) And  Not IsDbNull(rows(0).Item("M3")) And (rows(0).Item("M3"))<>0 Then datarow("P03") = datarow("P03")/rows(0).Item("M3")
						 If Not IsDbNull(datarow("P04")) And Not IsDbNull(rows(0).Item("M4"))  And (rows(0).Item("M4"))<>0 Then datarow("P04") = datarow("P04")/rows(0).Item("M4")
						 If Not IsDbNull(datarow("P05")) And Not IsDbNull(rows(0).Item("M5"))  And (rows(0).Item("M5"))<>0 Then datarow("P05") = datarow("P05")/rows(0).Item("M5")
						 If Not IsDbNull(datarow("P06")) And Not IsDbNull(rows(0).Item("M6"))  And (rows(0).Item("M6"))<>0 Then datarow("P06") = datarow("P06")/rows(0).Item("M6")
					     If Not IsDbNull(datarow("P07")) And Not IsDbNull(rows(0).Item("M7"))  And (rows(0).Item("M7"))<>0 Then datarow("P07") = datarow("P07")/rows(0).Item("M7")
						 If Not IsDbNull(datarow("P08")) And Not IsDbNull(rows(0).Item("M8"))  And (rows(0).Item("M8"))<>0 Then datarow("P08") = datarow("P08")/rows(0).Item("M8")
						 If Not IsDbNull(datarow("P09")) And Not IsDbNull(rows(0).Item("M9"))  And (rows(0).Item("M9"))<>0 Then datarow("P09") = datarow("P09")/rows(0).Item("M9")
						 If Not IsDbNull(datarow("P10"))And Not IsDbNull(rows(0).Item("M10"))  And (rows(0).Item("M10"))<>0 Then datarow("P10") = datarow("P10")/rows(0).Item("M10")
						 If Not IsDbNull(datarow("P11")) And Not IsDbNull(rows(0).Item("M11")) And (rows(0).Item("M11"))<>0 Then datarow("P11") = datarow("P11")/rows(0).Item("M11")
						 If Not IsDbNull(datarow("P12")) And Not IsDbNull(rows(0).Item("M12")) And (rows(0).Item("M12"))<>0 Then datarow("P12") = datarow("P12")/rows(0).Item("M12")
						
						 datarow("YearTotal") =datarow("P01").ToString.XFConvertToDecimal+datarow("P02").ToString.XFConvertToDecimal+datarow("P03").ToString.XFConvertToDecimal+datarow("P04").ToString.XFConvertToDecimal+datarow("P05").ToString.XFConvertToDecimal+datarow("P06").ToString.XFConvertToDecimal+datarow("P07").ToString.XFConvertToDecimal+datarow("P08").ToString.XFConvertToDecimal+datarow("P09").ToString.XFConvertToDecimal+datarow("P10").ToString.XFConvertToDecimal+datarow("P11").ToString.XFConvertToDecimal+datarow("P12").ToString.XFConvertToDecimal
	   	 
					 End If
			    Next
			    End If
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								Dim objUserInfo As UserInfo = BRApi.Security.Admin.GetUser(si, si.UserName)
								BRAPi.Database.ExecuteActionQuery(dbConnApp,"DELETE From [dbo].[" & EPSharedConstants.sMainRegExpenseTable & "] WHERE TF_11='Reporting Currency'" ,False,False)   
				End Using
				Using dbExtConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					
		        Using objSQLBulkCopy As New SqlBulkCopy(dbExtConn.ConnectionString)
						
	                    For Each dc As DataColumn In dt_all_cc_mainreg.Columns
	                        objSQLBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName)
	                    Next
	                    objSQLBulkCopy.DestinationTableName =  EPSharedConstants.sMainRegExpenseTable 
	                    objSQLBulkCopy.WriteToServer(dt_all_cc_mainreg)
			    End Using
			    End Using
			
		
	End Sub
	
		'to assign groups to users in expense
		Public Sub AssignUserToGroup(ByVal si As SessionInfo)
			Try
				BRApi.ErrorLog.LogMessage(si, "start")
				'Group Info
				Dim listsecGroupName As New List(Of String) ({"EXP_CORP_Business_Services_Rollup_Planner","EXP_CORP_Core_Finance_Planner","EXP_CORP_Global_Data_Planner"})
'				Dim secGroupName As String = "EXP_CORP_Core_Finance_Planner"

				'User Info
				Dim userName As String = "EP_testuser1"
				
				'disassociate any group with EXP for the user
				Dim objUserInfo As UserInfo = BRApi.Security.Admin.GetUser(si, userName)
				Dim parentGroupdict As Dictionary(Of Guid, Group) = objUserInfo.ParentGroups
				Dim parentGroupdIDs_wo_EXP As New List(Of Guid)
				For Each parentgrp In parentGroupdict
					If Not parentgrp.Value.Name.Substring(0,3).XFEqualsIgnoreCase("EXP")
						parentGroupdIDs_wo_EXP.Add(parentgrp.Key)
					End If
				Next
				BRApi.Security.Admin.SaveUser(si, objUserInfo.User, True, parentGroupdIDs_wo_EXP, TriStateBool.Unknown)
				
				'add exp groups from table
				Dim parentGroupIDs_w_EXP As List(Of Guid) = objUserInfo.ParentGroups.Keys.ToList()
				For Each secGroupName In listsecGroupName		
					Dim objGroupInfo As GroupInfo = BRApi.Security.Admin.GetGroup(si, secGroupName)
					BRApi.ErrorLog.LogMessage(si, "groupname:" & secGroupName)
					parentGroupIDs_w_EXP.Add(objGroupInfo.Group.UniqueID)
				Next
				
				For Each groupid In parentGroupIDs_w_EXP
					BRApi.ErrorLog.LogMessage(si, "groupid:" & groupid.ToString)
				Next
				BRApi.Security.Admin.SaveUser(si, objUserInfo.User, True, parentGroupIDs_w_EXP, TriStateBool.Unknown)
				
				
'				For Each secGroupName In listsecGroupName
'					'Get a Group And UserInfo Object And add the Group To the user's list of parent groups.
'					Dim objGroupInfo As GroupInfo = BRApi.Security.Admin.GetGroup(si, secGroupName)
'					If Not objGroupInfo Is Nothing Then
					    
'					    If Not objUserInfo Is Nothing Then
'	'				        If (Not objUserInfo.ParentGroups.ContainsKey(objGroupInfo.Group.UniqueID)) Then
'					            Dim parentGroupIDs As List(Of Guid) = objUserInfo.ParentGroups.Keys.ToList()
'					            parentGroupIDs.Add(objGroupInfo.Group.UniqueID)
								
								
'								BRApi.ErrorLog.LogMessage(si, "m also here")
'					            BRApi.Security.Admin.SaveUser(si, objUserInfo.User, True, parentGroupIDs, TriStateBool.Unknown)
'	'				        End If
'					    End If
'					End If
'				Next
								
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
	#End Region
	
	
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EP_ValidateRACI">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="false" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="F:\OneStream Software\OneStreamAppRoot\OneStreamApp\bin\DevExpress.Spreadsheet.v19.2.Core.dll" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="false" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="F:\OneStream Software\OneStreamAppRoot\OneStreamApp\bin\DevExpress.Printing.v19.2.Core.dll" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="false" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="F:\OneStream Software\OneStreamAppRoot\OneStreamApp\bin\DevExpress.Data.v19.2.dll" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="false" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="C:\Windows\Microsoft.NET\Framework\v4.0.30319\System.Drawing.dll" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports DevExpress.Export.Xl
Imports DevExpress.Spreadsheet
Imports System.Drawing

Namespace OneStream.BusinessRule.Extender.EP_ValidateRACI
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown,  ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
					
						Dim dt_file_VBO As New DataTable
						Dim dt_file_OrgType As New DataTable
						Dim dt_compare_VBO As New DataTable
						Dim dt_compare_OrgType As New DataTable
						
						'get vbo list from meta data
						Dim vbolist_system As New List(Of String)
						Dim orgtype_system As New List(Of String)
						
						Dim entityList As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "ENT", "E#Walmart_Total_Company.Base", True)
						Dim wfClusterPK As WorkflowUnitClusterPk = si.WorkflowClusterPk
						For Each entity In entityList
							Dim entityId As Integer = BRApi.Finance.Members.GetMemberId(si, DimTypeID.Entity, entity.Member.Name)
							Dim timeid As Integer = wfClusterPK.TimeKey
							Dim vbo_attr As String = BRApi.Finance.Entity.Text(si, entityId, 5, ScenarioTypeId.Budget, timeid)
							Dim orgtype_attr As String = BRApi.Finance.Entity.Text(si, entityId, 2, ScenarioTypeId.Budget, timeid)
							vbo_attr = vbo_attr.Replace("Att_","").Replace("ATT_","")
							If vbo_attr IsNot String.Empty And Not vbolist_system.Contains(vbo_attr)
								vbolist_system.Add(vbo_attr)
							End If
							If orgtype_attr IsNot String.Empty And Not orgtype_system.Contains(orgtype_attr)
								orgtype_system.Add(orgtype_attr)
							End If
						Next
						
						'get vbo list from raci table
						Dim sql_VBO As String = "SELECT DISTINCT VBO FROM XFW_RACI_Matrix"
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							dt_file_VBO = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, sql_VBO, True)
						End Using
						Dim vbolist_file As New List(Of String)
						If dt_file_VBO IsNot Nothing AndAlso dt_file_VBO.Rows.Count>0
							For Each dr_file_VBO In dt_file_VBO.Rows
								vbolist_file.Add(dr_file_VBO("VBO"))
							Next	
						End If
						
						'get org type list from raci table
						Dim sql_OrgType As String = "SELECT DISTINCT Org_Type FROM XFW_RACI_Matrix"
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							dt_file_OrgType = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, sql_OrgType, True)
						End Using
						Dim orgtype_file As New List(Of String)
						If dt_file_OrgType IsNot Nothing AndAlso dt_file_OrgType.Rows.Count>0
							For Each dr_file_OrgType In dt_file_OrgType.Rows
								orgtype_file.Add(dr_file_OrgType("Org_Type"))
							Next	
						End If
						
						dt_Compare_VBO = CompareLists(si, vbolist_system, vbolist_file)
						dt_compare_OrgType = CompareLists(si, orgtype_system, orgtype_file)
						
						Dim user_id As String = si.UserName
'						Dim ts As String = DateTime.Now.ToString("yyyyMMdd_HHmmss")
						Dim filename As String = "RACIValidation_" & user_id
						
						Dim exporter As IXlExporter = XlExport.CreateExporter(XlDocumentFormat.Xlsx)
						Dim filepath = BRAPi.Utilities.GetFileShareFolder(si, FileShareFolderTypes.ApplicationRoot, Nothing)
						Using stream As New FileStream(filepath & "\Enterprise\Groups\Everyone\" & filename & ".xlsx", FileMode.Create, FileAccess.ReadWrite)
               				Using document As IXlDocument = exporter.CreateDocument(stream)
                            	document.Options.Culture = CultureInfo.CurrentCulture
                            	Using sheet As IXlSheet = document.CreateSheet()
	                                 sheet.Name = "VBO"                                                                                  
	                                 Me.PopulateSheet(si, sheet, dt_Compare_VBO)
								End Using
								
								Using sheet As IXlSheet = document.CreateSheet()
	                                 sheet.Name = "Org Type"                                                                                  
	                                 Me.PopulateSheet(si, sheet, dt_compare_OrgType)
								End Using
								
							End Using
						End Using
						
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Private Function CompareLists(ByVal si As SessionInfo, ByVal list_system As List(Of String), ByVal list_raci As List(Of String)) As DataTable
			Try 
				Dim dt_Compare As New DataTable
				dt_Compare.Columns.Add("Name")
				dt_Compare.Columns.Add("Attribute")
				dt_Compare.Columns.Add("RACI")
				
				For Each item_system In list_system
					If Not list_raci.Contains(item_system)
						Dim row As DataRow = dt_Compare.NewRow
						row("Name") = item_system
						row("Attribute") = "Yes"
						row("RACI") = "No"
						dt_Compare.Rows.Add(row)
					End If
				Next
				
				For Each item_file In list_raci
					If Not list_system.Contains(item_file)
						Dim row As DataRow = dt_Compare.NewRow
						row("Name") = item_file
						row("Attribute") = "No"
						row("RACI") = "Yes"
						dt_Compare.Rows.Add(row)
					End If
				Next
						
			Return dt_Compare		
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function	
		
			Private Sub PopulateSheet(ByVal si As SessionInfo, ByVal sheet As IXlSheet, ByVal dt As DataTable)
			Try
				
				If dt IsNot Nothing AndAlso dt.Rows.Count>0 Then
					
					'create columns in sheet
					Dim colindex As Integer = 0
					For Each dc In dt.Columns
						Using column As IXlColumn = sheet.CreateColumn(colindex)
				        	column.WidthInPixels = 150
				    	End Using
						colindex = colindex + 1
					Next
					
				  
					
					'add header row in sheet
					Using row As IXlRow = sheet.CreateRow()
						For Each dc In dt.Columns
							Using cell As IXlCell = row.CreateCell()
					           cell.Value = dc.ColumnName.ToString
'							   Dim formattingType As New XlCellFormatting()
'							   formattingType.Fill = XlFill.SolidFill(Color.LightGray)
'							   formattingType.Font.Bold = True
'							   cell.ApplyFormatting(formattingType)
					    	End Using
						Next	
					End Using
					
					'add data rows in sheet
					For Each dr In dt.Rows
						Using row As IXlRow = sheet.CreateRow()
							For Each dc In dt.Columns
								 Using cell As IXlCell = row.CreateCell()
						            cell.Value = dr(dc.ColumnName).ToString
						         End Using
							Next
						End Using
					Next
						
				End If
				
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub	
		
		Public Function CSVBuilder(dt As DataTable) As Text.StringBuilder
			Dim sCSV As New Text.StringBuilder
			If dt IsNot Nothing Then
				If dt.Rows.Count > 0 Then
					
					For Each dc As DataColumn In dt.Columns
						sCSV.Append(dc.ColumnName & ",")
					Next
					sCSV.Remove(sCSV.Length-1,1)
					sCSV.Append(Environment.NewLine)
					For Each dr As DataRow In dt.Rows
						For Each dc As DataColumn In dt.Columns
	     					sCSV.Append(dr(dc).ToString & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
					Next
				End If
			End If
			Return sCSV
    	End Function
		
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EP_VBO_CC_Movements">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="NonWage_VBO_CC_Movements" />
            </referencedAssemblies>
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
#End Region
#Region "Rule Change Mgmt"
'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 - - VBO COSTCENTER Functions
	'Mods:		
'--------------------------------------------------------------------------------------------------------------------------------------------
#End Region
Namespace OneStream.BusinessRule.Extender.EP_VBO_CC_Movements
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim epHelper As New OneStream.BusinessRule.DashboardExtender.NonWage_VBO_CC_Movements.MainClass
						BRAPI.ErrorLog.LogMessage(si, "Calling UpdateVBOCCMappings")
						epHelper.UpdateVBOCCMappings(si)
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EP_VC_Create_Table">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.EP_VC_Create_Table
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				
						
				Dim sql As New Text.StringBuilder
				
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'				'sql.AppendLine("Drop table aaa_test")
'				sql.AppendLine("Drop table XFW_PLP_PLAN_PLAN_FINAL")
'				sql.AppendLine("Drop table XFW_EP_VC_TRACKER")
'				sql.AppendLine("Drop table XFW_PLP_REGISTER_NOH")
'				sql.AppendLine("Drop table XFW_PLP_REGISTER_PLAN_FINAL")
'				sql.AppendLine("Drop table XFW_WMT_HC_FTE_MONTHLY_PLAN_FINAL")
'				sql.AppendLine("Drop table XFW_WMT_HC_FTE_MONTHLY_PLAN_V3")
				
				sql.AppendLine("Alter PROC [dbo].[EP_Test] As
                                BEGIN
									Declare @rtn int
									set @rtn=1
									BEGIN TRY
										Select 'Return_Value'=@rtn
									End Try
									Begin catch
										Select 'Return_Value'=@rtn
									End Catch
								End ")
									
				
'					sql.AppendLine("CREATE TABLE [dbo].[XFW_EP_VC_TRACKER]")
'					sql.AppendLine("(")
'					sql.AppendLine(" [ID] [varchar] (200) PRIMARY KEY, ")
'					sql.AppendLine(" [Node_Name] [varchar] (200),")
'					sql.AppendLine(" [Source_Table_Name] [varchar] (200),")
'					sql.AppendLine(" [Source_Scenario] [varchar] (100),")
'					sql.AppendLine(" [UserName] [varchar] (100),")
'					sql.AppendLine(" [Target_Table_Name] [varchar] (200),")
'					sql.AppendLine(" [Target_Scenario] [varchar] (100),")
'					sql.AppendLine(" [Year] [varchar] (10),")
'					sql.AppendLine(" [Created_TS] [DATETIME],")
'					sql.AppendLine(" [Status] [varchar] (100)")
'					sql.AppendLine(")")
'				sql.AppendLine("Drop XFW_PLP_Register_B_Plan_Final")

'				sql.AppendLine("Exec VersionControlProc 'XFW_NonWage_Register','Plan_v1','VBO','Business_Services_Rollup','2023','RegisterID, RegisterIDInstance, WFProfileName, WFScenarioName, WFTimeName, JobTitle, LastName, FirstName, Wage, Bonus, FTE, GradeLevel, Status, HireDate, HirePeriod, TermDate, TermPeriod, BirthDate, OutPeriod, OutCode, InPeriod, InCode, costcenter, Code1, Code2, Code3, Code4, Code5, Code6, Code7, Code8, Code9, Code10, Code11, Code12, NCode1, NCode2, NCode3, NCode4, NCode5, NCode6, NCode7, NCode8, DCode1, DCode2, DCode3, DCode4, Annot1, Annot2','3956c704-903d-4f48-8dbb-d28e3148109b'  ")
				
'				sql.AppendLine("ALTER PROC [dbo].[EP_VersionControlProc] @TblName varchar(100),@TgtScenario varchar(100),@TgtType varchar(100),@TgtNode  varchar(100),@TgtYear  varchar(100),@TgtTblClmn VARCHAR(MAX), @StId varchar(100) As
'                                BEGIN
'									BEGIN TRY
'										-- Declaration 
'										Declare  @TgtTblName  varchar(100), @sql  VARCHAR(MAX) 
'										set @TgtTblName=@TblName+'_'+@TgtScenario+'_'+@TgtYear
'										-- Update the tracker table to Running
'										Set @sql = 'Update XFW_EP_VC_TRACKER Set Status = ' + '''' + 'Running' + '''' + ' Where ID=' + '''' + @StId + ''''
'										EXEC (@sql)
'										--- Create table If Not exists
'										If(OBJECT_ID(@TgtTblName) Is NULL)
'											BEGIN
'												Set @sql = 'select * into ' + @TgtTblName + ' from (select top 1 * from '+@TblName+')t'
'												EXEC (@sql)
'												Set @sql = 'Truncate Table ' + @TgtTblName
'												EXEC (@sql)
'											End

'										SET NOCOUNT On
'										If @TgtType='SEGMENT'
'											BEGIN TRY
'												--- Delete the Target data
'												Set @sql = 'Delete t from ' + 
'												@TgtTblName + '  t
'												inner Join 
'												XFW_EP_VC_SEGMENT_VBO_CC  m
'												On
'												t.costcenter=m.cost_center
'												Where 
'												m.SEGMENT=' +''''+ @TgtNode+''''
'												EXEC (@sql)

'												-- Insert data Into section

'												Set @sql = 'INSERT into ' + @TgtTblName +
'												' select ' + @TgtTblClmn + ' from ' + 
'												@TblName + '  t
'												inner Join 
'												XFW_EP_VC_SEGMENT_VBO_CC  m
'												On
'												t.costcenter=m.cost_center
'												Where 
'												m.SEGMENT=' + ''''+@TgtNode+'''' +
'												'and t.wfscenarioname = '+'''' + 'Plan_Working'+'''' +
'												'and t.wfTimename = '+'''' + @TgtYear +''''
'												EXEC (@sql)

'											End TRY
'											BEGIN CATCH
'											-- Update the tracker table to Failed
'												Set @sql = 'Update XFW_EP_VC_TRACKER Set Status = ' + '''' + 'Failed' + '''' + ' Where ID=' + '''' + @StId + ''''
'												EXEC (@sql)
'											End CATCH

'										Else If @TgtType='VBO'
'											BEGIN TRY

'												--- Delete the Target data
'												Set @sql ='Delete t from ' +
'												@TgtTblName + '  t
'												inner Join 
'												XFW_EP_VC_SEGMENT_VBO_CC  m
'												On
'												t.costcenter=m.cost_center
'												Where 
'												m.VBO_NAME=' + '''' + @TgtNode + ''''
'												EXEC (@sql)

'												-- Insert data Into section

'												Set @sql ='INSERT into ' + @TgtTblName + 
'												' select ' + @TgtTblClmn + ' from ' + 
'												@TblName + '  t
'												inner Join 
'												XFW_EP_VC_SEGMENT_VBO_CC  m
'												On
'												t.costcenter=m.cost_center
'												Where 
'												m.VBO_NAME=' + '''' + @TgtNode + '''' +
'												'and t.wfscenarioname = '+'''' + 'Plan_Working'+'''' +
'												'and t.wfTimename = '+'''' + @TgtYear +''''
'												Exec (@sql)

'											End TRY
'											BEGIN CATCH
'											-- Update the tracker table to Failed
'												Set @sql = 'Update XFW_EP_VC_TRACKER Set Status = ' + '''' + 'Failed' + '''' + ' Where ID=' + '''' + @StId + ''''
'												EXEC (@sql)
'											End CATCH

'										Else If @TgtType='TOTAL'
'											BEGIN TRY
'												--- Delete the Target data
'												Set @sql ='Delete t from ' +
'												@TgtTblName + '  t
'												inner Join 
'												XFW_EP_VC_SEGMENT_VBO_CC  m
'												On
'												t.costcenter=m.cost_center'
'												EXEC (@sql)

'												-- Insert data Into section

'												Set @sql = 'INSERT into ' + @TgtTblName + 
'												' select ' + @TgtTblClmn + ' from ' + 
'												@TblName + '  t
'												inner Join 
'												XFW_EP_VC_SEGMENT_VBO_CC  m
'												On
'												t.costcenter=m.cost_center
'												Where
'												t.wfscenarioname = '+'''' + 'Plan_Working'+'''' +
'												'and t.wfTimename = '+'''' + @TgtYear +''''
'												EXEC (@sql)
'											End TRY
'											BEGIN CATCH
'											-- Update the tracker table to Failed
'												Set @sql = 'Update XFW_EP_VC_TRACKER Set Status = ' + '''' + 'Failed' + '''' + ' Where ID=' + '''' + @StId + ''''
'												EXEC (@sql)
'											End CATCH
'											Set @sql = 'update ' + @TgtTblName + ' set wfScenarioName=' + ''''+@TgtScenario+''''
'											EXEC (@sql)
										
'											-- Update the tracker table to Completed
'											Set @sql = 'Update XFW_EP_VC_TRACKER Set Status = ' + '''' + 'Completed' + '''' + ' Where ID=' + '''' + @StId + ''''
'											EXEC (@sql)
'										End TRY
'										BEGIN CATCH
'											Set @sql = 'Update XFW_EP_VC_TRACKER Set Status = ' + '''' + 'Failed' + '''' + ' Where ID=' + '''' + @StId + ''''
'											EXEC (@sql)
'										End CATCH
'									End



'")
'				sql.AppendLine("CREATE VIEW XFW_EP_VC_SEGMENT_VBO_CC AS
'				select h.COST_CENTER,h.VBO_NAME,s.SEGMENT from 
'				XFW_ExpensePlanning_VBO_CC_Mappings h 
'				inner join 
'				XFW_ExpensePlanning_SEGMENT_VBO s on
'				h.VBO_NAME=s.VBO_NAME")
				
				
				
				
				BRApi.ErrorLog.LogMessage(si,"sql",sql.ToString)
					BRApi.Database.ExecuteActionQuery (dbConnApp, sql.ToString, True, False)
				End Using
					

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EP_Version_Control">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq



Namespace OneStream.BusinessRule.Extender.EP_Version_Control
	Public Class MainClass
		
		Const DEBUG As Boolean = True
		Dim parameterName As String = "EP_VC_configFile"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						Dim dict  = Me.readConfig(si)
					Case Is= ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
					
						VersionCopy(si, globals, api, args)
					
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Private Function VersionCopy(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Dim idList As New List(Of String)
			Try
				Dim VCTablelist As New List(Of String) 
				Dim Year As String = args.NameValuePairs.XFGetValue("VCSTime")
				Dim SScenario As String = args.NameValuePairs.XFGetValue("VCSScenario")
				Dim TScenario As String = args.NameValuePairs.XFGetValue("VCTScenario")
				Dim param_CC As String = args.NameValuePairs.XFGetValue("VCSSegment")
				Dim nodeType As String = args.NameValuePairs.XFGetValue("NodeType")
				Dim idListStr As String = args.NameValuePairs.XFGetValue("IdList")
				Dim tableListStr As String = args.NameValuePairs.XFGetValue("tableList")
				Dim stId As String = String.Empty
				Dim i As Integer = 0
				Dim tcolmns As String = String.Empty
				Dim sql_main As New Text.Stringbuilder
				Dim logging As New Text.Stringbuilder
				idList = idListStr.Split("~").ToList
				Dim ts As String = DateTime.Now.ToString("yyyyMMdd_HHmmss")
				
				
'				VCTablelist = getTableList(si)
				If DEBUG Then
					Brapi.ErrorLog.LogMessage(si, "ParamsTT:" & Year & "-" & SScenario & "-" & TScenario & "-" & param_CC & "_" & nodeType)
				End If
				VCTablelist = tableListStr.Split("~").ToList
				For Each tbl As String In VCTablelist	
					logging.Appendline(tbl)
					tcolmns = getTableCOls(si, tbl, DEBUG)
					stId = idList.Item(i)
					i+=1
					sql_main.AppendLine(String.Format("Exec EP_VersionControlProc '{0}','{1}','{2}','{3}','{4}','{5}','{6}'", tbl, TScenario, nodeType, param_CC, Year, tcolmns, stId))
					
				Next
				
				If DEBUG Then BRApi.ErrorLog.LogMessage(si, "sql_main:", sql_main.toString)
				
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
						BRApi.Database.ExecuteActionQuery(dbConnApp, sql_main.ToString, False, False)
				End Using
				
				stId = idList.Item(i)
				
				Me.updateScenarioTracker(si,stId,"Running")
				
				Dim versionControl_dict As New Dictionary(Of String,String)
				versionControl_dict.Add("VCSTime",Year)
				versionControl_dict.Add("VCSScenario",SScenario)
				versionControl_dict.Add("VCTScenario",TScenario)
				versionControl_dict.Add("VCSSegment",param_CC)
				versionControl_dict.Add("NodeType",nodeType)
				
				Dim Cube_TaskActivityObj As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(si,"TRG_Version_Control_Cube",versionControl_dict)
				Dim cubeTaskActivityItem = BRApi.TaskActivity.GetTaskActivityItem(si,Cube_TaskActivityObj.UniqueID)
				If cubeTaskActivityItem.TaskActivityStatus = TaskActivityStatus.Failed Then
					Me.updateScenarioTracker(si,stId,"Failed")
				Else If cubeTaskActivityItem.TaskActivityStatus = TaskActivityStatus.Completed Then
					Me.updateScenarioTracker(si,stId,"Completed")
				Else
					Me.updateScenarioTracker(si,stId,"Canceled/Unknown")
				End If
				
				Return Nothing
				Catch ex As Exception
'					Me.updateScenarioTracker(si,idList,"Failed")
					Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
				End Try
			
		End Function
		
		Private Function getTableList(ByVal si As SessionInfo) As List(Of String)
			Try
				Dim sql_table As New Text.Stringbuilder
				Dim dt_table As New DataTable
				Dim VCTablelist As New List(Of String)
				
				sql_table.Appendline("SELECT TableName FROM XFW_EP_VC_Tables")
				
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_table = BRApi.Database.ExecuteSql(dbConnApp, sql_table.ToString, False)
				End Using
				
				If dt_table IsNot Nothing AndAlso dt_table.Rows.Count Then
					For Each dr As DataRow In dt_table.Rows
						VCTablelist.Add(dr("TableName"))
					Next
				End If
				
			Return VCTablelist
			
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
			
		End Function
		
		Private Function getTableCOls(ByVal si As SessionInfo, ByVal tblname As String, ByVal DEBUG As Boolean) As String
			Try
				Dim sql As String = String.Format("Select column_name from INFORMATION_SCHEMA.Columns where Table_name = '{0}'",tblname)
				Dim clmn As String = String.Empty
				Dim dt As New DataTable
				
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt  = BRApi.Database.ExecuteSql(dbConnApp,sql.ToString,True)
				End Using	
				If dt IsNot Nothing AndAlso dt.Rows.Count > 0 Then
					
					
					For Each rows In dt.Rows
						clmn = clmn & rows("column_name") & ","
					Next
		
					clmn = clmn.Remove(clmn.Length - 1, 1)
				End If
			Return clmn
			
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
			
		End Function
		Private Sub updateScenarioTracker(ByVal si As SessionInfo,ByVal id As String, ByVal status As String)
			Try
				Dim idStr As String = id
				Dim sql As String = String.Format("Update XFW_EP_VC_TRACKER Set Status ='{0}' Where Id='{1}'",status,idStr)
				
				
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					BRApi.Database.ExecuteSql(dbConnApp,sql.ToString,True)
				End Using	
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
			
		End Sub
		Private Function readConfig(ByVal si As SessionInfo)
			Try
				
				Dim configContent =  BRApi.Dashboards.Parameters.GetLiteralParameterValue(si,False, parameterName)
				
				Dim jsonObj = JsonConvert.DeserializeObject(configContent)
				Dim logs As New Text.StringBuilder
				Dim dictConfig As New Dictionary(Of String, String)
				For Each Item In jsonObj("Data")
					
					Dim tableNames As String = String.Empty
					For Each table In Item("tableList")
						tableNames = tableNames + table + ","
					Next
					tableNames = tableNames.Remove(tableNames.Length - 1,1)
					dictConfig.Add(Item("appName"),tableNames)
				Next
				
			Return dictConfig
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
			
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EP_Version_Control_MAIN">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq

Namespace OneStream.BusinessRule.Extender.EP_Version_Control_MAIN
	Public Class MainClass
		Dim parameterName As String = "VC_configFile"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim VCTablelist As New List(Of String)
						Dim trgTable As String = String.Empty
						Dim stId As String = String.Empty
						
						Dim Year As String = args.NameValuePairs.XFGetValue("VCSTime")
						Dim srcScenario As String = args.NameValuePairs.XFGetValue("VCSScenario")
						Dim trgScenario As String = args.NameValuePairs.XFGetValue("VCTScenario")
						Dim param_CC As String = args.NameValuePairs.XFGetValue("VCSNode")
						Dim nodeType As String = args.NameValuePairs.XFGetValue("NodeType")
						Dim ts = DateTime.Now
						BRApi.ErrorLog.LogMessage(si,"abc" + Year + srcScenario + trgScenario + param_CC + nodeType)
'						Dim jobIdList As List(Of String) = Me.runValidation(si,param_CC,ts)
'						Dim validationCheck As Boolean = Me.checkValidationStatus(si,jobIdList)
'						If Not validationCheck Then
'							Throw New System.Exception("Validation does not matches.")
'						End If
						Dim dictConfig As Dictionary(Of String, String) = Me.readConfig(si)
						For Each dictItem In dictConfig
							Dim target_si As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si,dictItem.Key,openAppResult.Success)
							
							Dim tableList As List(Of String) = dictItem.Value.Split("~").ToList
							Dim idList As String = String.Empty
							For Each tbl As String In tableList	
								trgTable = tbl + "_" + trgScenario + "_" + Year
								stId = Guid.NewGuid.ToString
								idList = idList + stId + "~"
								Me.saveToScenarioTracker(si,stId,dictItem.Key,param_CC,tbl,srcScenario,trgTable,trgScenario,Year,ts,"Queued")
							Next
							stId = Guid.NewGuid.ToString
							idList = idList + stId + "~"
							Me.saveToScenarioTracker(si,stId,dictItem.Key,param_CC,"Cube",srcScenario,"Cube",trgScenario,Year,ts,"Queued")
							
							idList = idList.Remove(idList.Length-1,1)
							Dim paramDict As New Dictionary(Of String, String)
							paramDict.Add("VCSTime",Year)
							paramDict.Add("VCSScenario",srcScenario)
							paramDict.Add("VCTScenario",trgScenario)
							paramDict.Add("VCSSegment",param_CC)
							paramDict.Add("NodeType",nodeType)
							paramDict.Add("tableList",dictItem.Value)
							paramDict.Add("IdList",idList)
							
							Dim taskActivityObj As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(target_si, "TRG_Version_Control",paramDict)
							Dim processId As String = taskActivityObj.UniqueID.ToString
							
						Next
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Sub saveToScenarioTracker(ByVal si As SessionInfo,ByVal stId As String,ByVal app As String, ByVal segmentName As String, ByVal srcTable As String, ByVal srcScenario As String, ByVal trgTable As String, ByVal trgScenario As String, ByVal year As String, ByVal ts As DateTime ,ByVal status As String)
			Try
				Dim userName As String = BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName).User.Description
				Using dbConnApp As DBConnInfo = BRAPi.Database.CreateApplicationDbConnInfo(si)
					Dim sql As New Text.StringBuilder
					sql.AppendLine("Insert Into XFW_EP_VC_TRACKER (ID,AppName,Node_Name,Source_Table_Name,Source_Scenario,UserName,Target_Table_Name,Target_Scenario,Year,Created_TS,Status)")
					sql.AppendLine(String.Format("Values ('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}')",stId,app,segmentName,srcTable,srcScenario,userName,trgTable,trgScenario,year,ts,status))
					BRApi.Database.ExecuteSql(dbConnApp,sql.ToString,True)
				End Using
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		Private Function readConfig(ByVal si As SessionInfo)
			Try
				Dim configContent =  BRApi.Dashboards.Parameters.GetLiteralParameterValue(si,False, parameterName)
				
				Dim jsonObj = JsonConvert.DeserializeObject(configContent)
				Dim logs As New Text.StringBuilder
				Dim dictConfig As New Dictionary(Of String, String)
				For Each Item In jsonObj("Data")
					
					Dim tableNames As String = String.Empty
					For Each table In Item("tableList")
						tableNames = tableNames + table + "~"
					Next
					tableNames = tableNames.Remove(tableNames.Length - 1,1)
					dictConfig.Add(Item("appName"),tableNames)
				Next
				
			Return dictConfig
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Function
		
		Private Function runValidation(ByVal si As SessionInfo,ByVal segment As String,ByVal ts As DateTime) As List(Of String)
			Try
				
				Dim configContent =  BRApi.Dashboards.Parameters.GetLiteralParameterValue(si,False, parameterName)
				Dim jsonObj = JsonConvert.DeserializeObject(configContent)
				
				Dim validationDMName As String = "TRG_Validation_Main"
				Dim logs As New Text.StringBuilder
				Dim src As String = String.Empty
				Dim srcAddtlInfo As String = String.Empty
				Dim srcScenario As String = "Plan_Working"
				Dim trg As String = String.Empty
				Dim trgAddtlInfo As String = String.Empty
				Dim trgScenario As String = "Plan_Working"
				Dim jsonFile As String = String.Empty
				Dim seg As String = String.Empty
				Dim intId As String = String.Empty
				Dim jobId As String = String.Empty
				Dim jobIdList As New List(Of String)
				Dim sql As String  = String.Empty
				Dim id As Guid
				Dim dt_val As New DataTable
				Dim src_si As SessionInfo
				Dim entityName As String = String.Empty
				Dim all_entityListStr As String = String.Empty
				Dim all_entityList As New Text.StringBuilder
				Dim dimensionName As String = "ENT"
				Dim appDict As Dictionary(Of String, String) = New Dictionary(Of String, String) From {{"CAPEX","Corporate"},
										{"WORKFORCE","Workforce"},{"SAMS","Sams"},{"WMTUS","WMTUS"},{"INTLHQ","INTLHQ"}}
					    
				For Each Item In jsonObj("Validation")
					src = Item("src")
					srcAddtlInfo = Item("src_addtlInfo")
					trg = Item("trg")
					trgAddtlInfo = Item("trg_addtlInfo")
					jsonFile = Item("jsonfile")
					seg = Item("segment")
					If seg.XFEqualsIgnoreCase("all") Or segment.XFContainsIgnoreCase(seg)
						id = Guid.NewGuid
						jobId = id.ToString
						jobIdList.Add(jobId)
						
						sql =String.Format("Select INT_ID,Dimension from XFW_OMD_VALIDATION_HELPER where SRC='{0}' and SRC_ADDTLINFO='{1}' 
					    and SRC_SCENARIO ='{2}' and TRG='{3}' and TRG_ADDTLINFO='{4}' and TRG_SCENARIO ='{5}'",src,srcAddtlInfo,srcScenario,trg,trgAddtlInfo,trgScenario)
					    Using dbConnApp As DBConnInfo = BRAPi.Database.CreateApplicationDbConnInfo(si)
					        dt_val = BRApi.Database.ExecuteSql(dbConnApp,sql.ToString,False)
					    End Using
						
						If dt_val IsNot Nothing AndAlso dt_val.Rows.Count >0 
							intId = dt_val(0)("INT_ID")
							If src.XFEqualsIgnoreCase("Enterprise") 
						        src_si = si
						    Else
						        src_si=BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si,appDict.Item(src), openAppResult.Success)
							End If
						    entityName = "E#" + segment + Item("entityCondition").ToString
						    Dim all_entityList_meminfo As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(src_si, dimensionName, entityName, True)
						    For Each all_entity In all_entityList_meminfo
						            all_entityList.Append(all_entity.Member.Name & "-")
						    Next
						    all_entityListStr = all_entityList.ToString.Remove(all_entityList.ToString.Length -1, 1)
						    jobId = Guid.NewGuid.ToString
						    Dim user=BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName).User.Description

						    sql = String.Format("Insert into XFW_OMD_EXECUTEVALIDATION 
						    Values ('{0}','{1}','StatusBlueBall','{2}','{3}')",jobId,intId,user,ts.ToString)
						     Using dbConnApp As DBConnInfo = BRAPi.Database.CreateApplicationDbConnInfo(si)
						        BRApi.Database.ExecuteSql(dbConnApp,sql.ToString,False)
						    End Using
							Dim dict_validationDM As New Dictionary(Of String,String)
						    dict_validationDM.Add("JobId",jobId)
						    dict_validationDM.Add("EntityList",all_entityListStr)
						    dict_validationDM.Add("JsonFile",jsonFile)
						    dict_validationDM.Add("Src_Scenario",srcScenario)
						    dict_validationDM.Add("Trg_Scenario", trgScenario)
						    Dim objTaskActivityItem As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(si, validationDMName, dict_validationDM)
						End If
					End If
				Next
				Return jobIdList
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
			
		End Function
		
		Private Function checkValidationStatus(ByVal si As SessionInfo, ByVal jobIdList As List(Of String)) As Boolean
			Try
				Dim result As Boolean = True
				Dim statusBall As String = "StatusBlueBall"
				Dim sql As String = String.Empty
				Dim dt As New DataTable
				Using dbConnApp As DBConnInfo = BRAPi.Database.CreateApplicationDbConnInfo(si)
					        
				While statusBall = "StatusBlueBall"
					statusBall = "StatusGreenBall"
					For Each listItem In jobIdList
						sql = String.Format("Select ValidationStatus from XFW_OMD_EXECUTEVALIDATION Where Job_ID='{0}'",listItem)
					    dt = BRApi.Database.ExecuteSql(dbConnApp,sql.ToString,False)
					    If dt IsNot Nothing AndAlso dt.Rows.Count>0 Then
							If dt(0)(0).ToString.XFEqualsIgnoreCase("StatusRedBall") Or dt(0)(0).ToString.XFEqualsIgnoreCase("StatusOrangeBall")
								Return False
							Else If dt(0)(0).ToString.XFEqualsIgnoreCase("StatusBlueBall")
								statusBall = "StatusBlueBall"
							End If
						End If
					Next
				End While
				End Using
				Return result
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
			
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EP_WF_Load_Automation">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.EP_WF_Load_Automation
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						Dim profileName As String = args.NameValuePairs.XFGetValue("profileName")
						Dim scenarioName As String = args.NameValuePairs.XFGetValue("scenarioName")
						Dim timeName As String = args.NameValuePairs.XFGetValue("timeName")
						
						Dim valTransform As Boolean = True
						Dim valIntersect As Boolean = True
						Dim loadCube As Boolean = True
						Dim processCube As Boolean = False
						Dim confirm As Boolean = False
						Dim autoCertify As Boolean = False
						
						Dim wfClusterPk As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, profileName, scenarioName, timeName)
						Dim objList As List(Of WorkFlowProfileInfo) = BRApi.Workflow.Metadata.GetRelatives(si, wfClusterPk, WorkflowProfileRelativeTypes.Descendants, WorkflowProfileTypes.InputImportChild)
						Dim wfList As New List(Of String)
						
						For Each wfItem As WorkflowProfileInfo In objList
							Dim wfCLusterPk2 As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, wfitem.Name, scenarioName, timeName)	
							Dim wfStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfClusterPk2)
'							Dim objLoadTransformProcessInfo As LoadTransformProcessInfo = BRApi.Import.Process.ClearStageData(si, wfClusterPk2, wfItem.Name)
							Me.CreateBatchFileTrigger(si,FileShareFolderHelper.GetBatchHarvestFolderForApp(si, True, AppServerConfig.GetSettings(si).FileShareRootFolder, AppServerConfig.GetSettings(si).FileShareBatchHarvestRootFolder,si.AppToken.AppName), wfItem.Name.Replace(".",";"), scenarioName, timeName, False)
							Dim batchInfo As WorkflowBatchFileCollection = BRAPi.Utilities.ExecuteFileHarvestBatch(si, scenarioName, timeName, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, False)
						Next
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Private Sub CreateBatchFileTrigger(ByVal si As SessionInfo, ByVal harvestPath As String, ByVal wfName As String, ByVal wfScenario As String, ByVal wfTime As String, ByVal Testing As Boolean)
			Try
				Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
				Dim Path As String = String.Empty

					If Not Testing Then
						Dim harvestFolderPath As String = FileShareFolderHelper.GetBatchHarvestFolderForApp(si, True, configSettings.FileShareRootFolder, configSettings.FileShareBatchHarvestRootFolder,si.AppToken.AppName)
						
						path = harvestFolderPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-R.txt"
					
					End If
					'BRApi.ErrorLog.LogMessage(si, $"Create New Trigger File {wfName} {wfScenario} {wfTime}", "")
					If Not File.Exists(path) Or Testing = True Then
						' Create a file to write to. 
						'BRApi.ErrorLog.LogMessage(si, $"Create New Trigger File {path}", "")
						Using sw As StreamWriter = File.CreateText(path)
							sw.WriteLine("Batch File Trigger")
						End Using
					End If
				Catch ex As Exception
					Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
				End Try
		  End Sub
		
		  
		 
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EP_WF_Lock_Unlock">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.EP_WF_Lock_Unlock
	Public Class MainClass
		
		Const tableName As String = "WorkflowChannel"
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Dim dbConnApp As DBConnInfo = BRAPi.Database.CreateApplicationDbConnInfo(si)	
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						Dim wfpchannels As String() = {"EXP_DP_ADJ"}
						Dim profileName As String = "EP_Walmart_Total_Company"
						Dim scenarioName As String = ScenarioDimHelper.GetNameFromID(si, si.WorkflowClusterPk.ScenarioKey)
						Dim timeName As String = BRApi.Finance.Time.GetNameFromId(si, si.WorkflowClusterPk.TimeKey)
						Dim wfClusterPk As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, profileName, scenarioName, timeName)
						Dim year As String =  BRApi.Finance.Time.GetNameFromId(si, si.WorkflowClusterPk.TimeKey).Substring(0,4)
						Dim IfEnabled As String = String.Empty
						Dim dtcheck As datatable = Nothing
					    Dim dfcheck As DataRow() = Nothing
					    Dim checksql As New Text.StringBuilder
						
						Using dbConnApp 

				            checksql.AppendLine($"SELECT * FROM [dbo].[XFW_EP_LOCK_WF] WHERE WFScenario = '{scenarioName}' AND WFYear = '{year}' ")
		                    dtcheck = BRApi.Database.ExecuteSql(dbConnApp, checksql.ToString, False)

		                End Using
						
						If dtcheck.Rows.Count > 0 Then 

				           dfcheck = dtcheck.[Select]("WfStep = 'Dynamic_Planning' ")

				           If dfcheck.Length > 0 Then

				                IfEnabled = dfcheck(0)("ENABLED")

				           End If

				        End If
												
						
						Dim sql As String = "SELECT UniqueID FROM " & tableName & " WHERE Name IN ('" & String.Join("','",wfpchannels) & "')"
						Dim dt As New DataTable
						Dim wfchannels_list As New List(Of String)
						Using dbConnApp
							dt = BRAPi.Database.ExecuteSql(dbConnApp,sql, False)
						End Using
						
						If dt IsNot Nothing Or dt.Rows.Count > 0  Then
						
							
								For Each dr In dt.Rows
									Dim workflowChannelKey As Guid = Guid.Parse(dr("UniqueID").ToString)
									If IfEnabled.XFEqualsIgnoreCase("TRUE") Then
										BRApi.Workflow.Locking.LockWorkflowUnitDescendants(si, wfClusterPk, WorkflowProfileTypes.InputImportChild, workflowChannelKey)
									Else 
										BRApi.Workflow.Locking.UnlockWorkflowUnitDescendants(si, wfClusterPk, WorkflowProfileTypes.InputImportChild, workflowChannelKey)
									End If
								Next	
								
						End If
						
						
				End Select

				Return Nothing
			Catch ex As Exception
				dbConnApp.Dispose()
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EPtoENT">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_SharedConstants" />
            </referencedAssemblies>
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports OneStream.BusinessRule.DashboardStringFunction.EP_SharedConstants

#End Region

#Region "Rule Change Mgmt"
'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 - - Integration Functions
	'Mods:		
'--------------------------------------------------------------------------------------------------------------------------------------------
#End Region

Namespace OneStream.BusinessRule.Extender.EPtoENT
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim DEBUG As Boolean = True
						Dim func As String = args.NameValuePairs.XFGetValue("Function")
'						Dim esi As SessionInfo = GetOtherAppConnectionString(si)
						Dim watcher_table As String = EPSharedConstants.sWatcherTable
						Dim exp_register As String = EPSharedConstants.sMainRegExpenseTable
						
						If func.XFEqualsIgnoreCase("getCClist")
							Dim getcclist_flag As String = DirectCast(globals.GetObject("getcclist_flag"),String)
							Dim getCCList_status As Boolean = getCClist(si,globals,exp_register,watcher_table,getcclist_flag)
							If Not getCCList_status Then Return Nothing
							
						ElseIf func.XFEqualsIgnoreCase("extractSourceData")
							
							Dim extractSourceData_status As Boolean = extractSourceData(si,globals,exp_register)
							Dim aop_year As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "AOP_Year")
							
							If Not extractSourceData_status Then Return Nothing
						End If
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		#Region "Helper Function"
'		Private Function GetOtherAppConnectionString(ByVal si As SessionInfo) As Object
'			Try	
'				Dim appUniqueID As Guid = ConvertHelper.ToGuid("3151fcb7-dead-4b79-905c-75134361dd2a")
'				Dim varAppToken As New ApplicationToken(si.AppToken.SHA1HashCode, "Walmart QA", appUniqueID)
'				Dim newSeshInfoOtherApp As New SessionInfo(ClientModuleType.Silverlight, si.WebServerUrlUsedByClient, si.AuthToken, varAppToken, si.Culture)
'				Return newSeshInfoOtherApp
'			Catch ex As Exception
'				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'			End Try
'		End Function
		
		Private Function getCClist(ByVal si As SessionInfo, ByRef globals As BRGLobals, ByVal exp_register As String,  ByVal watcher_table As String, ByVal getcclist_flag As String) As Boolean
			Dim getCCList_status As Boolean = False
			Try
				
				Dim dt As DataTable = Nothing
				Dim uniquecclist As String = String.Empty
				Dim sql As String = String.Empty
				
				'get WMTUS Ecomm VBO list from RACI
				Dim sql_wmtus_ecomm As String = "SELECT DISTINCT VBO FROM " & EPSharedConstants.sRACITable & " WHERE AnaplanECF_Filter LIKE '%ECF%'"
				Dim dt_wmtus_ecomm As New DataTable
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_wmtus_ecomm = BRApi.Database.ExecuteSql(dbConnApp, sql_wmtus_ecomm, False)
				End Using
				
				Dim entityList_wmtus_ecomm As New HashSet(Of String)
				
				If dt_wmtus_ecomm IsNot Nothing AndAlso dt_wmtus_ecomm.Rows.Count>0
					For Each dr_wmtus_ecomm In dt_wmtus_ecomm.Rows
						Dim entityList_meminfo_wmtus_ecomm As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "ENT", "E#" & dr_wmtus_ecomm("VBO") & ".Base", True)
						For Each entity_wmtus_ecomm In entityList_meminfo_wmtus_ecomm
							entityList_wmtus_ecomm.Add(entity_wmtus_ecomm.Member.Name)
						Next	
					Next	
				End If	
				
				globals.SetObject("EPtoENT_wmtusecomm_cclist", entityList_wmtus_ecomm)
				
				Dim AOP_Year As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "AOP_Year")
				
				
				If getcclist_flag.XFEqualsIgnoreCase("Watcher")
					sql = "SELECT DISTINCT CostCenter FROM " & EPSharedConstants.sWatcherTable & " WHERE ActivityID='TRG1' AND (Run_Flag=0 OR Run_Flag =-1)"
					
					Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt = BRAPi.Database.ExecuteSql(dbConnApp,sql,False)
					End Using
					If dt.Rows.Count > 0
						For Each dr As DataRow In dt.Rows
							uniquecclist += dr("CostCenter") & ","
						Next
					End If
					
					
				ElseIf getcclist_flag.XFEqualsIgnoreCase("All")
'					sql = "SELECT DISTINCT CostCenter FROM " & EPSharedConstants.sMainRegExpenseTable & " WHERE WFTimeName='" & AOP_Year & "' AND CostCenter NOT IN (" & entityList_wmtus_ecomm & ")"
					
					Dim entityList_meminfo As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "ENT", "E#Walmart_Total_Company.Children.Remove(International_Incl_Div).Base", True)
					For Each entity In entityList_meminfo
						If Not entity.Member.Name.XFEqualsIgnoreCase("Walmart_US") And Not entity.Member.Name.XFEqualsIgnoreCase("Sams_US") And Not entity.Member.Name.XFEqualsIgnoreCase("Corp_ENT") 'Not entityList_wmtus_ecomm.Contains(entity.Member.Name) And
							uniquecclist += entity.Member.Name & ","
						End If
					Next

				End If
				
				If uniquecclist.Length > 0 Then
					uniquecclist = uniquecclist.Remove(uniquecclist.Length-1,1)
				End If
				
'				BRApi.ErrorLog.LogMessage(si, "all cclist", uniquecclist)
				
				globals.SetObject("EPtoENT_getCClist", uniquecclist)
					
				getCCList_status = True
			
			Catch ex As Exception
				getCCList_status = False
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		Return getCCList_status
		End Function	
		
		Private Function extractSourceData(ByVal si As SessionInfo, ByRef globals As BRGLobals, ByVal exp_register As String) As Boolean
			Dim extractSourceData_status As Boolean = False
			Try
				Dim dt As DataTable = Nothing
				Dim cclist As String = DirectCast(globals.GetObject("EPtoENT_getCClist"), String)
				cclist = cclist.Replace(",","','")
				Dim aop_year As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "AOP_Year")
			    
				
				Dim sql As New Text.StringBuilder
				sql.Append("SELECT WFScenarioName, WFTimeName, CostCenter, GL, TF_2, SUM(P01) As P01, SUM(P02) As P02, SUM(P03) As P03, SUM(P04) As P04, SUM(P05) As P05, SUM(P06) AS P06, SUM(P07) As P07, SUM(P08) As P08, SUM(P09) As P09, SUM(P10) As P10, SUM(P11) As P11, SUM(P12) As P12")
				sql.Append(" FROM " & exp_register)
				sql.Append(" WHERE CostCenter IN  ('" & cclist & "') AND WFTimeName = '" & aop_year & "' AND WFScenarioName='Plan_Working' AND")
				sql.Append(" TF_11 = 'Local Currency' ")
				sql.Append(" GROUP BY WFScenarioName, WFTimeName, CostCenter, GL, TF_2, TF_11 ")
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, sql.ToString, True)
				End Using
				globals.SetObject("EPtoENT_extractSourceData", dt)
				extractSourceData_status = True
			Catch ex As Exception
				extractSourceData_status = False
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		Return extractSourceData_status
		End Function
		
		Private Function PrintDT(dt As DataTable) As Text.StringBuilder
			Dim sCSV As New Text.StringBuilder
			If dt IsNot Nothing Then
				If dt.Rows.Count > 0 Then
					
					For Each dc As DataColumn In dt.Columns
						sCSV.Append(dc.ColumnName & ",")
					Next
					sCSV.Remove(sCSV.Length-1,1)
					sCSV.Append(Environment.NewLine)
					For Each dr As DataRow In dt.Rows
						For Each dc As DataColumn In dt.Columns
	     					sCSV.Append(dr(dc).ToString & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
					Next
				End If
			End If
			Return sCSV
    	End Function
		#End Region
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EPtoFCP">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.EPtoFCP
	Public Class MainClass
		
		#Region "Main Function"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim DEBUG As Boolean = True
						Dim func As String = args.NameValuePairs.XFGetValue("Function")
						Dim watcher_table As String = "XFW_ExpensePlanning_Watcher"
						Dim exp_register As String = "XFW_NonWage_Register"
						' ----------- calling getcclist function ----------------
						If func.XFEqualsIgnoreCase("getCClist")
							Dim getcclist_flag As String = DirectCast(globals.GetObject("getcclist_flag"),String)
							Dim getCCList_status As Boolean = getCClist(si,globals,exp_register,watcher_table,getcclist_flag)
							If Not getCCList_status Then Return Nothing
						
						' ----------- calling extract source data function ---------------------
						ElseIf func.XFEqualsIgnoreCase("extractSourceData")
							Dim extractSourceData_status As Boolean = extractSourceData(si,globals,exp_register)
							If Not extractSourceData_status Then Return Nothing
						End If
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		
		' ------------------- get cclist function ---------------------
		#Region "getcclist function"
		Private Function getCClist(ByVal si As SessionInfo, ByRef globals As BRGLobals, ByVal exp_register As String,  ByVal watcher_table As String, ByVal getcclist_flag As String) As Boolean
		
			Dim getCCList_status As Boolean = False
			Try
				' --------------- getting cosst center list from table ---------------------
				Dim dt As DataTable = Nothing
				Dim uniquecclist As String = String.Empty
				Dim sql As String = String.Empty
				If getcclist_flag.XFEqualsIgnoreCase("Watcher")
					sql = "SELECT DISTINCT CostCenter FROM " & watcher_table & " WHERE ActivityID='TRG5' AND (Run_Flag=0 OR Run_Flag =-1)"
				ElseIf getcclist_flag.XFEqualsIgnoreCase("All")
					sql = "SELECT DISTINCT CostCenter FROM " & exp_register
				End If
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt = BRAPi.Database.ExecuteSql(dbConnApp,sql,False)
				End Using
				 ' ------------- making comma seprated string of cost centers ----------------
				If dt.Rows.Count > 0
					For Each dr As DataRow In dt.Rows
						uniquecclist += dr("CostCenter") & ","
					Next
				End If
				If uniquecclist.Length > 0 Then
					uniquecclist = uniquecclist.Remove(uniquecclist.Length-1,1)
				End If
				'  ------------ storing cost center in global object ----------------
				globals.SetObject("EPtoFCP_getCClist", uniquecclist)
				getCCList_status = True
				
			Catch ex As Exception
				getCCList_status = False
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		Return getCCList_status
		End Function	
		#End Region
		
		' ------------------- extract source data function ------------------
		#Region "Extract source data "
		Private Function extractSourceData(ByVal si As SessionInfo, ByRef globals As BRGLobals, ByVal exp_register As String) As Boolean
			Dim extractSourceData_status As Boolean = False
			Try
				' -------------- fetching data from table for list of costcenters -------------------
				Dim dt As DataTable = Nothing
				Dim aopYear As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "AOP_Year")
				Dim aopScenario As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "AOP_Scenario")
				Dim cclist As String = DirectCast(globals.GetObject("EPtoFCP_getCClist"), String)
				cclist = cclist.Replace(",","','")
				Dim sql As New Text.StringBuilder
				sql.Append("SELECT WFScenarioName,WFTimeName,UserID,CostCenter,GL,LineItem,
							TF_1 As LineItemDescription,
							TF_2 As CenterType,
							TF_3 As Currency,
							TF_4 As Project_Description_Scope,
							TF_5 As ExpenseType,
							TF_6 As Vendor_Recipient,
							TF_7 As Position_Contract_Project_Type,
							TF_8 As Format,
							TF_9 As Initiative,
							TF_11 As Local_Reporting,
							TF_13 As IfOther,
							NF_2 As Duration, 
							P01 As M1, P02 As M2, P03 As M3, P04 As M4, P05 As M5, P06 As M6, P07 As M7, P08 As M8, P09 As M9, P10 As M10, P11 As M11, P12 As M12")
				sql.Append(" FROM " & exp_register)
				sql.Append(" WHERE CostCenter IN  ('" & cclist & "') AND ")
				sql.Append(" WFTimeName = '" & aopYear & "' AND ")
				sql.Append(" WFScenarioName = '" & aopScenario & "'")
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, sql.ToString, True)
				End Using
				globals.SetObject("EPtoFCP_extractSourceData", dt)
				
				extractSourceData_status = True
			Catch ex As Exception
				extractSourceData_status = False
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		Return extractSourceData_status
		End Function
		#End Region
		
		#Region"Print DT"
		Private Function PrintDT(dt As DataTable) As Text.StringBuilder
			Dim sCSV As New Text.StringBuilder
			If dt IsNot Nothing Then
				If dt.Rows.Count > 0 Then
					
					For Each dc As DataColumn In dt.Columns
						sCSV.Append(dc.ColumnName & ",")
					Next
					sCSV.Remove(sCSV.Length-1,1)
					sCSV.Append(Environment.NewLine)
					For Each dr As DataRow In dt.Rows
						For Each dc As DataColumn In dt.Columns
	     					sCSV.Append(dr(dc).ToString & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
					Next
				End If
			End If
			Return sCSV
    	End Function
		#End Region
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EPtoFCP_load">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_GATEWAY" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_VARIABLES" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_UTILITY" />
            </referencedAssemblies>
            <sourceCode><![CDATA[#Region "Libraries"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics
Imports System.Net
Imports System.Net.Http
Imports System.Reflection
Imports System.Threading.Tasks
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq

Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_GATEWAY
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_VARIABLES
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_UTILITY
Imports OneStream.BusinessRule.Extender.OS_Models

#End Region

'/******************************************* EP to FCP PUT (Incremental) *****************************/

Namespace OneStream.BusinessRule.Extender.EPtoFCP_load
	Public Class MainClass
		
		#Region "constants"
		Const m_PUT_PageSize As Integer = 50000
		Const m_Timeout As Short = 10
		Private m_Base_URI As String
		Private m_Client As HttpClient
		Private m_asyncGets As New List(Of Task(Of OSJsonResponse))
		Private m_PutPageCount As Integer = 0
		Private m_PutErrorOccurred As Boolean
		Private m_PutTotalRecordCount As Integer = 0
		Private m_ExtenderLog As New Text.StringBuilder
		Private m_FCPGateWay As IntegrationGateway(Of FCPIntegrationParams) = Nothing
		#End Region
		
		#Region "Main Function"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.Unknown
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						'  ------------- getting data from global object ------
						m_FCPGateWay = New IntegrationGateway(Of FCPIntegrationParams)(si, "FCP_SS_TECH_EXPENSE", OSModuleType.FCP)
						Dim dt As DataTable = Nothing
						dt = DirectCast(globals.GetObject("EPtoFCP_extractSourceData"), DataTable)
						 ' --------- fetching credentials for FCP put from table ----------------------
'						Dim cred_dt As DataTable
'						Dim dml As String = String.Format( "SELECT * FROM [dbo].[XFW_FCP_ENT_PUT_CRED] where App='EP-FCP'")

'						Using dbConnApp As DBConnInfo = BRAPi.Database.CreateApplicationDbConnInfo(si)
'						    cred_dt = BRApi.Database.ExecuteSql(dbConnApp, dml.ToString, True)
'						End Using
'						If cred_dt Is Nothing Or cred_dt.Rows.Count<0 Then
'							Throw New System.Exception("FCP put credentials do not found in table")
'						End If
						
'						' ------------ setting fcp put credentials ----------------------
'						m_Base_URI = m_FCPGateWay.Params.EndPoint(OSActionType.Put.ToString)(0) 'cred_dt.Rows(0)("Base_URI").ToString
'						Dim svcConsumerId As String = m_FCPGateWay.Decrypt(m_FCPGateWay.Params.ConsumerId,ENCRIPTION_KEY) 'cred_dt.Rows(0)("ConsumerId").ToString
'						Dim	svcName As String = m_FCPGateWay.Params.SvcName 'cred_dt.Rows(0)("Name").ToString
'						Dim	svcEnv As String = m_FCPGateWay.Params.SvcEnv 'cred_dt.Rows(0)("ENV").ToString
						
'						' ---------- setting up http client ------------
'						m_Client = New HttpClient()
'						m_Client.Timeout = TimeSpan.FromMinutes(m_Timeout)
'						m_Client.DefaultRequestHeaders.Clear()
'						m_Client.DefaultRequestHeaders.ConnectionClose = False
						
'						m_Client.DefaultRequestHeaders.Add("cache-control", "no-cache")
'						m_Client.DefaultRequestHeaders.Add("WM_CONSUMER.ID", svcConsumerId)
'						m_Client.DefaultRequestHeaders.Add("WM_SVC.ENV", svcEnv)
'						m_Client.DefaultRequestHeaders.Add("WM_SVC.NAME", svcName)
						
						Dim startTime As DateTime= DateTime.Now
						'------------------------------------------get batch id from FCP----------------------------------------------
						Dim batchId As String =Me.getBatchIdFromFCP(si)
						'Dim batchId As String = DirectCast(globals.GetObject("batchId"),String)
						globals.GetObject("EPtoFCP_PROCESS_LOG").AppendLine(" ---------------- Time to fetch BatchId: " & (DateTime.Now-startTime).ToString)
						'------------------------------------------post register data to FCP------------------------------------------
						startTime = DateTime.Now
						Me.PutExpRegDTToFCP(si,dt,batchId)
						globals.GetObject("EPtoFCP_PROCESS_LOG").AppendLine(" ------------- Time to FCP post data: " & (DateTime.Now-startTime).ToString)
						'------------------------------------------put for clear Reg in FCP-------------------------------------------
						startTime = DateTime.Now
						Me.PutClearPOVRegInFCP(si,batchId,globals)
						globals.GetObject("EPtoFCP_PROCESS_LOG").AppendLine(" ---------------- Time to FCP clear Reg: " & (DateTime.Now-startTime).ToString)
						'------------------------------------------put mark completion from FCP----------------------------------------
						startTime = DateTime.Now
						Me.PutMarkCompletionFromFCP(si,batchId)
						globals.GetObject("EPtoFCP_PROCESS_LOG").AppendLine(" ------------ Time to FCP mark completion: " & (DateTime.Now-startTime).ToString)
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
				Me.AddLogMessage(si,ex.Message)
			Finally
				globals.GetObject("EPtoFCP_PROCESS_LOG").AppendLine(m_ExtenderLog.ToString)
			End Try
		End Function
		#End Region
		
		 ' ------------------- get batch id from fcp -----------------------
		 #Region "get BatchID from FCP"
		Public Function getBatchIdFromFCP(ByVal si As SessionInfo)
			Dim rTask As Task(Of OSJsonResponse)
			Dim content As String = ""
			Try
				' ----------------- get batch id from FCP --------------
				Dim jsonResult As Object = Nothing
				Dim batchId As String =""
				Dim jObj As JObject = New Jobject
				jObj("Type") = "EXPENSE_REGISTER"
				rTask = Me.PutDataToFcpAsync(si,jObj.ToString,OSActionType.Guid)
				content = rTask.Result.StatusCode.ToString & rTask.Result.ReasonPhrase.ToString & rTask.Result.JsonData.ToString
				' ------------------- checking fcp response status code -------------------------
				If rTask.Result.Success Then
					jsonResult = JsonConvert.DeserializeObject(rTask.Result.JsonData)
					batchId= jsonResult("BatchId")
					Me.AddLogMessage(si,"FCP PUT batchId fetched successfully." & content)
				Else
					m_PutErrorOccurred = True
					Me.AddLogMessage(si,"Error occured in fetching batch id: " & content)
					Throw New System.Exception("Batch Id not fetched. " & content)
				End If
				' -------------- return batch id --------------------
				Return batchId
			Catch ex As Exception
				Me.AddLogMessage(si,"FCP PUT batchId exception occured." & content)
				Me.AddLogMessage(si,"exception message ." & ex.Message )
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		
		' ---------------- put the data to FCP in pages -----------------------
		#Region "Put EXPREG DT To FCP"
		Public Sub PutExpRegDTToFCP(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal batchId As String)
			Try
				Dim numOfPages As Integer = Math.Ceiling(dt.Rows.Count / m_PUT_PageSize)
				Me.AddLogMessage(si, $"Preparing to send data to FCP. Row Count: {dt.Rows.Count}. Number of pages: {numOfPages}")
				Dim pageChunckCount As Integer = 0
				Dim successCount As Integer = 0
				Dim startTime As DateTime = DateTime.Now
				For page As Integer = 1 To numOfPages
					' ------------------ break dt in pages of m_put_pageSize ------------------------
					Dim dtPage As DataTable = dt.Rows.Cast(Of System.Data.DataRow).Skip((page - 1) * m_PUT_PageSize).Take(m_PUT_PageSize).CopyToDataTable()
                    pageChunckCount +=1
					If dtPage IsNot Nothing Then
						Dim jObj As JObject = New Jobject
						Dim jObjER As JObject = New Jobject
						jObj("Dataset_Type") = "EXPENSE_REGISTER"
						
						m_PutPageCount += 1
						m_PutTotalRecordCount += dtPage.Rows.Count
						
						jObj("page") = m_PutPageCount
						jObj("Batch_ID") = batchId
						jObjER("rowcount") = dtPage.Rows.Count
						jObjER("data") = JArray.FromObject(dtPage, JsonSerializer.CreateDefault)
						jObj("EXPENSE_REGISTER") = jObjER
						
						m_asyncGets.Add(Me.PutDataToFcpAsync(si,jObj.ToString,OSActionType.Put))
										
					End If
					' ------------ waiting for 5 pages upload --------------------
					If pageChunckCount=5 Or page=numOfPages Then
						Dim result As Task
						pageChunckCount = 0
						result = Task.WhenAll(m_asyncGets.ToArray)
						Try
							result.Wait()
						Catch e As Exception
							Throw ErrorHandler.LogWrite(si, New XFException(si, e))
						End Try
					End If
		        Next
'				
				Dim content As String
				
				Dim i As Integer =0 
				For Each tResults As Task(Of OSJsonResponse) In m_asyncGets
					i+=1
					content = tResults.Result.JsonData
					If tResults.Result.Success = False Then
						Me.AddLogMessage(si,"FCP PUT to post data error at page: " & i & " with error: " & content)
						m_PutErrorOccurred = True
						Exit For
					Else
						successCount += 1
						Me.AddLogMessage(si,"FCP PUT to post data successful at page: " & i & " with response: " & content)
					End If
				Next
				m_asyncGets.Clear
				
				Dim duration As TimeSpan = DateTime.Now - startTime
				If successCount <> numOfPages Then
					Me.AddLogMessage(si, $"Error:- PUT with errors in {duration.Minutes} minutes {duration.Seconds} seconds")
					Throw New System.Exception("Error:- FCP PUT to post data error." )
				Else
					Me.AddLogMessage(si, $"Completed PUT (all {numOfPages} pages) in {duration.Minutes} minutes {duration.Seconds} seconds")
				End If
			Catch ex As Exception
				m_PutErrorOccurred = True
				For Each item In m_asyncGets
					If item.Result.Success = False Then
						Me.AddLogMessage(si,"FCP PUT exception in post data : " & item.Result.StatusCode.ToString & item.Result.ReasonPhrase.ToString & item.Result.JsonData.ToString)
						Me.AddLogMessage(si,"FCP PUT exception: " & ex.Message)
						Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
					End If
				Next
				
			End Try
		End Sub
		#End Region
		
		' ---------------- sending clear pov to fcp -----------------------
		#Region "Put Clear POVREG in FCP"
		Public Sub PutClearPOVRegInFCP(ByVal si As SessionInfo, ByVal batchId As String, ByVal globals As BRGlobals)
			Dim rTask As Task(Of OSJsonResponse)
			Dim content As String = ""
			Try
				' ------------ defining time scenario and cc list  for which data is sent to fcp ----------------------------
				Dim wfTime As New List(Of String)
				Dim wfScenario As New List(Of String) 
				Dim cclist As New List(Of String)
				Dim ccliststr() As String = DirectCast(globals.GetObject("EPtoFCP_getCClist"), String).Split(",")
				cclist = ccliststr.ToList()
				
				Dim aopYear As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "AOP_Year")
				Dim aopScenario As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "AOP_Scenario")
				wfTime.Add(aopYear)
				wfScenario.Add(aopScenario)
				Dim JObj As JObject = New Jobject
				Dim dataJObj As JObject = New Jobject
				Dim clrRegJObj As New JObject
				
				' --------- making json to send --------------------
				If aopScenario.XFContainsIgnoreCase("Plan_Final") Then
					dataJObj("CostCenter") = ""
				Else
					dataJObj("CostCenter") = JArray.FromObject(cclist.Distinct(), JsonSerializer.CreateDefault)
				End If
				dataJObj("wfScenarioName") = JArray.FromObject(wfScenario.Distinct(), JsonSerializer.CreateDefault)
				dataJObj("wfTimeName") = JArray.FromObject(wfTime.Distinct(), JsonSerializer.CreateDefault)
				clrRegJObj("rowcount") = 1
				clrRegJObj("data") = New JArray(dataJObj)
				JObj("Dataset_Type") = "EXPENSE_CLEAR_REGISTER"
				JObj("page") = 1
				JObj("Batch_ID") = batchId
				JObj("EXPENSE_CLEAR_REGISTER") = clrRegJObj
				rTask = Me.PutDataToFcpAsync(si,jObj.ToString,OSActionType.Put)
				content =rTask.Result.StatusCode.ToString & rTask.Result.ReasonPhrase.ToString & rTask.Result.JsonData.ToString
				If rTask.Result.Success = False Then
					Me.AddLogMessage(si,"FCP PUT to clear Register data error : " & content)
					m_PutErrorOccurred = True
					Throw New System.Exception("FCP PUT to clear Register data error : " & content)
				Else
					Me.AddLogMessage(si,"FCP PUT to clear Register data successful : " & content)
				End If
			Catch ex As Exception
				Me.AddLogMessage(si,"FCP PUT to clear Register data error : " & content)
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		#End Region
		
		' --------------- mark completion on fcp --------------------------
		#Region "Mark Completion"
		Public Sub PutMarkCompletionFromFCP(ByVal si As SessionInfo, ByVal batchId As String)
			Dim rTask As Task(Of OSJsonResponse)
			Dim content As String =""
			Try
				' ------------- preparing json for fcp put  -----------------
				Dim jObj As JObject = New Jobject
				jObj("Type") = "EXPENSE_REGISTER"
				jObj("Batch_ID") = batchId
				rTask = Me.PutDataToFcpAsync(si,jObj.ToString,OSActionType.Trigger)
				content = rTask.Result.StatusCode.ToString & rTask.Result.ReasonPhrase.ToString & rTask.Result.JsonData.ToString
				If rTask.Result.Success = False Then
					Me.AddLogMessage(si,"FCP PUT mark completion error : " & content)
					m_PutErrorOccurred = True
					Throw New System.Exception("FCP PUT mark completion error : " & content)
				Else
					Me.AddLogMessage(si,"FCP PUT mark completion successful : " & content)
				End If
				
			Catch ex As Exception
				Me.AddLogMessage(si,"FCP PUT mark completion error : " & content)
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		#End Region
		
		#Region "Try Put"
'		Public Async Function TryPutToFcpAsync(ByVal si As SessionInfo, ByVal api As String, ByVal json As String) As Task(Of HttpResponseMessage)
'			Try
'				Dim rTask As HttpResponseMessage = Nothing
'				For i As Integer = 1 To 3
'					rTask = Await Me.PutDataToFcpAsync(si,json,OSActionType.Put)
'					If rTask IsNot Nothing Then							
'						Return rTask
'					End If
'					If i = 1 Then
'						Me.AddLogMessage(si, $"Trying again in 5 seconds")
'						Await Task.Delay(TimeSpan.FromSeconds(5))
'					ElseIf i = 2 Then
'						Me.AddLogMessage(si, $"Trying again in 5 seconds")
'						Await Task.Delay(TimeSpan.FromSeconds(5))
'					Else
'						Throw New System.Exception("Could not send data to FCP")
'					End If
'				Next
'				Return rTask
'			Catch ex As Exception
'				m_PutErrorOccurred = True
'				Me.AddLogMessage(si, $"TryPutToFcpAsync Exception: {ex.Message}")
'				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'			End Try	
'		End Function
		#End Region
		
		' ----------- put on FCP -----------------------------------
		#Region "PutData to FCP Async"
		Public Async Function PutDataToFcpAsync(ByVal si As SessionInfo, ByVal json As String, ByVal action As OSActionType) As Task (Of OSJsonResponse)
			Dim fcpResult As New OSJsonResponse
			Try
				fcpResult = Await m_FCPGateWay.PutData(si, json, False, action)
				Return fcpResult
			Catch ex As Exception
				m_PutErrorOccurred = True
				Me.AddLogMessage(si, $"PutDataToFcpAsync Exception: {ex.Message}"  & fcpResult.StatusCode.ToString & fcpResult.ReasonPhrase.ToString & fcpResult.JsonData.ToString)		
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		
		' -------------- add loggings ------------------------------
		#Region "Add log message"
		Public Sub AddLogMessage(ByVal si As SessionInfo, ByVal message As String)
			Try
				m_ExtenderLog.AppendLine("-------------------------------------------------------------------------------------------------------------------")
				m_ExtenderLog.AppendLine($"Time:{vbTab}{vbTab}{Date.Now.ToString}")
				m_ExtenderLog.AppendLine($"Message:{vbTab}{message}")
				m_ExtenderLog.AppendLine("-------------------------------------------------------------------------------------------------------------------")
				m_ExtenderLog.AppendLine(String.Empty)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		#End Region
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EStoSams_Actuals_ApptoApp_Automation">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.EStoSams_Actuals_ApptoApp_Automation
	Public Class MainClass
		Dim JobID As String = ""
		Dim JobStatus As String = "Success"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				'************************************************************************************************************
				'**
				'** This is a BR to allow for automating batchjobs for Connector driven workflows.
				'** To use, you need to create a DataManagement Job, and you need to pass the following parameters to it:
				'** 	wfTop = <Top Workflow you want to loop through all descendants of>
				'**		T3Tag = <What is the tag in the Text3 field of the specific import workflow>
				'**		globScen = <which scenario to run for>
				'**		globTime = <which time to run for>
				'**
				'** Example to put in Parameter field of DataManagement Step:
				'**		wfTop = Clubs, T3Tag = AutoLoad, globScen = |GlobalScenario|, globTime = |GlobalTime|, ParallelCountTag = 10 
				'**  ParallelCountTag is optional, not needed. If not used Batch will will be serialized, if used it will run in parallel
				'**
				'************************************************************************************************************
				
			
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.Unknown, ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep					
					'Note for testing purpose
					Dim testing As Boolean = False
					Dim EnSSourcePeriod As String = args.NameValuePairs("ActualPeriod")
					BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, False, "EnS_SourceActualPeriod_Lit", EnSSourcePeriod)
					
					brapi.ErrorLog.LogMessage(si, "EnSSourcePeriod" & EnSSourcePeriod)
					Dim sourceScenario As String = "Actual"		
					Dim globScen As String = args.NameValuePairs("globScen")
					Dim globTime As String = args.NameValuePairs("globTime")
					Dim systemTime As String = $"{globTime}{EnSSourcePeriod}"
					Dim fixedScenario As String = globScen
					Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
					Dim bolError As Boolean = False
					
					Dim wfTop As String = args.NameValuePairs("WfTop")
					
						If fixedScenario.contains ("Actual") Then 
							wfTop = "E&S_App2App_ImportActuals_to_SAMS"
						End If
							
					'Dim T3Tag As String = args.NameValuePairs("T3Tag")
					Dim wfProfileInfo As WorkflowProfileInfo = BRApi.Workflow.Metadata.GetProfile(si, wfTop)
					Dim wfClusterPk As WorkflowUnitClusterPk
					Dim wfClusterPk2 As WorkflowUnitClusterPk
					Dim scenarioMemberID As Integer = BRApi.Finance.Members.GetMemberId(si, dimTypeId.Scenario, fixedScenario)
					Dim scentypeID As Integer = BRApi.Finance.Scenario.GetScenarioType(si,scenarioMemberID).Id
					Dim wfList As New List(Of String)
					Dim ParallelCountTag As String = args.NameValuePairs.XFGetValue("ParallelCountTag","1")
					
					'OMD initializations
					Dim ens_si As SessionInfo = GetOtherAppConnectionString(si)
					Dim jobid As Guid = Guid.NewGuid
'					Dim WFPtoENSTAIStatus As TaskActivityItem
					Dim SubmitJobTAI As TaskActivityItem
'					Dim SubmitJobTAIStatus As TaskActivityItem
					Dim customSubstVars As New Dictionary(Of String, String)
					
					'Insert Job Details into Table
					Dim param As New Dictionary(Of String, String)
'					param.Add("Process", Process)
					param.Add("Year", globTime)
					param.Add("Period", EnSSourcePeriod)
					param.Add("import",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("validation",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("transformation",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("loadCube",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("processCube",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("details", "Running")
					Me.addLog(si, param)
					
					
					'Get all the Import WFs under WFTop with the correct T3Tag and add to list
					wfClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, WfTop, fixedScenario, systemTime)
	
					Dim objList As List(Of WorkFlowProfileInfo) = BRApi.Workflow.Metadata.GetRelatives(si, wfClusterPk, WorkflowProfileRelativeTypes.Descendants, WorkflowProfileTypes.InputImportChild)
					
					'OMD execution
					customSubstVars.Add("JobId", jobid.ToString)
'					customSubstVars.Add("Description","ENTERPRISE:SAMS->SAMS:SAMS")
					customSubstVars.Add("Source","ENTERPRISE")
					customSubstVars.Add("SourceAddInfo","SAMS")
					customSubstVars.Add("SourceScenario","Actual")
					customSubstVars.Add("Target","SAMS")
					customSubstVars.Add("TargetAddInfo","SAMS")
					customSubstVars.Add("TargetScenario","Actual")
'					SubmitJobTAI = BRApi.Utilities.ExecuteDataMgmtSequence(ens_si, "Sqnc_Submit_Job", customSubstVars)
'					SubmitJobTAIStatus = BRApi.TaskActivity.GetTaskActivityItem(ens_si, SubmitJobTAI.UniqueID)

					' Create main subtask
					SubmitJobTAI = BRApi.Utilities.ExecuteDataMgmtSequence(ens_si, "Sqnc_Submit_Job", customSubstVars)
					Dim dt_mainTask As DataTable
					Dim mainTaskQuery As String = $"SELECT Top(1) * FROM [OneStream_Framework_Dev].[dbo].[TaskActivity] where [UserName] = '{si.UserName}' And Description ='EnS_to_Sams_Actuals_App2App_Automation' Order by [StartTime] Desc"
					Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
						dt_mainTask = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, mainTaskQuery, True)
					End Using
					CreateSubTask(si, ens_si, jobid.ToString, dt_mainTask(0)("UniqueID").ToString, "Sqnc_Submit_SubTask","Yes")
					
					For Each wfItem As WorkflowProfileInfo In objList
						'If wfItem.GetAttributeValue(scentypeID,SharedConstants.WorkflowProfileAttributeIndexes.Text3) = T3Tag Then
							'If WF is locked, do nothing
							wfCLusterPk2 = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, wfItem.Name, fixedScenario, systemTime)		
							Dim wfStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfClusterPk2)	
							If Not wfStatus.Locked Then
								wfList.Add(stringhelper.ReplaceString(wfItem.Name,".",";",True))
							End If
							'Clear Stage Data
							Try
							Dim objLoadTransformProcessInfo As LoadTransformProcessInfo = BRApi.Import.Process.ClearStageData(si, wfClusterPk2, "SAMS FDX Stage Query for E&S Actuals")
							
							Catch Ex As Exception
							'Update Job Details into Table
										param = New Dictionary(Of String, String)
										param.Add("import", Me.getImage("HasError"))
										param.Add("validation", Me.getImage("Nothing"))
										param.Add("transformation", Me.getImage("Nothing"))
										param.Add("loadCube", Me.getImage("Nothing"))
										param.Add("processCube", Me.getImage("Nothing"))
'										param.Add("details", Me.JobStatus & $". Processd in: {sw.Elapsed.Seconds} seconds")
										param.Add("details", "Failed")
										Me.updateLog(si, param)
										'Me.SendEmailNotification(si, args, "Unable to start process as there is an existing process running")
								Return Nothing
							End Try
							'End If
						brapi.ErrorLog.LogMessage(si,  "Clear Stage Completed ")
						
					Next	
					
					'Loop through the generated list of WFs, and create trigger file
					If wfList.Count > 0 Then
						For Each wfMem As String In WfList
						'Create GL WF Batch Trigger File
							Me.CreateBatchFileTrigger(si,FileShareFolderHelper.GetBatchHarvestFolderForApp(si, True, configSettings.FileShareRootFolder, configSettings.FileShareBatchHarvestRootFolder,si.AppToken.AppName),wfMem.ToString,fixedScenario,systemTime, Testing)
				    	Next
					'end Loop WFs
					End If
					

					'Set Processing Switches	
					Dim valTransform As Boolean = True
					Dim valIntersect As Boolean = True
					Dim loadCube As Boolean = True
					Dim processCube As Boolean = True
					Dim confirm As Boolean = False
					Dim autoCertify As Boolean = False
								
					
					If Not testing Then
						Dim Batchinfo As WorkflowBatchFileCollection 
''						Execute Batch		
						If ParallelCountTag = "" Or ParallelCountTag = "1" Then
							batchInfo = BRApi.Utilities.ExecuteFileHarvestBatch(si, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, False)
						Else 
							Dim ParallelCount As Integer = ParallelCountTag.XFConvertToInt
'								Dim batchInfo As WorkflowBatchFileCollection = BRApi.Utilities.ExecuteFileHarvestBatch(si, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, False)								
							batchInfo = BRApi.Utilities.ExecuteFileHarvestBatchParallel(si, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, ParallelCount)
						End If		
						
						If Not batchInfo Is Nothing Then					
							For Each kvp As keyValuePair(Of Integer, List(Of WorkflowBatchFileInfo)) In batchInfo.FileGroups							
								For Each wfBatchInfo As WorkflowBatchFileInfo In kvp.Value
									Dim importStatus As String = "N/A"
									Dim transformationStatus As String = "N/A"
									Dim intersectionStatus As String = "N/A"
									Dim loadStatus As String = "N/A"
									Dim processCubeStatus As String = "N/A"
									Dim fullFilePathName As String = "N/A"
									
'									sw.Stop
									
									Dim updatedWorkflowUnitPksCount As Integer = 0
									If wfBatchInfo.ProcessInfo.UpdatedWorkflowUnitPks.Count = 0 Then
										'Update Job Details into Table
										param = New Dictionary(Of String, String)
										param.Add("import", Me.getImage("HasError"))
										param.Add("validation", Me.getImage("Nothing"))
										param.Add("transformation", Me.getImage("Nothing"))
										param.Add("loadCube", Me.getImage("Nothing"))
										param.Add("processCube", Me.getImage("Nothing"))
'										param.Add("details", Me.JobStatus & $". Processd in: {sw.Elapsed.Seconds} seconds")
										param.Add("details", Me.JobStatus)
										Me.updateLog(si, param)
									End If
									
									For Each batchWFUnitPk As WorkflowUnitPk In wfBatchInfo.ProcessInfo.UpdatedWorkflowUnitPks
										
										updatedWorkflowUnitPksCount += 1
										
										Dim wfName As String = BRApi.Workflow.Metadata.GetProfile(si, batchWFUnitPk.ProfileKey).Name									
										Dim wfInfoStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, batchWfUnitPk)

										importStatus =  wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateTransform).ToString
										transformationStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateTransform).ToString
										intersectionStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateIntersection).ToString
										loadStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.LoadCube).ToString
										processCubeStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ProcessCube).ToString
										
										
										
										If Not wfBatchInfo.FileProcessed Then
											Me.JobStatus = "Fail"
											'Me.SendEmailNotification(si, args, "Failed")
										Else
											Me.JobStatus = "Success"
											'Me.SendEmailNotification(si, args, "Success")
										End If

										'Update Job Details into Table
										param = New Dictionary(Of String, String)
										param.Add("import", Me.getImage(importStatus))
										param.Add("validation", Me.getImage(intersectionStatus))
										param.Add("transformation", Me.getImage(transformationStatus))
										param.Add("loadCube", Me.getImage(loadStatus))
										param.Add("processCube", Me.getImage(processCubeStatus))
										param.Add("details", Me.JobStatus & $"")
										
										'Create sub tasks
										checkSubTaskStatus(si, ens_si, jobid.ToString, 2000, importStatus)
										checkSubTaskStatus(si, ens_si, jobid.ToString, 5000, intersectionStatus)
										checkSubTaskStatus(si, ens_si, jobid.ToString, 6000, transformationStatus)
										checkSubTaskStatus(si, ens_si, jobid.ToString, 7000, loadStatus)
										checkSubTaskStatus(si, ens_si, jobid.ToString, 8000, processCubeStatus)
										
										
										Dim validation_params As New Dictionary(Of String, String)		
										validation_params.Add("JobId", jobid.ToString)
										validation_params.Add("EntityList", "SAMS_US")
										validation_params.Add("JsonFile","ens_sams_actuals.json")
										validation_params.Add("Year",globTime)
										validation_params.Add("Month",EnSSourcePeriod)
										
										Dim TaskActivityItem_validation As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(ens_si, "Sqnc_run_validation", validation_params)
										CreateSubTask(si,ens_si,jobid.ToString,TaskActivityItem_validation.UniqueID.ToString,"Sqnc_Submit_SubTask",String.Empty)
										Me.updateLog(si, param)
									Next
								Next
							Next
						Else
							brapi.ErrorLog.LogMessage(si, "batch Info Empty ")
						End If
						
'						If batchInfo IsNot Nothing Then
						
''							--------- Email Notification --------- 
''							the following dashboard parameters are stored In the '99_WMT_Notifications'- Dashboard Maintenance Unity (DMU)
'							Dim paramEmailBusiness As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "EnS_to_Sams_App2App_EmailNotification")
							
'							Dim emailList As New List(Of String)
'							emailList.AddRange(paramEmailBusiness.Split(",").ToList()) ' to be commented out when not in test
							
							
'''							hardcode emaillist For testing
''								Dim emailList As New List(Of String)
''								emailList.Add("Hiren.Parmar@walmartlabs.com")
''								emailList.Add("gm.vishwas@walmart.com")
''''								emailList.Add("Panchanan.Bharali@walmartlabs.com")
'								Dim paramEmailServer = "WalmartSMTP"
							
'							Dim emailHelper As New OneStream.BusinessRule.Extender.EStoSams_ApptoApp_Email_Helper.MainClass
'							emailHelper.GetBatchDetailsAndSendEmail(si, batchInfo, emailList, paramEmailServer, "ENS App to SAMS App Copy")
'						End If
						
					End If
							
				
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
#Region "General Helpers"
		Private Sub CreateBatchFileTrigger(ByVal si As SessionInfo, ByVal harvestPath As String, ByVal wfName As String, ByVal wfScenario As String, ByVal wfTime As String, ByVal Testing As Boolean)
'			Dim newSeshInfo = GetOtherAppConnectionString(si, Nothing, Nothing, Nothing)	
	
			Dim Path As String = String.Empty

			If Not Testing Then
				Dim harvestFolderPath As String = BRApi.FileSystem.GetFileShareFolder(si, Filesharefoldertypes.Batch, Nothing) & "\Harvest"
'					path = harvestPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-R.txt"
				path = harvestFolderPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-RB.txt"
			Else
			Dim testingFolderPath As String = BRApi.FileSystem.GetFileShareFolder(si, Filesharefoldertypes.Batch, Nothing) & "\_Testing"
			If Not Directory.Exists(testingFolderPath) Then directory.CreateDirectory(testingFolderPath) 
				
				path = testingFolderPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-RB.txt"
			End If
				
			If Not File.Exists(path) Or Testing = True Then
				' Create a file to write to. 
				Using sw As StreamWriter = File.CreateText(path)
					sw.WriteLine("Batch File Trigger")
				End Using
			End If
		End Sub		

			
'Private Function GetOtherAppConnectionString(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Transformer, ByVal args As ExtenderArgs) As Object
'	Try		
	
'						'define the unique ID of the app you want to connect to - figure this out by logging the unique ID in the app you are pulling data from: "brapi.ErrorLog.LogMessage(si, "App UniqueID: " & si.AppUniqueID.ToString)"
'						Dim appUniqueID As Guid = ConvertHelper.ToGuid("94c97ba1-08f0-4ceb-870a-96f4d920c8e5")				
'						'pass in the app name and app unique id of the app you want to pull data from
'						Dim varAppToken As New ApplicationToken(si.AppToken.SHA1HashCode, "SAMs Dev", appUniqueID)
'						'create a new session in the app you want to pull data from
'						Dim newSeshInfoOtherApp As New SessionInfo(ClientModuleType.Silverlight, si.WebServerUrlUsedByClient, si.AuthToken, varAppToken, si.Culture)
							
'						Return newSeshInfoOtherApp

'		Catch ex As Exception
'			Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'	End Try
'End Function
			
				
		#End Region
		
Private Function GetOtherAppConnectionString(ByVal si As SessionInfo) As Object
	Try	
		Dim appUniqueID As Guid = ConvertHelper.ToGuid("78e8c697-a957-4fd1-9a1d-2c42886fdc95")
		Dim varAppToken As New ApplicationToken(si.AppToken.SHA1HashCode, "Enterprise", appUniqueID)
		Dim newSeshInfoOtherApp As New SessionInfo(ClientModuleType.Silverlight, si.WebServerUrlUsedByClient, si.AuthToken, varAppToken, si.Culture)
			
		Return newSeshInfoOtherApp

	Catch ex As Exception
		Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	End Try
End Function

'Public Function	getImage(ByVal status As String) As String
'	If status.XFEqualsIgnoreCase("Completed") Then		
'		Return XFClientImageTypes.StatusGreenBall.Name
Private Sub checkSubTaskStatus(ByVal si As SessionInfo, ByVal ens_si As SessionInfo, ByVal jobid As String, ByVal status_code As Integer, ByVal status As String)
	If status.XFEqualsIgnoreCase("Completed") Then
		subTaskHelper(si, ens_si, jobid , status_code)
	End If	
End Sub
Private Sub subTaskHelper(ByVal si As SessionInfo, ByVal ens_si As SessionInfo, ByVal jobid As String, ByVal status_code As Integer)
	Try
		Dim sqlQuery As String = $"SELECT Top(1) * FROM [OneStream_Framework_Dev].[dbo].[TaskActivity] where [UserName] = '{si.UserName}' And TaskActivityType = '{status_code}' Order by [StartTime] Desc"
		Dim dt_taskActivity As DataTable
		Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
			dt_taskActivity = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, sqlQuery, True)
		End Using
		CreateSubTask(si, ens_si, jobid.ToString, dt_taskActivity(0)("UniqueID").ToString, "Sqnc_Submit_SubTask", String.Empty)
	
	Catch ex As Exception
		Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	End Try	
End Sub
Private Sub CreateSubTask(ByVal si As SessionInfo, ByVal ens_si As SessionInfo, ByVal taskid As String, ByVal subtaskid As String, ByVal sequenceName_subtask As String, ByVal status As String)
	Try
		Dim subtask_dict As New Dictionary(Of String, String)
		subtask_dict.Add("JobId", taskid)
		subtask_dict.Add("SubTaskId", subtaskid)
		subtask_dict.Add("Status", status)
		BRApi.Utilities.ExecuteDataMgmtSequence(ens_si, sequenceName_subtask, subtask_dict)
	Catch ex As Exception
		Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	End Try	
End Sub

Private Sub processlog(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal logmessage As String)
	Try
		globals.GetObject("WFPtoENS_PROCESS_LOG").AppendLine(Environment.NewLine & "[" & DateTime.Now.ToString & "] - " & logmessage)
		
	Catch ex As Exception
		Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	End Try	

End Sub		
					
Public Sub addLog(ByRef si As SessionInfo, ByRef data As Dictionary(Of String, String))
			Dim query As New Text.StringBuilder
			
			query.Append( $"INSERT INTO [XFT_App2App_Actuals_Status_Log] ([Process],[Year], [Period], [Start_Time], [ExecutedBy], [Triggered_From], [Import], [Transformation], [Validation], [Load_Cube], [Process_Cube], [Details], [End_Time]) VALUES ( ")
'			query.Append($"'{data.item("Process")}','{data.item("systemTime")}','{data.item("Period")}', GETDATE(), '{si.userName}', '{si.AppName}', '{data.item("import")}', '{data.item("transformation")}', '{data.item("validation")}', '{data.item("loadCube")}', '{data.item("processCube")}', '{data.item("details")}', NULL ) ")
			query.Append($" 'MEC Actuals Pull','{data.item("Year")}','{data.item("Period")}', GETDATE(), '{si.userName}', '{si.AppName}', '{data.item("import")}', '{data.item("transformation")}', '{data.item("validation")}', '{data.item("loadCube")}', '{data.item("processCube")}', '{data.item("details")}', NULL ) ")
			brapi.ErrorLog.LogMessage(si, "InsertLog", query.ToString)
			
			Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				BRAPi.Database.ExecuteSql(dbConnApp, query.ToString, True)	
				Me.jobID = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, "SELECT SCOPE_IDENTITY() as [SCOPE_IDENTITY]", True)(0)(0)
			End Using
		End Sub
		
		
		Public Sub updateLog(ByRef si As SessionInfo, ByRef data As Dictionary(Of String, String))
			Dim query As New Text.StringBuilder
			query.Append($"UPDATE [dbo].[XFT_App2App_Actuals_Status_Log] SET [Import] = '{data.Item("import")}' , [Transformation] = '{data.Item("transformation")}', ")
			query.Append($" [Validation] = '{data.Item("validation")}', [Load_Cube] = '{data.Item("loadCube")}', [Process_Cube] = '{data.Item("processCube")}', [Details] = '{data.Item("details")}', [End_Time] = CURRENT_TIMESTAMP")
			query.Append($" where [job_ID] = {Me.JobID}")
			
			brapi.ErrorLog.LogMessage(si, "uploadLog", query.ToString)
			
			Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				BRAPi.Database.ExecuteSql(dbConnApp, query.ToString, True)	
			End Using
		End Sub
				
		Public Function	getImage(ByVal status As String) As String
			If status.XFEqualsIgnoreCase("Completed") Then
				Return XFClientImageTypes.StatusGreenBall.Name
			Else If status.XFEqualsIgnoreCase("HasError") Then
				Me.JobStatus = "Failed" 
				Return XFClientImageTypes.StatusRedBall.Name
			Else If status.XFEqualsIgnoreCase("NotExecuted") Then
				Me.JobStatus = "Failed" 
				Return XFClientImageTypes.StatusOrangeBall.Name
				'Return XFClientImageTypes.StatusWhiteBall.Name
			Else 
				Me.JobStatus = "Failed" 
				Return XFClientImageTypes.StatusOrangeBall.Name
			End If
		End Function

	End Class
End Namespace]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EStoSams_ApptoApp_Automation">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EStoSams_ApptoApp_Email_Helper" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics

Namespace OneStream.BusinessRule.Extender.EStoSams_ApptoApp_Automation
	Public Class MainClass
		Dim JobID As String = ""
		Dim JobStatus As String = "Success"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				'************************************************************************************************************
				'**
				'** This is a BR to allow for automating batchjobs for Connector driven workflows.
				'** To use, you need to create a DataManagement Job, and you need to pass the following parameters to it:
				'** 	wfTop = <Top Workflow you want to loop through all descendants of>
				'**		T3Tag = <What is the tag in the Text3 field of the specific import workflow>
				'**		globScen = <which scenario to run for>
				'**		globTime = <which time to run for>
				'**
				'** Example to put in Parameter field of DataManagement Step:
				'**		wfTop = Clubs, T3Tag = AutoLoad, globScen = |GlobalScenario|, globTime = |GlobalTime|, ParallelCountTag = 10 
				'**  ParallelCountTag is optional, not needed. If not used Batch will will be serialized, if used it will run in parallel
				'**
				'************************************************************************************************************
				
			
					Select Case args.FunctionType
						Case Is = ExtenderFunctionType.Unknown, ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim newSeshInfo = GetOtherAppConnectionString(si, globals, api, args)
						'Note for testing purpose
						
						
						Dim testing As Boolean = False
						Dim sw As New Stopwatch
						sw.Start
						'Set all the needed variables
						Dim EnSSourceScenario As String = args.NameValuePairs("SourceScenario")
						BRApi.Dashboards.Parameters.SetLiteralParameterValue(newSeshInfo, False, "EnS_SourceScenario_Lit", EnSSourceScenario)
						brapi.ErrorLog.LogMessage(newSeshInfo, "SourceScenario" & EnSSourceScenario)
						Dim sourceScenario As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(newSeshInfo, False, "EnS_SourceScenario_Lit")
						
						Dim EnSSourceYear As String = args.NameValuePairs("SourceYear")
						BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, False, "EnS_SourceYear_Lit", EnSSourceYear)
						brapi.ErrorLog.LogMessage(si, "SourceYear" & EnSSourceYear)
						Dim sourceYear As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "EnS_SourceYear_Lit")
						
						Dim globScen As String = args.NameValuePairs("globScen")
						Dim globTime As String = args.NameValuePairs("globTime")
						Dim systemTime As String = globTime
						Dim fixedScenario As String = globScen
						Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(newSeshInfo)
						Dim bolError As Boolean = False
						
						Dim wfTop As String = args.NameValuePairs("WfTop")
					
						If fixedScenario.contains ("Plan") Then 
							wfTop = "E&S_App2App_Import_to_SAMS"
						Else If fixedScenario.contains ("Forecast") OrElse fixedScenario.contains ("Fcst") Then
						 	wfTop = "E&S_App2App_Import_to_SAMS_FCST"
						End If

						'Dim T3Tag As String = args.NameValuePairs("T3Tag")
						Dim wfProfileInfo As WorkflowProfileInfo = BRApi.Workflow.Metadata.GetProfile(newSeshInfo, wfTop)
						Dim wfClusterPk As WorkflowUnitClusterPk
						Dim wfClusterPk2 As WorkflowUnitClusterPk
						Dim scenarioMemberID As Integer = BRApi.Finance.Members.GetMemberId(newSeshInfo, dimTypeId.Scenario, fixedScenario)
						Dim scentypeID As Integer = BRApi.Finance.Scenario.GetScenarioType(newSeshInfo,scenarioMemberID).Id
						Dim wfList As New List(Of String)
						Dim ParallelCountTag As String = args.NameValuePairs.XFGetValue("ParallelCountTag","1")
						
						'OMD initializations
						
						Dim jobid As Guid = Guid.NewGuid
	'					Dim WFPtoENSTAIStatus As TaskActivityItem
						Dim SubmitJobTAI As TaskActivityItem
	'					Dim SubmitJobTAIStatus As TaskActivityItem
						Dim customSubstVars As New Dictionary(Of String, String)
						
						
						'Insert Job Details into Table
						Dim param As New Dictionary(Of String, String)
						param.Add("sourceScenario", sourceScenario)
						param.Add("targetScenario", globScen)
						param.Add("sourceYear", sourceYear)
						param.Add("systemTime", globTime)
						param.Add("import",XFClientImageTypes.StatusWhiteBall.Name)
						param.Add("validation",XFClientImageTypes.StatusWhiteBall.Name)
						param.Add("transformation",XFClientImageTypes.StatusWhiteBall.Name)
						param.Add("loadCube",XFClientImageTypes.StatusWhiteBall.Name)
						param.Add("processCube",XFClientImageTypes.StatusWhiteBall.Name)
						param.Add("details", "Running")
						Me.addLog(si, newSeshInfo, param)

						
						'Get all the Import WFs under WFTop with the correct T3Tag and add to list
						wfClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(newSeshInfo, WfTop, fixedScenario, systemTime)
						
						Dim objList As List(Of WorkFlowProfileInfo) = BRApi.Workflow.Metadata.GetRelatives(newSeshInfo, wfClusterPk, WorkflowProfileRelativeTypes.Descendants, WorkflowProfileTypes.InputImportChild)
						
						Dim scenarioFlag As String = "False"
						Dim src_scenario As String = ""
						Dim trg_scenario As String = ""
						'If scenario_dict.ContainsKey(sourceScenario) AndAlso scenario_dict.ContainsKey(globScen)
						If sourceScenario.XFContainsIgnoreCase("Plan_Working") AndAlso globScen.XFContainsIgnoreCase("Plan_Final") Then
							scenarioFlag = "True"
							src_scenario = "Plan_Working"
							trg_scenario = "Plan_Final"
						End If
						If sourceScenario.XFContainsIgnoreCase("Forecast_Working") AndAlso globScen.XFContainsIgnoreCase("Forecast_Working") Then
							scenarioFlag = "True"
							src_scenario = "Forecast_Working"
							trg_scenario = "Forecast_Working"
						End If
						If scenarioFlag.XFContainsIgnoreCase("True")
							'OMD execution
							customSubstVars.Add("JobId", jobid.ToString)
		'					customSubstVars.Add("Description","ENTERPRISE:SAMS->SAMS:SAMS")
							customSubstVars.Add("Source","ENTERPRISE")
							customSubstVars.Add("SourceAddInfo","SAMS")
							customSubstVars.Add("SourceScenario",src_scenario)
							customSubstVars.Add("Target","SAMS")
							customSubstVars.Add("TargetAddInfo","SAMS")
							customSubstVars.Add("TargetScenario",trg_scenario)
							
							' Create main subtask
							SubmitJobTAI = BRApi.Utilities.ExecuteDataMgmtSequence(si, "Sqnc_Submit_Job", customSubstVars)
							Dim dt_mainTask As DataTable
								Dim mainTaskQuery As String = $"SELECT Top(1) * FROM [OneStream_Framework_Dev].[dbo].[TaskActivity] where [UserName] = '{si.UserName}' And Description ='EnS_to_Sams_FcstPlan_App2App_Automation' Order by [StartTime] Desc"
								Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
									dt_mainTask = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, mainTaskQuery, True)
								End Using
								CreateSubTask(si, si, jobid.ToString, dt_mainTask(0)("UniqueID").ToString, "Sqnc_Submit_SubTask","Yes")
						End If
						
						
						For Each wfItem As WorkflowProfileInfo In objList
							'If wfItem.GetAttributeValue(scentypeID,SharedConstants.WorkflowProfileAttributeIndexes.Text3) = T3Tag Then
								'If WF is locked, do nothing
								wfCLusterPk2 = BRApi.Workflow.General.GetWorkflowUnitClusterPk(newSeshInfo, wfItem.Name, fixedScenario, systemTime)		
								Dim wfStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(newSeshInfo, wfClusterPk2)	
								If Not wfStatus.Locked Then
									wfList.Add(stringhelper.ReplaceString(wfItem.Name,".",";",True))
								End If
								'Clear Stage Data
							Try	
								Dim objLoadTransformProcessInfo As LoadTransformProcessInfo = BRApi.Import.Process.ClearStageData(newSeshInfo, wfClusterPk2, "SAMS FDX Stage Query for E&S")
							
							Catch Ex As Exception
							'Update Job Details into Table
										param = New Dictionary(Of String, String)
										param.Add("import", Me.getImage("HasError"))
										param.Add("validation", Me.getImage("Nothing"))
										param.Add("transformation", Me.getImage("Nothing"))
										param.Add("loadCube", Me.getImage("Nothing"))
										param.Add("processCube", Me.getImage("Nothing"))
'										param.Add("details", Me.JobStatus & $". Processd in: {sw.Elapsed.Seconds} seconds")
										param.Add("details", "Failed")
										Me.updateLog(newSeshInfo, param)
										'Me.SendEmailNotification(si, args, "Unable to start process as there is an existing process running")
								Return Nothing
							End Try
							'End If
							brapi.ErrorLog.LogMessage(si,  "Clear Stage Completed ")								
												
						Next	
						
						'Loop through the generated list of WFs, and create trigger file
						If wfList.Count > 0 Then
							For Each wfMem As String In WfList
							'Create GL WF Batch Trigger File
								Me.CreateBatchFileTrigger(newSeshInfo,FileShareFolderHelper.GetBatchHarvestFolderForApp(newSeshInfo, True, configSettings.FileShareRootFolder, configSettings.FileShareBatchHarvestRootFolder,si.AppToken.AppName),wfMem.ToString,fixedScenario,systemTime, Testing)   				   
					    	Next
						'end Loop WFs
						End If
						
						
						'Set Processing Switches	
						Dim valTransform As Boolean = True
						Dim valIntersect As Boolean = True

						Dim loadCube As Boolean = True
						
						Dim processCube As Boolean = True
						Dim confirm As Boolean = False
						Dim autoCertify As Boolean = False
									
						
						If Not testing Then
						Dim Batchinfo As WorkflowBatchFileCollection 
''						Execute Batch		
							If ParallelCountTag = "" Or ParallelCountTag = "1" Then
								batchInfo = BRApi.Utilities.ExecuteFileHarvestBatch(newSeshInfo, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, False)
							Else 
								Dim ParallelCount As Integer = ParallelCountTag.XFConvertToInt
'									Dim batchInfo As WorkflowBatchFileCollection = BRApi.Utilities.ExecuteFileHarvestBatch(si, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, False)								
								batchInfo = BRApi.Utilities.ExecuteFileHarvestBatchParallel(newSeshInfo, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, ParallelCount)
							End If	
							
							
							If Not batchInfo Is Nothing Then					
							For Each kvp As keyValuePair(Of Integer, List(Of WorkflowBatchFileInfo)) In batchInfo.FileGroups							
								For Each wfBatchInfo As WorkflowBatchFileInfo In kvp.Value
									Dim importStatus As String = "N/A"
									Dim transformationStatus As String = "N/A"
									Dim intersectionStatus As String = "N/A"
									Dim loadStatus As String = "N/A"
									Dim processCubeStatus As String = "N/A"
									Dim fullFilePathName As String = "N/A"
									
									sw.Stop
									
									Dim updatedWorkflowUnitPksCount As Integer = 0
									If wfBatchInfo.ProcessInfo.UpdatedWorkflowUnitPks.Count = 0 Then
										'Update Job Details into Table
										param = New Dictionary(Of String, String)
										param.Add("import", Me.getImage("HasError"))
										param.Add("validation", Me.getImage("Nothing"))
										param.Add("transformation", Me.getImage("Nothing"))
										param.Add("loadCube", Me.getImage("Nothing"))
										param.Add("processCube", Me.getImage("Nothing"))
'										param.Add("details", Me.JobStatus & $". Processd in: {sw.Elapsed.Seconds} seconds")
										param.Add("details", Me.JobStatus)
										Me.updateLog(newSeshInfo, param)
									End If
									
									For Each batchWFUnitPk As WorkflowUnitPk In wfBatchInfo.ProcessInfo.UpdatedWorkflowUnitPks
										
										updatedWorkflowUnitPksCount += 1
										
										Dim wfName As String = BRApi.Workflow.Metadata.GetProfile(newSeshInfo, batchWFUnitPk.ProfileKey).Name									
										Dim wfInfoStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(newSeshInfo, batchWfUnitPk)

										importStatus =  wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateTransform).ToString
										transformationStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateTransform).ToString
										intersectionStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateIntersection).ToString
										loadStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.LoadCube).ToString
										processCubeStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ProcessCube).ToString
										
										
										
										If Not wfBatchInfo.FileProcessed Then
											Me.JobStatus = "Fail"
											'Me.SendEmailNotification(si, args, "Failed")
										Else
											Me.JobStatus = "Success"
											'Me.SendEmailNotification(si, args, "Success")
										End If

										'Update Job Details into Table
										param = New Dictionary(Of String, String)
										param.Add("import", Me.getImage(importStatus))
										param.Add("validation", Me.getImage(intersectionStatus))
										param.Add("transformation", Me.getImage(transformationStatus))
										param.Add("loadCube", Me.getImage(loadStatus))
										param.Add("processCube", Me.getImage(processCubeStatus))
										param.Add("details", Me.JobStatus & $"")
										
										'Create sub tasks
										If scenarioFlag.XFEqualsIgnoreCase("True")
											checkSubTaskStatus(si, si, jobid.ToString, 2000, importStatus)
											checkSubTaskStatus(si, si, jobid.ToString, 5000, intersectionStatus)
											checkSubTaskStatus(si, si, jobid.ToString, 6000, transformationStatus)
											checkSubTaskStatus(si, si, jobid.ToString, 7000, loadStatus)
											checkSubTaskStatus(si, si, jobid.ToString, 8000, processCubeStatus)
											
												
											Dim validation_params As New Dictionary(Of String, String)		
											validation_params.Add("JobId", jobid.ToString)
											validation_params.Add("EntityList", "SAMS_US")
											validation_params.Add("JsonFile","ens_sams_plan_fcst.json")
											validation_params.Add("Year",globTime)
											
											Dim TaskActivityItem_validation As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(si, "Sqnc_run_validation", validation_params)
											CreateSubTask(si,si,jobid.ToString,TaskActivityItem_validation.UniqueID.ToString,"Sqnc_Submit_SubTask",String.Empty)
											
										End If	
										Me.updateLog(newSeshInfo, param)
									Next
								Next
							Next
						Else
							brapi.ErrorLog.LogMessage(newSeshInfo, "batch Info Empty ")
						End If	
						
'							If batchInfo IsNot Nothing Then
						
'''							--------- Email Notification --------- 
'''							the following dashboard parameters are stored In the '99_WMT_Notifications'- Dashboard Maintenance Unity (DMU)
'							Dim paramEmailBusiness As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(newSeshInfo, False, "EnS_to_Sams_App2App_EmailNotification")
							
'							Dim emailList As New List(Of String)
'							emailList.AddRange(paramEmailBusiness.Split(",").ToList()) ' to be commented out when not in test
							
							
''''							hardcode emaillist For testing
'''								Dim emailList As New List(Of String)
'''								emailList.Add("Hiren.Parmar@walmartlabs.com")
'''								emailList.Add("gm.vishwas@walmart.com")
''''								emailList.Add("Panchanan.Bharali@walmartlabs.com")
'								Dim paramEmailServer = "WalmartSMTP"
							
'							Dim emailHelper As New OneStream.BusinessRule.Extender.EStoSams_ApptoApp_Email_Helper.MainClass
'							emailHelper.GetBatchDetailsAndSendEmail(newSeshInfo, batchInfo, emailList, paramEmailServer, "ENS App to SAMS App Copy")
'						End If
					
					End If
							
				
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
#Region "General Helpers"
			Private Sub CreateBatchFileTrigger(ByVal si As SessionInfo, ByVal harvestPath As String, ByVal wfName As String, ByVal wfScenario As String, ByVal wfTime As String, ByVal Testing As Boolean)
			Dim newSeshInfo = GetOtherAppConnectionString(si, Nothing, Nothing, Nothing)	
		
			Dim Path As String = String.Empty

				If Not Testing Then
					Dim harvestFolderPath As String = BRApi.FileSystem.GetFileShareFolder(newSeshInfo, Filesharefoldertypes.Batch, Nothing) & "\Harvest"
'					path = harvestPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-R.txt"
					path = harvestFolderPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-RB.txt"
				Else
				Dim testingFolderPath As String = BRApi.FileSystem.GetFileShareFolder(newSeshInfo, Filesharefoldertypes.Batch, Nothing) & "\_Testing"
				If Not Directory.Exists(testingFolderPath) Then directory.CreateDirectory(testingFolderPath) 
					
					path = testingFolderPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-RB.txt"
				End If
					
				If Not File.Exists(path) Or Testing = True Then
					' Create a file to write to. 
					Using sw As StreamWriter = File.CreateText(path)
						sw.WriteLine("Batch File Trigger")
					End Using
				End If
			End Sub		

			
Private Function GetOtherAppConnectionString(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Transformer, ByVal args As ExtenderArgs) As Object
	Try		

'						'define the unique ID of the app you want to connect to - figure this out by logging the unique ID in the app you are pulling data from: "brapi.ErrorLog.LogMessage(si, "App UniqueID: " & si.AppUniqueID.ToString)"
'						Dim appUniqueID As Guid = ConvertHelper.ToGuid("94c97ba1-08f0-4ceb-870a-96f4d920c8e5")				
'						'pass in the app name and app unique id of the app you want to pull data from
'						Dim varAppToken As New ApplicationToken(si.AppToken.SHA1HashCode, "SAMS", appUniqueID)
'						'create a new session in the app you want to pull data from
'						Dim newSeshInfoOtherApp As New SessionInfo(ClientModuleType.Silverlight, si.WebServerUrlUsedByClient, si.AuthToken, varAppToken, si.Culture)	
						Dim destinationAppName As String = "SAMS"
						Dim newSeshInfoOtherApp As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si, destinationAppName, openAppResult.Success)
						Return newSeshInfoOtherApp
		Catch ex As Exception
			Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	End Try
End Function
			
				
		#End Region

'			Private Function GetOtherAppConnectionString(ByVal si As SessionInfo) As Object
'			Try	
'				Dim appUniqueID As Guid = ConvertHelper.ToGuid("78e8c697-a957-4fd1-9a1d-2c42886fdc95")
'				Dim varAppToken As New ApplicationToken(si.AppToken.SHA1HashCode, "Enterprise", appUniqueID)
'				Dim newSeshInfoOtherApp As New SessionInfo(ClientModuleType.Silverlight, si.WebServerUrlUsedByClient, si.AuthToken, varAppToken, si.Culture)
					
'				Return newSeshInfoOtherApp

'			Catch ex As Exception
'				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'			End Try
'		End Function

		'Public Function	getImage(ByVal status As String) As String
		'	If status.XFEqualsIgnoreCase("Completed") Then		
		'		Return XFClientImageTypes.StatusGreenBall.Name
		Private Sub checkSubTaskStatus(ByVal si As SessionInfo, ByVal ens_si As SessionInfo, ByVal jobid As String, ByVal status_code As Integer, ByVal status As String)
			If status.XFEqualsIgnoreCase("Completed") Then
				subTaskHelper(si, ens_si, jobid , status_code)
			End If	
		End Sub
		Private Sub subTaskHelper(ByVal si As SessionInfo, ByVal ens_si As SessionInfo, ByVal jobid As String, ByVal status_code As Integer)
			Try
				Dim sqlQuery As String = $"SELECT Top(1) * FROM [OneStream_Framework_Dev].[dbo].[TaskActivity] where [UserName] = '{si.UserName}' And TaskActivityType = '{status_code}' Order by [StartTime] Desc"
				Dim dt_taskActivity As DataTable
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_taskActivity = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, sqlQuery, True)
				End Using
				CreateSubTask(si, ens_si, jobid.ToString, dt_taskActivity(0)("UniqueID").ToString, "Sqnc_Submit_SubTask", String.Empty)
			
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub
		Private Sub CreateSubTask(ByVal si As SessionInfo, ByVal ens_si As SessionInfo, ByVal taskid As String, ByVal subtaskid As String, ByVal sequenceName_subtask As String, ByVal status As String)
			Try
				Dim subtask_dict As New Dictionary(Of String, String)
				subtask_dict.Add("JobId", taskid)
				subtask_dict.Add("SubTaskId", subtaskid)
				subtask_dict.Add("Status", status)
				BRApi.Utilities.ExecuteDataMgmtSequence(ens_si, sequenceName_subtask, subtask_dict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub

		Private Sub processlog(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal logmessage As String)
			Try
				globals.GetObject("WFPtoENS_PROCESS_LOG").AppendLine(Environment.NewLine & "[" & DateTime.Now.ToString & "] - " & logmessage)
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	

		End Sub
		
		
		Public Sub addLog(ByRef si As SessionInfo, ByRef newSeshInfo As SessionInfo, ByRef data As Dictionary(Of String, String))
			Dim query As New Text.StringBuilder
			'Dim newSeshInfo = GetOtherAppConnectionString(si, globals, api, args)
			query.Append( $"INSERT INTO [XFT_App2App_Status_Log_Forecast] ([Source_Scenario],[Target_Scenario], [Source_Year], [Target_Year], [Start_Time], [Executed_By], [Triggered_From], [Import], [Transformation], [Validation], [Load_Cube], [Process_Cube], [Details], [End_Time]) VALUES ( ")
			query.Append($"'{data.item("sourceScenario")}', '{data.item("targetScenario")}', '{data.item("sourceYear")}', '{data.item("systemTime")}', GETDATE(), '{si.userName}', '{si.AppName}', '{data.item("import")}', '{data.item("transformation")}', '{data.item("validation")}', '{data.item("loadCube")}', '{data.item("processCube")}', '{data.item("details")}', NULL) ")
			
			brapi.ErrorLog.LogMessage(newSeshInfo, "InsertLog", query.ToString)
			
			Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(newSeshInfo)
				BRAPi.Database.ExecuteSql(dbConnApp, query.ToString, True)	
				Me.jobID = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, "SELECT SCOPE_IDENTITY() as [SCOPE_IDENTITY]", True)(0)(0)
			End Using
		End Sub
		
		
		Public Sub updateLog(ByRef newSeshInfo As SessionInfo, ByRef data As Dictionary(Of String, String))
			Dim query As New Text.StringBuilder
			query.Append($"UPDATE [dbo].[XFT_App2App_Status_Log_Forecast] SET [Import] = '{data.Item("import")}' , [Transformation] = '{data.Item("transformation")}', ")
			query.Append($" [Validation] = '{data.Item("validation")}', [Load_Cube] = '{data.Item("loadCube")}', [Process_Cube] = '{data.Item("processCube")}', [Details] = '{data.Item("details")}', [End_Time] = CURRENT_TIMESTAMP")
			query.Append($" where [job_ID] = {Me.JobID}")
			
			brapi.ErrorLog.LogMessage(newSeshInfo, "uploadLog", query.ToString)
			
			Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(newSeshInfo)
				BRAPi.Database.ExecuteSql(dbConnApp, query.ToString, True)	
			End Using
		End Sub
				
		Public Function	getImage(ByVal status As String) As String
			If status.XFEqualsIgnoreCase("Completed") Then
				Return XFClientImageTypes.StatusGreenBall.Name
			Else If status.XFEqualsIgnoreCase("HasError") Then
				Me.JobStatus = "Failed" 
				Return XFClientImageTypes.StatusRedBall.Name
			Else If status.XFEqualsIgnoreCase("NotExecuted") Then
				Me.JobStatus = "Failed" 
				Return XFClientImageTypes.StatusOrangeBall.Name
			Else 
				Me.JobStatus = "Failed" 
				Return XFClientImageTypes.StatusOrangeBall.Name
			End If
		End Function
		
		'		Public Function SendEmailNotification(ByRef si As SessionInfo, ByVal args As ExtenderArgs, ByVal MsgBody As String) As Object
'			Try
				
'							'Connection to the mail server (Defined in Application Server setup)
'							Dim emailConnectionName As String = "WalmartSMTP"
							   
'							'Email content (Subject & Body)
'							Dim subject As String = "EnS to SAMs App2App Notification"
'							'Dim messageBody As String = "The copy was completed " 
							   
'							'Add email addresses
'							Dim EmailIDList As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "EnS_to_Sams_App2App_EmailNotification")
'							Dim toEmail As New List(Of String)
'							toEmail.AddRange(EmailIDList.Split(",").ToList())
							
							   
'							'Add Attachments
'							Dim attachments As New List(Of String)
'							'Dim fileAttachmentPath As String = ""

'							'If File.Exists(fileAttachmentPath) Then
'							  '  attachments.Add(fileAttachmentPath)
'							'End If

'							'Send the message
'							BRApi.Utilities.SendMail(si, emailConnectionName, toEmail, subject, MsgBody, attachments)


'			Return Nothing
'			Catch ex As Exception
'			Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'			End Try
'		End Function


	End Class
End Namespace


]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EStoSams_ApptoApp_Email_Helper">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports System.Xml
Imports Newtonsoft.Json

Imports OneStream.BusinessRule.Extender.OS_Models

Namespace OneStream.BusinessRule.Extender.EStoSams_ApptoApp_Email_Helper
	Public Class MainClass
		
		#Region "Settings"
			'Define 'company colors' for the title bar
	        Public _foreColor As String = "#FFB81C" 
			Public _backColor As String = "#0072CE"
			
			'Automation phrase - must match automation business rule
			Public _automationPhrase As String = "automate"
		
		#End Region
		
		#Region "Dev Only"
			Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
	            Try
	                Return Nothing
	            Catch ex As Exception
	                Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	            End Try
	        End Function
		#End Region
		Public Sub GetBatchDetailsAndSendEmail(ByVal si As SessionInfo, ByVal batchInfo As WorkflowBatchFileCollection, ByVal distributionList As List(Of String), ByVal emailServer As String, ByVal dmJobName As String)
			Dim fileAttachmentPaths As New List(Of String)
			
			Try
				Dim DMJobStatus As Boolean = True
				Dim eResult As New EmailResults
				
				If Not batchInfo Is Nothing Then					
					Using objDbConnInfoApp As DbConnInfoApp = BRApi.Database.CreateApplicationDbConnInfo(si)
						For Each kvp As keyValuePair(Of Integer, List(Of WorkflowBatchFileInfo)) In batchInfo.FileGroups							
							For Each wfBatchInfo As WorkflowBatchFileInfo In kvp.Value
								
								Dim importStatus As String = "N/A"
								Dim transformationStatus As String = "N/A"
								Dim intersectionStatus As String = "N/A"
								Dim loadStatus As String = "N/A"
								Dim processCubeStatus As String = "N/A"
								Dim fullFilePathName As String = "N/A"
								
								Dim wfPOVId As String = $"{wfBatchInfo.ProfileInfo.Name.ToUpper}_{ScenarioDimHelper.GetNameFromId(si, wfBatchInfo.CurrentWorkflowUnitPk.ScenarioKey).ToUpper}_{TimeDimHelper.GetNameFromId(wfBatchInfo.CurrentWorkflowUnitPk.TimeKey).ToUpper}"
								Dim sourceScenario As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "EnS_SourceScenario_Lit")
								Dim sourceYear As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "EnS_SourceYear_Lit")
								Dim response As ResponseStatus = Nothing
								Try
									Dim objXFUserState As XFUserState = BRApi.State.GetSessionState(si, False, ClientModuleType.External, String.Empty, String.Empty, wfPOVId + "_response", String.Empty)
									If objXFUserState IsNot Nothing Then
										 response  = JsonConvert.DeserializeObject(Of ResponseStatus)(objXFUserState.TextValue)
									End If
								Catch
								End Try
																
								Dim updatedWorkflowUnitPksCount As Integer = 0
								For Each batchWFUnitPk As WorkflowUnitPk In wfBatchInfo.ProcessInfo.UpdatedWorkflowUnitPks
									updatedWorkflowUnitPksCount += 1
									
									Dim wfName As String = BRApi.Workflow.Metadata.GetProfile(si, batchWFUnitPk.ProfileKey).Name									
									Dim wfInfoStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, batchWfUnitPk)

									importStatus = If(response IsNot Nothing, If(response.Success, $"Completed with {response.FcpRecordCount} rows received from FCP and {response.OsRecordCount} rows loaded to OneStream.", importStatus), _
														$"{wfInfoStatus.GetStepStatus(StepClassificationTypes.DataLoadTransform).ToString} and {wfBatchInfo.ProcessInfo.RowCount} rows loaded to OneStream.")
									transformationStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateTransform).ToString
									intersectionStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateIntersection).ToString
									loadStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.LoadCube).ToString
									processCubeStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ProcessCube).ToString
									
									If Not wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateTransform).Equals(WorkflowStatusTypes.Completed) Then
										'Generate Validation Error Report
										fullFilePathName = BRApi.FileSystem.GetFileShareFolder(si, FileShareFolderTypes.ApplicationOutgoing, Nothing) & "\" & wfPOVId & "_ValidationErrors.html"
										
										If wfBatchInfo.ValTransProcessInfoErrors.ContainsKey(batchWFUnitPk.CreateWorkflowUnitClusterPk) Then
											If Me.GenerateValidationReport(si, wfBatchInfo.ValTransProcessInfoErrors.Item(batchWFUnitPk.CreateWorkflowUnitClusterPk), fullFilePathName) Then
												fileAttachmentPaths.Add(fullFilePathName)
												transformationStatus += $" - See Attachement {wfPOVId}_ValidationErrors.html" 
											Else
												transformationStatus += "Report was not creataed but validation errors were found"
											End If
										End If
									End If
									
									If Not wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateIntersection).Equals(WorkflowStatusTypes.Completed) Then
										'Generate Intersection Validation Error Report
										fullFilePathName = BRApi.FileSystem.GetFileShareFolder(si, FileShareFolderTypes.ApplicationOutgoing, Nothing) & "\" & wfPOVId & "_IntersectionErrors.html"
										
										If wfBatchInfo.ValIntersectProcessInfoErrors.ContainsKey(batchWFUnitPk.CreateWorkflowUnitClusterPk) Then
											Dim intErrCount As Integer = Me.CheckIntersectionErrorCount(si, objDbConnInfoApp, batchWFUnitPk)
											If intErrCount < 0 Then 'Error occurred
												intersectionStatus = $"Error occurred getting intersection error count."
											ElseIf intErrCount < 150 Then
												If Me.GenerateIntersectionReport(si, objDbConnInfoApp, batchWFUnitPk, fullFilePathName) Then
													intersectionStatus = $"{intErrCount} Intersection Errors generated</br><b>See {wfPOVId}_IntersectionErrors.html for more details</b>"
													fileAttachmentPaths.Add(fullFilePathName)
												Else
													intersectionStatus = $"Report failed to generate but {intErrCount} intersection errors were found"
												End If
											Else
												intersectionStatus = $"Report was not created. Too many errors to report. {intErrCount} intersection errors were found."
											End If											
										End If
									End If
									
									Dim status As String
									If Not wfBatchInfo.FileProcessed Then
										status = "Fail"
									Else
										status = "Success"
									End If
									
									eResult.Add(si, _
												$"Source Year :{sourceYear.ToString}</br> Target Year:{wfBatchInfo.TimeName}</br>Source Scenario:{sourceScenario.ToString}</br>Target Scenario:{wfBatchInfo.ScenarioName}", _
												status, _
												importStatus, _
												transformationStatus, _
												intersectionStatus, _
												loadStatus, _
												processCubeStatus)
								Next
								If updatedWorkflowUnitPksCount = 0 Then
									'Import error - Check if SessionStage is available
									Try
										Dim objXFUserState As XFUserState = BRApi.State.GetSessionState(si, False, ClientModuleType.External, String.Empty, String.Empty, wfPOVId, String.Empty)
										If objXFUserState IsNot Nothing Then
											If objXFUserState.TextValue.XFContainsIgnoreCase("Could not get data from FCP") Or objXFUserState.TextValue.XFContainsIgnoreCase("ERROR") Then
												
												'Save the Connection Log to file
												fullFilePathName = BRApi.FileSystem.GetFileShareFolder(si, FileShareFolderTypes.ApplicationOutgoing, Nothing) & "\" & wfPOVId & "_GET-LOG.txt"
												
												Using fdxDataFile As System.IO.StreamWriter = New StreamWriter(fullFilePathName, False)
													fdxDataFile.Write(objXFUserState.TextValue)
													fdxDataFile.Close									
												End Using
																
												fileAttachmentPaths.Add(fullFilePathName)
												
												importStatus = $"Import failed. See attachement {wfPOVId}_GET-LOG.txt for more info."
											Else
												importStatus = "Failed"
											End If
										Else
											importStatus = "Failed"
										End If
									Catch
										importStatus = "Failed"
									End Try
									
									If response IsNot Nothing Then
										If Not response.Success Then
											importStatus = $" {importStatus} </br> Summary: {response.StatusCode} - {response.ReasonPhrase}"
										End If
									End If
									
									eResult.Add(si, _
												$"Source Year :{sourceYear.ToString}</br> Target Year:{wfBatchInfo.TimeName}</br>Source Scenario:{sourceScenario.ToString}</br>Target Scenario:{wfBatchInfo.ScenarioName}", _
												"Fail", _
												importStatus, _
												"N/A", _
												"N/A", _
												"N/A", _
												"N/A")
								End If
							Next
						Next
					End Using
				End If
									
				Dim body As New StringBuilder
				Dim rowHeaders As New List(Of String)
				rowHeaders.Add("Workflow Info")
				rowHeaders.Add("Batch Status")
				rowHeaders.Add("Import Status")
				rowHeaders.Add("Transformation Status")
				rowHeaders.Add("Intersection Status")
				rowHeaders.Add("Load Cube Status")
				rowHeaders.Add("Process Cube Status")
				
				body.AppendLine(StartHTMLTable)
				body.AppendLine(NewHTMLTableRowHeader(rowHeaders))
				Dim r As Integer = 0
				Dim rowValues As New List(Of String)
	            For Each rslt As EmailResult In eResult.Results
					rowValues.Add(rslt.wfDetails)
					rowValues.Add(rslt.Status)
					rowValues.Add(rslt.ImportStatus)
					rowValues.Add(rslt.TransformationStatus)
					rowValues.Add(rslt.IntersectionStatus)
					rowValues.Add(rslt.LoadStatus)
					rowValues.Add(rslt.ProcessCubeStatus)
					
					' 10 March 2021 to add status in Email
					If "Fail".Equals(rslt.Status, StringComparison.InvariantCultureIgnoreCase) Then
						DMJobStatus = False
					End If	
					
					body.AppendLine(NewHTMLTableRow((rowValues)))
					rowValues.Clear
	            Next
	    	    body.AppendLine(EndHTMLTable)
	            
				' 10 March 2021 to add status in Email
				
				Dim subject As String 
				If DMJobStatus Then
'					subject = $"{si.AppName} - Job {dmJobName} was successful"
					subject = $"Job {dmJobName} was successful"
				Else
'					subject = $"{si.AppName} - Job {dmJobName} failed"
					subject = $"Job {dmJobName} failed"
				End If
				
				BRApi.Utilities.SendMail(si, emailServer, distributionList, subject, body.ToString, True, fileAttachmentPaths)
				
			Catch ex As Exception
				brapi.ErrorLog.LogMessage(si, ex.Message)
			Finally
				'Delete file attachement(s) from FileShare
				For Each fileFullName As String In fileAttachmentPaths
					File.Delete(fileFullName)
				Next
			End Try
		End Sub
		
		Public Function GenerateValidationReport(ByVal si As SessionInfo, ByVal valProcessInfo As ValidationTransformationProcessInfo, ByVal fullFilePathName As String) As Boolean
			Try
				Dim unMappedItemsFound As Boolean
				
				Dim body As New StringBuilder
				body.AppendLine(StartHTMLTable)
				
				Dim rowHeaders As New List(Of String)
				rowHeaders.Add("Dimension")
				rowHeaders.Add("Source Value")
				rowHeaders.Add("Output Value")
				
				body.AppendLine(NewHTMLTableRowHeader(rowHeaders))
				For Each kvpDimValInfo As KeyValuePair(Of String, DimensionValidationInfo) In valProcessInfo.DimensionValidationInfos
					For Each valErrorItem As DimensionValidationErrorItemInfo In kvpDimValInfo.Value.UnmappedItems
						unMappedItemsFound = True
						Dim rowValues As New List(Of String)
						rowValues.Add(kvpDimValInfo.Key)
						rowValues.Add(valErrorItem.RuleName)
						rowValues.Add(valErrorItem.OutputValue)
						body.AppendLine(NewHTMLTableRow((rowValues)))
					Next
				Next
				body.AppendLine(EndHTMLTable)
				
				If unMappedItemsFound Then
					Using fdxDataFile As System.IO.StreamWriter = New StreamWriter(fullFilePathName, True)
						fdxDataFile.Write(body)
						fdxDataFile.Close									
					End Using
					
					Return True
				Else
					Return False
				End If
				
			Catch ex As Exception
				'Error
				brapi.ErrorLog.LogMessage(si, $"Exception generating validation report. {ex.Message}")
				Return False
			End Try
		End Function
		Public Function CheckIntersectionErrorCount(ByVal si As SessionInfo, ByVal objDbConnInfoApp As DbConnInfoApp, ByVal currentWorkflowUnitPk As WorkflowUnitPk) As Integer
			Try
				Dim dt As DataTable = BRApi.Database.ExecuteSqlUsingReader(objDbConnInfoApp, Me.GetIntersectionValidationErrorsCountQuery(si, currentWorkflowUnitPk), False)
				If dt IsNot Nothing Then
					Return dt.Rows(0)(0)
				Else
					Return -1
				End If
				
			Catch ex As Exception
				brapi.ErrorLog.LogMessage(si, $"Exception getting intersection error count. {ex.Message}")
				Return -1
			End Try
		End Function
		Public Function GenerateIntersectionReport(ByVal si As SessionInfo, ByVal objDbConnInfoApp As DbConnInfoApp, ByVal currentWorkflowUnitPk As WorkflowUnitPk, ByVal fullFilePathName As String) As Boolean
			Try
				Dim fileCreated As Boolean
				
				Dim dt As DataTable = BRApi.Database.ExecuteSqlUsingReader(objDbConnInfoApp, Me.GetIntersectionValidationErrorsCountQuery(si, currentWorkflowUnitPk), False)
				If dt IsNot Nothing Then
					If dt.Rows(0)(0) < 150 Then
						If Me.WriteIntersectionErrorsToFile(si, objDbConnInfoApp, currentWorkflowUnitPk, fullFilePathName) Then
							fileCreated = True
						End If
					End If
				End If
				
				If fileCreated Then
					Return True
				Else
					Return False
				End If
				
			Catch ex As Exception
				brapi.ErrorLog.LogMessage(si, $"Exception generating intersection report. {ex.Message}")
				Return False
			End Try
		End Function
		Public Function WriteIntersectionErrorsToFile(ByVal si As SessionInfo, ByVal dbConn As DbConnInfo, ByVal wfPk As WorkflowUnitPk, ByVal fullFilePathName As String) As Boolean
			Try
				
				Dim dt As DataTable = BRApi.Database.ExecuteSqlUsingReader(dbConn, Me.GetIntersectionValidationErrorsQuery(si, wfPk), False)
				If dt IsNot Nothing Then
				
					Dim body As New StringBuilder
					body.AppendLine(StartHTMLTable)
					
					Dim rowHeaders As New List(Of String)
					For Each dc As DataColumn In dt.Columns
						rowHeaders.Add(dc.ColumnName)
					Next
					
					body.AppendLine(NewHTMLTableRowHeader(rowHeaders))
					Dim r As Integer = 0
					
					Dim rowValues As New List(Of String)
		            For Each dr As DataRow In dt.Rows
						For Each dc As DataColumn In dt.Columns
							If dc.ColumnName.XFContainsIgnoreCase("ValidationMessagesXml") Then
								If r = 0 Then
									r += 1
								End If
								
								rowValues.Add(Me.GetXMLErrorMessage(si, dr(dc.ColumnName)))
							Else
								rowValues.Add(dr(dc.ColumnName))
							End If
						Next
						body.AppendLine(NewHTMLTableRow((rowValues)))
						rowValues.Clear
		            Next
		    	    body.AppendLine(EndHTMLTable)
					
					Using fdxDataFile As System.IO.StreamWriter = New StreamWriter(fullFilePathName, True)
						fdxDataFile.Write(body)
						fdxDataFile.Close									
					End Using
					
					Return True
				End If
				
				Return False
			Catch ex As Exception
				brapi.ErrorLog.LogMessage(si, $"Exception writing intersection errors to file. {ex.Message}")
				Return False
			End Try
		End Function
		Public Function GetXMLErrorMessage(ByVal si As SessionInfo, ByVal xml As String) As String
			Try
				
				Dim retValue As New Text.StringBuilder
				
				Dim xmlDoc As New xmlDocument
				xmlDoc.LoadXml(xml)
				Dim root As XmlElement = xmlDoc.DocumentElement
				
				'always will have only one message
				For Each message As XmlElement In xmlDoc.DocumentElement.SelectNodes("/dataCellValidationMsgList/messages/*")
					Dim errorMsg As String = message("errorMsg").InnerXml
					Dim sParams As New List(Of String)
					For Each stringParams As XmlElement In message.GetElementsByTagName("stringParam")
						sParams.Add(stringParams.InnerText)
					Next
					If sParams.Count > 0 Then
						retValue.AppendLine(String.Format(errorMsg,sParams.ToArray))
					Else
						retValue.AppendLine(errorMsg)
					End If
				Next
				
				Return retValue.ToString
				
			Catch ex As Exception
				Return xml
			End Try
		End Function
		Public Function GetIntersectionValidationErrorsQuery(ByVal si As SessionInfo, ByVal currentWorkflowUnitPk As WorkflowUnitPk) As String
			Try
				Dim sql As New Text.StringBuilder
				
				sql.Append("Select ")
				'sql.Append("	WorkflowProfileHierarchy.HierarchyIndex, ")
				'sql.Append("	WorkflowProfileHierarchy.ProfileKey,")
				sql.Append("	WorkflowProfileHierarchy.ProfileName,")
				'sql.Append("	StageToFinanceValidationError.WorkflowProfileKey,")
				'sql.Append("	StageToFinanceValidationError.SummaryRowID, ")
'					sql.Append("	StageSummaryTargetData.SnT, ")
'					sql.Append("	StageSummaryTargetData.Cube, ")
'					sql.Append("	StageSummaryTargetData.TmT, ")
'					sql.Append("	StageSummaryTargetData.Am, ")
				sql.Append("	StageSummaryTargetData.EtT, ")
'					sql.Append("	StageSummaryTargetData.PrT, ")
'					sql.Append("	StageSummaryTargetData.CnT, ")
'					sql.Append("	StageSummaryTargetData.VwT, ")
				sql.Append("	StageSummaryTargetData.AcT, ")
'					sql.Append("	StageSummaryTargetData.FwT, ")
'					sql.Append("	StageSummaryTargetData.OgT, ")
				sql.Append("	StageSummaryTargetData.IcT, ")
				sql.Append("	StageSummaryTargetData.U1T, ")
				sql.Append("	StageSummaryTargetData.U2T, ")
				sql.Append("	StageSummaryTargetData.U3T, ")
				sql.Append("	StageSummaryTargetData.U4T, ")
				sql.Append("	StageSummaryTargetData.U5T, ")
				sql.Append("	StageSummaryTargetData.U6T, ")
				sql.Append("	StageSummaryTargetData.U7T, ")
				sql.Append("	StageSummaryTargetData.U8T, ")
				sql.Append("	StageToFinanceValidationError.ValidationMessagesXml ")
				
'					sql.Append("CAST(REPLACE(CAST(StageToFinanceValidationError.ValidationMessagesXml As NVARCHAR(MAX)),'utf-8','utf-16') AS XML).value('(dataCellValidationMsgList/messages/message/errorMsg)[1]', 'varchar(max)'),")
'					sql.Append("CAST(REPLACE(CAST(StageToFinanceValidationError.ValidationMessagesXml As NVARCHAR(MAX)),'utf-8','utf-16') AS XML).value('(dataCellValidationMsgList/messages/message/stringParams/stringParam)[1]', 'varchar(max)'),")
'					sql.Append("CAST(REPLACE(CAST(StageToFinanceValidationError.ValidationMessagesXml As NVARCHAR(MAX)),'utf-8','utf-16') AS XML).value('(dataCellValidationMsgList/messages/message/stringParams/stringParam)[2]', 'varchar(max)')")
				
				sql.Append("From")
				sql.Append("	StageToFinanceValidationError ")
				sql.Append("INNER Join WorkflowProfileHierarchy On StageToFinanceValidationError.WorkflowProfileKey = WorkflowProfileHierarchy.ProfileKey ")
				sql.Append("INNER Join StageSummaryTargetData On StageSummaryTargetData.SummaryRowID = StageToFinanceValidationError.SummaryRowID ")

				sql.Append("Where")
				sql.Append("	WorkflowProfileHierarchy.ProfileKey = '" & currentWorkflowUnitPk.ProfileKey.ToString & "' ")
				sql.Append("	And StageToFinanceValidationError.WorkflowScenarioKey = " & currentWorkflowUnitPk.ScenarioKey.ToString)
				sql.Append("	And StageToFinanceValidationError.WorkflowTimeKey = " & currentWorkflowUnitPk.TimeKey.ToString & " ")
				sql.Append("Order By")
				sql.Append("	WorkflowProfileHierarchy.HierarchyIndex,  ")
				sql.Append("	StageToFinanceValidationError.AccountId")
				
				Return sql.ToString
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		Public Function GetIntersectionValidationErrorsCountQuery(ByVal si As SessionInfo, ByVal currentWorkflowUnitPk As WorkflowUnitPk) As String
			Try
				Dim sql As New Text.StringBuilder
				
				sql.Append("Select Count (*) ")
				sql.Append("From")
				sql.Append("	StageToFinanceValidationError ")
				
				sql.Append("Where")
				sql.Append("	WorkflowProfileKey = '" & currentWorkflowUnitPk.ProfileKey.ToString & "' ")
				sql.Append("	And WorkflowScenarioKey = " & currentWorkflowUnitPk.ScenarioKey.ToString)
				sql.Append("	And WorkflowTimeKey = " & currentWorkflowUnitPk.TimeKey.ToString & " ")
				
				Return sql.ToString
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
           
		#Region "HTML Helpers"
			Public Function GetErrorEmailBody(ByVal parentIntegrationName As String) As String
				Return $"<b>An Error has Occurred</b></br>{parentIntegrationName} has failed to run."
			End Function
			
	        ''' <summary>
	        ''' Return a formatted html row
	        ''' </summary>
	        ''' <param name="si"></param>
	        ''' <param name="rowValues"></param>
	        ''' <returns></returns>
	        Public Function NewHTMLTableRow(ByVal rowValues As List(Of String), Optional ByVal paddingPx As String = "10px", Optional ByVal colSpan As Integer = 0, Optional ByVal lastColRowSpan As Integer = 0) As String
	            Dim strBldr As New StringBuilder
	            strBldr.Append("<tr>")
	            Dim styl As String
	            Dim cnt As Short = 0
	            For Each val As String In rowValues
	                cnt += 1
	                If cnt = 1 Then
	                    styl = $" style='color:{_foreColor};background-color:{_backColor};padding: {paddingPx}; text-align:left; vertical-align:top'"
	                Else If val.StartsWith("Fail") Then
	                    styl = " style='background-color:#ffe6e6;padding: 10Px; text-align:left; vertical-align:top'"
	                Else If val.StartsWith("Warning") Then
	                    styl = " style='background-color:#ffffb3;padding: 10Px; text-align:left; vertical-align:top'"
	                Else If val.StartsWith("Success") Then
	                    styl = " style='background-color:#ccffcc;padding: 10Px; text-align:left; vertical-align:top'"                              
	                Else If colSpan > 0 Then
	                    styl = $" style='color:{_foreColor};background-color:{_backColor};padding: {paddingPx}; text-align:left; vertical-align:top'"
	                Else
	                    styl = $" style='padding: {paddingPx}; text-align:left; vertical-align:top'"
	                End If
	                val = val.Replace(",","</br>")
	                If colSpan > 0 Then
	                    strBldr.Append($"<td{styl} colspan='{colSpan}'>{val}</td>")
	                Else If lastColRowSpan > 0 And cnt = rowValues.Count Then
	                    strBldr.Append($"<td{styl} rowspan='{lastColRowSpan}'>{val}</td>")
	                Else     
	                    strBldr.Append($"<td{styl}>{val}</td>")
	                End If
	            Next
	            strBldr.AppendLine("</tr>")
	            Return strBldr.toString
	        End Function
	        
	        ''' <summary>
	        ''' Return a formatted table header row
	        ''' </summary>
	        ''' <param name="si"></param>
	        ''' <param name="headerValues"></param>
	        ''' <returns></returns>
	        Public Function NewHTMLTableRowHeader(ByVal headerValues As List(Of String), Optional ByVal colWidths As Integer() = Nothing) As String
	            Dim styl As String = $"style='color:{_foreColor};background-color:{_backColor};text-align:left;padding: 8px;'"
	            Dim strBldr As New StringBuilder
	            strBldr.Append("<tr>")
	            Dim i As Short = 0
	            For Each val As String In headerValues
	                If colWidths IsNot Nothing Then
	                    styl = $"style='width:{colWidths(i)}%; color:{_foreColor};background-color:{_backColor}; text-align:left; padding:8px;'"
	                End If
	                strBldr.Append($"<th {styl}>{val}</th>")
	                i += 1
	            Next
	            strBldr.AppendLine("</tr>")
	            Return strBldr.toString
	        End Function
	        
	        Public Function StartHTMLUnorderedList() As String
	            Return "<ul>"
	        End Function
	        
	        Public Function EndHTMLUnorderedList() As String
	            Return "</ul>"
	        End Function
	        
	        Public Function NewListItem(ByVal item As String) As String
	            Return $"<li>{item}</li>"
	        End Function
	        
	        Public Function StartHTMLTable() As String
	            Return "<table border='1' style='border-collapse:collapse; width:100%; table-layout: fixed; word-wrap: break-word'>"
	        End Function
	        
	        Public Function EndHTMLTable() As String
	            Return "</table>"
	        End Function              
	        
	        Public Function NewHTMLParagraph(ByVal p As String) As String
	            Return $"<p>{p}</p>"
	        End Function
		
    	#End Region
    End Class
     
	#Region "Email Classes"
	    Public Class EmailResults
	        Public Property Results As List(Of EmailResult)
	        Public Sub Add(si As SessionInfo, 
							wfDetails As String, 
							status As String, 
							importStatus As String, 
							transformationStatus As String,
							intersectionStatus As String,
							loadStatus As String,
							processCubeStatus As String)
	            Dim eResult As New EmailResult
	            eResult.wfDetails = wfDetails
	            eResult.Status = status
	            eResult.ImportStatus = importStatus
				eResult.TransformationStatus = transformationStatus
				eResult.IntersectionStatus = intersectionStatus
	            eResult.LoadStatus = loadStatus
				eResult.ProcessCubeStatus = processCubeStatus
	            If Results Is Nothing Then Results = New List(Of EmailResult)
	            Results.Add(eResult)
	        End Sub
	    End Class
	    
	    Public Class EmailResult
	        Public Property wfDetails As String
	        Public Property Status As String
	        Public Property ImportStatus As String
			Public Property TransformationStatus As String
			Public Property IntersectionStatus As String
	        Public Property LoadStatus As String
			Public Property ProcessCubeStatus As String
	    End Class
    #End Region
	
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Execute_DM_SAMS">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[

Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.Execute_DM_SAMS
	Public Class MainClass
	
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				
						Dim sourceAppName As String = "SAMS"
						Dim newSeshInfo As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si, sourceAppName, openAppResult.Success)						
					
						Dim dataMgmtSeq As String = "Execute_App2App_SAMS"    
                    
                                Dim params As New Dictionary(Of String, String)'								
								params.Add("WFYear",args.NameValuePairs.XFGetValue("globTime").ToString)
								params.Add("ActualPeriod",args.NameValuePairs.XFGetValue("ActualPeriod").ToString)								
                             BRApi.Utilities.StartDataMgmtSequence(newSeshInfo, dataMgmtSeq,params)

						Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function	
	End Class
End Namespace




]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EXP_Clear_Bckups">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.EXP_Clear_Bckups
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown, ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						Dim log_builder As New Text.StringBuilder
					
						Dim sql As String = "SELECT DISTINCT TABLE_NAME, RIGHT(TABLE_NAME,8) As CREATION_DATE FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME LIKE 'XFW_NonWage_Register_Bkp%'"
						Dim dt As New DataTable
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							dt = BRApi.Database.ExecuteSql(dbConnApp, sql, False)
						End Using
						
						Dim archive_date As String = DateTime.Now.AddDays(-7).ToString("yyyyMMdd")
						BRApi.ErrorLog.LogMessage(si, "archive_date:" & archive_date)
						
						Dim table_dict As New Dictionary(Of String, String)
						If dt IsNot Nothing And dt.Rows.Count>0
							For Each dr As DataRow In dt.Rows
								If dr("CREATION_DATE").ToString.XFConvertToInt < archive_date.XFConvertToInt
									log_builder.AppendLine("table:" & dr("TABLE_NAME").ToString & ":Archive & Delete")
								Else
									log_builder.AppendLine("table:" & dr("TABLE_NAME").ToString & ":Keep")
								End If	
							Next	
						End If	
						
						
						BRApi.ErrorLog.LogMessage(si, "log clear bkp", log_builder.ToString)
						
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Function CSVBuilder(dt As DataTable) As Text.StringBuilder
			Dim sCSV As New Text.StringBuilder
			If dt IsNot Nothing Then
				If dt.Rows.Count > 0 Then
					
					For Each dc As DataColumn In dt.Columns
						sCSV.Append(dc.ColumnName & ",")
					Next
					sCSV.Remove(sCSV.Length-1,1)
					sCSV.Append(Environment.NewLine)
					For Each dr As DataRow In dt.Rows
						For Each dc As DataColumn In dt.Columns
	     					sCSV.Append(dr(dc).ToString & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
					Next
				End If
			End If
			Return sCSV
    	End Function
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EXP_Data_Push_Triggers">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics


Namespace OneStream.BusinessRule.Extender.EXP_Data_Push_Triggers
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
						Dim sp As New Stopwatch()
			            sp.Start()
						'global declarations
						Dim dt_watcher As DataTable=Nothing
						Dim newSeshInfo As New SessionInfo
						Dim Task As New TaskActivityItem
						
						'get trigger parameters from DM Step
						Dim ActivityID As String = args.NameValuePairs.XFGetValue("ActivityID")
						Dim Target As String = args.NameValuePairs.XFGetValue("Target")
						Dim TargetRule As String = args.NameValuePairs.XFGetValue("TargetRule")
						Dim AppID As String = args.NameValuePairs.XFGetValue("AppID")
						
						'get modified cost center list from watcher table
						Dim uniquecclist = Me.GetCCFromWatcher(si,ActivityID)
						BRAPi.ErrorLog.LogMessage(si, "uniquecclist:" & uniquecclist.ToString)
						
						'update watcher before start before data load process starts
						Me.UpdateWatcher(si,globals,2, uniquecclist,ActivityID)
						
						'create guid for entry to integration monitor
						Dim jobid As Guid = Guid.NewGuid
						
						
						If Target.XFEqualsIgnoreCase("ENT")
							'create entry in integration monitor
							Dim submit_dict As New Dictionary(Of String, String)
							submit_dict.Add("JobId", jobid.ToString)
							submit_dict.Add("Description", "Enterprise:Register->Enterprise:Ent")
							BRApi.Utilities.StartDataMgmtSequence(si, "Sqnc_Submit_Job", submit_dict)
							BRApi.ErrorLog.LogMessage(si, "after submit")
							
							'import
							Dim import_status As Boolean = False
							import_status = Me.Import(si, globals, api, args, jobid)
							If Not import_status = True Then Return Nothing
							BRApi.ErrorLog.LogMessage(si, "after import")
							
							'validate
							Dim validate_status As Boolean = False
'							validate_status = Me.Validate(si, globals, api, args, jobid)
							If Not validate_status = True Then Return Nothing
							BRApi.ErrorLog.LogMessage(si, "after validate")
							
							'load
							Dim load_dict As New Dictionary(Of String, String)
							load_dict.Add("JobId", jobid.ToString)
							load_dict.Add("Global_Obj", "EXP_Register_ENT_Push")
							Task = BRApi.Utilities.ExecuteDataMgmtSequence(si, TargetRule, load_dict)
						Else
							'import
							Dim import_status As Boolean = False
							import_status = Me.Import(si, globals, api, args, jobid)
							If Not import_status = True Then Return Nothing
							BRApi.ErrorLog.LogMessage(si, "after import")
							
							Dim DMParams As New Dictionary(Of String, String)
							DMParams.Add("Global_Obj", "EXP_Register_ENT_Push")
							newSeshInfo = GetOtherAppConnectionString(si,Target,AppID)
							Task = BRApi.Utilities.ExecuteDataMgmtSequence(newSeshInfo, TargetRule, DMParams)
						End If
						
						Dim AuthSessionID As String = task.AuthSessionID.ToString
						Dim UniqueID As Guid = task.UniqueID
						Dim Description As String = task.Description.ToString
						Dim UserName As String= task.UserName.ToString
						
					Dim sql As String = "SELECT TaskActivityStatus FROM TaskActivity WHERE UniqueID = '" & UniqueID.ToString & "'"
				   
'					Using dbConnFW As DbConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
'					dt = BRApi.Database.ExecuteSql(dbConnFW, sql, False)
'				End Using
'					    Dim sql As String = "SELECT TaskActivityStatus FROM TaskActivity WHERE AuthSessionID='"& AuthSessionID &"' AND UniqueID='"& UniqueID.ToString &"'AND UserName='" & UserName & "' and Description ='Step_EXP_to_WMTUS'"
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
							dt_watcher = BRAPi.Database.ExecuteSql(dbConnApp,sql,False)
						End Using
						If dt_watcher.Rows(0)("TaskActivityStatus") = CInt(TaskActivityStatus.Completed)
							UpdateWatcher(si, globals, 1, uniquecclist,ActivityID)
						Else If dt_watcher.Rows(0)("TaskActivityStatus") = CInt(TaskActivityStatus.Failed)
							UpdateWatcher(si, globals, 3, uniquecclist,ActivityID)
						End If
'						BRAPi.ErrorLog.LogMessage(si, "FINTABLE:",PrintDT(dt_watcher).ToString)
						sp.Stop()
						BRApi.ErrorLog.LogMessage(si ,"Time Taken (ms):" ,sp.ElapsedMilliseconds.ToString)	
''				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Private Function Import(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs, ByVal jobid As Guid) As Boolean
			Try	
				BRApi.ErrorLog.LogMessage(si, "inside import")
				Dim status As Boolean = True
				Dim result As DataTable = Nothing
				Dim sql As New Text.StringBuilder
				sql.Append("SELECT WFProfileName, WFScenarioName, WFTimeName, CostCenter, GL, TF_2, SUM(P01) As P01, SUM(P02) As P02, SUM(P03) As P03, SUM(P04) As P04, SUM(P05) As P05, SUM(P06) AS P06, SUM(P07) As P07, SUM(P08) As P08, SUM(P09) As P09, SUM(P10) As P10, SUM(P11) As P11, SUM(P12) As P12")
				sql.Append(" FROM XFW_NonWage_Register")
				sql.Append(" WHERE TF_11 = 'Local Currency' ")
				sql.Append(" GROUP BY WFProfileName, WFScenarioName, WFTimeName, CostCenter, GL, TF_2, TF_11 ")
				Dim import_status_dict As New Dictionary(Of String, String)
				import_status_dict.Add("JobId",jobid.ToString)
				
				Try 
					Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
						result = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, sql.ToString, True)
						globals.SetObject("EXP_Register_ENT_Push", result)
					End Using
					import_status_dict.Add("Status","StatusGreenBall")
					import_status_dict.Add("RcdsIn",result.Rows.Count.ToString)
					import_status_dict.Add("RcdsOut",result.Rows.Count.ToString)
					import_status_dict.Add("ErrCode","Success")
					import_status_dict.Add("ErrDesc",String.Empty)
					BRApi.Utilities.StartDataMgmtSequence(si, "Sqnc_Update_Import_Status", import_status_dict)
					BRApi.ErrorLog.LogMessage(si, "import successful")
					Return status
				Catch ex As Exception
					import_status_dict.Add("Status","StatusRedBall")
					import_status_dict.Add("RcdsIn",0)
					import_status_dict.Add("RcdsOut",0)
					import_status_dict.Add("ErrCode","Error")
					import_status_dict.Add("ErrDesc","Import Failed:")
					BRApi.Utilities.StartDataMgmtSequence(si, "Sqnc_Update_Import_Status", import_status_dict)
					status = False
					BRApi.ErrorLog.LogMessage(si, "import fail")
					Return status
					Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
				End Try
			Return status
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Private Function GetOtherAppConnectionString(ByVal si As SessionInfo,ByVal Target As String,ByVal AppID As String) As Object
			Try	
'				Dim AppID As String =String.Empty
'				If Target = "SAMS_Dev"
'					AppID= "94c97ba1-08f0-4ceb-870a-96f4d920c8e5"
'				Else If Target = "WMTUS_Dev"
'					AppID= "1076a653-b7db-4caa-8570-4fc92c3a0aa6"
'				End If
				Dim appUniqueID As Guid = ConvertHelper.ToGuid(AppID)
				Dim varAppToken As New ApplicationToken(si.AppToken.SHA1HashCode, Target, appUniqueID)
				Dim newSeshInfoOtherApp As New SessionInfo(ClientModuleType.Silverlight, si.WebServerUrlUsedByClient, si.AuthToken, varAppToken, si.Culture)
					
				Return newSeshInfoOtherApp

			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		
		
		Private Function GetCCFromWatcher(ByVal si As SessionInfo,ByVal ActivityID As String) As Text.StringBuilder
			Try
				Dim uniquecclist As New Text.StringBuilder
				Dim dt_watcher As Datatable = Nothing
				Dim sql As String = "SELECT CostCenter FROM XFW_ExpensePlanning_Watcher WHERE (Run_Flag=0 OR Run_Flag =-1) AND ActivityID='"& ActivityID &"'"
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_watcher = BRAPi.Database.ExecuteSql(dbConnApp,sql,False)
				End Using
				
				If dt_watcher IsNot Nothing
					If dt_watcher.Rows.Count > 0
						For Each dr_watcher As DataRow In dt_watcher.Rows
							If Not uniquecclist.ToString.Contains(dr_watcher("CostCenter"))
								uniquecclist.Append("'" & dr_watcher("CostCenter") & "',")
							End If
						Next
						If uniquecclist.Length > 0 Then
							uniquecclist.Remove(uniquecclist.Length-1,1)
						End If
					End If
				End If
			Return uniquecclist
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Sub UpdateWatcher(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal successFlag As Integer, ByVal uniquecclist As Text.StringBuilder,ByVal ActivityID As String)
			Try		
					If Not String.IsNullOrEmpty(uniquecclist.ToString)
'					Dim uniqueidlist = DirectCast(globals.GetObject("EXP_Register_UniqueID"), Text.StringBuilder)
'					If Not String.IsNullOrEmpty(uniqueidlist.ToString)
						
						Dim sql As New Text.StringBuilder
						If successFlag =1 Then
						   
'							sql.Append("UPDATE XFW_ExpensePlanning_Watcher SET Wait_Flag=0,Processed_On='"& DateTime.Now &"',Requested_On='"& starttime &"' WHERE ActivityID='TRG2'  AND CostCenter In (" & uniqueidlist.ToString & ") ")
                           sql.Append("UPDATE XFW_ExpensePlanning_Watcher SET Run_Flag=1,Processed_On='"& DateTime.Now & "' WHERE Wait_Flag=0 AND ActivityID='"& ActivityID &"' AND CostCenter In (" & uniquecclist.ToString & ") ")
                           sql.Append("UPDATE XFW_ExpensePlanning_Watcher SET Run_Flag=0,Wait_flag=0,Processed_On='"& DateTime.Now & "' WHERE Wait_Flag=1 AND ActivityID='"& ActivityID &"' AND CostCenter In (" & uniquecclist.ToString & ") ")
						   
					   Else If successFlag = 3
							sql.Append("UPDATE XFW_ExpensePlanning_Watcher SET Run_Flag=-1,Processed_On='"& DateTime.Now &"' WHERE  ActivityID='"& ActivityID &"' AND CostCenter In (" & uniquecclist.ToString & ") ")
'						    sql = "UPDATE XFW_ExpensePlanning_Watcher SET Run_Flag=1,Wait_Flag=0,Processed_On='"& DateTime.Now &"',Requested_On='"& starttime &"' WHERE ActivityID='TRG2' AND Wait_Flag=1 AND Run_Flag=1  AND CostCenter In (" & uniquecclist.ToString & ") "
						Else If successFlag = 2
							sql.Append("UPDATE XFW_ExpensePlanning_Watcher SET Run_Flag=2,Processed_On=null,Requested_On='"& DateTime.Now &"'  WHERE  ActivityID='"& ActivityID &"' AND CostCenter In (" & uniquecclist.ToString & ") ")
						End If
'						BRAPI.ErrorLog.LogMessage(si,"sql update watcher",sql.ToString)
						If sql.Length>0
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								BRAPi.Database.ExecuteActionQuery(dbConnApp,sql.ToString,False,False)
						End Using
					    End If
					Else
						BRAPI.ErrorLog.LogMessage(si, "No modified cost centers to update watcher")
					End If
'				End If
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		Private Function PrintDT(dt As DataTable) As Text.StringBuilder
			Dim sCSV As New Text.StringBuilder
			If dt IsNot Nothing Then
				If dt.Rows.Count > 0 Then
					
					For Each dc As DataColumn In dt.Columns
						sCSV.Append(dc.ColumnName & ",")
					Next
					sCSV.Remove(sCSV.Length-1,1)
					sCSV.Append(Environment.NewLine)
					For Each dr As DataRow In dt.Rows
						For Each dc As DataColumn In dt.Columns
	     					sCSV.Append(dr(dc).ToString & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
					Next
				End If
			End If
			Return sCSV
    	End Function
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EXP_ENT_to_EXP_PK04">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_SharedConstants" />
            </referencedAssemblies>
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics
Imports System.Data.SqlClient
Imports OneStream.BusinessRule.DashboardStringFunction.EP_SharedConstants

#End Region

#Region "Rule Change Mgmt"

'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 - - Integration Functions
	'Mods:		
'--------------------------------------------------------------------------------------------------------------------------------------------

#End Region
'push package specific driver based GLs from segment cubes to expense register

Namespace OneStream.BusinessRule.Extender.EXP_ENT_to_EXP_PK04
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim DEBUG As Boolean = False
						Dim sp As New Stopwatch()
						sp.Start()
						
						Dim scenarioName As String = ScenarioDimHelper.GetNameFromID(si, si.WorkflowClusterPk.ScenarioKey)
						Dim timeName As String = BRApi.Finance.Time.GetNameFromId(si, si.WorkflowClusterPk.TimeKey)
						Dim pakageName As String = args.NameValuePairs.XFGetValue("pakageName")
						
						Dim CurrentCV As String = String.Empty
						Dim param_GLlist As String = String.Empty
						
						If pakageName.XFEqualsIgnoreCase("PK04")
							CurrentCV = "FDX_Data_Extract_PK04"
							param_GLlist = "PK04_DriverBased_GLs"
						ElseIf pakageName.XFEqualsIgnoreCase("PK05")
							CurrentCV = "FDX_Data_Extract_PK05"
							param_GLlist = "PK05_DriverBased_GLs"
						End If
						
						Dim cvParams As New Dictionary(Of String, String)
						Dim dt As DataTable = Nothing
						'create dt by cube view rendering
						dt = CVRender(si, CurrentCV , cvParams)
						If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "ENT_to_EXP dt1:", PrintDT(si,dt).ToString)
						
						'transform dt
						Dim cube_dt As DataTable = Nothing
						cube_dt = Me.TransformDT(si, dt, scenarioName, timeName)
						If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "ENT_to_EXP dt2:", PrintDT(si,cube_dt).ToString)
						
						Dim gl_list As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, param_GLlist)
						gl_list = gl_list.Replace(",", "','")
						Dim dt_audit_delete As DataTable
						Dim sql_audit As New Text.StringBuilder
						sql_audit.Append("Select * FROM [dbo].[" &EPSharedConstants.sMainRegExpenseTable & "]  Where GL IN ('" & gl_list & "')")

						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
									dt_audit_delete=	BRAPi.Database.ExecuteSql(dbConnApp,sql_audit.ToString , False)
						End Using
						Dim action As String= String.Empty
						action="'Delete'"
						UpdateAuditLog(si,dt_audit_delete,action)
							
						action="'Add'"
						Dim sql As New Text.StringBuilder
						sql.Append("DELETE FROM [" & EPSharedConstants.sMainRegExpenseTable & "] Where GL IN ('" & gl_list & "')")
						Using dbExtConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							BRAPi.Database.ExecuteActionQuery(dbExtConn, sql.ToString, False, False)
							Using objSQLBulkCopy As New SqlBulkCopy(dbExtConn.ConnectionString)
								For Each dc As DataColumn In cube_dt.Columns
			                        objSQLBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName)
			                    Next
			                    objSQLBulkCopy.DestinationTableName = EPSharedConstants.sMainRegExpenseTable 
			                    objSQLBulkCopy.WriteToServer(cube_dt)
							End Using
						End Using
						UpdateAuditLog(si,cube_dt,action)
						sp.Stop()
						If DEBUG Then BRApi.ErrorLog.LogMessage(si, "ENT_to_EXP Execution Time(ms):" & sp.ElapsedMilliseconds)
					
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		#Region "Helper Function"
		Public Function CVRender(ByRef si As SessionInfo, ByVal cubeViewName As String, ByVal vParams As Dictionary(Of String, String)) As DataTable
			Dim value As New NameValueFormatBuilder 
			Dim instance As New XFIfActionExpr("CVFilter", value)
			value = instance.NameValueFormatBuilder
			value.ApplyNameValuePairsFromDictionary(vParams)
			Dim entityDimensionName As String = ""
			Dim entityMemFilter As String = ""
			Dim scenarioDimName As String = ""
			Dim scenarioMemFilter As String = ""
			Dim timeMemFilter As String = ""
			Dim includeCellTextCols As Boolean = False
			Dim useStandardFactTableFields As Boolean = True
			Dim useGenericTimeColNames As Boolean = True
			Dim parallelQueryCount As Integer = 8
			Dim logStatistics As Boolean = False
			Dim dt As DataTable = Nothing
			Try
				dt = BRApi.Import.Data.FdxExecuteCubeViewTimePivot(si, cubeViewName, entityDimensionName, entityMemFilter, scenarioDimName, scenarioMemFilter, timeMemFilter, value, includeCellTextCols, useStandardFactTableFields, True, Nothing, parallelQueryCount, logStatistics)
				If dt IsNot Nothing Then					
					Return dt
				Else
					Return Nothing
				End If
			Catch e As Exception
				Brapi.ErrorLog.LogMessage(si,$"getCV({cubeviewName}, {string.Join(":", vParams)}) failed with error - {e}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try
		End Function
		
		'to print datatable in log
		Private Function PrintDT(ByVal si As SessionInfo, ByVal dt As DataTable) As Text.StringBuilder
			Try
				Dim sCSV As New Text.StringBuilder
				If dt IsNot Nothing Then
					If dt.Rows.Count > 0 Then
						
						For Each dc As DataColumn In dt.Columns
							sCSV.Append(dc.ColumnName & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
						For Each dr As DataRow In dt.Rows
							For Each dc As DataColumn In dt.Columns
		     					sCSV.Append(dr(dc).ToString & ",")
							Next
							sCSV.Remove(sCSV.Length-1,1)
							sCSV.Append(Environment.NewLine)
						Next
					End If
				End If
				Return sCSV
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
    	End Function
		
		'transform dt to load to expense register
		Private Function TransformDT(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal scenarioName As String, ByVal timeName As String) As DataTable
			Try	
						'select required column
						Dim view As New DataView(dt)
						dt = view.ToTable(False, "Entity","Account","UD2","Time1","Time2","Time3","Time4","Time5","Time6","Time7","Time8","Time9","Time10","Time11","Time12","Time13")
						
'						rename colmuns 
						dt.Columns("Entity").ColumnName = "CostCenter"
						dt.Columns("Account").ColumnName = "GL"
						dt.Columns("UD2").ColumnName = "TF_2"
						dt.Columns("Time1").ColumnName = "P01"
						dt.Columns("Time2").ColumnName = "P02"
						dt.Columns("Time3").ColumnName = "P03"
						dt.Columns("Time4").ColumnName = "P04"
						dt.Columns("Time5").ColumnName = "P05"
						dt.Columns("Time6").ColumnName = "P06"
						dt.Columns("Time7").ColumnName = "P07"
						dt.Columns("Time8").ColumnName = "P08"
						dt.Columns("Time9").ColumnName = "P09"
						dt.Columns("Time10").ColumnName = "P10"
						dt.Columns("Time11").ColumnName = "P11"
						dt.Columns("Time12").ColumnName = "P12"
						dt.Columns("Time13").ColumnName = "YearTotal"
						
						'prepare dt to push to expense register
						Dim VBOCCdict As New Dictionary(Of String, String)
						Dim VBOCCdt As New DataTable
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							VBOCCdt = BRAPi.Database.ExecuteSql(dbConnApp,"SELECT WORKFLOW_PROFILE_VBO,COST_CENTER FROM [dbo].[" & EPSharedConstants.sVBOCCMappingTable & "]", False)   
						End Using	
						For Each VBOCCdr As DataRow In VBOCCdt.Rows
							Try
								VBOCCdict.Add(VBOCCdr("COST_CENTER"),VBOCCdr("WORKFLOW_PROFILE_VBO"))
							Catch ex As Exception
								Continue For
							End Try
						Next
						dt.Columns.Add("UniqueID",GetType(String))
						dt.Columns.Add("TF_3")
						dt.Columns.Add("WFProfileName")
						dt.Columns.Add("WFScenarioName")
						dt.Columns.Add("WFTimeName")
						dt.Columns.Add("LineItem")
						dt.Columns.Add("TF_11")
						dt.Columns.Add("UserID")
						
						If dt.Rows.Count > 0
							For Each dr As DataRow In dt.Rows
								dr("UniqueID") = Guid.NewGuid.ToString
								If VBOCCDict.ContainsKey(dr("CostCenter"))
									dr("WFProfileName") = VBOCCdict.Item(dr("CostCenter")) & ".PK_05 Utilities & Sustainability"
								End If
								dr("WFScenarioName") = scenarioName
								dr("WFTimeName") = timeName
								dr("LineItem") = 1
								dr("YearTotal")= dr("P01").TOString.XFConvertToDecimal + dr("P02").TOString.XFConvertToDecimal + dr("P03").ToString.XFConvertToDecimal + dr("P04").ToString.XFConvertToDecimal + dr("P05").ToString.XFConvertToDecimal + dr("P06").ToString.XFConvertToDecimal + dr("P07").ToString.XFConvertToDecimal + dr("P08").ToString.XFConvertToDecimal + dr("P09").ToString.XFConvertToDecimal + dr("P10").ToString.XFConvertToDecimal + dr("P11").ToString.XFConvertToDecimal + dr("P12").ToString.XFConvertToDecimal
								dr("TF_11") = "Local Currency"
								dr("UserID") = BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName).User.Description
							Next	
						End If
						Return dt
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		#Region "UpdateAuditLog"
		Public Sub UpdateAuditLog(ByVal si As SessionInfo, ByVal dt As DataTable,ByVal action As String)
			Try
				Dim tableName As String = "XFW_NonWage_Register_AuditLog"
				
'				dt.Columns("UniqueID").DataType=GetType(String)
				dt.Columns.Add("Action")
				dt.Columns("Action").Expression=  action
'				dt.Columns("UniqueID").DataType=GetType(String)
				dt.Columns.Add("Location")
				dt.Columns("Location").Expression="'PK04_PXQ'"
				dt.Columns.Add("Updated_On", GetType(System.DateTime))
				dt.Columns("Updated_On").Expression= "'" & DateTime.Now & "'"
'				BRAPI.ErrorLog.LogMessage(si,"Auditcsv",CSVBuilder(dt).ToString)
				Using dbExtConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)		
				Using objSQLBulkCopy As New SqlBulkCopy(dbExtConn.ConnectionString)
						
						
						
						
	                    For Each dc As DataColumn In dt.Columns
	                        objSQLBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName)
	                    Next
	                    objSQLBulkCopy.DestinationTableName = "XFW_NonWage_Register_AuditLog"
	                    objSQLBulkCopy.WriteToServer(dt)
											
				End Using	
				End Using
'				BRApi.Database.SaveCustomDataTable(si, "Application", tableName, dt, False)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub	
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EXP_ENT_to_EXP_PK05">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_SharedConstants" />
            </referencedAssemblies>
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics
Imports System.Data.SqlClient
Imports OneStream.BusinessRule.DashboardStringFunction.EP_SharedConstants

#End Region

#Region "Rule Change Mgmt"

'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 - - Integration Functions
	'Mods:		
'--------------------------------------------------------------------------------------------------------------------------------------------

#End Region
'push PK05 driver based GLs from segment cubes to expense register

Namespace OneStream.BusinessRule.Extender.EXP_ENT_to_EXP_PK05
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim DEBUG As Boolean = False
						Dim sp As New Stopwatch()
						sp.Start()
						
						Dim scenarioName As String = ScenarioDimHelper.GetNameFromID(si, si.WorkflowClusterPk.ScenarioKey)
						Dim timeName As String = BRApi.Finance.Time.GetNameFromId(si, si.WorkflowClusterPk.TimeKey)
						Dim CurrentCV As String = "FDX_Data_Extract_PK05"
						
						Dim cvParams As New Dictionary(Of String, String)
						Dim dt As DataTable = Nothing
						'create dt by cube view rendering
						dt = CVRender(si, CurrentCV , cvParams)
						If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "EXP_ENT_to_EXP_PK05 dt1:", PrintDT(si,dt).ToString)
						
						'transform dt
						Dim cube_dt As DataTable = Nothing
						cube_dt = Me.TransformDT(si, dt, scenarioName, timeName)
						If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "EXP_ENT_to_EXP_PK05 dt2:", PrintDT(si,cube_dt).ToString)
						
						Dim pk05_gllist As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "PK05_DriverBased_GLs")
						pk05_gllist = pk05_gllist.Replace(",", "','")
						
						Dim sql As New Text.StringBuilder
						sql.Append("DELETE FROM [" & EPSharedConstants.sMainRegExpenseTable & "] Where GL IN ('" & pk05_gllist & "')")
						Using dbExtConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							BRAPi.Database.ExecuteActionQuery(dbExtConn, sql.ToString, False, False)
							Using objSQLBulkCopy As New SqlBulkCopy(dbExtConn.ConnectionString)
								For Each dc As DataColumn In cube_dt.Columns
			                        objSQLBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName)
			                    Next
			                    objSQLBulkCopy.DestinationTableName = EPSharedConstants.sMainRegExpenseTable
			                    objSQLBulkCopy.WriteToServer(cube_dt)
							End Using
						End Using
						
						sp.Stop()
						If DEBUG Then BRApi.ErrorLog.LogMessage(si, "EXP_ENT_to_EXP_PK05 Execution Time(ms):" & sp.ElapsedMilliseconds)
					
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		#Region "Helper Function"
		Public Function CVRender(ByRef si As SessionInfo, ByVal cubeViewName As String, ByVal vParams As Dictionary(Of String, String)) As DataTable
			Dim value As New NameValueFormatBuilder 
			Dim instance As New XFIfActionExpr("CVFilter", value)
			value = instance.NameValueFormatBuilder
			value.ApplyNameValuePairsFromDictionary(vParams)
			Dim entityDimensionName As String = ""
			Dim entityMemFilter As String = ""
			Dim scenarioDimName As String = ""
			Dim scenarioMemFilter As String = ""
			Dim timeMemFilter As String = ""
			Dim includeCellTextCols As Boolean = False
			Dim useStandardFactTableFields As Boolean = True
			Dim useGenericTimeColNames As Boolean = True
			Dim parallelQueryCount As Integer = 8
			Dim logStatistics As Boolean = False
			Dim dt As DataTable = Nothing
			Try
				dt = BRApi.Import.Data.FdxExecuteCubeViewTimePivot(si, cubeViewName, entityDimensionName, entityMemFilter, scenarioDimName, scenarioMemFilter, timeMemFilter, value, includeCellTextCols, useStandardFactTableFields, True, Nothing, parallelQueryCount, logStatistics)
				If dt IsNot Nothing Then					
					Return dt
				Else
					Return Nothing
				End If
			Catch e As Exception
				Brapi.ErrorLog.LogMessage(si,$"getCV({cubeviewName}, {string.Join(":", vParams)}) failed with error - {e}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try
		End Function
		
		'to print datatable in log
		Private Function PrintDT(ByVal si As SessionInfo, ByVal dt As DataTable) As Text.StringBuilder
			Try
				Dim sCSV As New Text.StringBuilder
				If dt IsNot Nothing Then
					If dt.Rows.Count > 0 Then
						
						For Each dc As DataColumn In dt.Columns
							sCSV.Append(dc.ColumnName & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
						For Each dr As DataRow In dt.Rows
							For Each dc As DataColumn In dt.Columns
		     					sCSV.Append(dr(dc).ToString & ",")
							Next
							sCSV.Remove(sCSV.Length-1,1)
							sCSV.Append(Environment.NewLine)
						Next
					End If
				End If
				Return sCSV
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
    	End Function
		
		'transform dt to load to expense register
		Private Function TransformDT(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal scenarioName As String, ByVal timeName As String) As DataTable
			Try	
						'select required column
						Dim view As New DataView(dt)
						dt = view.ToTable(False, "Entity","Account","UD2","Time1","Time2","Time3","Time4","Time5","Time6","Time7","Time8","Time9","Time10","Time11","Time12","Time13")
						
'						rename colmuns 
						dt.Columns("Entity").ColumnName = "CostCenter"
						dt.Columns("Account").ColumnName = "GL"
						dt.Columns("UD2").ColumnName = "TF_2"
						dt.Columns("Time1").ColumnName = "P01"
						dt.Columns("Time2").ColumnName = "P02"
						dt.Columns("Time3").ColumnName = "P03"
						dt.Columns("Time4").ColumnName = "P04"
						dt.Columns("Time5").ColumnName = "P05"
						dt.Columns("Time6").ColumnName = "P06"
						dt.Columns("Time7").ColumnName = "P07"
						dt.Columns("Time8").ColumnName = "P08"
						dt.Columns("Time9").ColumnName = "P09"
						dt.Columns("Time10").ColumnName = "P10"
						dt.Columns("Time11").ColumnName = "P11"
						dt.Columns("Time12").ColumnName = "P12"
						dt.Columns("Time13").ColumnName = "YearTotal"
						
						'prepare dt to push to expense register
						Dim VBOCCdict As New Dictionary(Of String, String)
						Dim VBOCCdt As New DataTable
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							VBOCCdt = BRAPi.Database.ExecuteSql(dbConnApp,"SELECT WORKFLOW_PROFILE_VBO,COST_CENTER FROM [dbo].[" & EPSharedConstants.sVBOCCMappingTable & "]", False)   
						End Using	
						For Each VBOCCdr As DataRow In VBOCCdt.Rows
							Try
								VBOCCdict.Add(VBOCCdr("COST_CENTER"),VBOCCdr("WORKFLOW_PROFILE_VBO"))
							Catch ex As Exception
								Continue For
							End Try
						Next
						dt.Columns.Add("UniqueID",GetType(Guid))
						dt.Columns.Add("TF_3")
						dt.Columns.Add("WFProfileName")
						dt.Columns.Add("WFScenarioName")
						dt.Columns.Add("WFTimeName")
						dt.Columns.Add("LineItem")
						dt.Columns.Add("TF_11")
						dt.Columns.Add("UserID")
'						dt.Columns.Add("Concat")
						
						If dt.Rows.Count > 0
							For Each dr As DataRow In dt.Rows
								dr("UniqueID") = Guid.NewGuid
								If VBOCCDict.ContainsKey(dr("CostCenter"))
									dr("WFProfileName") = VBOCCdict.Item(dr("CostCenter")) & ".PK_05 Utilities & Sustainability"
								End If
								dr("WFScenarioName") = scenarioName
								dr("WFTimeName") = timeName
								dr("LineItem") = 1
								dr("YearTotal")= dr("P01").TOString.XFConvertToDecimal + dr("P02").TOString.XFConvertToDecimal + dr("P03").ToString.XFConvertToDecimal + dr("P04").ToString.XFConvertToDecimal + dr("P05").ToString.XFConvertToDecimal + dr("P06").ToString.XFConvertToDecimal + dr("P07").ToString.XFConvertToDecimal + dr("P08").ToString.XFConvertToDecimal + dr("P09").ToString.XFConvertToDecimal + dr("P10").ToString.XFConvertToDecimal + dr("P11").ToString.XFConvertToDecimal + dr("P12").ToString.XFConvertToDecimal
'								dr("P01")=Math.Round(dr("P01"),2)
'								dr("P02")=dr("P02").ToString.XFConvertToDecimal
'								dr("P03")=dr("P03").ToString.XFConvertToDecimal
'								dr("P04")=dr("P04").ToString.XFConvertToDecimal
'								dr("P05")=dr("P05").ToString.XFConvertToDecimal
'								dr("P06")=dr("P06").ToString.XFConvertToDecimal
'								dr("P07")=dr("P07").ToString.XFConvertToDecimal
'								dr("P08")=dr("P08").ToString.XFConvertToDecimal
'								dr("P09")=dr("P09").ToString.XFConvertToDecimal
'								dr("P10")=dr("P10").ToString.XFConvertToDecimal
'								dr("P11")=dr("P11").ToString.XFConvertToDecimal
'								dr("P12")=dr("P12").ToString.XFConvertToDecimal
								dr("TF_11") = "Local Currency"
								dr("UserID") = BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName).User.Description
'								dr("Concat")=dr("CostCenter") & "-" & dr("GL") & "-" & dr("TF_2") & "-" & Math.Round(dr("P01"),2) & "-" & Math.Round(dr("P02"),2)& "-" & Math.Round(dr("P03"),2) & "-" & Math.Round(dr("P04"),2) & "-" & Math.Round(dr("P05"),2) & "-" & Math.Round(dr("P06"),2) & "-" & Math.Round(dr("P07"),2) & "-" & Math.Round(dr("P08"),2) & "-" & Math.Round(dr("P09"),2) & "-" & Math.Round(dr("P10"),2) & "-" & Math.Round(dr("P11"),2) & "-" & Math.Round(dr("P12"),2)
'								(dr("P01") dr("P02")& dr("P03")& dr("P04")& dr("P05")& dr("P06")& dr("P07")& dr("P08")& dr("P09")& dr("P10")& dr("P11") dr("P12"))
							Next	
						End If
'						dt.Columns("Concat").SetOrdinal(0)
						Return dt
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EXP_ENTtoEP">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_SharedConstants" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_CurrencyConversion" />
            </referencedAssemblies>
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics
Imports System.Data.SqlClient
Imports OneStream.BusinessRule.DashboardStringFunction.EP_SharedConstants

#End Region

#Region "Rule Change Mgmt"

'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 - - Integration Functions
	'Mods:		
	'--------------------------------------------------------------------------------------------------------------------------------------------

#End Region

'push package specific driver based GLs from segment cubes to expense register

Namespace OneStream.BusinessRule.Extender.EXP_ENTtoEP
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim DEBUG As Boolean = False
						Dim sp As New Stopwatch()
						sp.Start()
						
						Dim scenarioName As String = ScenarioDimHelper.GetNameFromID(si, si.WorkflowClusterPk.ScenarioKey)
						Dim timeName As String = BRApi.Finance.Time.GetNameFromId(si, si.WorkflowClusterPk.TimeKey)
						Dim packageName As String = args.NameValuePairs.XFGetValue("packageName")
						Dim wfname As String = String.Empty
						
						Dim CurrentCV As String = String.Empty
						Dim param_GLlist As String = String.Empty
						
						If packageName.XFEqualsIgnoreCase("PK04")
							CurrentCV = "FDX_Data_Extract_PK04"
							param_GLlist = "PK04_DriverBased_GLs"
							wfname = "PK_04 Associate Relations PxQ"
						ElseIf packageName.XFEqualsIgnoreCase("PK05")
							CurrentCV = "FDX_Data_Extract_PK05"
							param_GLlist = "PK05_DriverBased_GLs"
							wfname = "PK_05 Utilities & Sustainability"
						End If
						
						If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "packageName:" & packageName)
						If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "CurrentCV:" & CurrentCV)
						If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "param_GLlist:" & param_GLlist)
						
						Dim cvParams As New Dictionary(Of String, String)
						Dim dt As New DataTable
						'create dt by cube view rendering
						dt = CVRender(si, CurrentCV , cvParams)
						If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "ENT_to_EXP dt1:", PrintDT(si,dt).ToString)
						 
						Dim cclist As String = String.Empty
						
						'push to queue
						If dt IsNot Nothing AndAlso dt.Rows.Count>0
							PushDTToQueue(si, dt)
							cclist = GetCCList(si, dt)
						End If	
						
						
						
						'get gl list for selected pkg
						Dim gl_list As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, param_GLlist)
'						Dim gl_list As String = args.NameValuePairs.XFGetValue("param_GLlist")
'						Dim gl_list As String = param_GLlist
						
'						Dim gl_list As String = args.ExternalDimSourceArgs.NameValuePairs(param_GLlist)
						
'                        api.LogMessage(gl_list)
						gl_list = gl_list.Replace(",", "','")
'						BRApi.ErrorLog.LogMessage(si, gl_list)
						If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "gl list:", gl_list)
						Dim dt_audit_delete As DataTable
						Dim sql_audit As New Text.StringBuilder
						Dim action As String= String.Empty
						sql_audit.Append("Select * FROM [dbo].[" &EPSharedConstants.sMainRegExpenseTable & "]  Where GL IN ('" & gl_list & "') AND CostCenter IN (" & cclist & ")")
						If sql_audit.Length>0
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
									dt_audit_delete=	BRAPi.Database.ExecuteSql(dbConnApp,sql_audit.ToString , False)
						End Using
						
						action="'Delete'"
						If dt_audit_delete IsNot Nothing AndAlso dt_audit_delete.Rows.Count > 0 Then
						UpdateAuditLog(si,dt_audit_delete,action)
					    End If
					    End If	
						action="'Add'"
						
						
						If dt IsNot Nothing AndAlso dt.Rows.Count > 0 Then
							
							'transform dt into loadable format
							Dim cube_dt As New DataTable
							cube_dt = Me.TransformDT(si, dt, scenarioName, timeName, wfname)
							If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "ENT_to_EXP dt2:", PrintDT(si,cube_dt).ToString)
							
							'load to expense register
							Dim sql As New Text.StringBuilder
							sql.Append("DELETE FROM [" & EPSharedConstants.sMainRegExpenseTable & "] Where GL IN ('" & gl_list & "') AND CostCenter IN (" & cclist & ")" )
							
							Using dbExtConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								BRAPi.Database.ExecuteActionQuery(dbExtConn, sql.ToString, False, False)
								Using objSQLBulkCopy As New SqlBulkCopy(dbExtConn.ConnectionString)
									For Each dc As DataColumn In cube_dt.Columns
				                        objSQLBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName)
				                    Next
				                    objSQLBulkCopy.DestinationTableName = EPSharedConstants.sMainRegExpenseTable 
				                    objSQLBulkCopy.WriteToServer(cube_dt)
								End Using
							End Using
							
							UpdateAuditLog(si,cube_dt,action)
						End If
						
						
						sp.Stop()
						If DEBUG Then BRApi.ErrorLog.LogMessage(si, "ENT_to_EXP Execution Time(ms):" & sp.ElapsedMilliseconds)
					
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Function CVRender(ByRef si As SessionInfo, ByVal cubeViewName As String, ByVal vParams As Dictionary(Of String, String)) As DataTable
			Dim value As New NameValueFormatBuilder 
			Dim instance As New XFIfActionExpr("CVFilter", value)
			value = instance.NameValueFormatBuilder
			value.ApplyNameValuePairsFromDictionary(vParams)
			Dim entityDimensionName As String = ""
			Dim entityMemFilter As String = ""
			Dim scenarioDimName As String = ""
			Dim scenarioMemFilter As String = ""
			Dim timeMemFilter As String = ""
			Dim includeCellTextCols As Boolean = False
			Dim useStandardFactTableFields As Boolean = True
			Dim useGenericTimeColNames As Boolean = True
			Dim parallelQueryCount As Integer = 8
			Dim logStatistics As Boolean = False
			Dim dt As DataTable = Nothing
			Try
				dt = BRApi.Import.Data.FdxExecuteCubeViewTimePivot(si, cubeViewName, entityDimensionName, entityMemFilter, scenarioDimName, scenarioMemFilter, timeMemFilter, value, includeCellTextCols, useStandardFactTableFields, True, Nothing, parallelQueryCount, logStatistics)
				If dt IsNot Nothing Then					
					Return dt
				Else
					Return Nothing
				End If
			Catch e As Exception
				Brapi.ErrorLog.LogMessage(si,$"getCV({cubeviewName}, {string.Join(":", vParams)}) failed with error - {e}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try
		End Function
		
		'to print datatable in log
		Private Function PrintDT(ByVal si As SessionInfo, ByVal dt As DataTable) As Text.StringBuilder
			Try
				Dim sCSV As New Text.StringBuilder
				If dt IsNot Nothing Then
					If dt.Rows.Count > 0 Then
						
						For Each dc As DataColumn In dt.Columns
							sCSV.Append(dc.ColumnName & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
						For Each dr As DataRow In dt.Rows
							For Each dc As DataColumn In dt.Columns
		     					sCSV.Append(dr(dc).ToString & ",")
							Next
							sCSV.Remove(sCSV.Length-1,1)
							sCSV.Append(Environment.NewLine)
						Next
					End If
				End If
				Return sCSV
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
    	End Function
		
		'transform dt to load to expense register
		Private Function TransformDT(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal scenarioName As String, ByVal timeName As String, ByVal wfname As String) As DataTable
			Try	
						'select required column
						Dim view As New DataView(dt)
						dt = view.ToTable(False, "Entity","Account","UD2","Time1","Time2","Time3","Time4","Time5","Time6","Time7","Time8","Time9","Time10","Time11","Time12","Time13")
						
'						rename colmuns 
						dt.Columns("Entity").ColumnName = "CostCenter"
						dt.Columns("Account").ColumnName = "GL"
						dt.Columns("UD2").ColumnName = "TF_2"
						dt.Columns("Time1").ColumnName = "P01"
						dt.Columns("Time2").ColumnName = "P02"
						dt.Columns("Time3").ColumnName = "P03"
						dt.Columns("Time4").ColumnName = "P04"
						dt.Columns("Time5").ColumnName = "P05"
						dt.Columns("Time6").ColumnName = "P06"
						dt.Columns("Time7").ColumnName = "P07"
						dt.Columns("Time8").ColumnName = "P08"
						dt.Columns("Time9").ColumnName = "P09"
						dt.Columns("Time10").ColumnName = "P10"
						dt.Columns("Time11").ColumnName = "P11"
						dt.Columns("Time12").ColumnName = "P12"
						dt.Columns("Time13").ColumnName = "YearTotal"
						
						
				 		 Dim ccDict As New Dictionary(Of String, String)
						 Dim dt_full_cclist As New DataTable
						 Dim sql_full_cclist As String = String.Empty
						 sql_full_cclist = "SELECT COST_CENTER, LOCAL_CURRENCY FROM " & EPSharedConstants.sVBOCCMappingTable
						 Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								dt_full_cclist = BRAPi.Database.ExecuteSql(dbConnApp, sql_full_cclist, False)   
						 End Using
						 If dt_full_cclist IsNot Nothing AndAlso dt_full_cclist.Rows.Count > 0 Then
							 For Each dr_full_cclist In dt_full_cclist.Rows
								Dim entityid As Integer = BRApi.Finance.Members.GetMemberId(si, DimTypeId.Entity , dr_full_cclist("COST_CENTER").ToString) 
								ccDict.Add(dr_full_cclist("COST_CENTER"),dr_full_cclist("LOCAL_CURRENCY"))
							 Next
						 End If
						
						'prepare dt to push to expense register
						Dim VBOCCdict As New Dictionary(Of String, String)
						Dim VBOCCdt As New DataTable
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							VBOCCdt = BRAPi.Database.ExecuteSql(dbConnApp,"SELECT WORKFLOW_PROFILE_VBO,COST_CENTER FROM [dbo].[" & EPSharedConstants.sVBOCCMappingTable & "]", False)   
						End Using	
						For Each VBOCCdr As DataRow In VBOCCdt.Rows
							Try
								VBOCCdict.Add(VBOCCdr("COST_CENTER"),VBOCCdr("WORKFLOW_PROFILE_VBO"))
							Catch ex As Exception
								Continue For
							End Try
						Next
						dt.Columns.Add("UniqueID",GetType(String))
						dt.Columns.Add("TF_3")
						dt.Columns.Add("WFProfileName")
						dt.Columns.Add("WFScenarioName")
						dt.Columns.Add("WFTimeName")
						dt.Columns.Add("LineItem")
						dt.Columns.Add("TF_11")
						dt.Columns.Add("UserID")
						
						If dt.Rows.Count > 0
							For Each dr As DataRow In dt.Rows
								dr("UniqueID") = Guid.NewGuid.ToString
								If VBOCCDict.ContainsKey(dr("CostCenter"))
									dr("WFProfileName") = VBOCCdict.Item(dr("CostCenter")) & "." & wfname
								End If
								If ccDict.ContainsKey(dr("CostCenter"))
									dr("TF_3") = ccDict.Item(dr("CostCenter"))
								End If
								dr("WFScenarioName") = scenarioName
								dr("WFTimeName") = timeName
								dr("LineItem") = 1
								dr("YearTotal")= dr("P01").TOString.XFConvertToDecimal + dr("P02").TOString.XFConvertToDecimal + dr("P03").ToString.XFConvertToDecimal + dr("P04").ToString.XFConvertToDecimal + dr("P05").ToString.XFConvertToDecimal + dr("P06").ToString.XFConvertToDecimal + dr("P07").ToString.XFConvertToDecimal + dr("P08").ToString.XFConvertToDecimal + dr("P09").ToString.XFConvertToDecimal + dr("P10").ToString.XFConvertToDecimal + dr("P11").ToString.XFConvertToDecimal + dr("P12").ToString.XFConvertToDecimal
								dr("TF_11") = "Local Currency"
								dr("UserID") = BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName).User.Description
							Next	
						End If
						
						Dim dt_local_reporting As DataTable = CurrencyConversion(si, dt)
						
						
						Return dt_local_reporting
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Sub PushDTToQueue(ByVal si As SessionInfo, ByVal dt As DataTable) 
			Try

				Dim timeName As String = BRApi.Finance.Time.GetNameFromId(si, si.WorkflowClusterPk.TimeKey)
				Dim view As New DataView(dt)
				Dim dt_queue As DataTable = view.ToTable(True,"Entity")

				dt_queue.Columns("Entity").ColumnName="CostCenter"
				
			     

				dt_queue.Columns.Add(New DataColumn("UniqueID", GetType(String)))
				dt_queue.Columns.Add(New DataColumn("PlanYear", GetType(Integer)))
				dt_queue.Columns.Add(New DataColumn("UserID", GetType(String)))
				dt_queue.Columns.Add(New DataColumn("Submitted_On", GetType(Date)))
				
				For Each dr_queue As DataRow In dt_queue.Rows
					dr_queue("UniqueID") = Guid.NewGuid.ToString
					dr_queue("UserID") = BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName).User.Description
					dr_queue("PlanYear") = timeName
					dr_queue("Submitted_On") = DateTime.Now
				Next
				
				BRApi.Database.SaveCustomDataTable(si, "Application", EPSharedConstants.sExpenseplanningQueue, dt_queue, False)

			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
			Public Function GetCCList(ByVal si As SessionInfo, ByVal dt As DataTable) As String
			Try
				Dim cclist As String = String.Empty
				
				For Each dr As DataRow In dt.Rows
					cclist += "'" & dr("Entity") & "',"
				Next
				
				If cclist.Length>0
					cclist = cclist.Remove(cclist.Length-1,1)
				End If
				
			Return cclist

			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		
        Public Function CurrencyConversion(ByVal si As SessionInfo, ByVal dt As DataTable) As DataTable
				Dim dt_clone As  DataTable= dt.Copy()
				Dim dt_curr As New DataTable
				Dim scenarioName As String = ScenarioDimHelper.GetNameFromID(si, si.WorkflowClusterPk.ScenarioKey)
				Dim timeName As String = BRApi.Finance.Time.GetNameFromId(si, si.WorkflowClusterPk.TimeKey)
				Dim obj = New OneStream.BusinessRule.Extender.EP_CurrencyConversion.MainClass
				dt_curr = obj.GetAllFXRates(si,scenarioName,timename)
				Dim Year As String=BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "AOP_Year")

				If dt_clone.Rows.Count>0 And dt_clone IsNot Nothing
					For Each r As DataRow In dt_clone.Rows
							 
					Dim rows() As DataRow = dt_curr.Select("Currency = '" & r("TF_3") & "' AND Scenario='" & r("WFScenarioName") & "'AND Time='" & r("WFTimeName") & "'")								 	 
					If rows.Count > 0 Then			 
				               
			         r("UniqueID")= Guid.NewGuid.ToString
				     r("TF_3")= "USD"
				     r("TF_11") = "Reporting Currency"
'			                   
					 If Not IsDbNull(r("P01")) And Not IsDbNull(rows(0).Item("M1")) And (rows(0).Item("M1"))<>0  Then r("P01") = r("P01")/rows(0).Item("M1")
					 If Not IsDbNull(r("P02")) And Not IsDbNull(rows(0).Item("M2")) And  (rows(0).Item("M2"))<>0  Then r("P02") = r("P02")/rows(0).Item("M2")
					 If Not IsDbNull(r("P03")) And Not IsDbNull(rows(0).Item("M3")) And (rows(0).Item("M3"))<>0 Then r("P03") = r("P03")/rows(0).Item("M3")
					 If Not IsDbNull(r("P04")) And Not IsDbNull(rows(0).Item("M4")) And  (rows(0).Item("M4"))<>0 Then r("P04") = r("P04")/rows(0).Item("M4")
					 If Not IsDbNull(r("P05")) And Not IsDbNull(rows(0).Item("M5")) And  (rows(0).Item("M5"))<>0 Then r("P05") = r("P05")/rows(0).Item("M5")
					 If Not IsDbNull(r("P06")) And Not IsDbNull(rows(0).Item("M6")) And  (rows(0).Item("M6"))<>0 Then r("P06") = r("P06")/rows(0).Item("M6")
					 If Not IsDbNull(r("P07")) And Not IsDbNull(rows(0).Item("M7"))And  (rows(0).Item("M7"))<>0 Then r("P07") = r("P07")/rows(0).Item("M7")
					 If Not IsDbNull(r("P08")) And Not IsDbNull(rows(0).Item("M8"))And  (rows(0).Item("M8"))<>0 Then r("P08") = r("P08")/rows(0).Item("M8")
					 If Not IsDbNull(r("P09")) And Not IsDbNull(rows(0).Item("M9"))And  (rows(0).Item("M9"))<>0 Then r("P09") = r("P09")/rows(0).Item("M9")
					 If Not IsDbNull(r("P10"))And Not IsDbNull(rows(0).Item("M10")) And (rows(0).Item("M10"))<>0  Then r("P10") = r("P10")/rows(0).Item("M10")
					 If Not IsDbNull(r("P11")) And Not  IsDbNull(rows(0).Item("M11"))And  (rows(0).Item("M11"))<>0 Then r("P11") = r("P11")/rows(0).Item("M11")
					 If Not IsDbNull(r("P12")) And Not IsDbNull(rows(0).Item("M12"))And  (rows(0).Item("M12"))<>0 Then r("P12") = r("P12")/rows(0).Item("M12")
					 r("YearTotal") =r("P01").ToString.XFConvertToDecimal+r("P02").ToString.XFConvertToDecimal+r("P03").ToString.XFConvertToDecimal+r("P04").ToString.XFConvertToDecimal+r("P05").ToString.XFConvertToDecimal+r("P06").ToString.XFConvertToDecimal+r("P07").ToString.XFConvertToDecimal+r("P08").ToString.XFConvertToDecimal+r("P09").ToString.XFConvertToDecimal+r("P10").ToString.XFConvertToDecimal+r("P11").ToString.XFConvertToDecimal+r("P12").ToString.XFConvertToDecimal
							     
					End If
				 Next
							
					 dt.Merge(dt_clone)
			    End If
				
				
	Return dt
	End Function
	#Region "UpdateAuditLog"
		Public Sub UpdateAuditLog(ByVal si As SessionInfo, ByVal dt As DataTable,ByVal action As String)
			Try
				Dim tableName As String = "XFW_NonWage_Register_AuditLog"
				
'				dt.Columns("UniqueID").DataType=GetType(String)
				dt.Columns.Add("Action")
				dt.Columns("Action").Expression=  action
'				dt.Columns("UniqueID").DataType=GetType(String)
				dt.Columns.Add("Location")
				dt.Columns("Location").Expression="'PK04_PXQ'"
				dt.Columns.Add("Updated_On", GetType(System.DateTime))
				dt.Columns("Updated_On").Expression= "'" & DateTime.Now & "'"
'				BRAPI.ErrorLog.LogMessage(si,"Auditcsv",CSVBuilder(dt).ToString)
				Using dbExtConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)		
				Using objSQLBulkCopy As New SqlBulkCopy(dbExtConn.ConnectionString)
						
						
						
						
	                    For Each dc As DataColumn In dt.Columns
	                        objSQLBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName)
	                    Next
	                    objSQLBulkCopy.DestinationTableName = "XFW_NonWage_Register_AuditLog"
	                    objSQLBulkCopy.WriteToServer(dt)
											
				End Using	
				End Using
'				BRApi.Database.SaveCustomDataTable(si, "Application", tableName, dt, False)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub	
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EXP_FCP_GET">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.EXP_FCP_GET
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
					Case Is = ExtenderFunctionType.ExecuteExternalDimensionSource
						'Add External Members
						Dim externalMembers As New List(Of NameValuePair)
						externalMembers.Add(New NameValuePair("YourMember1Name","YourMember1Value"))
						externalMembers.Add(New NameValuePair("YourMember2Name","YourMember2Value"))
						Return externalMembers
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EXP_FCP_PUT">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics
Imports System.Net
Imports System.Net.Http
Imports System.Reflection
Imports System.Threading.Tasks
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq

Namespace OneStream.BusinessRule.Extender.EXP_FCP_PUT
	Public Class MainClass
		
		'Globals
		Private m_asyncGets As List(Of Task(Of HttpResponseMessage))
		
		'Keeps track of all logging for extender.
		Private m_ExtenderLog As New Text.StringBuilder
		Private m_ExtenderDataLog As New Text.StringBuilder
		Private m_getWatch As Stopwatch
		
		Const m_PUT_PageSize As Integer = 50000
		Const m_Timeout As Short = 10
		Private m_Base_URI As String
		
		Private m_PutPageCount As Integer = 0
		Private m_PutErrorOccurred As Boolean
		Private m_FdxTotalRecordCount As Integer = 0
		Private m_PutTotalRecordCount As Integer = 0
		
		Private m_Client As HttpClient
		
		'Turn this on (True) if you want a file extracted to the FileShare. False to turn off
			'"\Groups\Everyone\"
		Private m_WriteDataOutToFile As Boolean
		Private m_FileID As String
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object	
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						Dim dashMaintName As String = String.Empty
						Dim endPoint As String = String.Empty
						Dim svcConsumerId As String = String.Empty
						Dim svcName As String = String.Empty
						Dim svcEnv As String = String.Empty
						Dim putArguments As String = String.Empty
						
						BRAPI.ErrorLog.LogMessage(si, "PUT Process initiated. Getting Required Args (DashMaintUnitName, WriteDataLogFile)")
						Me.AddLogMessage(si, "PUT Process initiated. Getting Required Args (DashMaintUnitName, WriteDataLogFile)")
						
						
						dashMaintName = args.NameValuePairs.XFGetValue("DashMaintUnitName")	
						m_WriteDataOutToFile = args.NameValuePairs.XFGetValue("WriteDataLogFile")
						Dim dashMaintUnit As DashboardMaintUnit = BRApi.Dashboards.MaintUnits.GetMaintUnit(si, False, Nothing, dashMaintName)
						If dashMaintUnit IsNot Nothing Then
							svcConsumerId = Me.GetDashboardParam_DefaultValue(si, $"{dashMaintName}_SVC_ConsumerID")
							svcName = Me.GetDashboardParam_DefaultValue(si, $"{dashMaintName}_SVC_Name")
							svcEnv = Me.GetDashboardParam_DefaultValue(si, $"{dashMaintName}_SVC_Env")
							endPoint = Me.GetDashboardParam_DefaultValue(si, $"{dashMaintName}_SVC_Endpoint")
						End If
						
						If Not String.IsNullOrWhiteSpace(endPoint) Then
							m_Base_URI = endPoint
						Else
							Me.AddLogMessage(si, "Invalid EndPoint")
							Return Nothing
						End If
						
						m_asyncGets = New List(Of Task(Of HttpResponseMessage))
						
						m_Client = New HttpClient()						
						m_Client.Timeout = TimeSpan.FromMinutes(m_Timeout)
						
						m_Client.DefaultRequestHeaders.Clear()
						m_Client.DefaultRequestHeaders.ConnectionClose = False
						
						m_Client.DefaultRequestHeaders.Add("cache-control", "no-cache")
						m_Client.DefaultRequestHeaders.Add("WM_CONSUMER.ID", svcConsumerId)
						m_Client.DefaultRequestHeaders.Add("WM_SVC.ENV", svcEnv)
						m_Client.DefaultRequestHeaders.Add("WM_SVC.NAME", svcName)
						m_Client.DefaultRequestHeaders.Add("x-ms-version", "2018-03-28")
						
						Dim dt As Datatable = Nothing
						Dim sql As New Text.StringBuilder
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							sql.Append("SELECT * FROM [dbo].[XFW_NonWage_Register_Copy]")
							dt = BRAPi.Database.ExecuteSql(dbConnApp,sql.ToString, False)
						End Using
						
						
						
						
						
						BRAPI.ErrorLog.LogMessage(si,"Before InitiateFcpPut Call")
						
						
						Me.InitiateFcpPut(si, dt)
						
				
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Sub AddLogDataLine(ByVal si As SessionInfo, ByVal message As String)
			Try
				
				m_ExtenderDataLog.AppendLine(message)
'				BRApi.ErrorLog.LogMessage(si, "dt", m_ExtenderDataLog.ToString)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		Public Function GetDashboardParam_DefaultValue(ByVal si As SessionInfo, ByVal paramName As String)
			Try				
				Dim defValue As String = String.Empty
				
				Dim objDashboardParamDisplayInfo As DashboardParamDisplayInfo = BRApi.Dashboards.Parameters.GetParameterDisplayInfo(si, False, Nothing, paramName)
				If objDashboardParamDisplayInfo IsNot Nothing Then
					defValue = objDashboardParamDisplayInfo.DefaultValueAfterSubstitution
				Else
					Me.AddLogMessage(si, $"Invalid Filter Param: Couldn't find Dashboard Parameter {paramName}")
				End If
				
				Return defValue
			Catch ex As Exception
				Me.AddLogMessage(si, $"Exception during GetDashboardParam_DefaultValue: {ex.Message}.")
				Return Nothing
			End Try
			
		End Function
		
		Public Sub AddLogMessage(ByVal si As SessionInfo, ByVal message As String)
			Try
				
				m_ExtenderLog.AppendLine("-------------------------------------------------------------------------------------------------------------------")
				m_ExtenderLog.AppendLine($"Time:{vbTab}{vbTab}{Date.Now.ToString}")
				m_ExtenderLog.AppendLine($"Message:{vbTab}{message}")
				m_ExtenderLog.AppendLine("-------------------------------------------------------------------------------------------------------------------")
				m_ExtenderLog.AppendLine(String.Empty)
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		Public Sub InitiateFcpPut(ByVal si As SessionInfo, ByVal putDt As DataTable)
			Try
				BRAPI.ErrorLog.LogMessage(si,"In InitiateFcpPut")
				'add the null columns
				putDt.Columns.Add(New DataColumn("Delete_Flg", GetType(String)))
				putDt.Columns("Delete_Flg").DefaultValue = ""
				putDt.Columns("Delete_Flg").SetOrdinal(33)
				
				If m_WriteDataOutToFile Then
					Dim headerLine As New Text.StringBuilder
					For Each dc As DataColumn In putDt.Columns
						headerLine.Append(dc.ColumnName)
						headerLine.Append(",")
					Next
					'Remove last comma
					headerLine.Remove(headerLine.Length - 1, 1)
					
					Me.AddLogDataLine(si, headerLine.ToString)
					
					Dim rowInfo As New Text.StringBuilder
					For Each dr As DataRow In putDt.Rows										
						For Each dc As DataColumn In putDt.Columns
							rowInfo.Append(dr(dc.ColumnName).ToString & ",")
						Next
						rowInfo.Remove(rowInfo.Length - 1, 1)
						Me.AddLogDataLine(si, rowInfo.ToString)
						rowInfo.Clear
					Next
				End If
				
				
				Me.LoopOsDtPutByPage(si, putDt)
				
				
			Catch ex As Exception
				m_PutErrorOccurred = True
				Me.AddLogMessage(si, $"InitiateFcpPut Exception: {ex.Message}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		
		
		Public Sub LoopOsDtPutByPage(ByVal si As SessionInfo, ByVal dt As DataTable) 
		    Try
				BRAPI.ErrorLog.LogMessage(si,"In LoopOsDtPutByPage")
		        Dim numOfPages As Integer = Math.Ceiling(dt.Rows.Count / m_PUT_PageSize)
				Dim pageNum As Integer = 1
				
'				Me.AddLogMessage(si, $"Preparing to send data to FCP. Row Count: {dt.Rows.Count}. Number of pages: {numOfPages}")
				
				Do While pageNum <= numOfPages
					BRApi.ErrorLog.LogMessage(si, "counter")
					For i As Integer = 1 To 2
						
						If pageNum <= numOfPages
							'put m_PUT_PageSize records
							
							Dim dtPage As DataTable = dt.Rows.Cast(Of System.Data.DataRow).Skip((pageNum - 1) * m_PUT_PageSize).Take(m_PUT_PageSize).CopyToDataTable()
		                    
							If dtPage IsNot Nothing Then
								
								Dim jObj As JObject = New Jobject
								Dim jObj2 As JObject = New Jobject
								
								jObj2("Expense_Planning") = jObj
'								jObj("Status") = Nothing
								jObj("rowcount") = dt.Rows.Count
								
								m_PutPageCount += 1
								m_PutTotalRecordCount += dtPage.Rows.Count
								
'								jObj("page") = m_PutPageCount
								jObj("data") = JArray.FromObject(dtPage, JsonSerializer.CreateDefault)
														
			                    m_asyncGets.Add(Me.TryPutToFcpAsync(si,jObj2.ToString))
								For Each item In m_asyncGets
									BRApi.ErrorLog.LogMessage(si, "http response", item.Result.ToString)
								Next
							End If
								
								
							'increment page
							pageNum += 1
						Else
							'increment page
							pageNum += 1
						End If
		        	Next

'					Dim result As Task
'					result = Task.WhenAll(m_asyncGets.ToArray)
					
''					Try
''						result.Wait()
'					Catch e As Exception
'						Throw ErrorHandler.LogWrite(si, New XFException(si, e))
'					End Try
					
				Loop
				
'				Dim content As String
'				Dim successCount As Integer = 0
				
'				For Each tResults As Task(Of HttpResponseMessage) In m_asyncGets
'					If tResults.Result.IsSuccessStatusCode = False Then
'						content = tResults.Result.Content.ReadAsStringAsync().Result
'						Me.AddLogMessage(si, $"FCP PUT Response Error. {content}")
'						m_PutErrorOccurred = True
'						Exit For
'					Else
'						successCount += 1
'					End If
'				Next
				
'				m_asyncGets.Clear
				
'				If successCount <> numOfPages Then
'					Me.AddLogMessage(si, $"Completed PUT with errors in {m_getWatch.Elapsed.TotalMinutes} minutes")
'				Else
'					Me.AddLogMessage(si, $"Completed PUT (all {numOfPages} pages) in {m_getWatch.Elapsed.TotalMinutes} minutes")
'				End If
				
			Catch ex As Exception
				m_PutErrorOccurred = True
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		
		Public Async Function TryPutToFcpAsync(ByVal si As SessionInfo, ByVal json As String) As Task(Of HttpResponseMessage)
			Try
				BRAPI.ErrorLog.LogMessage(si,"In TryPutToFcpAsync")
				Dim rTask As HttpResponseMessage = Nothing
				Dim mainEx As Exception = Nothing
				
				For i As Integer = 1 To 3
'					Me.AddLogMessage(si, $"Try: {i}")
					Try
						
						rTask = Await Me.PutDataToFcpAsync(si, json)
						BRAPI.ErrorLog.LogMessage(si,"HttpResponseMessage", rTask.Content.ReadAsStringAsync().Result)
						
						If rTask IsNot Nothing Then
							BRAPI.ErrorLog.LogMessage(si,"i:"&i)
							Return rTask
						End If
						
					Catch exWhen As Exception
						mainEx = exWhen
					End Try
				
					If i = 1 Then
						Me.AddLogMessage(si, $"Trying again in 5 seconds")
						Await Task.Delay(TimeSpan.FromSeconds(5))
					ElseIf i = 2 Then
						Me.AddLogMessage(si, $"Trying again in 8 seconds")
						Await Task.Delay(TimeSpan.FromSeconds(8))
					Else
						Throw(ErrorHandler.LogWrite(si, New XFException(si, mainEx)))
					End If
				Next
				
				Return rTask
				
			Catch exMain As Exception
				m_PutErrorOccurred = True
				Me.AddLogMessage(si, $"TryPutToFcpAsync Exception: {exMain.Message}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, exMain))
			End Try	
		End Function
		
		Public Async Function PutDataToFcpAsync(ByVal si As SessionInfo, ByVal json As String) As Task(Of HttpResponseMessage)
		
			Dim content As Http.StringContent
			
			Try	
				BRAPI.ErrorLog.LogMessage(si,"In PutDataToFcpAsync")
				content = New Http.StringContent(json, System.Text.Encoding.UTF8, "application/json")
				
				BRApi.ErrorLog.LogMessage(si, "Content", content.ReadAsStringAsync().Result)
				
				
				Return Await m_Client.PostAsync(m_Base_URI, content, New System.Threading.CancellationToken(False))
				
			Catch ex As Exception
				m_PutErrorOccurred = True
				Me.AddLogMessage(si, $"PutDataToFcpAsync Exception: {ex.Message}")		
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EXP_FDX_Export">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics
Imports System.Data.SqlClient


Namespace OneStream.BusinessRule.Extender.EXP_FDX_Export
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						Dim sp As New Stopwatch()
						sp.Start()
						
						Dim DEBUG As Boolean = False
						Dim scenarioName As String = ScenarioDimHelper.GetNameFromID(si, si.WorkflowClusterPk.ScenarioKey)
						Dim timeName As String = BRApi.Finance.Time.GetNameFromId(si, si.WorkflowClusterPk.TimeKey)
						Dim CurrentCV As String = "FDX_Data_Extract"
						Dim CurrentScenario As String = scenarioName
						Dim CurrentYear As String = timeName
						Dim Smessage As String = String.Empty
						
						Dim cvParams As New Dictionary(Of String, String)
						Dim dt As DataTable = Nothing
						'create dt by cube view rendering from cube
						dt = CVRender(si, CurrentCV , cvParams)
						If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "fdx-dt1", PrintDT(si,dt).ToString)
						
						'transform dt
						Dim cube_dt As DataTable = Nothing
						cube_dt = Me.TransformDT(si, dt, scenarioName, timeName)
						BRAPi.ErrorLog.LogMessage(si, "cube_dt", PrintDT(si,cube_dt).ToString)
						
						'get dt from expense register
						Dim expreg_dt As DataTable = Nothing
						expreg_dt = Me.GetExpRegDT(si)
						If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "expreg_dt", PrintDT(si,expreg_dt).ToString)
						
'						Dim dt_new_watcher As DataTable=Me.CompareDT(si,cube_dt,expreg_dt,timeName)
'						BRAPi.ErrorLog.LogMessage(si, "dt_new_watcher", PrintDT(si,dt_new_watcher).ToString)
'						Dim distinctValues As DataTable = dt_new_watcher.DefaultView.ToTable(True,"Concat","UserID")
'						BRAPi.ErrorLog.LogMessage(si, "distinctValues", PrintDT(si,distinctValues).ToString)
'						
						Dim sql As New Text.StringBuilder
'						Dim temp_reg As DataTable = Nothing
'						Dim dt_final As New DataTable
'						Dim temp_reg_del As DataTable = Nothing
'						Dim dt_final_del As New DataTable
'						If dt_new_watcher.Rows.Count > 0
'						For Each distinctValuesRow As DataRow In dt_new_watcher.Rows
							
'							Dim cubedr_new As DataRow()=cube_dt.Select("Concat='"& distinctValuesRow("Concat") &"' ")
'							If cubedr_new.Length>0
'								temp_reg  = cubedr_new.CopyToDataTable()
'								dt_final.Merge(temp_reg)
'							End If
'							Dim cubedr_new_del As DataRow()=cube_dt.Select("Concat='"& distinctValuesRow("Concat") &"' ")
'							If cubedr_new_del.Length>0
'								temp_reg_del  = cubedr_new_del.CopyToDataTable()
'								dt_final_del.Merge(temp_reg)
'							End If
							
'							Dim concatenatedstring As String = distinctValuesRow("Concat")
'							Dim cc As String = concatenatedstring.Split("-")(0)
'							Dim gl As String = concatenatedstring.Split("-")(1)
'							Dim ct As String = concatenatedstring.Split("-")(2)
'							Dim p01 As String = concatenatedstring.Split("-")(3)
'							Dim p02 As String = concatenatedstring.Split("-")(4)
'							Dim p03 As String = concatenatedstring.Split("-")(5)
'							Dim p04 As String = concatenatedstring.Split("-")(6)
'							Dim p05 As String = concatenatedstring.Split("-")(7)
'							Dim p06 As String = concatenatedstring.Split("-")(8)
'							Dim p07 As String = concatenatedstring.Split("-")(9)
'							Dim p08 As String = concatenatedstring.Split("-")(10)
'							Dim p09 As String = concatenatedstring.Split("-")(11)
'							Dim p10 As String = concatenatedstring.Split("-")(12)
'							Dim p11 As String = concatenatedstring.Split("-")(13)
'							Dim p12 As String = concatenatedstring.Split("-")(14)
							
'							For Each dr As DataRow In dt_final_del.Rows
'								Dim concatenatedstring As String = dr("Concat")
'								Dim cc As String = concatenatedstring.Split("-")(0)
'								Dim gl As String = concatenatedstring.Split("-")(1)
'								Dim ct As String = concatenatedstring.Split("-")(2)
'								Dim p01 As String = concatenatedstring.Split("-")(3)
'								Dim p02 As String = concatenatedstring.Split("-")(4)
'								Dim p03 As String = concatenatedstring.Split("-")(5)
'								Dim p04 As String = concatenatedstring.Split("-")(6)
'								Dim p05 As String = concatenatedstring.Split("-")(7)
'								Dim p06 As String = concatenatedstring.Split("-")(8)
'								Dim p07 As String = concatenatedstring.Split("-")(9)
'								Dim p08 As String = concatenatedstring.Split("-")(10)
'								Dim p09 As String = concatenatedstring.Split("-")(11)
'								Dim p10 As String = concatenatedstring.Split("-")(12)
'								Dim p11 As String = concatenatedstring.Split("-")(13)
'								Dim p12 As String = concatenatedstring.Split("-")(14)
'						       sql.Append("DELETE FROM [XFW_NonWage_Register] WHERE CostCenter='"& cc &"' and GL='"& gl &"' and TF_2='"& ct &"' and P01=" & p01 &" and P02=" & p02 &" and P03=" & p03 &" and P04=" & p04 &" and P05=" & p05 &" and P06=" & p06 &" and P07=" & p07 &" and P08=" & p08 &" and P09=" & p09 &" and P10=" & p10 &" and P11=" & p11 &" and P12=" & p12)
'							sql.Append("DELETE From [XFW_NonWage_Register] Where  GL Like '%"& distinctValuesRow("Concat") &"%'   AND   TF_2 LIKE  '%"& distinctValuesRow("Concat") &"%'  and CostCenter= '"& distinctValuesRow("CostCenter") &"' ")
'					        sql.Append("DELETE FROM [XFW_NonWage_Register] WHERE  CONCAT(CostCenter,GL,TF_2,cast(P01 As Decimal(10,2)),cast(P02 As Decimal(10,2)),cast(P03 As Decimal(10,2)),cast(P04 As Decimal(10,2)),cast(P05 As Decimal(10,2)),cast(P06 As Decimal(10,2)),cast(P07 As Decimal(10,2)),cast(P08 As Decimal(10,2)),cast(P09 As Decimal(10,2)),cast(P10 As Decimal(10,2)),cast(P11 As Decimal(10,2)),cast(P12 As Decimal(10,2))) = '"& distinctValuesRow("Concat") &"'")
'                            Next
            
							
'						Next
'						BRAPi.ErrorLog.LogMessage(si, "dtfinal", PrintDT(si,dt_final).ToString)
						
'						dt_final.Columns.Remove("Concat")
'						For Each dr As DataRow In dt_final_del.Rows
'								Dim concatenatedstring As String = dr("Concat")
'								Dim cc As String = concatenatedstring.Split("-")(0)
'								Dim gl As String = concatenatedstring.Split("-")(1)
'								Dim ct As String = concatenatedstring.Split("-")(2)
'								Dim p01 As String = concatenatedstring.Split("-")(3)
'								Dim p02 As String = concatenatedstring.Split("-")(4)
'								Dim p03 As String = concatenatedstring.Split("-")(5)
'								Dim p04 As String = concatenatedstring.Split("-")(6)
'								Dim p05 As String = concatenatedstring.Split("-")(7)
'								Dim p06 As String = concatenatedstring.Split("-")(8)
'								Dim p07 As String = concatenatedstring.Split("-")(9)
'								Dim p08 As String = concatenatedstring.Split("-")(10)
'								Dim p09 As String = concatenatedstring.Split("-")(11)
'								Dim p10 As String = concatenatedstring.Split("-")(12)
'								Dim p11 As String = concatenatedstring.Split("-")(13)
'								Dim p12 As String = concatenatedstring.Split("-")(14)
'						       sql.Append("DELETE FROM [XFW_NonWage_Register] WHERE CostCenter='"& cc &"' and GL='"& gl &"' and TF_2='"& ct &"' and P01=" & p01 &" and P02=" & p02 &" and P03=" & p03 &" and P04=" & p04 &" and P05=" & p05 &" and P06=" & p06 &" and P07=" & p07 &" and P08=" & p08 &" and P09=" & p09 &" and P10=" & p10 &" and P11=" & p11 &" and P12=" & p12)
''							sql.Append("DELETE From [XFW_NonWage_Register] Where  GL Like '%"& distinctValuesRow("Concat") &"%'   AND   TF_2 LIKE  '%"& distinctValuesRow("Concat") &"%'  and CostCenter= '"& distinctValuesRow("CostCenter") &"' ")
''					        sql.Append("DELETE FROM [XFW_NonWage_Register] WHERE  CONCAT(CostCenter,GL,TF_2,cast(P01 As Decimal(10,2)),cast(P02 As Decimal(10,2)),cast(P03 As Decimal(10,2)),cast(P04 As Decimal(10,2)),cast(P05 As Decimal(10,2)),cast(P06 As Decimal(10,2)),cast(P07 As Decimal(10,2)),cast(P08 As Decimal(10,2)),cast(P09 As Decimal(10,2)),cast(P10 As Decimal(10,2)),cast(P11 As Decimal(10,2)),cast(P12 As Decimal(10,2))) = '"& distinctValuesRow("Concat") &"'")
'                            Next
            
						sql.Append("DELETE FROM [XFW_NonWage_Register]  Where GL='A5111006' OR GL='A5111005'")

'                        Me.PushDTToWatcher(si,cube_dt)
'						BRAPi.ErrorLog.LogMessage(si, "SQLTEMP", sql.ToString)
						Using dbExtConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							BRAPi.Database.ExecuteActionQuery(dbExtConn, sql.ToString, False, False)
							Using objSQLBulkCopy As New SqlBulkCopy(dbExtConn.ConnectionString)
								For Each dc As DataColumn In cube_dt.Columns
									
			                        objSQLBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName)
			                    Next
			                    objSQLBulkCopy.DestinationTableName = "XFW_NonWage_Register"
			                    objSQLBulkCopy.WriteToServer(cube_dt)
							End Using
						End Using
'						End If
						sp.Stop()
						BRApi.ErrorLog.LogMessage(si, "Execution Time(ms):" & sp.ElapsedMilliseconds)
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		'to export cube data to a datatable
		Private Function FDXExportToDT(ByVal si As SessionInfo, ByVal timePivot As Boolean, ByVal cubeName As String, ByVal consName As String, ByVal entityMemFilter As String, ByVal scenarioTypeId As Integer, ByVal scenarioMemFilter As String, ByVal timeMemFilter As String, ByVal viewName As String, ByVal filter As String) As DataTable
			Try
				Dim dt As DataTable = Nothing
				If timePivot Then
					dt = BRApi.Import.Data.FdxExecuteDataUnitTimePivot(si, 
						cubeName, 
						entityMemFilter, 
						consName, 
						scenarioTypeId, 
						scenarioMemFilter, 
						timeMemFilter, 
						viewName, 
						True, 
						False,
						filter, 
						10, 
						False)
				Else							
					dt = BRApi.Import.Data.FdxExecuteDataUnit(si, 
						cubeName, 
						entityMemFilter, 
						consName, 
						scenarioTypeId, 
						scenarioMemFilter, 
						timeMemFilter, 
						viewName, 
						True,
						filter, 
						10, 
						False)
				End If
				Return dt
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function	
		
		Public Function CVRender(ByRef si As SessionInfo, ByVal cubeViewName As String, ByVal vParams As Dictionary(Of String, String)) As DataTable
			Dim value As New NameValueFormatBuilder 
			Dim instance As New XFIfActionExpr("CVFilter", value)
			value = instance.NameValueFormatBuilder
			value.ApplyNameValuePairsFromDictionary(vParams)
			Dim entityDimensionName As String = ""
			Dim entityMemFilter As String = ""
			Dim scenarioDimName As String = ""
			Dim scenarioMemFilter As String = ""
			Dim timeMemFilter As String = ""
			Dim includeCellTextCols As Boolean = False
			Dim useStandardFactTableFields As Boolean = True
			Dim useGenericTimeColNames As Boolean = True
			Dim parallelQueryCount As Integer = 8
			Dim logStatistics As Boolean = False
			Dim dt As DataTable = Nothing
			Try
'				dt = BRApi.Import.Data.FdxExecuteCubeView(si, cubeViewName, entityDimensionName, entityMemFilter, scenarioDimName, scenarioMemFilter, timeMemFilter, value, includeCellTextCols, useStandardFactTableFields, Nothing, parallelQueryCount, logStatistics)
				dt = BRApi.Import.Data.FdxExecuteCubeViewTimePivot(si, cubeViewName, entityDimensionName, entityMemFilter, scenarioDimName, scenarioMemFilter, timeMemFilter, value, includeCellTextCols, useStandardFactTableFields, True, Nothing, parallelQueryCount, logStatistics)
				If dt IsNot Nothing Then					
					Return dt
				Else
					Return Nothing
				End If
			Catch e As Exception
				Brapi.ErrorLog.LogMessage(si,$"getCV({cubeviewName}, {string.Join(":", vParams)}) failed with error - {e}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try
		End Function
 		
		'to print datatable in log
		Private Function PrintDT(ByVal si As SessionInfo, ByVal dt As DataTable) As Text.StringBuilder
			Try
				Dim sCSV As New Text.StringBuilder
				If dt IsNot Nothing Then
					If dt.Rows.Count > 0 Then
						
						For Each dc As DataColumn In dt.Columns
							sCSV.Append(dc.ColumnName & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
						For Each dr As DataRow In dt.Rows
							For Each dc As DataColumn In dt.Columns
		     					sCSV.Append(dr(dc).ToString & ",")
							Next
							sCSV.Remove(sCSV.Length-1,1)
							sCSV.Append(Environment.NewLine)
						Next
					End If
				End If
				Return sCSV
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
    	End Function
		
		Private Function TransformDT(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal scenarioName As String, ByVal timeName As String) As DataTable
			Try	
						'select required column
						Dim view As New DataView(dt)
						dt = view.ToTable(False, "Entity","Account","UD2","Time1","Time2","Time3","Time4","Time5","Time6","Time7","Time8","Time9","Time10","Time11","Time12","Time13")
						
'						rename colmuns 
						dt.Columns("Entity").ColumnName = "CostCenter"
						dt.Columns("Account").ColumnName = "GL"
						dt.Columns("UD2").ColumnName = "TF_2"
						dt.Columns("Time1").ColumnName = "P01"
						dt.Columns("Time2").ColumnName = "P02"
						dt.Columns("Time3").ColumnName = "P03"
						dt.Columns("Time4").ColumnName = "P04"
						dt.Columns("Time5").ColumnName = "P05"
						dt.Columns("Time6").ColumnName = "P06"
						dt.Columns("Time7").ColumnName = "P07"
						dt.Columns("Time8").ColumnName = "P08"
						dt.Columns("Time9").ColumnName = "P09"
						dt.Columns("Time10").ColumnName = "P10"
						dt.Columns("Time11").ColumnName = "P11"
						dt.Columns("Time12").ColumnName = "P12"
						dt.Columns("Time13").ColumnName = "YearTotal"
						
						'prepare dt to push to expense register
						Dim VBOCCdict As New Dictionary(Of String, String)
						Dim VBOCCdt As New DataTable
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							VBOCCdt = BRAPi.Database.ExecuteSql(dbConnApp,"SELECT WORKFLOW_PROFILE_VBO,COST_CENTER FROM [dbo].[XFW_ExpensePlanning_VBO_CC_Mappings]", False)   
						End Using	
						For Each VBOCCdr As DataRow In VBOCCdt.Rows
							Try
								VBOCCdict.Add(VBOCCdr("COST_CENTER"),VBOCCdr("WORKFLOW_PROFILE_VBO"))
							Catch ex As Exception
								Continue For
							End Try
						Next
						dt.Columns.Add("UniqueID",GetType(Guid))
						dt.Columns.Add("TF_3")
						dt.Columns.Add("WFProfileName")
						dt.Columns.Add("WFScenarioName")
						dt.Columns.Add("WFTimeName")
						dt.Columns.Add("LineItem")
						dt.Columns.Add("TF_11")
						dt.Columns.Add("UserID")
'						dt.Columns.Add("Concat")
						
						If dt.Rows.Count > 0
							For Each dr As DataRow In dt.Rows
								dr("UniqueID") = Guid.NewGuid
								If VBOCCDict.ContainsKey(dr("CostCenter"))
									dr("WFProfileName") = VBOCCdict.Item(dr("CostCenter")) & ".PK_04 Associate Relations PxQ"
								End If
								dr("WFScenarioName") = scenarioName
								dr("WFTimeName") = timeName
								dr("LineItem") = 1
								dr("YearTotal")= dr("P01").TOString.XFConvertToDecimal + dr("P02").TOString.XFConvertToDecimal + dr("P03").ToString.XFConvertToDecimal + dr("P04").ToString.XFConvertToDecimal + dr("P05").ToString.XFConvertToDecimal + dr("P06").ToString.XFConvertToDecimal + dr("P07").ToString.XFConvertToDecimal + dr("P08").ToString.XFConvertToDecimal + dr("P09").ToString.XFConvertToDecimal + dr("P10").ToString.XFConvertToDecimal + dr("P11").ToString.XFConvertToDecimal + dr("P12").ToString.XFConvertToDecimal
'								dr("P01")=Math.Round(dr("P01"),2)
'								dr("P02")=dr("P02").ToString.XFConvertToDecimal
'								dr("P03")=dr("P03").ToString.XFConvertToDecimal
'								dr("P04")=dr("P04").ToString.XFConvertToDecimal
'								dr("P05")=dr("P05").ToString.XFConvertToDecimal
'								dr("P06")=dr("P06").ToString.XFConvertToDecimal
'								dr("P07")=dr("P07").ToString.XFConvertToDecimal
'								dr("P08")=dr("P08").ToString.XFConvertToDecimal
'								dr("P09")=dr("P09").ToString.XFConvertToDecimal
'								dr("P10")=dr("P10").ToString.XFConvertToDecimal
'								dr("P11")=dr("P11").ToString.XFConvertToDecimal
'								dr("P12")=dr("P12").ToString.XFConvertToDecimal
								dr("TF_11") = "Local Currency"
								dr("UserID") = BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName).User.Description
'								dr("Concat")=dr("CostCenter") & "-" & dr("GL") & "-" & dr("TF_2") & "-" & Math.Round(dr("P01"),2) & "-" & Math.Round(dr("P02"),2)& "-" & Math.Round(dr("P03"),2) & "-" & Math.Round(dr("P04"),2) & "-" & Math.Round(dr("P05"),2) & "-" & Math.Round(dr("P06"),2) & "-" & Math.Round(dr("P07"),2) & "-" & Math.Round(dr("P08"),2) & "-" & Math.Round(dr("P09"),2) & "-" & Math.Round(dr("P10"),2) & "-" & Math.Round(dr("P11"),2) & "-" & Math.Round(dr("P12"),2)
'								(dr("P01") dr("P02")& dr("P03")& dr("P04")& dr("P05")& dr("P06")& dr("P07")& dr("P08")& dr("P09")& dr("P10")& dr("P11") dr("P12"))
							Next	
						End If
'						dt.Columns("Concat").SetOrdinal(0)
						Return dt
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Private Function GetExpRegDT(ByVal si As SessionInfo) As DataTable
			Try
				Dim dt As DataTable = Nothing
'				Dim sql As String = "SELECT CONCAT(CostCenter,'-',GL,'-',TF_2,'-',cast(P01 as decimal(10,2)),'-',cast(P02 as decimal(10,2)),'-',cast(P03 as decimal(10,2)),'-',cast(P04 as decimal(10,2)),'-',cast(P05 as decimal(10,2)),'-',cast(P06 as decimal(10,2)),'-',cast(P07 as decimal(10,2)),'-',cast(P08 as decimal(10,2)),'-',cast(P09 as decimal(10,2)),'-',cast(P10 as decimal(10,2)),'-',cast(P11 as decimal(10,2)),'-',cast(P12 as decimal(10,2))) AS Concat,CostCenter,GL,TF_2,P01,P02,P03,P04,P05,P06,P07,P08,P09,P10,P11,P12 FROM XFW_NonWage_Register WHERE GL='A5111005' OR GL='A5111006'"
				Dim sql As String = "SELECT CostCenter,GL,TF_2,P01,P02,P03,P04,P05,P06,P07,P08,P09,P10,P11,P12 FROM XFW_NonWage_Register WHERE GL='A5111005' OR GL='A5111006'"

				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt = BRAPi.Database.ExecuteSql(dbConnApp,sql, False)   
				End Using
			Return dt
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		'compare cube and register datatables and update watcher based on results
		Private Function CompareDT(ByVal si As SessionInfo, ByVal sourcedt As DataTable, ByVal targetdt As DataTable, ByVal timeName As String) As DataTable
			Try
				Dim DEBUG As Boolean = True
				'create dt with same structure as watcher
				Dim comparisonresults_dt As New DataTable
				comparisonresults_dt.Columns.Add("Concat", GetType(String))
				comparisonresults_dt.Columns.Add("CostCenter", GetType(String))
				comparisonresults_dt.Columns.Add("UserID", GetType(String))
				comparisonresults_dt.Columns.Add("UniqueID",GetType(Guid))
				comparisonresults_dt.Columns.Add("PlanYear",GetType(Integer))
				comparisonresults_dt.Columns.Add("Updated_On",GetType(DateTime))
				comparisonresults_dt.Columns.Add("ENT_Flag",GetType(Integer))
				comparisonresults_dt.Columns.Add("WMTUS_Flag",GetType(Integer))
				comparisonresults_dt.Columns.Add("SAMS_Flag",GetType(Integer))
				comparisonresults_dt.Columns.Add("CORP_Flag",GetType(Integer))
				comparisonresults_dt.Columns("UserID").DefaultValue = BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName).User.Description
				comparisonresults_dt.Columns("PlanYear").DefaultValue = timeName.XFConvertToInt
				comparisonresults_dt.Columns("Updated_On").DefaultValue = DateTime.Now
				comparisonresults_dt.Columns("ENT_Flag").DefaultValue = 0
				comparisonresults_dt.Columns("WMTUS_Flag").DefaultValue = 0
				comparisonresults_dt.Columns("SAMS_Flag").DefaultValue = 0
				comparisonresults_dt.Columns("CORP_Flag").DefaultValue = 0
'				If DEBUG Then BRApi.ErrorLog.LogMessage(si, "sourcedt:", Me.PrintDT(si,sourcedt).ToString)
'				If DEBUG Then BRApi.ErrorLog.LogMessage(si, "targetdt:", Me.PrintDT(si,targetdt).ToString)
				Dim index_target As Dictionary(Of String, DataRow) = BuildIndex(si, targetdt, 0)
				Dim index_source As Dictionary(Of String, DataRow) = BuildIndex(si, sourcedt, 0)
				Dim row As DataRow = Nothing
				
				If sourcedt IsNot Nothing And targetdt IsNot Nothing
					For Each sourcedr As DataRow In sourcedt.Rows
'						If Not index_target.ContainsValue(sourcedr("Concat"))
'                        BRAPI.ErrorLog.LogMessage(si,"check1",sourcedr("CostCenter")& index_target.TryGetValue(sourcedr("Concat"),row).ToString)
						If Not index_target.TryGetValue(sourcedr("Concat"),row)
									Dim r As DataRow = comparisonresults_dt.NewRow
									r("CostCenter") = sourcedr("CostCenter")
									r("Concat") = sourcedr("Concat")
									r("UniqueID") = Guid.NewGuid
									comparisonresults_dt.Rows.Add(r)
					End If
					    			
					Next			
				    For Each targetdr As DataRow In targetdt.Rows
'						If Not index_source.ContainsValue(targetdr("Concat"))
						If Not index_source.TryGetValue(targetdr("Concat"),row)
									Dim r As DataRow = comparisonresults_dt.NewRow
									r("CostCenter") = targetdr("CostCenter")
									r("Concat") = targetdr("Concat")
									r("UniqueID") = Guid.NewGuid
									comparisonresults_dt.Rows.Add(r)
						End If
					Next
					
				End If
'				If sourcedt IsNot Nothing
'					If targetdt.Rows.Count = 0
'						Dim cclist As New Text.StringBuilder
'						If DEBUG Then BRApi.ErrorLog.LogMessage(si, "IfSOURCE")
'						For Each sourcedr As DataRow In sourcedt.Rows
'							If Not cclist.ToString.Contains(sourcedr("CostCenter"))
'								cclist.Append(sourcedr("CostCenter"))					
'								Dim r As DataRow = comparisonresults_dt.NewRow
'								r("CostCenter") = sourcedr("CostCenter")
'								r("UniqueID") = Guid.NewGuid
'								comparisonresults_dt.Rows.Add(r)
'							End If
'						Next
'					Else
'						Dim cclist As New Text.StringBuilder
'						For Each sourcedr As DataRow In sourcedt.Rows
'							For Each targetdr As DataRow In targetdt.Rows
'									'if source has cost center, target does not
'									Dim row As DataRow = Nothing
'									BRApi.ErrorLog.LogMessage(si, "CCII:" & sourcedr("CostCenter"))
'									If Not index_target.TryGetValue(sourcedr("CostCenter"),row)
'										If Not cclist.ToString.Contains(sourcedr("CostCenter"))
'											cclist.Append(sourcedr("CostCenter"))
'											If DEBUG Then BRApi.ErrorLog.LogMessage(si, "If")
'											Dim r As DataRow = comparisonresults_dt.NewRow
'											r("CostCenter") = sourcedr("CostCenter")
''											BRApi.ErrorLog.LogMessage(si, "AFTERADDROWS", r("CostCenter").ToString)
'											r("UniqueID") = Guid.NewGuid
'											comparisonresults_dt.Rows.Add(r)
'										End If
									
'									'if target has cost center, source does not
'								Else If Not index_source.TryGetValue(targetdr("CostCenter"),row)
'										If DEBUG Then BRApi.ErrorLog.LogMessage(si, "ElseIf")
'										If Not cclist.ToString.Contains(targetdr("CostCenter"))
'											cclist.Append(targetdr("CostCenter"))
											
'											Dim r As DataRow = comparisonresults_dt.NewRow
''											BRApi.ErrorLog.LogMessage(si, "AFTERADDROWS", r("CostCenter").ToString)
'											r("CostCenter") = targetdr("CostCenter")
'											r("UniqueID") = Guid.NewGuid
'											comparisonresults_dt.Rows.Add(r)
'										End If
									
'									'change in amounts for any periods
'								Else If (sourcedr("CostCenter")=targetdr("CostCenter")) And (sourcedr("GL")=targetdr("GL")) And (sourcedr("TF_2")=targetdr("TF_2"))
'										If DEBUG Then BRApi.ErrorLog.LogMessage(si, "ElseII")
'										BRAPI.ErrorLog.LogMessage(si, "CC:" & sourcedr("CostCenter"))
'											If (sourcedr("P01") <> targetdr("P01")) Or (sourcedr("P02") <> targetdr("P02")) Or (sourcedr("P03") <> targetdr("P03")) Or (sourcedr("P04") <> targetdr("P04")) Or (sourcedr("P05") <> targetdr("P05")) Or (sourcedr("P06") <> targetdr("P06")) Or (sourcedr("P07") <> targetdr("P07")) Or (sourcedr("P08") <> targetdr("P08")) Or (sourcedr("P09") <> targetdr("P09")) Or (sourcedr("P10") <> targetdr("P10")) Or (sourcedr("P11") <> targetdr("P11")) Or (sourcedr("P12") <> targetdr("P12"))
'												Dim r As DataRow = comparisonresults_dt.NewRow
'												r("CostCenter") = sourcedr("CostCenter")
'												r("UniqueID") = Guid.NewGuid
'												comparisonresults_dt.Rows.Add(r)
												
'											End If
									
'								Else If (sourcedr("CostCenter")=targetdr("CostCenter")) And (sourcedr("P01") = targetdr("P01")) And (sourcedr("P02") = targetdr("P02")) And (sourcedr("P03") = targetdr("P03")) And (sourcedr("P04") = targetdr("P04")) And (sourcedr("P05") = targetdr("P05")) And (sourcedr("P06") = targetdr("P06")) And (sourcedr("P07") = targetdr("P07")) And (sourcedr("P08") = targetdr("P08")) And (sourcedr("P09") = targetdr("P09")) And (sourcedr("P10") = targetdr("P10")) And (sourcedr("P11") = targetdr("P11")) And (sourcedr("P12") = targetdr("P12")) And (sourcedr("TF_2")=targetdr("TF_2"))
										
'											If (sourcedr("GL") <> targetdr("GL")) 
'												Dim r As DataRow = comparisonresults_dt.NewRow
'												r("CostCenter") = sourcedr("CostCenter")
'												r("UniqueID") = Guid.NewGuid
'												comparisonresults_dt.Rows.Add(r)
												
'											End If
'									End If
'							Next
'						Next
				
'					End If
'				End If
'				BRApi.ErrorLog.LogMessage(si, "comparisonresults_dt:", Me.PrintDT(si,comparisonresults_dt).ToString)

                If comparisonresults_dt.Rows.Count > 0
                   Dim comparisonresults_dt1 As DataTable = comparisonresults_dt.Copy()
				   Me.PushDTToWatcher(si,comparisonresults_dt1)
				End If
				
			   
			   
			Return comparisonresults_dt
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			
			End Try
			
			
		End Function
		
		Private Function BuildIndex(ByVal si As SessionInfo, ByVal table As DataTable, ByVal keyColumnIndex As Integer) As Dictionary(Of String, DataRow)
		    Dim index As New Dictionary(Of String, DataRow)(table.Rows.Count)
		    For Each row As DataRow In table.Rows
		        index(row(keyColumnIndex)) = row
		    Next	
		    Return index
		End Function
    Public Sub PushDTToWatcher(ByVal si As SessionInfo, ByVal dt_new_watcher As DataTable)
			Try
				Dim timeName As String = BRApi.Finance.Time.GetNameFromId(si, si.WorkflowClusterPk.TimeKey)
'	            dt_new_watcher.Columns.Remove("Concat")
				Dim dt_new_watcher1 As New DataTable
				dt_new_watcher1.Columns.Add("PlanYear",GetType(Integer))
				dt_new_watcher1.Columns.Add("Updated_On",GetType(DateTime))
				dt_new_watcher1.Columns.Add("ENT_Flag",GetType(Integer))
				dt_new_watcher1.Columns.Add("WMTUS_Flag",GetType(Integer))
				dt_new_watcher1.Columns.Add("SAMS_Flag",GetType(Integer))
				dt_new_watcher1.Columns.Add("CORP_Flag",GetType(Integer))
				
				dt_new_watcher1.Columns("PlanYear").DefaultValue = timeName.XFConvertToInt
				dt_new_watcher1.Columns("Updated_On").DefaultValue = DateTime.Now
				dt_new_watcher1.Columns("ENT_Flag").DefaultValue = 0
				dt_new_watcher1.Columns("WMTUS_Flag").DefaultValue = 0
				dt_new_watcher1.Columns("SAMS_Flag").DefaultValue = 0
				dt_new_watcher1.Columns("CORP_Flag").DefaultValue = 0
				dt_new_watcher1.Merge(dt_new_watcher)
				Dim uniquecc As New Text.StringBuilder
				Dim sql As New Text.StringBuilder
				Dim sqldel As New Text.StringBuilder
				Dim tablename As String="XFW_NonWage_UpdatedCClist"
				For Each dr As DataRow In dt_new_watcher1.Rows
					If Not uniquecc.ToString.Contains(dr("CostCenter"))
						 uniquecc.Append(dr("CostCenter"))
						 sqldel.Append("DELETE FROM [dbo].[" & tablename & "] Where CostCenter= '"& dr("CostCenter") &"' and UserID='"& dr("UserID") &"' and PlanYear='"& dr("PlanYear") &"' and ENT_Flag='"& dr("ENT_Flag") &"' and WMTUS_Flag='"& dr("WMTUS_Flag") &"' and SAMS_Flag='"& dr("SAMS_Flag") &"' and CORP_Flag='"& dr("CORP_Flag") &"'")
						 sql.Append("INSERT INTO [dbo].[" & tablename & "] (CostCenter,UserID,UniqueID,PlanYear,Updated_On,ENT_Flag,WMTUS_Flag,SAMS_Flag,CORP_Flag) VALUES ")
						 sql.Append("('" & dr("CostCenter")& "','" & BRApi.Security.Admin.GetUser(si, si.UserName).User.Description & "','" & Guid.NewGuid.ToString & "'," & dr("PlanYear") & ",'" & dr("Updated_On") & "'," & dr("ENT_Flag") & "," & dr("WMTUS_Flag") & "," & dr("SAMS_Flag") & "," & dr("CORP_Flag") & ")")
					 End If
				Next
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'				BRAPI.ErrorLog.LogMessage(si,"sql",sql.ToString)
'				BRAPI.ErrorLog.LogMessage(si,"sqldel",sqldel.ToString)
				   BRAPi.Database.ExecuteSql(dbConnApp, sqldel.ToString, True) 
				   BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)
				   
			   End Using	
'						For Each sourcedr As DataRow In sourcedt.Rows
'				Dim dt_new_watcher2 As DataTable = dt_new_watcher1.DefaultView.ToTable(True,"CostCenter","UserID","UniqueID","PlanYear","Updated_On","ENT_Flag","WMTUS_Flag","SAMS_Flag","CORP_Flag")

'				BRAPI.ErrorLog.LogMessage(si,"watcher",PrintDT(si,dt_new_watcher1).ToString)
'				Using dbExtConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'							Using objSQLBulkCopy As New SqlBulkCopy(dbExtConn.ConnectionString)
'								For Each dc As DataColumn In dt_new_watcher2.Columns
''									If dc <>"Concat"
'			                        objSQLBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName)
'			                    Next
'			                    objSQLBulkCopy.DestinationTableName = "XFW_NonWage_UpdatedCClist"
								
'			                    objSQLBulkCopy.WriteToServer(dt_new_watcher2)
''								BRAPi.ErrorLog.LogMessage(si, "dt_finalCHECK")
'							End Using
'						End Using
'				BRApi.Database.SaveCustomDataTable(si, "Application", "XFW_NonWage_UpdatedCClist", dt_new_watcher1, True)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EXP_to_CORP_Trigger">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_SharedConstants" />
            </referencedAssemblies>
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
#End Region
Namespace OneStream.BusinessRule.Extender.EXP_to_CORP_Trigger
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
					
						Dim newsesInfo = GetOtherAppConnectionString(si)
						Dim DEBUG As Boolean = True
						
						Dim DMParams As New Dictionary(Of String, String)
'						If Not Me.IsDataMgmtJobRunning(newsesInfo, "EXP_to_WMTUS")
							Dim task As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(newsesInfo, "Sqnc_EXP_to_CORP", DMParams)
							
'						Else
'							If DEBUG Then BRApi.ErrorLog.LogMessage(si, "EXP_to_WMTUS push is already running")
'						End If
						
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		#Region "GetOtherAppConnectionString Function"
		Private Function GetOtherAppConnectionString(ByVal si As SessionInfo) As Object
			Try	
				Dim appUniqueID As Guid = ConvertHelper.ToGuid("738c7f1f-9f83-4cf1-ac11-53e198efb6b2")
				Dim varAppToken As New ApplicationToken(si.AppToken.SHA1HashCode, "Corporate_Dev", appUniqueID)
				Dim newSeshInfoOtherApp As New SessionInfo(ClientModuleType.Silverlight, si.WebServerUrlUsedByClient, si.AuthToken, varAppToken, si.Culture)
					
				Return newSeshInfoOtherApp

			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EXP_to_ENT_Push">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_SharedConstants" />
            </referencedAssemblies>
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports System.Text.RegularExpressions
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports OneStream.BusinessRule.DashboardStringFunction.EP_SharedConstants

#End Region

#Region "Rule Change Mgmt"

'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 - - Integration Functions
	'Mods:		
	'--------------------------------------------------------------------------------------------------------------------------------------------

#End Region
Namespace OneStream.BusinessRule.Extender.EXP_to_ENT_Push
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						setGlobalObject(si, globals, api)
						Dim dt As DataTable = Nothing
						dt = DirectCast(globals.GetObject("EXP_Register"), DataTable)
						Dim DMParams As New Dictionary(Of String, String)
						DMParams.Add("EXP_Reg",dt)
						Dim task As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(si, "Sqnc_EXP_to_ENT_Push", DMParams)
					
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		#Region "Helper Functions"
		Private Sub setGlobalObject(ByRef si As SessionInfo, ByRef globals As BRGLobals, ByVal api As FinanceRulesApi)
			Dim result As DataTable = Nothing
			Dim resultCache = globals.GetObject("EXP_Register")
			
			If resultCache Is Nothing Then
                Dim Currency As String = "Local Currency"
				Dim sql As New Text.StringBuilder
				sql.Append("SELECT WFProfileName, WFScenarioName, WFTimeName, CostCenter, GL, TF_2, SUM(P01) As P01, SUM(P02) As P02, SUM(P03) As P03, SUM(P04) As P04, SUM(P05) As P05, SUM(P06) AS P06, SUM(P07) As P07, SUM(P08) As P08, SUM(P09) As P09, SUM(P10) As P10, SUM(P11) As P11, SUM(P12) As P12")
				sql.Append(" FROM " & EPSharedConstants.sMainRegExpenseTable)
				sql.Append(" WHERE TF_11 = '"& Currency &"' ")
				sql.Append(" GROUP BY WFProfileName, WFScenarioName, WFTimeName, CostCenter, GL, TF_2, TF_11 ")
					
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					result = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, sql.ToString, True)
					globals.SetObject("EXP_Register", result)
				End Using
			Else
				result = DirectCast(resultCache, DataTable)
			End If
		End Sub
	#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EXP_to_ENT_Trigger">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_SharedConstants" />
            </referencedAssemblies>
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports OneStream.BusinessRule.DashboardStringFunction.EP_SharedConstants

#End Region

#Region "Rule Change Mgmt"

'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 - - Integration Functions
	'Mods:		
	'--------------------------------------------------------------------------------------------------------------------------------------------

#End Region
Namespace OneStream.BusinessRule.Extender.EXP_to_ENT_Trigger
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
					
						Dim newsesInfo = GetOtherAppConnectionString(si)
						Dim DEBUG As Boolean = True
						
						Me.UpdateWatcher(si,globals,2)
						
						Dim DMParams As New Dictionary(Of String, String)
'						If Not Me.IsDataMgmtJobRunning(newsesInfo, "EXP_to_WMTUS")
							Dim task As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(newsesInfo, "Sqnc_EXP_to_ENT_Push", DMParams)
							Dim task_guid As Guid  = task.UniqueID

							
							Dim status As String = CheckStatusSubTask(newsesInfo, task_guid)
							
							While status = TaskActivityStatus.Running
								status = CheckStatusSubTask(newsesInfo, task_guid)
							End While 
							
							If status = TaskActivityStatus.Completed
								Me.UpdateWatcher(si,globals,1)
							ElseIf status = TaskActivityStatus.Failed
								Me.UpdateWatcher(si,globals,3)
							End If
							
'						Else
'							If DEBUG Then BRApi.ErrorLog.LogMessage(si, "EXP_to_WMTUS push is already running")
'						End If
						
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		#Region "Helper Function"
		Private Function GetCCFromWatcher(ByVal si As SessionInfo) As Text.StringBuilder
			Try
				Dim uniquecclist As New Text.StringBuilder
				Dim dt_watcher As Datatable = Nothing
				Dim sql As String = "SELECT * FROM " & EPSharedConstants.sWatcherTable & " WHERE (Run_Flag=0 OR Run_Flag =-1)"
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_watcher = BRAPi.Database.ExecuteSql(dbConnApp,sql,False)
				End Using
				
				If dt_watcher IsNot Nothing
					If dt_watcher.Rows.Count > 0
						For Each dr_watcher As DataRow In dt_watcher.Rows
							If Not uniquecclist.ToString.Contains(dr_watcher("CostCenter"))
								uniquecclist.Append("'" & dr_watcher("CostCenter") & "',")
							End If
						Next
						If uniquecclist.Length > 0 Then
							uniquecclist.Remove(uniquecclist.Length-1,1)
						End If
					End If
				End If
			Return uniquecclist
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Sub UpdateWatcher(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal successFlag As Integer)
			Try		
					Dim uniquecclist = Me.GetCCFromWatcher(si)
					If Not String.IsNullOrEmpty(uniquecclist.ToString)
'					Dim uniqueidlist = DirectCast(globals.GetObject("EXP_Register_UniqueID"), Text.StringBuilder)
'					If Not String.IsNullOrEmpty(uniqueidlist.ToString)
						
						Dim sql As New Text.StringBuilder
						If successFlag =1 Then
						   
'							sql.Append("UPDATE XFW_ExpensePlanning_Watcher SET Wait_Flag=0,Processed_On='"& DateTime.Now &"',Requested_On='"& starttime &"' WHERE ActivityID='TRG2'  AND CostCenter In (" & uniqueidlist.ToString & ") ")
                           sql.Append("UPDATE " & EPSharedConstants.sWatcherTable & " SET Run_Flag=1,Processed_On='"& DateTime.Now & "' WHERE Wait_Flag=0 AND ActivityID='TRG2' AND CostCenter In (" & uniquecclist.ToString & ") ")
                           sql.Append("UPDATE " & EPSharedConstants.sWatcherTable & " SET Run_Flag=0,Wait_flag=0,Processed_On='"& DateTime.Now & "' WHERE Wait_Flag=1 AND ActivityID='TRG2' AND CostCenter In (" & uniquecclist.ToString & ") ")
						   
					   Else If successFlag = 3
							sql.Append("UPDATE " & EPSharedConstants.sWatcherTable & " SET Run_Flag=-1,Processed_On='"& DateTime.Now &"' WHERE  ActivityID='TRG2' AND CostCenter In (" & uniquecclist.ToString & ") ")
'						    sql = "UPDATE XFW_ExpensePlanning_Watcher SET Run_Flag=1,Wait_Flag=0,Processed_On='"& DateTime.Now &"',Requested_On='"& starttime &"' WHERE ActivityID='TRG2' AND Wait_Flag=1 AND Run_Flag=1  AND CostCenter In (" & uniquecclist.ToString & ") "
						Else If successFlag = 2
							sql.Append("UPDATE " & EPSharedConstants.sWatcherTable & " SET Run_Flag=2,Processed_On=null,Requested_On='"& DateTime.Now &"'  WHERE  ActivityID='TRG2' AND CostCenter In (" & uniquecclist.ToString & ") ")
						End If
'						BRAPI.ErrorLog.LogMessage(si,"sql update watcher",sql.ToString)
						If sql.Length>0
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								BRAPi.Database.ExecuteActionQuery(dbConnApp,sql.ToString,False,False)
						End Using
					    End If
					Else
'						BRAPI.ErrorLog.LogMessage(si, "No modified cost centers to update watcher")
					End If
'				End If
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		Private Function CheckStatusSubTask(ByVal si As SessionInfo, ByVal task_guid As Guid) As String
			Try
				Dim subtaskstatus As String = String.Empty
				Dim dt As DataTable = Nothing
				Dim sql As String = "SELECT TaskActivityStatus FROM " & EPSharedConstants.sTaskActivityTable & " WHERE UniqueID = '" & task_guid.ToString & "'"
				Using dbConnFW As DbConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
					dt = BRApi.Database.ExecuteSql(dbConnFW, sql, False)
				End Using
				
				If dt.Rows.Count = 1
					subtaskstatus = dt.Rows(0)("Status")
				End If
				
				Return subtaskstatus
					
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End  Function
	#End Region	
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EXP_to_SAMS_Trigger">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_SharedConstants" />
            </referencedAssemblies>
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports OneStream.BusinessRule.DashboardStringFunction.EP_SharedConstants

#End Region

#Region "Rule Change Mgmt"

'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 - - Integration Functions
	'Mods:		
	'--------------------------------------------------------------------------------------------------------------------------------------------

#End Region
Namespace OneStream.BusinessRule.Extender.EXP_to_SAMS_Trigger
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
					
						Dim newsesInfo = GetOtherAppConnectionString(si)
						Dim DEBUG As Boolean = True
						
						Dim DMParams As New Dictionary(Of String, String)
'						If Not Me.IsDataMgmtJobRunning(newsesInfo, "EXP_to_WMTUS")
							Dim task As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(newsesInfo, "Sqnc_EXP_to_SAMS_ClubOps", DMParams)
							
'						Else
'							If DEBUG Then BRApi.ErrorLog.LogMessage(si, "EXP_to_WMTUS push is already running")
'						End If
						
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		#Region "Helper Functions"
		Private Function GetOtherAppConnectionString(ByVal si As SessionInfo) As Object
			Try	
				Dim appUniqueID As Guid = ConvertHelper.ToGuid("94c97ba1-08f0-4ceb-870a-96f4d920c8e5")
				Dim varAppToken As New ApplicationToken(si.AppToken.SHA1HashCode, "SAMS Dev", appUniqueID)
				Dim newSeshInfoOtherApp As New SessionInfo(ClientModuleType.Silverlight, si.WebServerUrlUsedByClient, si.AuthToken, varAppToken, si.Culture)
					
				Return newSeshInfoOtherApp

			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="EXP_to_WMTUS_Trigger">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_SharedConstants" />
            </referencedAssemblies>
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports OneStream.BusinessRule.DashboardStringFunction.EP_SharedConstants

#End Region

#Region "Rule Change Mgmt"

'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 - - Integration Functions
	'Mods:		
'--------------------------------------------------------------------------------------------------------------------------------------------

#End Region
Namespace OneStream.BusinessRule.Extender.EXP_to_WMTUS_Trigger
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
					
						Dim newsesInfo = GetOtherAppConnectionString(si)
						Dim DEBUG As Boolean = True
						
						Me.UpdateWatcher(si,globals,2)
						
						Dim DMParams As New Dictionary(Of String, String)
'						If Not Me.IsDataMgmtJobRunning(newsesInfo, "EXP_to_WMTUS")
							Dim task As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(newsesInfo, "Sqnc_EXP_to_WMTUS", DMParams)
							Dim task_guid As Guid  = task.UniqueID

							
							Dim status As String = CheckStatusSubTask(newsesInfo, task_guid)
							
							While status = TaskActivityStatus.Running
								status = CheckStatusSubTask(newsesInfo, task_guid)
							End While 
							
							If status = TaskActivityStatus.Completed
								Me.UpdateWatcher(si,globals,1)
							ElseIf status = TaskActivityStatus.Failed
								Me.UpdateWatcher(si,globals,3)
							End If
							
'						Else
'							If DEBUG Then BRApi.ErrorLog.LogMessage(si, "EXP_to_WMTUS push is already running")
'						End If
						
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		#Region "Helper Functions"
		Private Function GetOtherAppConnectionString(ByVal si As SessionInfo) As Object
			Try	
				Dim appUniqueID As Guid = ConvertHelper.ToGuid("1076a653-b7db-4caa-8570-4fc92c3a0aa6")
				Dim varAppToken As New ApplicationToken(si.AppToken.SHA1HashCode, "WMTUS_Dev", appUniqueID)
				Dim newSeshInfoOtherApp As New SessionInfo(ClientModuleType.Silverlight, si.WebServerUrlUsedByClient, si.AuthToken, varAppToken, si.Culture)
				Return newSeshInfoOtherApp
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Private Function GetCCFromWatcher(ByVal si As SessionInfo) As Text.StringBuilder
			Try
				Dim uniquecclist As New Text.StringBuilder
				Dim dt_watcher As Datatable = Nothing
				Dim sql As String = "SELECT * FROM " & EPSharedConstants.sWatcherTable & " WHERE (Run_Flag=0 OR Run_Flag =-1)"
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_watcher = BRAPi.Database.ExecuteSql(dbConnApp,sql,False)
				End Using
				
				If dt_watcher IsNot Nothing
					If dt_watcher.Rows.Count > 0
						For Each dr_watcher As DataRow In dt_watcher.Rows
							If Not uniquecclist.ToString.Contains(dr_watcher("CostCenter"))
								uniquecclist.Append("'" & dr_watcher("CostCenter") & "',")
							End If
						Next
						If uniquecclist.Length > 0 Then
							uniquecclist.Remove(uniquecclist.Length-1,1)
						End If
					End If
				End If
			Return uniquecclist
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Sub UpdateWatcher(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal successFlag As Integer)
			Try		
					Dim uniquecclist = Me.GetCCFromWatcher(si)
					If Not String.IsNullOrEmpty(uniquecclist.ToString)
'					Dim uniqueidlist = DirectCast(globals.GetObject("EXP_Register_UniqueID"), Text.StringBuilder)
'					If Not String.IsNullOrEmpty(uniqueidlist.ToString)
						
						Dim sql As New Text.StringBuilder
						If successFlag =1 Then
						   
'							sql.Append("UPDATE XFW_ExpensePlanning_Watcher SET Wait_Flag=0,Processed_On='"& DateTime.Now &"',Requested_On='"& starttime &"' WHERE ActivityID='TRG2'  AND CostCenter In (" & uniqueidlist.ToString & ") ")
                           sql.Append("UPDATE " & EPSharedConstants.sWatcherTable & " SET Run_Flag=1,Processed_On='"& DateTime.Now & "' WHERE Wait_Flag=0 AND ActivityID='TRG2' AND CostCenter In (" & uniquecclist.ToString & ") ")
                           sql.Append("UPDATE " & EPSharedConstants.sWatcherTable & " SET Run_Flag=0,Wait_flag=0,Processed_On='"& DateTime.Now & "' WHERE Wait_Flag=1 AND ActivityID='TRG2' AND CostCenter In (" & uniquecclist.ToString & ") ")
						   
					   Else If successFlag = 3
							sql.Append("UPDATE " & EPSharedConstants.sWatcherTable & " SET Run_Flag=-1,Processed_On='"& DateTime.Now &"' WHERE  ActivityID='TRG2' AND CostCenter In (" & uniquecclist.ToString & ") ")
'						    sql = "UPDATE XFW_ExpensePlanning_Watcher SET Run_Flag=1,Wait_Flag=0,Processed_On='"& DateTime.Now &"',Requested_On='"& starttime &"' WHERE ActivityID='TRG2' AND Wait_Flag=1 AND Run_Flag=1  AND CostCenter In (" & uniquecclist.ToString & ") "
						Else If successFlag = 2
							sql.Append("UPDATE " & EPSharedConstants.sWatcherTable & " SET Run_Flag=2,Processed_On=null,Requested_On='"& DateTime.Now &"'  WHERE  ActivityID='TRG2' AND CostCenter In (" & uniquecclist.ToString & ") ")
						End If
'						BRAPI.ErrorLog.LogMessage(si,"sql update watcher",sql.ToString)
						If sql.Length>0
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								BRAPi.Database.ExecuteActionQuery(dbConnApp,sql.ToString,False,False)
						End Using
					    End If
					Else
'						BRAPI.ErrorLog.LogMessage(si, "No modified cost centers to update watcher")
					End If
'				End If
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		Private Function CheckStatusSubTask(ByVal si As SessionInfo, ByVal task_guid As Guid) As String
			Try
				Dim subtaskstatus As String = String.Empty
				Dim dt As DataTable = Nothing
				Dim sql As String = "SELECT TaskActivityStatus FROM " & EPSharedConstants.sTaskActivityTable & " WHERE UniqueID = '" & task_guid.ToString & "'"
				Using dbConnFW As DbConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
					dt = BRApi.Database.ExecuteSql(dbConnFW, sql, False)
				End Using
				
				If dt.Rows.Count = 1
					subtaskstatus = dt.Rows(0)("Status")
				End If
				
				Return subtaskstatus
					
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End  Function
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Export_Table">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.Export_Table
	Public Class MainClass
		Public Function ExportToExcel(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As DashboardExtenderArgs) As XFSelectionChangedTaskResult
			Dim selectionChangedTaskResult As New XFSelectionChangedTaskResult()
			
			Dim FileName As String = args.NameValuePairs.XFGetValue("FileName")
			Dim TableName As String = args.NameValuePairs.XFGetValue("Table")
			Dim FieldListParam As String = args.NameValuePairs.XFGetValue("FieldList")
			Dim FieldList As New List(Of String)
			FieldList = FieldListParam.Split(";").ToList
			
			Dim DEBUG As Boolean = False
			Dim statusReport As New Text.StringBuilder
			statusReport.AppendLine("Business Rule: ExportToExcel")
			If DEBUG Then 
				statusReport.AppendLine("FileName:" & FileName)
'				statusReport.AppendLine("Arg2: FieldList(0):" & FieldList(0).ToString)
'				statusReport.AppendLine("Arg3: TableName:" & TableName)
			End If		
			Try											
				'Export the records of table to CSV file
				Dim profileName As String = BRApi.Workflow.Metadata.GetProfile(si, si.WorkflowClusterPk.ProfileKey).Name
				Dim scenarioName As String = ScenarioDimHelper.GetNameFromID(si, si.WorkflowClusterPk.ScenarioKey)
				Dim timeName As String = BRApi.Finance.Time.GetNameFromId(si, si.WorkflowClusterPk.TimeKey)
				Dim getCustomTableExpression As String =  FieldList(1).ToString & " = '" & profileName & "' AND " & FieldList(2).ToString & " = '" & scenarioName & "' AND " & FieldList(3).ToString & " = '" & timeName & "'"
				
'				Dim dt As DataTable = BRApi.Database.GetCustomDataTable(si, "Application", TableName, getCustomTableExpression)	
				
				Dim dt As DataTable = Nothing
				Dim sql As New Text.StringBuilder
				sql.Append("SELECT * FROM [dbo].[XFW_NonWage_Register]")
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt = BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, False)   
				End Using
				
					
				If dt Is Nothing Then
					If DEBUG Then statusReport.AppendLine("No DataTable")
				Else
					If DEBUG Then statusReport.AppendLine("Rowcount In data table: " & dt.Rows.Count) 								
					Try					
						statusReport.AppendLine("Rowcount in data table: " & dt.Rows.Count)
						If dt.Rows.Count <> 0 Then
							Dim delimiter As String = ";"
							
							Dim sSubFolder As String = "\Groups\Everyone\"
							Dim AdminRespFolderPath As String = BRAPi.Utilities.GetFileShareFolder(si, FileShareFolderTypes.ApplicationIncoming, Nothing).Replace("\Incoming","") & sSubFolder
							Dim sTargetFileSW As StreamWriter =  New StreamWriter(AdminRespFolderPath & FileName)
							If DEBUG Then statusReport.AppendLine("targetfile=" & AdminRespFolderPath & FileName)
							
							
							'Add field header to output								
							sTargetFileSW.WriteLine(FieldListParam.Replace(";", delimiter))
							For Each oRow As DataRow In  dt.Rows
								Dim fieldCounter As Integer = 1
								For Each sField As String  In FieldList
									
									
									sTargetFileSW.Write(oRow(sField))
									If fieldCounter < FieldList.Count Then							
										sTargetFileSW.Write(delimiter)
										fieldCounter = fieldCounter + 1              
									Else							
										sTargetFileSW.WriteLine("")
									End If
								Next      
							Next oRow          

							sTargetFileSW.Close
						Else
							If DEBUG Then statusReport.AppendLine("No rows returned in data table")
						End If				
						selectionChangedTaskResult.IsOK = True
					Catch ex As Exception
						Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
						selectionChangedTaskResult.IsOK = False
						statusReport.AppendLine("Exception:" & ex.Message)
					End Try
				End If
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
				selectionChangedTaskResult.IsOK = False
				statusReport.AppendLine("GetCustomDataTable Exception:" & ex.Message)
			End Try				
				
			selectionChangedTaskResult.ShowMessageBox = True
			selectionChangedTaskResult.Message = statusReport.ToString
			Return selectionChangedTaskResult
		End Function		
	
	End Class
	
Public Class LineItem
				Public UniqueID As Guid
			    Public WFProfileName As String = ""
                Public WFScenarioName As String = ""
				Public WFTimeName As String = ""
				Public UserID As String = ""
				Public CostCenter As String = ""
				Public GL As String = ""
				Public LineItem = 0
				Public TF_1 As String = ""
				Public TF_2 As String = ""
				Public TF_3 As String = ""
				Public TF_4 As String = ""
				Public TF_5 As String = ""
				Public TF_6 As String = ""
				Public TF_7 As String = ""
				Public TF_8 As String = ""
				Public TF_9 As String = ""
				Public TF_10 As String = ""
				Public TF_11 As String = ""
				Public TF_12 As String = ""
				Public TF_13 As String = ""
				Public TF_14 As String = ""
				Public TF_15 As String = ""
				Public TF_16 As String = ""
				Public TF_17 As String = ""
				Public TF_18 As String = ""
				Public NF_1 = 0
				Public NF_2 = 0
				Public NF_3  = 0
				Public NF_4  = 0
				Public NF_5  = 0
				Public NF_6  = 0
				Public NF_7  = 0
				Public P01  = 0
				Public P02  = 0
				Public P03  = 0
				Public P04  = 0
				Public P05  = 0
				Public P06  = 0
				Public P07  = 0
				Public P08  = 0
				Public P09  = 0
				Public P10  = 0
				Public P11  = 0
				Public P12  = 0
				Public YearTotal  = 0
	End Class
	
	Public Class LineItemUpdate
				Public TF_1 As String = ""
				Public TF_2 As String = ""
				Public TF_3 As String = ""
				Public TF_4 As String = ""
				Public TF_5 As String = ""
				Public TF_6 As String = ""
				Public TF_7 As String = ""
				Public TF_8 As String = ""
				Public TF_9 As String = ""
				Public TF_10 As String = ""
				Public TF_11 As String = ""
				Public TF_12 As String = ""
				Public TF_13 As String = ""
				Public TF_14 As String = ""
				Public TF_15 As String = ""
				Public TF_16 As String = ""
				Public TF_17 As String = ""
				Public TF_18 As String = ""
				Public NF_1 = 0
				Public NF_2 = 0
				Public NF_3  = 0
				Public NF_4  = 0
				Public NF_5  = 0
				Public NF_6  = 0
				Public NF_7  = 0
				Public P01  = 0
				Public P02  = 0
				Public P03  = 0
				Public P04  = 0
				Public P05  = 0
				Public P06  = 0
				Public P07  = 0
				Public P08  = 0
				Public P09  = 0
				Public P10  = 0
				Public P11  = 0
				Public P12  = 0
				Public YearTotal  = 0
			
	End Class
	
	
	
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="FCP_Anaplan_Async_GET">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="Fcp_Integration_Utility" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.FCP_Anaplan_Async_GET
	Public Class MainClass
		
		Dim WinNoUnique As New List(Of Integer)
		Dim MgrWinNoUnique As New List(Of Integer)
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
		
			Dim fcpIntegrator As OneStream.BusinessRule.Extender.Fcp_Integration_Utility.MainClass = Nothing
			Dim jobIDAutomation As String = args.NameValuePairs.XFGetValue("jobID",String.Empty)
			Dim FiscalMonth As String = args.NameValuePairs.XFGetValue("currentMonth",String.Empty)
			Dim FiscalYear As String = args.NameValuePairs.XFGetValue("currentYear",String.Empty)
			'This wont compile:
			'Dim Stopwatch As New Stopwatch()
			'Stopwatch.Start()
			Dim FscalMonth As String = String.Empty
			
			Select FiscalMonth
				Case "M1"
					FscalMonth = "Per01"
				Case "M2"
					FscalMonth = "Per02"
				Case "M3"
					FscalMonth = "Per03"	
				Case "M4"
					FscalMonth = "Per04"	
				Case "M5"
					FscalMonth = "Per05"	
				Case "M6"
					FscalMonth = "Per06"
				Case "M7"
					FscalMonth = "Per07"
				Case "M8"
					FscalMonth = "Per08"	
				Case "M9"
					FscalMonth = "Per09"	
				Case "M10"
					FscalMonth = "Per10"
				Case "M11"
					FscalMonth = "Per11"
				Case "M12"
					FscalMonth = "Per12"
			End Select	
			
			'Dim objectName As String = $"FCP_PDD_WORKFORCE_HR_PPE?FISCAL_PERIOD_NBR={FscalMonth}&FISCAL_YR_NBR={FiscalYear}" 
			Dim objectName As String = $"FCP_SS_TECH_ANAPLAN_MKT_AOP?FISCAL_PERIOD_NBR={FscalMonth}&FISCAL_YR_NBR={FiscalYear}" 
			
			Try
					Dim sql As New Text.StringBuilder			
					Dim endPoint As String = "https://fcp-os-mesh-gcp-01-dev.fin-dpa-fcp.k8s.glb.us.walmart.net/"
					Dim consumerID As String = "8359e569-eaf2-48fb-b6b9-2235f95ae735"
					Dim svcEnv As String = "DPA-FCP-DEV"
					Dim svcName As String = "DPA-FCP-API-OS"
					
							
					Dim integrationArgs As New ExtenderArgs
					integrationArgs.NameValuePairs.Add("ConsumerID", consumerID)
					integrationArgs.NameValuePairs.Add("SvcEnv", svcEnv)
					integrationArgs.NameValuePairs.Add("SvcName", svcName)
					fcpIntegrator = New OneStream.BusinessRule.Extender.Fcp_Integration_Utility.MainClass(si, api, integrationArgs)
					
					endPoint += $"getData/{objectName}"
					
					brapi.ErrorLog.LogMessage(si, "endPoint: " & endPoint)
					
					Dim dt As DataTable = Nothing
					dt = fcpIntegrator.GetDataTableFromFcp(si, endPoint).Data()
					Me.PrintDT(si, dt, "anaplan dt")
					
'					If dt IsNot Nothing AndAlso dt.Rows.Count > 0 Then
'						Dim colLog As New Text.StringBuilder
						
'						For Each col As DataColumn In dt.Columns
'							colLog.Append(col.ColumnName & ",")
'						Next
						
''						brapi.ErrorLog.LogMessage(si, "PDD Columns Raw", colLog.ToString)
						
						
						
'						Dim WFProfileName As String = BRApi.Workflow.Metadata.GetProfile(si, si.WorkflowClusterPk.ProfileKey).Name
'						Dim WFScenarioName As String = ScenarioDimHelper.GetNameFromID(si, si.WorkflowClusterPk.ScenarioKey)
'						Dim WFTimeName As String = BRApi.Finance.Time.GetNameFromId(si, si.WorkflowClusterPk.TimeKey)
'						Dim fdt As New DataTable 
'						Dim dtMapping As DataTable = Nothing

					
						
'						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'							'BRApi.Database.ExecuteSql(dbConnApp, "DELETE FROM XFW_WMT_PLP_ADMIN_VBO_REGISTER WHERE WFScenarioName = '" & WFScenarioName & "' AND WFTimeName = '" & WFTimeName & "'  ", True)
'							BRApi.Database.ExecuteSql(dbConnApp, "DELETE FROM XFW_NonWage_REGISTER WHERE WFScenarioName = '" & WFScenarioName & "' AND WFTimeName = '" & WFTimeName & "'  ", True)
'							dtMapping = BRApi.Database.ExecuteSql(dbConnApp, "SELECT * FROM XFW_WMT_PDD_INTEGRATION_MAPPING ", False)
'						End Using
						
'							Dim colLog1 As New Text.StringBuilder
						
'							If dtMapping IsNot Nothing AndAlso dtMapping.Rows.Count > 0 Then
'								For Each DRow As DataRow In dtMapping.Rows
'									Dim newColumn As New DataColumn()
								
'									newColumn.ColumnName = DRow("PLP_CODE")
'									colLog1.Append(DRow("PLP_CODE") & ", ")
									
									
'									If DRow("PLP_CODE").Equals("WFProfileName") Then
'										newColumn.DefaultValue = WFProfileName
'									ElseIf DRow("PLP_CODE").Equals("WFScenarioName") Then
'										newColumn.DefaultValue = WFScenarioName
'									ElseIf 	DRow("PLP_CODE").Equals("WFTimeName") Then
'										newColumn.DefaultValue = WFTimeName
'									ElseIf 	DRow("PLP_CODE").Equals("Status") Then
'										newColumn.DefaultValue = "Baseline"	
'									ElseIf 	DRow("PLP_CODE").Equals("HirePeriod") Then
'										newColumn.DefaultValue = 1		
'									ElseIf DRow("PLP_CODE_DATA_TYPE").Equals("int") Then
'										newColumn.DefaultValue = 0
'									ElseIf DRow("PLP_CODE_DATA_TYPE").Equals("nvarchar") Then	
'										newColumn.DefaultValue = String.Empty
'									ElseIf 	DRow("PLP_CODE_DATA_TYPE").Equals("decimal") Then
'										newColumn.DefaultValue = Decimal.Zero
'									ElseIf 	DRow("PLP_CODE_DATA_TYPE").Equals("date") Then
'										newColumn.DefaultValue = CType("01-01-1990",Date)
'									End If	
										
									
									
'									newColumn.DataType = GetNetType(si, DRow("PLP_CODE_DATA_TYPE"))
'									newColumn.AllowDBNull = False
									
'									fdt.Columns.Add(newColumn)
'								Next
'							End If	
						
							
''							brapi.ErrorLog.LogMessage(si, "fdt Columns Raw", colLog1.ToString)
''							colLog1.Clear
							
							
'							Dim dtMappingRow As DataRow()
'							dtMappingRow = dtMapping.Select("PDD_CODE <> '' ")
							
							
''							For Each e As DataRow In dtMappingRow
''								colLog1.Append(e("PLP_CODE") & ", ")
''							Next	
							
''							brapi.ErrorLog.LogMessage(si, "dtMappingRow Row", colLog1.ToString)
							
							
							
'							Dim EOPRegisterID As Integer = 0
'							'Prepare fdt by adding rows from PDD response
'							For Each fRow As DataRow In dt.Rows
'								Dim newRow As Datarow = fdt.NewRow()
'									For Each PLPCODE As DataRow In dtMappingRow
'										If Not IsDBNull(fRow(PLPCODE("PDD_CODE"))) Then
'											If PLPCODE("PDD_CODE").Equals("HIRE_MONTH") Then
'												newRow.Item(PLPCODE("PLP_CODE")) = fRow(PLPCODE("PDD_CODE")).ToString.Replace("P","")
'											ElseIf PLPCODE("PDD_CODE").Equals("BASE_PAY") Or PLPCODE("PDD_CODE").Equals("GROSS_PAY") Then
'												newRow.Item(PLPCODE("PLP_CODE")) = Double.Parse(fRow(PLPCODE("PDD_CODE")), CultureInfo.InvariantCulture)
'											ElseIf PLPCODE("PDD_CODE").Equals("EXPAT_IND") Then
'												If fRow(PLPCODE("PDD_CODE")).Equals("Y") Then
'													newRow.Item(PLPCODE("PLP_CODE")) = 1
'												Else
'													newRow.Item(PLPCODE("PLP_CODE")) = 0
'												End If	
'											ElseIf PLPCODE("PDD_CODE").Equals("SMART_SPEND_CC") Then	
'												newRow.Item(PLPCODE("PLP_CODE")) = fRow(PLPCODE("PDD_CODE")).ToString.Replace(".","")
'											ElseIf PLPCODE("PDD_CODE").Equals("WIN_NBR") And fRow(PLPCODE("PDD_CODE")).ToString.Contains("EOP") Then
'												EOPRegisterID += 1
'												newRow.Item(PLPCODE("PLP_CODE")) = "EOP" + EOPRegisterID.XFToString.PadLeft(6, "0"c)
'												newRow.Item("Code4") = "Open Position - EOP" + EOPRegisterID.XFToString.PadLeft(6, "0"c)
'											ElseIf PLPCODE("PDD_CODE").Equals("TRANSACTIONAL_CURRENCY") And fRow(PLPCODE("PDD_CODE")).Equals("MXP") Then
'												newRow.Item(PLPCODE("PLP_CODE")) = "MXN"
'											Else	
'												newRow.Item(PLPCODE("PLP_CODE")) = fRow(PLPCODE("PDD_CODE"))
'											End If	
'										Else
'											If PLPCODE("PLP_CODE_DATA_TYPE").Equals("Int") Then
'												newRow.Item(PLPCODE("PLP_CODE")) = 0
'											ElseIf PLPCODE("PLP_CODE_DATA_TYPE").Equals("nvarchar") Then
'												newRow.Item(PLPCODE("PLP_CODE")) = String.Empty
'											ElseIf PLPCODE("PLP_CODE_DATA_TYPE").Equals("decimal") Then
'												newRow.Item(PLPCODE("PLP_CODE")) = Decimal.Zero
'											ElseIf PLPCODE("PLP_CODE_DATA_TYPE").Equals("date") Then
'												newRow.Item(PLPCODE("PLP_CODE")) = CType("01-01-1990",Date)
'											End If	
'										End If	
'									Next
'								fdt.Rows.Add(newRow)	
'							Next	
							
''							brapi.ErrorLog.LogMessage(si, "fdc Row Count:" & fdt.Rows.Count.XFToString )
							
							
							
'							Dim anonymize As Boolean = True
							
'							If anonymize Then
'								Dim randomClass As New Random(1)
								
'								For Each R As DataRow In fdt.Rows
									
'									Dim WIN_NBR
'									Dim MGR_WIN_NBR
									
'									If R("RegisterID").ToString.Contains("EOP") Then
'										WIN_NBR = R("RegisterID")
'										MGR_WIN_NBR = R("InCode")
'									Else
'										WIN_NBR = GetUniqueWinNo(si, randomClass)
'										MGR_WIN_NBR = GetUniqueMgrWinNo(si, randomClass)
'									End If
									
'									R("Code4") = WIN_NBR & "-FirstName LastName"
'									R("RegisterID") = WIN_NBR
'									R("NCode6") = "Sup. " & MGR_WIN_NBR & "-MFirstName MLastName"
'									R("InCode") = MGR_WIN_NBR
'									R("NCode3") = GetRandomPay(si, R("NCode3"))
'									R("Wage") = GetRandomPay(si, R("Wage"))
'									R("Bonus") = GetRandomPay(si, R("Bonus"))
									
'								Next	
							
'							End If		
						
''						Me.PrintDT(si, fdt, "fdt PDD Table Print")
''						Me.PrintDTFile(si, fdt)

'						BRApi.Database.SaveCustomDataTable(si, "Application", "XFW_WMT_PLP_ADMIN_VBO_REGISTER", fdt, True)

'						'This wont compile:
'						'Stopwatch.Stop()
'						sql.Clear
						
'						Dim Fmessage As String = String.Empty
'						If fdt IsNot Nothing AndAlso fdt.Rows.Count > 0 Then
'							Fmessage = "Records: " & fdt.Rows.Count 
'						Else
'							Fmessage = "Records: 0 "
'						End If	
						
''						Fmessage  = Fmessage & Environment.NewLine & "Job Completed In: " & Stopwatch.Elapsed.Minutes & " Minutes"
'						sql.AppendLine("UPDATE XFW_WMT_PDD_CONTROL_TABLE SET Status = 'Completed', Detail = '" & Fmessage & "' WHERE ID = '" & jobIDAutomation & "' ")
							
'					Else
'						sql.AppendLine("UPDATE XFW_WMT_PDD_CONTROL_TABLE SET Status = 'Error', Detail = 'No Data Exist' WHERE ID = '" & jobIDAutomation & "' ")
'					End If	
'						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'								BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)
'						End Using
				
				Return Nothing
			Catch ex As Exception
				
'					Dim sql As String = "UPDATE XFW_WMT_PDD_CONTROL_TABLE SET Status = 'Error', Detail = '" & ex.Message & "' WHERE ID = '" & jobIDAutomation & "' "
'					Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'							BRAPi.Database.ExecuteSql(dbConnApp, sql, True)
'					End Using
					Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
			
				
			
		End Function
		
		Public Function GetNetType(ByVal si As SessionInfo, ByVal sqlTypeName As String) As Type
		Try	
			Dim typeMap As New Dictionary(Of String, Type)
			
				typeMap.Add("nvarchar", GetType(String))
				typeMap.Add("int", GetType(Integer))
				typeMap.Add("varchar", GetType(String))
				typeMap.Add("date", GetType(Date))
				typeMap.Add("decimal", GetType(Decimal))
				
            Return typeMap.Item(sqlTypeName)
		Catch ex As Exception                
	   		Throw ErrorHandler.LogWrite(si,New XFException(si,ex))
		End Try		
        End Function
		
		
		
		
		
		Private Function GetUniqueMgrWinNo(ByVal si As SessionInfo, ByRef randomClass As Random) As Integer
			Try
				
				Dim randomMgrUniqueNumber As Integer = 0
				Dim i As Integer = 0
				
					randomMgrUniqueNumber = randomClass.Next(100000000, 999999999)
					
					While i < 15 
						If MgrWinNoUnique.Contains(randomMgrUniqueNumber)
							randomMgrUniqueNumber = randomClass.Next(100000000, 999999999)
						Else 
							Exit While
						End If
						i += 1
					End While	
					
					MgrWinNoUnique.Add(randomMgrUniqueNumber)
			
				Return randomMgrUniqueNumber
			Catch ex As Exception                
	   			Throw ErrorHandler.LogWrite(si,New XFException(si,ex))
		End Try	
		End Function
		
		Private Function GetUniqueWinNo(ByVal si As SessionInfo, ByRef randomClass As Random) As Integer
			Try
				Dim randomUniqueNumber As Integer = 0
				Dim i As Integer = 0
				
					randomUniqueNumber = randomClass.Next(100000000, 999999999)
					
					While i < 15
						If WinNoUnique.Contains(randomUniqueNumber)
							randomUniqueNumber = randomClass.Next(100000000, 999999999)
						Else 
							Exit While
						End If
						i += 1
					End While	
					
					WinNoUnique.Add(randomUniqueNumber)
			
				Return randomUniqueNumber
			Catch ex As Exception                
	   			Throw ErrorHandler.LogWrite(si,New XFException(si,ex))
		End Try	
		End Function
		
		Private Function GetRandomPay(ByVal si As SessionInfo, ByVal Pay As Decimal) As Decimal
		Try	
			Dim Interval As Decimal = 30
			Dim randomClass As New Random(1)
			Dim uniqueNumber As New List(Of Integer)()
			Dim randomNumber As Integer
				
			randomNumber = randomClass.Next(Math.Round(Pay * ((100 - Interval)/100),0), Math.Round(Pay * ((100 + Interval)/100)))	
			
			
			Return randomNumber
			Catch ex As Exception                
	   			Throw ErrorHandler.LogWrite(si,New XFException(si,ex))
		End Try	
		End Function
		
		
		Private Sub PrintDT(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal Desc As String)
		Try
			 'Print Table
			 Dim dtprint As New Text.StringBuilder
				 For Each dc As DataColumn In dt.Columns
					dtprint.Append(dc.ColumnName & ",")
				 Next
				 dtprint.Remove(dtprint.Length - 1, 1)
				 dtprint.Append(Environment.NewLine)
				 For Each dr As DataRow In dt.Rows										
					For Each dc As DataColumn In dt.Columns
						dtprint.Append(dr(dc.ColumnName) & ",")
					Next
					dtprint.Remove(dtprint.Length - 1, 1)
					dtprint.Append(Environment.NewLine)
				 Next
				 BRApi.ErrorLog.LogMessage(si, Desc,dtprint.ToString)
		Catch ex As Exception                
	   		Throw ErrorHandler.LogWrite(si,New XFException(si,ex))
		End Try		 
		End Sub	
		
		Private Function PrintDTFile(ByVal si As SessionInfo, ByVal dt As DataTable)
			
			If dt IsNot Nothing AndAlso dt.Rows.Count <> 0 Then
						
				Dim everyonePath As String = BRApi.FileSystem.GetFileShareFolder(si, FileShareFolderTypes.ApplicationRoot, Nothing) & "\" & si.AppName.Replace(" ", String.Empty) & "\Groups\Everyone\"
					Using fdxDataFile As System.IO.StreamWriter = New StreamWriter(everyonePath & "PDD_Export.csv", False)
						
'									brapi.ErrorLog.LogMessage(si,everyonePath)
							Dim writeThis As New Text.StringBuilder
							For Each dc As DataColumn In dt.Columns
									writeThis.Append(dc.ColumnName)
									writeThis.Append(",")
							Next
							'Remove last comma
							writeThis.Remove(writeThis.Length - 1, 1)
							fdxDataFile.WriteLine(writeThis.ToString)
							
							writeThis.Clear						
							For Each dr As DataRow In dt.Rows										
								For Each dc As DataColumn In dt.Columns
									writeThis.Append(dr(dc.ColumnName) & ",")
								Next
								writeThis.Remove(writeThis.Length - 1, 1)										
								fdxDataFile.WriteLine(writeThis.ToString)
								writeThis.Clear
							Next
							fdxDataFile.Close
					End Using
			
			End If
			
			
			Return Nothing
			
		End Function	
				
	End Class
	
	
	
	
	
	
	
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="FCP_Async_GET_ANAPLAN_MKT">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_GATEWAY" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_VARIABLES" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_CurrencyConversion" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_SharedConstants" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="FCP_INTEGRATION_UTIL" />
            </referencedAssemblies>
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics
Imports System.Data.SqlClient
Imports OneStream.BusinessRule.DashboardStringFunction.EP_SharedConstants
Imports FcpIntegrationUtil = OneStream.BusinessRule.Extender.FCP_INTEGRATION_UTIL
#End Region
#Region "Rule Change Mgmt"

'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 -    - Spreadsheet functions for PK04 Itemized Load Forms
	'Mods:		
	'--------------------------------------------------------------------------------------------------------------------------------------------

#End Region

Namespace OneStream.BusinessRule.Extender.FCP_Async_GET_ANAPLAN_MKT
	Public Class MainClass
		#Region "Main"
		Dim DEBUG As Boolean = False
		Public Shared sMainRegExpenseTable As String = EPSharedConstants.sMainRegExpenseTable
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep, ExtenderFunctionType.Unknown
						
						
						Dim fcpIntegrator As FcpIntegrationUtil.MainClass = Nothing
'						Dim endPoint As String = "https://fcp-os-mesh-gcp-01-dev.fin-dpa-fcp.k8s.glb.us.walmart.net/"
'						Dim consumerID As String = "8359e569-eaf2-48fb-b6b9-2235f95ae735"
'						Dim svcEnv As String = "DPA-FCP-DEV"
'						Dim svcName As String = "DPA-FCP-API-OS"
						Dim modulename As String = "FCP_SS_TECH_ANAPLAN_MKT_AOP"
						fcpIntegrator = New FcpIntegrationUtil.MainClass(si,  moduleName)
						Dim params = New Dictionary(Of String, String)
						
						Dim dt_merged As New DataTable
						
						Dim FiscalMonth_List As New List(Of String) ({"Per01","Per02","Per03","Per04","Per05","Per06","Per07","Per08","Per09","Per10","Per11","Per12"})
'						Dim FiscalYear As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "AOP_Year")
						Dim FiscalYear As String="2022"
						Dim counter As Integer = 1
						
						
						For Each fiscal_month In FiscalMonth_List
							
'							Dim endPoint_local As String = endPoint
'							Dim objectName As String = $"FCP_SS_TECH_ANAPLAN_MKT_AOP?FISCAL_PERIOD_NBR={fiscal_month}&FISCAL_YR_NBR={FiscalYear}" 
'							Dim integrationArgs As New ExtenderArgs
'							integrationArgs.NameValuePairs.Add("ConsumerID", consumerID)
'							integrationArgs.NameValuePairs.Add("SvcEnv", svcEnv)
'							integrationArgs.NameValuePairs.Add("SvcName", svcName)
'							fcpIntegrator = New OneStream.BusinessRule.Extender.FCP_INTEGRATION_UTIL.MainClass(si, api, integrationArgs)
						
'							endPoint_local += $"getData/{objectName}"
							
'							If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "endpoint", endPoint_local)
							params.Add("FISCAL_PERIOD_NBR", fiscal_month)
							params.Add("FISCAL_YR_NBR", FiscalYear)
							Dim dt As New DataTable
							dt = fcpIntegrator.GetDataTableFromFcp(si, params).Data()
							
'							If DEBUG Then Me.PrintDT(si, dt, "dt anaplan mkt-"&fiscal_month)
							
							If dt IsNot Nothing AndAlso dt.Rows.Count>0
								dt.Columns.RemoveAt(0)
								dt_merged.Merge(dt)
							Else 
								Throw New Exception("No Data Exists")
							End If	
							params.Clear()
						Next
'						If DEBUG Then Me.PrintDT(si, dt_merged, "dt_merged")
						Dim dt_transorm As Datatable = TranformDataTable(si,dt_merged, "FISCAL_PERIOD_NBR", "ENTITY", "ACCT", "CENTER_TYPE", "FISCAL_YR_NBR", "AOP")
                       
						If dt_transorm IsNot Nothing AndAlso dt_transorm.Rows.Count > 0 Then
							Dim scenarioName As String = ScenarioDimHelper.GetNameFromID(si, si.WorkflowClusterPk.ScenarioKey)
							Dim wfname As String = String.Empty
							'transform dt into loadable format
							Dim reg_dt As New DataTable
							reg_dt = Me.TransformregDT(si, dt_transorm, scenarioName, wfname)
'							Dim planyear As Integer =BRApi.Finance.Time.GetNameFromId(si, si.WorkflowClusterPk.TimeKey).XFConvertToInt
                            Dim planyear As Integer=2022
							If DEBUG Then Me.PrintDT(si,reg_dt,"fcp_to_EXP dt2:")
							Dim Obj = New OneStream.BusinessRule.Extender.EP_CurrencyConversion.MainClass
							
							Dim dt_clone As DataTable=Obj.CurrencyConversion(si,planyear,reg_dt,"Anaplan")
							
							 If DEBUG Then Me.PrintDT(si, dt_clone, "dt_clone")
							Dim gllist As New List(Of String)({"A5301035","A5301050","A5607002","A5301005","A5301045"})
							'load to expense register
							Dim dt_audit_delete As DataTable
							Dim sql As New Text.StringBuilder
							Dim sql_audit As New Text.StringBuilder
							Dim action As String= String.Empty

							sql_audit.Append("Select * FROM [dbo].[" & sMainRegExpenseTable & "]  Where CostCenter='US09357' AND GL IN ('A5301035','A5301050','A5607002','A5301005','A5301045')and TF_2 <> 'CT_F'")
							If sql_audit.Length>0
							Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
									dt_audit_delete=	BRAPi.Database.ExecuteSql(dbConnApp,sql_audit.ToString , False)
							End Using
							
							action="'Delete'"
							If dt_audit_delete IsNot Nothing AndAlso dt_audit_delete.Rows.Count > 0 Then
							UpdateAuditLog(si,dt_audit_delete,action)
							End If
							End If
							action="'Add'"
							sql.Append("DELETE FROM [" & sMainRegExpenseTable & "] Where CostCenter='US09357' AND GL IN ('A5301035','A5301050','A5607002','A5301005','A5301045')and TF_2 <> 'CT_F'")
							Using dbExtConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								BRAPi.Database.ExecuteActionQuery(dbExtConn, sql.ToString, False, False)
								Using objSQLBulkCopy As New SqlBulkCopy(dbExtConn.ConnectionString)
									For Each dc As DataColumn In dt_clone.Columns
				                        objSQLBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName)
				                    Next
				                    objSQLBulkCopy.DestinationTableName = sMainRegExpenseTable 
				                    objSQLBulkCopy.WriteToServer(dt_clone)
								End Using
							End Using
						
							UpdateAuditLog(si,dt_clone,action)
							
						End If
						
						 If dt_transorm IsNot Nothing AndAlso dt_transorm.Rows.Count>0
							PushDTToQueue(si, dt_transorm)
							
						End If	
'						If DEBUG Then Me.PrintDT(si, dt_transorm, "dt_transorm")
'						Dim transformed_dt As DataTable = Nothing
'						transformed_dt = Me.TransformDT(si, dt_merged)
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		#Region "UpdateAuditLog"
		Public Sub UpdateAuditLog(ByVal si As SessionInfo, ByVal dt As DataTable,ByVal action As String)
			Try
				Dim tableName As String = "XFW_NonWage_Register_AuditLog"
				
'				dt.Columns("UniqueID").DataType=GetType(String)
				dt.Columns.Add("Action")
				dt.Columns("Action").Expression=  action
'				dt.Columns("UniqueID").DataType=GetType(String)
				dt.Columns.Add("Location")
				dt.Columns("Location").Expression="'ANAPLAN MKT FCP'"
				dt.Columns.Add("Updated_On", GetType(System.DateTime))
				dt.Columns("Updated_On").Expression= "'" & DateTime.Now & "'"
				Using dbExtConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)		
				Using objSQLBulkCopy As New SqlBulkCopy(dbExtConn.ConnectionString)
						
						
						
						
	                    For Each dc As DataColumn In dt.Columns
	                        objSQLBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName)
	                    Next
	                    objSQLBulkCopy.DestinationTableName = "XFW_NonWage_Register_AuditLog"
	                    objSQLBulkCopy.WriteToServer(dt)
											
				End Using	
				End Using
'				BRApi.Database.SaveCustomDataTable(si, "Application", tableName, dt, False)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub	
		#End Region
		#Region "TransformDT Function"
		Private Function TransformDT(ByVal si As SessionInfo, ByVal dt As DataTable) As DataTable
			Try
				Dim exp_dt As DataTable = Nothing
				Dim sql As String = "SELECT * FROM " & sMainRegExpenseTable & " WHERE 1=0"
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					exp_dt = BRAPi.Database.ExecuteSql(dbConnApp,sql,False)   
				End Using
				Dim transformed_dt As DataTable= Nothing
				transformed_dt = exp_dt.Clone()
				
				If dt IsNot Nothing AndAlso dt.Rows.Count>0 Then
					For Each dr In dt.Rows
						Dim R As DataRow = transformed_dt.NewRow()
						R("UniqueID") = Guid.NewGuid.ToString
						R("WFProfileName") = "Anaplan Marketing"
						R("WFScenarioName") = "Plan_Working"
						R("WFTimeName") = dr("FISCAL_YR_NBR")
						R("CostCenter") = dr("ENTITY")
						R("GL") = dr("ACCT")
						R("TF_2") = dr("CENTER_TYPE")
						R("TF_3") = dr("TF_3")
						
						If dr("FISCAL_PERIOD_NBR") = "Per01"
							R("P01") = dr("AOP")
						End If	
							
						
						transformed_dt.Rows.Add(R)
					Next
				End If	
				
'				If DEBUG Then Me.PrintDT(si, transformed_dt, "transformed_dt ")
				
			Return transformed_dt
			Catch ex As Exception                
		   		Throw ErrorHandler.LogWrite(si,New XFException(si,ex))
			End Try	
		End Function
		#End Region
		#Region "TranformDataTable Function"
		Private Function TranformDataTable(ByVal si As SessionInfo,ByVal table As DataTable, ByVal columnX As String, ByVal columnA As String,ByVal columnB As String,ByVal columnC As String,ByVal columnD As String, ByVal columnZ As String) As DataTable
'		   	If DEBUG Then BRAPI.ErrorLog.LogMessage(si,"TranformDataTablefun")
			Dim returnTable As New DataTable()
		   	If columnX = "" Then
		            columnX = table.Columns(0).ColumnName
		   	End If

   
		        returnTable.Columns.Add(columnA)
				returnTable.Columns.Add(columnB)
				returnTable.Columns.Add(columnC)
				returnTable.Columns.Add(columnD)

		        
		        Dim columnXValues As New List(Of String)()

		        For Each dr As DataRow In table.Rows
		            Dim columnXTemp As String = dr(columnX).ToString()
		            If Not columnXValues.Contains(columnXTemp) Then
		                
		                columnXValues.Add(columnXTemp)
		                returnTable.Columns.Add(columnXTemp)
		            End If
		        Next

		       
		        If columnA <> "" And columnB <> "" And columnC <> "" And columnD <> "" And columnZ <> "" Then
		            
'                    Dim columnYValues As New List(Of List(Of String))
'		            For Each dr As DataRow In table.Rows
'						Dim columnAValues As New List(Of String)
'						columnAValues.Add(dr(columnA))
'						columnAValues.Add(dr(columnB))
'						columnAValues.Add(dr(columnC))
'						columnAValues.Add(dr(columnD))
'		                If Not columnYValues.Contains(columnAValues)
'							columnYValues.Add(columnAValues)
'		                End If
						
'		            Next
					Dim view As New DataView(table)
					Dim dt_anaplan As DataTable = view.ToTable(True,"ENTITY","ACCT","CENTER_TYPE","FISCAL_YR_NBR")
'					If DEBUG Then Me.PrintDT(si, dt_anaplan, "dt_anaplan")
'		            For Each columnYValue As List(Of String) In columnYValues
'		                Dim drReturn As DataRow = returnTable.NewRow()
'		                drReturn(0) = columnYValue(0)
'						drReturn(1) = columnYValue(1)
'						drReturn(2) = columnYValue(2)
'						drReturn(3) = columnYValue(3)
'						Dim view As New DataView(table)
'						Dim dt_queue As DataTable = view.ToTable(False,"ENTITY","ACCT","CENTER_TYPE","FISCAL_YR_NBR","FISCAL_PERIOD_NBR")
					Dim logfile As New Text.StringBuilder
					For Each dr1 As DataRow In dt_anaplan.Rows
'						Dim flag As Boolean=Me.RACIVALIDATE(si,dr1("ENTITY"), dr1("ACCT"),dr1("CENTER_TYPE"))
						
'						If flag=False
'							logfile.AppendLine(dr1("ENTITY") & dr1("ACCT") & dr1("CENTER_TYPE"))
'						Else
								Dim drReturn As DataRow = returnTable.NewRow()
								drReturn(0) = dr1("ENTITY")
								drReturn(1) = dr1("ACCT")
								drReturn(2) = dr1("CENTER_TYPE")
								drReturn(3) = dr1("FISCAL_YR_NBR")
				                Dim rows As DataRow() = table.Select(" ENTITY =  '" & dr1("ENTITY") & "' And ACCT = '" & dr1("ACCT") & "'  And CENTER_TYPE = '" & dr1("CENTER_TYPE") & "'  And FISCAL_YR_NBR = '" & dr1("FISCAL_YR_NBR") & "' " )

				               
				                For Each dr As DataRow In rows
									
				                    Dim rowColumnTitle As String = dr(columnX).ToString()

				                   	drReturn(rowColumnTitle) = dr(columnZ)
				                  
				                
				                Next

		                		returnTable.Rows.Add(drReturn)
'           			 End If
            Next
			 If Debug Then BRAPI.ErrorLog.LogMessage(si,"Invalid RACI",logfile.ToString)
	        Else
				
	            Throw New Exception("The columns to perform inversion are not provided")
	            
	        End If
'			returnTable = returnTable.DefaultView.ToTable(True, "ENTITY", "ACCT", "CENTER_TYPE","FISCAL_YR_NBR","Per01","Per02","Per03","Per04","Per05","Per06","Per07","Per08","Per09","Per10","Per11","Per12")
'	       	Me.PrintDT(si, returnTable, "returnTable_anaplan")
			Return returnTable
			
	    End Function
		#End Region
		#Region "PrintDT Function"
		Private Sub PrintDT(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal Desc As String)
		Try
			 'Print Table
			 Dim dtprint As New Text.StringBuilder
				 For Each dc As DataColumn In dt.Columns
					dtprint.Append(dc.ColumnName & ",")
				 Next
				 dtprint.Remove(dtprint.Length - 1, 1)
				 dtprint.Append(Environment.NewLine)
				 For Each dr As DataRow In dt.Rows										
					For Each dc As DataColumn In dt.Columns
						dtprint.Append(dr(dc.ColumnName).ToString & ",")
					Next
					dtprint.Remove(dtprint.Length - 1, 1)
					dtprint.Append(Environment.NewLine)
				 Next
				 BRApi.ErrorLog.LogMessage(si, Desc,dtprint.ToString)
		Catch ex As Exception                
	   		Throw ErrorHandler.LogWrite(si,New XFException(si,ex))
		End Try		 
		End Sub	
		#End Region
		#Region "TransformregDT Function"
		Private Function TransformregDT(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal scenarioName As String,ByVal wfname As String) As DataTable
			Try	
						'select required column
						Dim view As New DataView(dt)
									

						dt = view.ToTable(False,"ENTITY", "ACCT", "CENTER_TYPE","FISCAL_YR_NBR","Per01","Per02","Per03","Per04","Per05","Per06","Per07","Per08","Per09","Per10","Per11","Per12")
						
'						rename colmuns 
						dt.Columns("ENTITY").ColumnName = "CostCenter"
						dt.Columns("ACCT").ColumnName = "GL"
						dt.Columns("CENTER_TYPE").ColumnName = "TF_2"
						dt.Columns("Per01").ColumnName = "P01"
						dt.Columns("Per02").ColumnName = "P02"
						dt.Columns("Per03").ColumnName = "P03"
						dt.Columns("Per04").ColumnName = "P04"
						dt.Columns("Per05").ColumnName = "P05"
						dt.Columns("Per06").ColumnName = "P06"
						dt.Columns("Per07").ColumnName = "P07"
						dt.Columns("Per08").ColumnName = "P08"
						dt.Columns("Per09").ColumnName = "P09"
						dt.Columns("Per10").ColumnName = "P10"
						dt.Columns("Per11").ColumnName = "P11"
						dt.Columns("Per12").ColumnName = "P12"
						dt.Columns("FISCAL_YR_NBR").ColumnName = "WFTimeName"
						
						'prepare dt to push to expense register
						Dim VBOCCdict As New Dictionary(Of String, String)
						Dim VBOCCdt As New DataTable
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							VBOCCdt = BRAPi.Database.ExecuteSql(dbConnApp,"SELECT WORKFLOW_PROFILE_VBO,COST_CENTER FROM [dbo].[" & EPSharedConstants.sVBOCCMappingTable & "]", False)   
						End Using	
						For Each VBOCCdr As DataRow In VBOCCdt.Rows
							Try
								VBOCCdict.Add(VBOCCdr("COST_CENTER"),VBOCCdr("WORKFLOW_PROFILE_VBO"))
							Catch ex As Exception
								Continue For
							End Try
						Next
						Dim CC_Cur_Dict As New Dictionary(Of String, String)
						Dim fullcclist_meminfo As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "ENT", "E#Walmart_Total_Company.Base", True)														
						For Each ccname As MemberInfo In fullcclist_meminfo
								CC_Cur_Dict.Add(ccname.Member.Name,BRApi.Finance.Entity.GetLocalCurrency(si, ccname.Member.MemberId).Name)
						 Next	
						dt.Columns.Add("UniqueID",GetType(String))
						dt.Columns.Add("TF_3")
						dt.Columns.Add("WFProfileName")
						dt.Columns.Add("WFScenarioName")
						dt.Columns.Add("LineItem")
						dt.Columns.Add("TF_11")
						dt.Columns.Add("UserID")
						dt.Columns.Add("YearTotal")
						
						If dt.Rows.Count > 0
							For Each dr As DataRow In dt.Rows
								dr("UniqueID") = Guid.NewGuid.ToString
								If VBOCCDict.ContainsKey(dr("CostCenter"))
									dr("WFProfileName") = VBOCCdict.Item(dr("CostCenter")) & ".PK_13 Marketing and Advertising" 
								End If
								dr("WFScenarioName") = scenarioName
								dr("LineItem") = 1
								If CC_Cur_Dict.ContainsKey(dr("CostCenter"))
									dr("TF_3") = CC_Cur_Dict.Item(dr("CostCenter"))
								End If
'								dr("TF_3") = dr("TF_3")
								dr("YearTotal")= dr("P01").TOString.XFConvertToDecimal + dr("P02").TOString.XFConvertToDecimal + dr("P03").ToString.XFConvertToDecimal + dr("P04").ToString.XFConvertToDecimal + dr("P05").ToString.XFConvertToDecimal + dr("P06").ToString.XFConvertToDecimal + dr("P07").ToString.XFConvertToDecimal + dr("P08").ToString.XFConvertToDecimal + dr("P09").ToString.XFConvertToDecimal + dr("P10").ToString.XFConvertToDecimal + dr("P11").ToString.XFConvertToDecimal + dr("P12").ToString.XFConvertToDecimal
								dr("TF_11") = "Local Currency"
								dr("UserID") = BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName).User.Description
							Next	
						End If
						Return dt
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		#Region "RACIVALIDATE Function"
		Private Function RACIVALIDATE(ByVal si As SessionInfo,ByVal CostCenter As String,ByVal GL As String,ByVal CT As String) As Boolean
		Try
		   		Dim cubename As String = "ENT"
				Dim memberScript = "E#" & CostCenter & ":C#Local:S#Plan_Working:T#2023M1:V#Periodic:A#" & GL & ":F#None:O#Forms:I#None:U1#None:U2#" & CT & ":U3#None:U4#Base:U5#None:U6#None:U7#None:U8#Driver_Input"
				Dim objDataCellInfoUsingMemberScript As DataCellInfoUsingMemberScript = BRApi.Finance.Data.GetDataCellUsingMemberScript(si, cubeName, memberScript)
				Dim  methodid As Decimal = objDataCellInfoUsingMemberScript.DataCellEx.DataCell.CellAmount

				If methodid <> 24.000000000
					Return False
				Else
					Return True
				End If
					
				
		
		Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
		End Try
		End Function
		#End Region
		#Region "PushDTToQueue Function"
		Public Sub PushDTToQueue(ByVal si As SessionInfo, ByVal dt As DataTable) 
			Try
'				If DEBUG Then Me.PrintDT(si,dt,"INSIDE_queue")
				
				Dim view As New DataView(dt)
				Dim dt_queue As DataTable = view.ToTable(True,"ENTITY","FISCAL_YR_NBR")
'				If DEBUG Then Me.PrintDT(si,dt_queue,"dt_queue:")
				dt_queue.Columns("Entity").ColumnName="CostCenter"
				dt_queue.Columns("FISCAL_YR_NBR").ColumnName="PlanYear"
				
			     

				dt_queue.Columns.Add(New DataColumn("UniqueID", GetType(String)))
				dt_queue.Columns.Add(New DataColumn("UserID", GetType(String)))
				dt_queue.Columns.Add(New DataColumn("Submitted_On", GetType(Date)))
				
				For Each dr_queue As DataRow In dt_queue.Rows
					dr_queue("UniqueID") = Guid.NewGuid.ToString
					dr_queue("UserID") = BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName).User.Description
					dr_queue("Submitted_On") = DateTime.Now
				Next
				
				BRApi.Database.SaveCustomDataTable(si, "Application", EPSharedConstants.sExpenseplanningQueue, dt_queue, False)
'				If DEBUG Then Me.PrintDT(si,dt_queue,"dt_queue3:")
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="FCP_Async_GET_ITAM">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_GATEWAY" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_VARIABLES" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_CurrencyConversion" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_SharedConstants" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="FCP_INTEGRATION_UTIL" />
            </referencedAssemblies>
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics
Imports System.Data.SqlClient
Imports OneStream.BusinessRule.DashboardStringFunction.EP_SharedConstants
Imports FcpIntegrationUtil = OneStream.BusinessRule.Extender.FCP_INTEGRATION_UTIL
#End Region
#Region "Rule Change Mgmt"

'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 -   - Spreadsheet functions for PK04 Itemized Load Forms
	'Mods:		
	'--------------------------------------------------------------------------------------------------------------------------------------------

#End Region
Namespace OneStream.BusinessRule.Extender.FCP_Async_GET_ITAM
	Public Class MainClass
		#Region "Main"
		Dim DEBUG As Boolean = True
		Public Shared sMainRegExpenseTable As String = EPSharedConstants.sMainRegExpenseTable
		Public Shared sRACITable As String = EPSharedConstants.sRACITable
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep, ExtenderFunctionType.Unknown
						
						
						Dim fcpIntegrator As FcpIntegrationUtil.MainClass = Nothing			
'						Dim endPoint As String = "https://fcp-os-mesh-gcp-01-dev.fin-dpa-fcp.k8s.glb.us.walmart.net/"
'						Dim consumerID As String = "8359e569-eaf2-48fb-b6b9-2235f95ae735"
'						Dim svcEnv As String = "DPA-FCP-DEV"
'						Dim svcName As String = "DPA-FCP-API-OS"
						Dim modulename As String = "FCP_SS_ITAM_PLAN"
						fcpIntegrator = New FcpIntegrationUtil.MainClass(si,  moduleName)
						Dim params = New Dictionary(Of String, String)
						
						Dim dt_merged As New DataTable
'						Dim FiscalMonth_List As New List(Of String) ({"Per01","Per02"})

						Dim FiscalMonth_List As New List(Of String) ({"Per01","Per02","Per03","Per04","Per05","Per06","Per07","Per08","Per09","Per10","Per11","Per12"})
						Dim FiscalYear As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "AOP_Year")
						Dim counter As Integer = 1
						
						For Each fiscal_month In FiscalMonth_List
							
'							Dim endPoint_local As String = endPoint
'							Dim objectName As String = $"FCP_SS_ITAM_PLAN?FISCAL_PERIOD_NBR={fiscal_month}&FISCAL_YR_NBR={FiscalYear}" 
'							Dim integrationArgs As New ExtenderArgs
						
'							integrationArgs.NameValuePairs.Add("ConsumerID", consumerID)
'							integrationArgs.NameValuePairs.Add("SvcEnv", svcEnv)
'							integrationArgs.NameValuePairs.Add("SvcName", svcName)
'							fcpIntegrator = New OneStream.BusinessRule.Extender.EP_Fcp_Integration_Utility.MainClass(si, api, integrationArgs)
						
'							endPoint_local += $"getData/{objectName}"
							
'							If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "endpoint", endPoint_local)
							params.Add("FISCAL_PERIOD_NBR", fiscal_month)
							params.Add("FISCAL_YR_NBR", FiscalYear)
						
							Dim dt As New DataTable
							dt = fcpIntegrator.GetDataTableFromFcp(si, params).Data()
							
'							If DEBUG Then Me.PrintDT(si, dt, "dt anaplan mkt-"&fiscal_month)
							
							If dt IsNot Nothing AndAlso dt.Rows.Count>0
								dt.Columns.RemoveAt(0)
								dt_merged.Merge(dt)
							Else
							Throw New Exception("No Data Exists!")
							End If	
							params.Clear()
						Next
'						If DEBUG Then Me.PrintDT(si, dt_merged, "dt_merged")
						Dim dt_transorm As Datatable = TranformDataTable(si,dt_merged, "FISCAL_PERIOD_NBR", "SCENARIO","VERSION","CURRENCY","ENTITY", "ACCT", "CENTER_TYPE", "FISCAL_YR_NBR","LCL_AMOUNT")
'                        If True Then Me.PrintDT(si, dt_transorm, "dt_transorm")
						If dt_transorm IsNot Nothing AndAlso dt_transorm.Rows.Count > 0 Then
							
							'transform dt into loadable format
							Dim reg_dt As New DataTable
							reg_dt = Me.TransformregDT(si, dt_transorm)
'							If DEBUG Then Me.PrintDT(si,reg_dt,"fcp_to_EXP dt2:")
                            Dim planyear As Integer=2023
'							Dim planyear As Integer =BRApi.Finance.Time.GetNameFromId(si, si.WorkflowClusterPk.TimeKey).XFConvertToInt
							Dim Obj = New OneStream.BusinessRule.Extender.EP_CurrencyConversion.MainClass
							
							Dim dt_clone As DataTable=Obj.CurrencyConversion(si,planyear,reg_dt,"ITAM")
							
							If DEBUG Then Me.PrintDT(si, dt_clone, "dt_clone_ITAM")
							
'							Dim gllist As String = String.Empty '({"A5605003","A5605004","A5605002","A5605001"})
'							Dim sql_gllist As String = "SELECT DISTINCT GL FROM " & sRACITable & " WHERE MethodID=11"
'							Dim dt_gllist As New DataTable
'							Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'								dt_gllist = BRAPi.Database.ExecuteSql(dbConnApp,sql_gllist,False)   
'							End Using
'							If dt_gllist IsNot Nothing And dt_gllist.Rows.Count>0
'								For Each dr_gllist In dt_gllist.Rows
'									gllist += "'" & dr_gllist("GL") & "',"
'								Next	
'							End If	
'							If gllist.Length > 0 
'								gllist = gllist.Remove(gllist.Length - 1,1)
'							End If	
							
							
'							Dim cclist As String = String.Empty
'							Dim cclist_meminfo As List(Of MemberInfo) = BRApi.Finance.Members.GetMembersUsingFilter(si, "ENT", "E#Walmart_Total_Company.Base", False)
'							For Each cc_meminfo In cclist_meminfo
								
'							Next	
							Dim action As String= String.Empty

							Dim dt_audit_delete As DataTable
							Dim sql As New Text.StringBuilder
							Dim sql_audit As New Text.StringBuilder
							sql_audit.Append("Select * FROM [dbo].[" & sMainRegExpenseTable & "]  Where WFProfileName LIKE '%PK_11 Non Personnel Taxes%'")
							If sql_audit.Length>0
							Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
									dt_audit_delete=	BRAPi.Database.ExecuteSql(dbConnApp,sql_audit.ToString , False)
							End Using
							action="'ITAM_Delete'"
							If dt_audit_delete IsNot Nothing AndAlso dt_audit_delete.Rows.Count > 0 Then

							UpdateAuditLog(si,dt_audit_delete,action)
							End If
							End If
							action="'Add'"
							'load to expense register
						
							sql.Append("DELETE FROM [" & sMainRegExpenseTable & "] Where WFProfileName LIKE '%PK_11 Non Personnel Taxes%' ")

							Using dbExtConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								BRAPi.Database.ExecuteActionQuery(dbExtConn, sql.ToString, False, False)
								Using objSQLBulkCopy As New SqlBulkCopy(dbExtConn.ConnectionString)
									For Each dc As DataColumn In dt_clone.Columns
				                        objSQLBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName)
				                    Next
				                    objSQLBulkCopy.DestinationTableName = sMainRegExpenseTable 
				                    objSQLBulkCopy.WriteToServer(dt_clone)
								End Using
							End Using
							UpdateAuditLog(si,dt_clone,action)
						End If
						
						 If dt_transorm IsNot Nothing AndAlso dt_transorm.Rows.Count>0
							PushDTToQueue(si, dt_transorm)
						End If	
'						If DEBUG Then Me.PrintDT(si, dt_transorm, "dt_transorm")
'						Dim transformed_dt As DataTable = Nothing
'						transformed_dt = Me.TransformDT(si, dt_merged)
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		#Region "UpdateAuditLog"
		Public Sub UpdateAuditLog(ByVal si As SessionInfo, ByVal dt As DataTable,ByVal action As String)
			Try
				Dim tableName As String = "XFW_NonWage_Register_AuditLog"
				
'				dt.Columns("UniqueID").DataType=GetType(String)
				dt.Columns.Add("Action")
				dt.Columns("Action").Expression=action
'				dt.Columns("UniqueID").DataType=GetType(String)
				dt.Columns.Add("Location")
				dt.Columns("Location").Expression="'ITAM FCP'"
				dt.Columns.Add("Updated_On", GetType(System.DateTime))
				dt.Columns("Updated_On").Expression= "'" & DateTime.Now & "'"
'				BRAPI.ErrorLog.LogMessage(si,"Auditcsv",CSVBuilder(dt).ToString)
				Using dbExtConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)		
				Using objSQLBulkCopy As New SqlBulkCopy(dbExtConn.ConnectionString)
						
						
						
						
	                    For Each dc As DataColumn In dt.Columns
	                        objSQLBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName)
	                    Next
	                    objSQLBulkCopy.DestinationTableName = "XFW_NonWage_Register_AuditLog"
	                    objSQLBulkCopy.WriteToServer(dt)
											
				End Using	
				End Using
'				BRApi.Database.SaveCustomDataTable(si, "Application", tableName, dt, False)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub	
		#End Region
		#Region "Helper Function"
		Private Function TransformDT(ByVal si As SessionInfo, ByVal dt As DataTable) As DataTable
			Try
				Dim exp_dt As DataTable = Nothing
				Dim sql As String = "SELECT * FROM " & sMainRegExpenseTable & " WHERE 1=0"
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					exp_dt = BRAPi.Database.ExecuteSql(dbConnApp,sql,False)   
				End Using
				Dim transformed_dt As DataTable= Nothing
				transformed_dt = exp_dt.Clone()
				
				If dt IsNot Nothing AndAlso dt.Rows.Count>0 Then
					For Each dr In dt.Rows
						Dim R As DataRow = transformed_dt.NewRow()
						R("UniqueID") = Guid.NewGuid.ToString
						R("WFProfileName") = "Anaplan Marketing"
						R("WFScenarioName") = "Plan_Working"
						R("WFTimeName") = dr("FISCAL_YR_NBR")
						R("CostCenter") = dr("ENTITY")
						R("GL") = dr("ACCT")
						R("TF_2") = dr("CENTER_TYPE")
						If dr("FISCAL_PERIOD_NBR") = "Per01"
							R("P01") = dr("AOP")
						End If	
							
						
						transformed_dt.Rows.Add(R)
					Next
				End If	
				
'				If DEBUG Then Me.PrintDT(si, transformed_dt, "transformed_dt ")
				
			Return transformed_dt
			Catch ex As Exception                
		   		Throw ErrorHandler.LogWrite(si,New XFException(si,ex))
			End Try	
		End Function
		Private Function TranformDataTable(ByVal si As SessionInfo,ByVal table As DataTable, ByVal columnX As String, ByVal columnA As String,ByVal columnB As String,ByVal columnC As String,ByVal columnD As String,ByVal columnE As String,ByVal columnF As String,ByVal columnG As String, ByVal columnZ As String) As DataTable
'		   	If DEBUG Then BRAPI.ErrorLog.LogMessage(si,"TranformDataTablefun")

			Dim VBOCCdict As New Dictionary(Of String, String)
			Dim VBOCCdt As New DataTable
			Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				VBOCCdt = BRAPi.Database.ExecuteSql(dbConnApp,"SELECT WORKFLOW_PROFILE_VBO,COST_CENTER FROM [dbo].[" & EPSharedConstants.sVBOCCMappingTable & "]", False)   
			End Using	
			For Each VBOCCdr As DataRow In VBOCCdt.Rows
				Try
					VBOCCdict.Add(VBOCCdr("COST_CENTER"),VBOCCdr("WORKFLOW_PROFILE_VBO"))
				Catch ex As Exception
					Continue For
				End Try
			Next



			Dim returnTable As New DataTable()
		   If columnX = "" Then
		            columnX = table.Columns(0).ColumnName
		   End If

   
		        returnTable.Columns.Add(columnA)
				returnTable.Columns.Add(columnB)
				returnTable.Columns.Add(columnC)
				returnTable.Columns.Add(columnD)
                returnTable.Columns.Add(columnE)
				returnTable.Columns.Add(columnF)
				returnTable.Columns.Add(columnG)
				
		        
		        Dim columnXValues As New List(Of String)()

		        For Each dr As DataRow In table.Rows
		            Dim columnXTemp As String = dr(columnX).ToString()
		            If Not columnXValues.Contains(columnXTemp) Then
		                
		                columnXValues.Add(columnXTemp)
		                returnTable.Columns.Add(columnXTemp)
		            End If
		        Next

		       
		        If columnA <> "" And columnB <> "" And columnC <> "" And columnD <> "" And columnE <> "" And columnF <> "" And columnG <> "" And columnZ <> "" Then
		            
		            
					
'                    Dim columnYValues As New List(Of List(Of String))
'		            For Each dr As DataRow In table.Rows
'						Dim columnAValues As New List(Of String)
'						columnAValues.Add(dr(columnA))
'						columnAValues.Add(dr(columnB))
'						columnAValues.Add(dr(columnC))
'						columnAValues.Add(dr(columnD))
'						columnAValues.Add(dr(columnE))
'						columnAValues.Add(dr(columnF))
'						columnAValues.Add(dr(columnG))
						
'		                If Not columnYValues.Contains(columnAValues)Then
'							columnYValues.Add(columnAValues)
'		                End If
						
'		            Next
					
					Dim view As New DataView(table)
					Dim dt_itam As DataTable = view.ToTable(True,"SCENARIO","VERSION","CURRENCY","ENTITY", "ACCT", "CENTER_TYPE", "FISCAL_YR_NBR")
'					If DEBUG Then Me.PrintDT(si, dt_itam, "dt_itam")
					
'		            For Each columnYValue As List(Of String) In columnYValues
'		                Dim drReturn As DataRow = returnTable.NewRow()
'		                drReturn(0) = columnYValue(0)
'						drReturn(1) = columnYValue(1)
'						drReturn(2) = columnYValue(2)
'						drReturn(3) = columnYValue(3)
'						drReturn(4) = columnYValue(4)
'						drReturn(5) = columnYValue(5)
'						drReturn(6) = columnYValue(6)
'					Me.PrintDT(si, dt_itam, "dt_itam")
'                    Dim dt_itam_1 As DataTable=dt_itam.Select("ENTITY = 'US.00601'").CopyToDataTable()
'					Me.PrintDT(si, dt_itam_1, "dt_itam_1")
					Dim logfile As New Text.StringBuilder
					For Each dr1 As DataRow In dt_itam.Rows
						Dim flag As Boolean=True'Me.RACIVALIDATE(si,dr1("ENTITY").ToString.Replace(".",""), dr1("ACCT"),dr1("CENTER_TYPE"))
						
						If Not VBOCCdict.ContainsKey(dr1("ENTITY").ToString.Replace(".",""))
							Continue For
						End If
						
						If flag=False
							logfile.AppendLine(dr1("ENTITY").ToString.Replace(".","") & dr1("ACCT") & dr1("CENTER_TYPE"))
						Else
										Dim drReturn As DataRow = returnTable.NewRow()
										drReturn(0) = dr1("SCENARIO")
										drReturn(1) = dr1("VERSION")
										drReturn(2) = dr1("CURRENCY")
										drReturn(3) = dr1("ENTITY").ToString.Replace(".","")
										drReturn(4) = dr1("ACCT")
										drReturn(5) = dr1("CENTER_TYPE")
										drReturn(6) = dr1("FISCAL_YR_NBR")
						                Dim rows As DataRow() = table.Select(" SCENARIO = '" & dr1("SCENARIO") & "'  and VERSION = '" & dr1("VERSION") & "'  and CURRENCY = '" & dr1("CURRENCY") & "'  and ENTITY =  '" & dr1("ENTITY") & "' And ACCT = '" & dr1("ACCT") & "'  And CENTER_TYPE = '" & dr1("CENTER_TYPE") & "'  And FISCAL_YR_NBR = '" & dr1("FISCAL_YR_NBR") & "' " )
'										BRApi.ErrorLog.LogMessage(si, "datarow array created")
'										Dim dt_unique As DataTable=rows.CopyToDataTable()
'										Me.PrintDT(si,dt_unique,"dt_unique")
				'						Dim view As New DataView(table)
				'						BRAPI.ErrorLog.LogMessage(si,"TranformDataTablefun1")
				'						Dim dt_queue As DataTable = view.ToTable(True,"ENTITY","ACCT","CENTER_TYPE","FISCAL_YR_NBR","FISCAL_PERIOD_NBR")

				'		                Dim rows As DataRow() = table.Select(" SCENARIO = '" & columnYValue(0) & "' And VERSION = '" & columnYValue(1) & "'and CURRENCY= '" & columnYValue(2) & "' and ENTITY =  '" & columnYValue(3) & "' And ACCT = '" & columnYValue(4) & "'  And CENTER_TYPE = '" & columnYValue(5) & "' and FISCAL_YR_NBR = '" & columnYValue(6) & "' " )

						               
						                For Each dr As DataRow In rows
											
						                    Dim rowColumnTitle As String = dr(columnX).ToString()
											
											drReturn(rowColumnTitle) = dr(columnZ)
						                   		
'											drReturn(rowColumnTitle) = IIf(IsDBNull(dr(columnZ)),Decimal.Zero,dr(columnZ))
											
						                  
						                
						                Next
									

                						returnTable.Rows.Add(drReturn)
									End If
            Next
			 If Debug Then BRAPI.ErrorLog.LogMessage(si,"Invalid RACI",logfile.ToString)
	        Else
	            Throw New Exception("The columns to perform inversion are not provided")
	        End If
'            BRAPI.ErrorLog.LogMessage(si,"TranformDataTablefun3")
'			returnTable = returnTable.DefaultView.ToTable(True, "SCENARIO","VERSION","CURRENCY","ENTITY", "ACCT", "CENTER_TYPE","FISCAL_YR_NBR","Per01","Per02","Per03","Per04","Per05","Per06","Per07","Per08","Per09","Per10","Per11","Per12")
	       
'			Me.PrintDT(si, returnTable, "returnTable_itam")
			Return returnTable

	    End Function
		Private Sub PrintDT(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal Desc As String)
		Try
			 'Print Table
			 Dim dtprint As New Text.StringBuilder
				 For Each dc As DataColumn In dt.Columns
					dtprint.Append(dc.ColumnName & ",")
				 Next
				 dtprint.Remove(dtprint.Length - 1, 1)
				 dtprint.Append(Environment.NewLine)
				 For Each dr As DataRow In dt.Rows										
					For Each dc As DataColumn In dt.Columns
						dtprint.Append(dr(dc.ColumnName).ToString & ",")
					Next
					dtprint.Remove(dtprint.Length - 1, 1)
					dtprint.Append(Environment.NewLine)
				 Next
				
		Catch ex As Exception                
	   		Throw ErrorHandler.LogWrite(si,New XFException(si,ex))
		End Try		 
		End Sub	
		Private Function TransformregDT(ByVal si As SessionInfo, ByVal dt As DataTable) As DataTable
			Try	
						'select required column
						Dim view As New DataView(dt)
									
'						dt = view.ToTable(False,"SCENARIO","VERSION","CURRENCY","ENTITY", "ACCT", "CENTER_TYPE","FISCAL_YR_NBR","Per01","Per02")

						dt = view.ToTable(False,"SCENARIO","VERSION","CURRENCY","ENTITY", "ACCT", "CENTER_TYPE","FISCAL_YR_NBR","Per01","Per02","Per03","Per04","Per05","Per06","Per07","Per08","Per09","Per10","Per11","Per12")
						
'						rename colmuns 
						
						
						dt.Columns("CURRENCY").ColumnName = "TF_3"
						dt.Columns("ENTITY").ColumnName = "CostCenter"
						dt.Columns("ACCT").ColumnName = "GL"
						dt.Columns("CENTER_TYPE").ColumnName = "TF_2"
						dt.Columns("Per01").ColumnName = "P01"
						dt.Columns("Per02").ColumnName = "P02"
						dt.Columns("Per03").ColumnName = "P03"
						dt.Columns("Per04").ColumnName = "P04"
						dt.Columns("Per05").ColumnName = "P05"
						dt.Columns("Per06").ColumnName = "P06"
						dt.Columns("Per07").ColumnName = "P07"
						dt.Columns("Per08").ColumnName = "P08"
						dt.Columns("Per09").ColumnName = "P09"
						dt.Columns("Per10").ColumnName = "P10"
						dt.Columns("Per11").ColumnName = "P11"
						dt.Columns("Per12").ColumnName = "P12"
						dt.Columns("FISCAL_YR_NBR").ColumnName = "WFTimeName"
						
						'prepare dt to push to expense register
						Dim VBOCCdict As New Dictionary(Of String, String)
						Dim VBOCCdt As New DataTable
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							VBOCCdt = BRAPi.Database.ExecuteSql(dbConnApp,"SELECT WORKFLOW_PROFILE_VBO,COST_CENTER FROM [dbo].[" & EPSharedConstants.sVBOCCMappingTable & "]", False)   
						End Using	
						For Each VBOCCdr As DataRow In VBOCCdt.Rows
							Try
								VBOCCdict.Add(VBOCCdr("COST_CENTER"),VBOCCdr("WORKFLOW_PROFILE_VBO"))
							Catch ex As Exception
								Continue For
							End Try
						Next
						dt.Columns.Add("UniqueID",GetType(String))
'						dt.Columns.Add("TF_3")
						dt.Columns.Add("WFProfileName")
						dt.Columns.Add("LineItem")
						dt.Columns.Add("TF_11")
						dt.Columns.Add("UserID")
						dt.Columns.Add("YearTotal")
						dt.Columns.Add("WFScenarioName")
					
						
						If dt.Rows.Count > 0
							For Each dr As DataRow In dt.Rows
								dr("UniqueID") = Guid.NewGuid.ToString
								If VBOCCDict.ContainsKey(dr("CostCenter"))
									dr("WFProfileName") = VBOCCdict.Item(dr("CostCenter")) & ".PK_11 Non Personnel Taxes"
								Else
									dr("WFProfileName") = "Not Found "
								End If
								dr("WFScenarioName") = dr("SCENARIO") & "_" & dr("VERSION")
								dr("LineItem") = 1
								dr("TF_3")=dr("TF_3")
								dr("YearTotal")= dr("P01").TOString.XFConvertToDecimal + dr("P02").TOString.XFConvertToDecimal + dr("P03").ToString.XFConvertToDecimal + dr("P04").ToString.XFConvertToDecimal + dr("P05").ToString.XFConvertToDecimal + dr("P06").ToString.XFConvertToDecimal + dr("P07").ToString.XFConvertToDecimal + dr("P08").ToString.XFConvertToDecimal + dr("P09").ToString.XFConvertToDecimal + dr("P10").ToString.XFConvertToDecimal + dr("P11").ToString.XFConvertToDecimal + dr("P12").ToString.XFConvertToDecimal
'								dr("YearTotal")= dr("P01").TOString.XFConvertToDecimal + dr("P02").TOString.XFConvertToDecimal 
								dr("TF_11") = "Local Currency"
								dr("UserID") = BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName).User.Description
							Next	
						End If
						 dt.Columns.Remove("SCENARIO")
						 dt.Columns.Remove("VERSION")
'						 If DEBUG Then Me.PrintDT(si, dt, "dt_mapping")
						Return dt
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		Private Function RACIVALIDATE(ByVal si As SessionInfo,ByVal CostCenter As String,ByVal GL As String,ByVal CT As String) As Boolean
		Try
		   		Dim cubename As String = "ENT"
				Dim memberScript = "E#" & CostCenter & ":C#Local:S#Plan_Working:T#2023M1:V#Periodic:A#" & GL & ":F#None:O#Forms:I#None:U1#None:U2#" & CT & ":U3#None:U4#Base:U5#None:U6#None:U7#None:U8#Driver_Input"
				Dim objDataCellInfoUsingMemberScript As DataCellInfoUsingMemberScript = BRApi.Finance.Data.GetDataCellUsingMemberScript(si, cubeName, memberScript)
				Dim  methodid As Decimal = objDataCellInfoUsingMemberScript.DataCellEx.DataCell.CellAmount
'				brapi.ErrorLog.LogMessage(si,"methodId_itam" & methodid)
				If methodid <> 11.000000000
					Return False
				Else
					Return True
				End If
					
				
		
		Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
		End Try
		End Function
		Public Sub PushDTToQueue(ByVal si As SessionInfo, ByVal dt As DataTable) 
			Try
'				If DEBUG Then Me.PrintDT(si,dt,"INSIDE_queue")
				
				Dim view As New DataView(dt)
				Dim dt_queue As DataTable = view.ToTable(True,"ENTITY","FISCAL_YR_NBR")
'				If DEBUG Then Me.PrintDT(si,dt_queue,"dt_queue:")
				dt_queue.Columns("Entity").ColumnName="CostCenter"
				dt_queue.Columns("FISCAL_YR_NBR").ColumnName="PlanYear"
				
			     

				dt_queue.Columns.Add(New DataColumn("UniqueID", GetType(String)))
				dt_queue.Columns.Add(New DataColumn("UserID", GetType(String)))
				dt_queue.Columns.Add(New DataColumn("Submitted_On", GetType(Date)))
				
				For Each dr_queue As DataRow In dt_queue.Rows
					dr_queue("UniqueID") = Guid.NewGuid.ToString
					dr_queue("UserID") = BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName).User.Description
					dr_queue("Submitted_On") = DateTime.Now
				Next
				
				BRApi.Database.SaveCustomDataTable(si, "Application", EPSharedConstants.sExpenseplanningQueue, dt_queue, False)
'				If DEBUG Then Me.PrintDT(si,dt_queue,"dt_queue3:")
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="FCP_Automation_Load_Validate">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="Email_Helper" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.FCP_Automation_Load_Validate
	Public Class MainClass		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				
				'************************************************************************************************************
				'**
				'** This is a BR to allow for automating batchjobs for Connector driven workflows.
				'** To use, you need to create a DataManagement Job, and you need to pass the following parameters to it:
				'** 	wfTop = <Top Workflow you want to loop through all descendants of>
				'**		T3Tag = <What is the tag in the Text3 field of the specific import workflow>
				'**		globScen = <which scenario to run for>
				'**		globTime = <which time to run for>
				'**
				'** Example to put in Parameter field of DataManagement Step:
				'**		wfTop = Clubs, T3Tag = AutoLoad, globScen = |GlobalScenario|, globTime = |GlobalTime|, ParallelCountTag = 10 
				'**  ParallelCountTag is optional, not needed. If not used Batch will will be serialized, if used it will run in parallel
				'**
				'************************************************************************************************************
				
			
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.Unknown, ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep

						'Note for testing purpose
						Dim testing As Boolean = False
					
						'Set all the needed variables
						Dim argProcessCube As Boolean = True
						If args.NameValuePairs.ContainsKey("processCube") Then
							argProcessCube = Convert.ToBoolean(args.NameValuePairs("processCube"))
						End If
						
						Dim globScen As String = args.NameValuePairs("globScen")
						Dim globTime As String = args.NameValuePairs("globTime")
						Dim systemTime As String = globTime
						Dim fixedScenario As String = globScen
						Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
						Dim bolError As Boolean = False
						'If wfTop is MEC and WorkFlow load = DIRECT (MEC Dashboard selection) then change wfTop to MEC_DIRECTLOAD Else keep wfTop to MEC
						Dim wfTop As String = args.NameValuePairs("WfTop")
						Dim T3Tag As String = args.NameValuePairs("T3Tag")
						Dim wfProfileInfo As WorkflowProfileInfo = BRApi.Workflow.Metadata.GetProfile(si, wfTop)
						Dim wfClusterPk As WorkflowUnitClusterPk
						Dim wfClusterPk2 As WorkflowUnitClusterPk
						Dim scenarioMemberID As Integer = BRApi.Finance.Members.GetMemberId(si, dimTypeId.Scenario, fixedScenario)
						Dim scentypeID As Integer = BRApi.Finance.Scenario.GetScenarioType(si,scenarioMemberID).Id
						Dim wfList As New List(Of String)
						Dim parallelCountTag As String = args.NameValuePairs.XFGetValue("ParallelCountTag","1")
						Dim wfProfileDeleteList As New List(Of WorkFlowProfileInfo)  'add 10/05 	
						Dim DMJobName As String = args.NameValuePairs.XFGetValue("DMJobName","DMJob Not Specified") 
						Dim SubjectDMJobName As String = args.NameValuePairs.XFGetValue("DMJobName","") 
							
						'Get all the Import WFs under WFTop with the correct T3Tag and add to list
						wfClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, WfTop, fixedScenario, systemTime)
						
						Dim objList As List(Of WorkFlowProfileInfo) = BRApi.Workflow.Metadata.GetRelatives(si, wfClusterPk, WorkflowProfileRelativeTypes.Descendants, WorkflowProfileTypes.InputImportChild)
						
						
						For Each wfItem As WorkflowProfileInfo In objList							
							If wfItem.GetAttributeValue(scentypeID,SharedConstants.WorkflowProfileAttributeIndexes.Text3).Split(",").Contains(T3Tag) Then
								'If WF is locked, do nothing
								wfCLusterPk2 = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, wfItem.Name, fixedScenario, systemTime)						
								
								Dim wfStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfClusterPk2)	
							
								If Not wfStatus.Locked Then
									wfList.Add(stringhelper.ReplaceString(wfItem.Name,".",";",True))
								End If
							End If
						Next	
						
						'Loop through the generated list of WFs, and create trigger file
						If wfList.Count > 0 Then
							'VT
							'Loop through the generated list of WFs, and delete stagesummarytargetdata
''							If wfProfileDeleteList.Count > 0 Then
''								Dim timeId As Integer = BRApi.Finance.Members.GetMemberId(si,DimType.Time.Id, systemTime)
''								For Each wfProfile As WorkflowProfileInfo In wfProfileDeleteList
''									Me.DeleteAllRowsForScenarioTimeForStageSummaryTargetDataTable(si,wfProfile.UniqueID,scenarioMemberID,timeId,timeId)                                                    
''								Next
''							End If	

''							For Each wfMem As String In WfList
''								'Create GL WF Batch Trigger File
''								Me.CreateBatchFileTrigger(si,FileShareFolderHelper.GetBatchHarvestFolderForApp(si, True, configSettings.FileShareRootFolder, configSettings.FileShareBatchHarvestRootFolder,si.AppToken.AppName),wfMem.ToString,fixedScenario,systemTime, Testing)
''					    	Next
'VT
						End If
						
						'Set Processing Switches	
						Dim valTransform As Boolean = True
						Dim valIntersect As Boolean = True
						'7/16/2020 Change to False for import issue to not execute the load to cube
						Dim loadCube As Boolean = True
						'7/16/2020 Change to False for import issue to not execute the load to cube
						Dim processCube As Boolean = argProcessCube
						Dim confirm As Boolean = False
						Dim autoCertify As Boolean = False
						
						Dim batchinfo As WorkflowBatchFileCollection = Nothing
							
						If Not testing Then
							If parallelCountTag = "" Or parallelCountTag = "1" Then
								BRApi.ErrorLog.LogMessage(si,"Line123")
								batchInfo = BRApi.Utilities.ExecuteFileHarvestBatch(si, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, False)
								BRApi.ErrorLog.LogMessage(si, "Line125")
							Else 
								Dim parallelCount As Integer = parallelCountTag.XFConvertToInt
								If parallelCount > 8 Then
    							   parallelCount = 8
								End If
BRApi.ErrorLog.LogMessage(si,"Line131")
								batchInfo = BRApi.Utilities.ExecuteFileHarvestBatchParallel(si, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, parallelCount)
								BRApi.ErrorLog.LogMessage(si,"Line133")
							End If
						End If
						
						If batchInfo IsNot Nothing Then
						
'							'--------- Email Notification --------- 
							'the following dashboard parameters are stored in the '99_WMT_Notifications'- Dashboard Maintenance Unity (DMU)
							Dim paramEmailServer As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "prm_WMT_EmailNotification_Server")
							Dim paramEmailBusiness As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "prm_WMT_EmailNotification_Business") ' to be commented out when not in test
							Dim paramEmailIT As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "prm_WMT_EmailNotification_IT")  ' to be commented out when not in test
							Dim paramEmailTest As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "prm_WMT_EmailNotification_Test")
							Dim moreEmails As String = args.NameValuePairs.XFGetValue("MoreEmails", "") 'add 12/21/2020 Mohan - DAP-3611
							
							Dim emailList As New List(Of String)
							emailList.AddRange(paramEmailBusiness.Split(",").ToList()) ' to be commented out when not in test
							emailList.AddRange(paramEmailIT.Split(",").ToList())  ' to be commented out when not in test
							emailList.AddRange(paramEmailTest.Split(",").ToList()) ' for testing purpose only, this one can be commented 
							
							'add 12/21/2020 Mohan - DAP-3611
							If Not String.IsNullOrEmpty(moreEmails) Then
									
								BRApi.ErrorLog.LogMessage(si, $"MoreEmails: {moreEmails}")
								emailList.AddRange(moreEmails.Split(",").ToList())
							End If
							
							Dim emailHelper As New OneStream.BusinessRule.Extender.Email_Helper.MainClass
							emailHelper.GetBatchDetailsAndSendEmail(si, batchInfo, emailList, paramEmailServer, SubjectDMJobName)
						End If
						
				End Select

				Return Nothing
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		#Region "General Helpers"
			
			Private Sub CreateBatchFileTrigger(ByVal si As SessionInfo, ByVal harvestPath As String, ByVal wfName As String, ByVal wfScenario As String, ByVal wfTime As String, ByVal Testing As Boolean)
			
			Dim Path As String = String.Empty

				If Not Testing Then
					
					path = harvestPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-R.txt"
				Else
				Dim testingFolderPath As String = BRApi.FileSystem.GetFileShareFolder(si, Filesharefoldertypes.Batch, Nothing) & "\_Testing"
				If Not Directory.Exists(testingFolderPath) Then directory.CreateDirectory(testingFolderPath) 
					
					path = testingFolderPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-R.txt"
				End If
					
				If Not File.Exists(path) Or Testing = True Then
					' Create a file to write to. 
					Using sw As StreamWriter = File.CreateText(path)
						sw.WriteLine("Batch File Trigger")
					End Using
				End If
			End Sub		
				
		#End Region
		#Region "SummaryTargetDeleteHelper"
			Public Sub DeleteAllRowsForScenarioTimeForStageSummaryTargetDataTable(ByVal si As SessionInfo, ByVal workflowProfileID As Guid, ByVal scenarioId As Integer, ByVal startWFTimeId As Integer, ByVal endWFTimeId As Integer)
                Try
                    'Delete Summary Target Data For Clusters
                    Dim table As New StageSummaryTargetDataTable
                    Dim dbWheres As New List(Of DbWhere)
                    dbWheres.Add(New DbWhere(StageSummaryTargetDataColNames.DimWorkflowProfileKey, DbOperator.IsEqualTo, workflowProfileID))
                    dbWheres.Add(New DbWhere(StageSummaryTargetDataColNames.DimWorkflowScenarioKey, DbOperator.IsEqualTo, scenarioId))
                    dbWheres.Add(New DbWhere(StageSummaryTargetDataColNames.DimWorkflowTimeKey, DbOperator.IsGreaterThanOrEqualTo, startWFTimeId, "StartWFTimeId"))
                    dbWheres.Add(New DbWhere(StageSummaryTargetDataColNames.DimWorkflowTimeKey, DbOperator.IsLessThanOrEqualTo, endWFTimeId, "EndWFTimeId"))

                    Using dbConnApp As DbConnInfo = BRApi.DataBase.CreateApplicationDbConnInfo(si)
                  		table.BatchDeleteRows(dbConnApp, dbWheres, False)
                    End Using

                Catch ex As Exception
                    Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
                End Try
            End Sub
		#End Region
    End Class

End Namespace

		]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="FCP_GET_ACM_Automation">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_UTILITY" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="false" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\WPF\WindowsBase.dll" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="false" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="F:\OneStream Software\OneStreamAppRoot\OneStreamApp\bin\DocumentFormat.OpenXml.dll" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports OneStream.BusinessRule.Extender.OS_Models
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_UTILITY
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
Imports DocumentFormat.OpenXml
Imports DocumentFormat.OpenXml.Packaging
Imports DocumentFormat.OpenXml.Spreadsheet

Namespace OneStream.BusinessRule.Extender.FCP_GET_ACM_Automation
	Public Class MainClass
		
		#Region "Class-Level Parameters Dims"
		
			'================================================================================
			' Settings
			'================================================================================
			Dim loadMetadataSeqName As String = "Load_Metadata" 'sequence name to call to launch ACM
			Dim globalParameterTableName As String = "XFT_Global_Parameters" 'name of the global parameter table
			Dim attachmentFileName As String = "ACM_Difference_Report.xlsx" 'name of temp XL file to be attached to email
			
			Dim includeEmail As Boolean = True							'reporting and testing
			Dim detailedEmailAttachment As Boolean = True				'reporting and testing
			Dim acmKey1 As String = "ACMAutomationValues"
			Dim dsErrorKey As String = "AcmDataSourceError"
			Dim flagPossibleRenames As Boolean = False
			Dim debug As Boolean = False 
			Dim autoCommit As Boolean = False							'used to change the verbiage in the email. If true the phrase "Pending review and commit" is excluded.
			
			'================================================================================
			' Other Class-Level Variables
			'================================================================================
			Dim attachmentFileDir As String = ""
			Dim dtRequests As New DataTable
			Dim existingRequests As New List(Of String)
			'Dim err As String = ""
			Dim err As New List(Of String)
			Dim wrn As New List(Of String)
'			Dim envName As String = ""
			Dim detailedLog As String = "FCP_GET_ACM_Automation" 'initialize log with current BR name
			Dim emailServer As String = ""
			Dim emailDist As New List(Of String)
			Dim okToRun As Boolean = False
			Dim okToRunAutoReset As Boolean = True
			Dim appName As String = ""
			Dim workflowOverride As String = ""
			Dim dimTypeOverride As String = ""
			Dim dimNamesOverride As String = ""
			
			'Email content
			Dim ds As New DataSet
			Dim dtAdd As New DataTable
			Dim dtUpdate As New DataTable
			Dim dtCopy As New DataTable
			Dim dtMove As New datatable
			Dim dtRemove As New DataTable
			Dim dtRename As New DataTable
			Dim dtJson As New DataTable
			Dim dtSourceRaw As New DataTable
			Dim dtSourceMod As New DataTable

			'Boolean DataTable Columns Set (only set them once)
			Dim bAdd As Boolean = False
			Dim bUpdate As Boolean = False
			Dim bMove As Boolean = False
			Dim bCopy As Boolean = False
			Dim bRemove As Boolean = False
			Dim bRename As Boolean = False
			Dim bJson As Boolean = False	
			
		#End Region
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try	
				#Region "Parameter Initialization"

				'Debug (turns on detailed logging and includes the original ACM item json along with the FCP source metadata in both the raw and cleaned datatable forms)
					Dim strDebug As String = args.NameValuePairs.XFGetValue("Debug","False")
					debug = Convert.ToBoolean(strDebug)
					Log(si,"debug: " & debug)
					If Not debug Then 
						brapi.ErrorLog.LogMessage(si,"ACM Automation Debugging is disabled.")	
					Else
						brapi.ErrorLog.LogMessage(si,"ACM Automation Debuging is enabled.")
					End If
					BRApi.State.SetSessionState(si,False,ClientModuleType.External,String.Empty, String.Empty,acmKey1,"Debug",debug.ToString,Nothing)
					
				'Show a touch of progress
					brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,"Initializing Parameters",0)

				'AppName (used to query FCP)
					appName = args.NameValuePairs.XFGetValue("AppName")
					If appName = "" Then
						appName = si.AppName
					End If
					Log(si,"appName: " & appName)
					Brapi.ErrorLog.LogMessage(si,"AppName: " & appName)
					BRApi.State.SetSessionState(si,False,ClientModuleType.External,String.Empty, String.Empty,acmKey1,"AppName",appName,Nothing)		

				'Include email (allow users to control using DM parameters)
					includeEmail = args.NameValuePairs.XFGetValue("Email").XFConvertToBool(True)
					If Not includeEmail Then 
						Brapi.ErrorLog.LogMessage(si,"ACM Automation Email notifications are disabled.")
					Else
						brapi.ErrorLog.LogMessage(si,"ACM Automation Email notifications enabled.")
					End If
					
				'Email attachment file name
					If includeEmail And detailedEmailAttachment Then
						Log(si,"Getting ACM outgoing directory")
						attachmentFileDir = Path.Combine(BRApi.FileSystem.GetFileShareFolder(si,FileShareFolderTypes.ApplicationOutgoing,api),"ACM")
						
						If Not Directory.Exists(attachmentFileDir) Then
							Log(si,"Creating ACM outgoing directory")
							directory.CreateDirectory(attachmentFileDir)
						End If
						
						Log(si,"Defining outgoing file name")
						attachmentFileName = Path.Combine(attachmentFileDir,attachmentFileName)
						Log(si,"attachmentFileName: " & attachmentFileName)
					Else If includeEmail Then
						Log(si,"No attachment will be added")
					Else
						Log(si,"No email will be sent")
					End If

					Dim workflowOverride As String = ""
					Dim dimTypeOverride As String = ""
					Dim dimNamesOverride As String = ""
			
				'Workflow Overrides
					Dim overrideWorkflow As Boolean = False
					workflowOverride = args.NameValuePairs.XFGetValue("Workflow","")
					If workflowOverride = "|!Workflow!|" Then workflowOverride = ""
					dimTypeOverride = args.NameValuePairs.XFGetValue("DimType","")
					If dimTypeOverride = "|!DimType!|" Then dimTypeOverride = ""
					dimNamesOverride = args.NameValuePairs.XFGetValue("DimNames","")
					If dimNamesOverride = "|!DimNames!|" Then dimNamesOverride = ""
					If workflowOverride <> "" And dimTypeOverride <> "" And dimNamesOverride <> "" Then
						Log(si,"Overriding workflow")
						Log(si,"Workflow: " & workflowOverride)
						Log(si,"DimType: " & dimTypeOverride)
						Log(si,"DimNames: " & dimNamesOverride)
						overrideWorkflow = True
					Else If $"{workflowOverride}{dimTypeOverride}{dimNamesOverride}" <> "" Then
						wrn.Add("The workflow override parameters are not complete. Using global parameters to define workflows.")
					End If
					
				'Commit included
					autoCommit = args.NameValuePairs.XFGetValue("Commit").XFConvertToBool(False)					
					
				'Email notification table
					Log(si,"Create request table")
					dtRequests.Columns.Add("Request")
					dtRequests.Columns.Add("DimType")
					dtRequests.Columns.Add("DimName")
					dtRequests.Columns.Add("Import")
					dtRequests.Columns.Add("Status")

				'Get Global parameters
					Dim acmFlowParams As DataTable
					Dim acmGeneralParams As DataTable
					Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
						
						'General settings do not have anything in the action column of the global settings
						'	Module		:	ACM
						'	AppName		:	ACM_dev
						'	ParmName	:	Parameter Name (i.e. OkToRun,EmailDist)
						'	Action		:	n/a
						'	ParmValue	:	Parameter Value (i.e. true,test@test.com)						
						Log(si,"Getting global table")
						acmGeneralParams = BRApi.Database.ExecuteSql(dbConn, $"SELECT * FROM {globalParameterTableName} WHERE Module = 'ACM' AND AppName = '{appName}' AND Action = ''", False)
						If acmGeneralParams Is Nothing Then
							log(si,"Global settings not found")
							Throw New Exception("ACM global general parameters are not configured.")
						Else If acmGeneralParams.Rows.Count = 0 Then
							log(si,"Global settings app not found")
							Throw New Exception("ACM global general parameters are not configured. Make sure records exist for the application.")
						End If
						
						'ACM Flow parameters contain:
						'	Module		:	ACM
						'	AppName		:	ACM_dev
						'	ParmName	:	Workflow Profile Name (i.e. CostCenter) under the ACM_ImportMetadata_Default Workflow under the ACM_ImportMetadata Cube.
						'	Action		:	Dimension Type (i.e. Entity)
						'	ParmValue	:	DimNames (i.e. WMTUS,SAMS)
						
						If Not overrideWorkflow Then
							Log(si,"Getting flow table")
							acmFlowParams = BRApi.Database.ExecuteSql(dbConn, $"SELECT * FROM {globalParameterTableName} WHERE Module = 'ACM' AND AppName = '{appName}' AND Action <> '' AND Action <> 'FieldList'", False)
							If acmFlowParams Is Nothing Or acmFlowParams.Rows.Count = 0 Then
								Throw New Exception("ACM global flow parameters are not configured.")
							End If		
						Else
							Log(si,"Creating datatable by hand using override values")
							brapi.ErrorLog.LogMessage(si,"Using workflow override settings")
							acmFlowParams = New DataTable
							acmFlowParams.Columns.AddRange({"Module","AppName","ParmName","Action","ParmValue"}.Select(Function(x) New DataColumn(x)).ToArray)
							acmFlowParams.Rows.Add({"ACM",appName,workflowOverride,dimTypeOverride,dimNamesOverride})
						End If
					
						'Param - Endpoint
						Dim endPoint As String  = acmGeneralParams.Select("ParmName = 'Endpoint'").FirstOrDefault.Item("ParmValue")
						Log(si,"Endpoint = " & endPoint)
						BRApi.State.SetSessionState(si,False,ClientModuleType.External,String.Empty, String.Empty,acmKey1,"Endpoint",endpoint,Nothing)
						
						'Param - Email server
						emailServer = acmGeneralParams.Select("ParmName = 'EmailSvr'").FirstOrDefault.Item("ParmValue")
						Log(si,"Email Server = " & emailServer)

						'Param - Distribution List
						Dim emailDistFull As String = acmGeneralParams.Select("ParmName = 'EmailDist'").FirstOrDefault.Item("ParmValue")
						emailDist = emailDistFull.Split(",").ToList()
						Log(si,"Email Distribution: " & emailDistFull)
						
						'Param - Ok to run
						Dim okToRunString As String = acmGeneralParams.Select("ParmName = 'OkToRun'").FirstOrDefault.Item("ParmValue")
						okToRun = okToRunString.XFConvertToBool()
						Log(si,"OkToRun: " & okToRun)
						
						'Param - Ok to run auto reset
						Dim okToRunAutoResetString As String = acmGeneralParams.Select("ParmName = 'OkToRunAutoReset'").FirstOrDefault.Item("ParmValue")
						okToRunAutoReset = okToRunAutoResetString.XFConvertToBool()
						Log(si,	"OkToRunAutoReset: " & okToRunAutoReset)
						
						'Check if ok to run
						If Not okToRun Then
							Log(si,"Not okToRun. Aborting.")
							err.Add("ACM global OkToRun Parmateter is set to false.")
							Throw New Exception("ACM global OkToRun Parmateter is set to false.")
						End If
						
					End Using
					
					If includeEmail Then
						
						'Get existing requests
							Log(si,"Getting existing requests")
							brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,"Checking for existing requests",0)
							Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								Dim dt As DataTable = BRApi.Database.ExecuteSql(dbConn,"SELECT [ID] FROM [XFW_ACM_Request] WHERE [Status] = 'Waiting'",False)
								If Not dt Is Nothing And dt.Rows.Count > 0 Then
									For Each dr As DataRow In dt.Rows
										existingRequests.Add(dr("ID"))
									Next
								End If
							End Using
						
						'Name the tabs of the attached excel file
							Log(si,"Naming tables")
							dtAdd.TableName = "ADD"
							dtUpdate.TableName = "UPDATE"
							dtCopy.TableName = "COPY"
							dtMove.TableName = "MOVE"
							dtRemove.TableName = "REMOVE"
							dtRename.TableName = "RENAME"
							dtJson.TableName = "JSON"
					
					End If

					'Resetting session state
						Using ms As MemoryStream = New MemoryStream
							BRApi.State.SetSessionState(si, False, ClientModuleType.External, String.Empty, String.Empty, acmKey1, "RawSource", String.Empty, Nothing)
							BRApi.State.SetSessionState(si, False, ClientModuleType.External, String.Empty, String.Empty, acmKey1, "CleanSource", String.Empty, Nothing)
						End Using							

									
				#End Region

				#Region "Loop on DimType/DimNames and run ACM to create new ACM Requests"
					
					'Calculate progress increment
					Dim progressIncrement As Integer = 1
					For Each acmFlowRow As DataRow In acmFlowParams.Rows
						progressIncrement += acmFlowRow.Item("ParmValue").Replace(" ","").Split(",").Length
					Next
					progressIncrement = 100 / progressIncrement / 2
					Log(si,"ProgressIncrement: " & progressIncrement)
					
					'Update task progress
					Log(si,"Looping Global Parameters")
					brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,"Looping on DimTypes and DimNames",0)
					
					'Loop on DimTypes (Entity, Account, UD1 - UD8)	
					Dim fileAppend As Boolean = False
					For Each acmFlowRow As DataRow In acmFlowParams.Rows
						Dim dimType As String = acmFlowRow.Item("Action").Trim()
						
						If acmFlowRow.Item("ParmValue") <> "" Then
							Dim dimNames As String() = acmFlowRow.Item("ParmValue").Replace(" ","").Split(",")
							Dim flowName As String = acmFlowRow.Item("ParmName")
							Log(si,$"FlowName (workflow profile name): " & flowName)
							
							'Save to session state. This is used in the parser rule when the ACM job is started.
							Log(si,"Saving dimType to session state")
							BRApi.State.SetSessionState(si,False,ClientModuleType.External,String.Empty, String.Empty,acmKey1,"DimType",dimType,Nothing)
							
							'Create One (1) ACM Request per DimName (ENT,WMTUS,...)
							Log(si,"Looping on dimNames")
							For Each dimName As String In dimNames
								
								'Save to session state. This is used in the connector business rule when the ACM job is started.
								Log(si,$"Saving dimName {dimName} to session state")
								BRApi.State.SetSessionState(si,False,ClientModuleType.External,String.Empty, String.Empty,acmKey1,"DimName",dimName,Nothing)

								'Update Task activity and log
								brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,$"Running ACM Import on {dimType} {dimName}",progressIncrement)
								
								'Define SourceName parameter for the dynamic ACM job - this comes from the flowName saved in the Global parameter table
								Dim customSubstVars As New Dictionary(Of String, String)
								customSubstVars.Add("SourceName",flowName)
								
								'Launch custom ACM job and provide the sourceName dynamically based on the DimType
								Log(si,"Custom ACM Import Begin **")
								Dim objTaskActivityItemQueued As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(si, loadMetadataSeqName, customSubstVars)
								Log(si,"Custom ACM Import Complete _")
								
								If includeEmail Then
									
									'Update Task Activity
									brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,$"Reviewing Request for {dimType} {dimName}",progressIncrement)								
									
									'Get final task status
									Log(si,"Reviewing Requests")
									Dim objTaskActivityItemFinal As TaskActivityItem = BRApi.TaskActivity.GetTaskActivityItem(si,objTaskActivityItemQueued.UniqueID)

									'Generate email content
									GenerateEmailContent(si,api,args,dimType,dimName,objTaskActivityItemFinal.TaskActivityStatusStr)
									
								End If
								
							Next dimName
						Else
							Dim wrnString As String = $"No Dim Names configured for Dim Type {dimType}"
							Log(si,wrnString)
							wrn.Add(wrnString)
						End If
					Next acmFlowRow
				#End Region
				
				#Region "Create final xl file for email attachment"
					If includeEmail Then
						CombineTablesToXL(si)
					End If
				#End Region
				
			Catch ex As Exception		
				#Region "Error Handling"
					brapi.ErrorLog.LogMessage(si,"Entered error handling") 'just in case the log doesn't print
					Log(si,"Entered error handling")
					Try
						log(si,"Exception: " & ex.Message)
					Catch
					End Try					
					brapi.ErrorLog.LogMessage(si,detailedLog)
					Dim thisBRName As String = Me.ToString.Replace("OneStream.BusinessRule.Extender.","").Replace(".MainClass","")
					
					err.Add(ex.Message)
					'Log(si,$"{thisBRName} Error: " & err)
					
					If okToRun Then
						Try
							If ex.InnerException.Message.StartsWith($"Invalid object name '{globalParameterTableName}'") Then
								Throw New Exception($"{thisBRName} BR requires the {globalParameterTableName} marketplace solution to function.")
							End If
						Catch	
							If debug Then
								brapi.ErrorLog.LogMessage(si,detailedLog & vbnewline)
							End If
					
							brapi.ErrorLog.LogMessage(si,"No inner exception found")
						Finally
							Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
						End Try
					Else
						brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,"Aborting. Ok to run flag set to false.",1)
					End If
					
					
				#End Region		
				
			Finally	
				#Region "Final Email Notification"
				
					If okToRun Then
						
						'Log email table status
						If includeEmail Then
							If dtRequests IsNot Nothing And dtRequests.Rows.Count > 0 Then
								Log(si,"dtRequests has rows")
							Else
								
								'No Requests were returned by the generate email process. 
								'Either no matches were found Or an Error occured
								Log(si,"dtRequests is nothing or has no rows")
								
								'Query results. If found, then something went wrong in the parsing process
								Log(si,"Double checking request status")
								Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
									Dim dt As DataTable = BRApi.Database.ExecuteSql(dbConn,"SELECT [ID] FROM [XFW_ACM_Request] WHERE [Status] = 'Waiting'",False)
									If Not dt Is Nothing And dt.Rows.Count > 0 Then
										For Each dr As DataRow In dt.Rows
											If Not existingRequests.contains((dr("ID")))
												If detailedEmailAttachment Then
													
													wrn.Add("An error occured while parsing the ACM items to create the difference report.")
				
													
													'Request exists but was not added to the request datatable
													'This is mostly likly because the detailed email attachment failed to parse
													'Try to get email content again but without parsing the data
													Log(si,"Existing request found! Attempting to regenerate email datatable without detailed attachment")
													detailedEmailAttachment = False
													GenerateEmailContent(si,api,args)
													Exit For
												End If
											End If
										Next
									End If
								End Using		
								
'								If dtRequests IsNot Nothing And dtRequests.Rows.Count > 0 Then
'									Log(si,"dtRequests has rows now")
'									err.Add("Something went wrong creating the detailed email attachment by parsing the items in the database")
'								Else
'									Log(si,"dtRequests still has no rows")
'								End If
							End If
				
							'Send Email
							Log(si,"About to send email. Folder Path: " & attachmentFileName)
							If Not File.Exists(attachmentFileName) Then 
								Log(si,"File was not created. Nothing to attach.")
								attachmentFileName = ""
							End If
							CommonUtility.SendMail(si, dtRequests, New List(Of String)({attachmentFileName}), String.Empty, String.Empty, appName, emailServer, emailDist, err, wrn, autoCommit)							
						End If
						
						'Reset the OkToRun flag to false - if configured to do so
						If okToRunAutoReset Then
							Log(si,"Auto resetting ok to run to false")
							Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								BRApi.Database.ExecuteSql(dbConn, $"UPDATE {globalParameterTableName} SET ParmValue = 'False' WHERE Module = 'ACM' AND ParmName = 'OkToRun'", False)
							End Using						
						End If
						
						'delete attachement file
						If File.Exists(attachmentFileName) Then
							Log(si,"Deleting file " & attachmentFileName)
							File.Delete(attachmentFileName)
						End If
						
					End If
					
					'Add final log string to error log
					If debug Then
						brapi.ErrorLog.LogMessage(si,detailedLog & vbnewline)
					End If

				#End Region
				
			End Try
			Return Nothing
		End Function
	
		#Region "Helper Functions"

		''' <summary>
		''' Generate Email Content (data table with embeded html and email attachment)
		''' </summary>
		''' <param name="si"></param>
		''' <param name="api"></param>
		''' <param name="args"></param>
		''' <param name="dimType"></param>
		''' <param name="dimName"></param>
		''' <param name="strTaskActivityItemFinal"></param>
		Private Sub GenerateEmailContent(ByVal si As SessionInfo,ByVal api As Object, ByVal args As ExtenderArgs,
					Optional ByVal dimType As String = "", Optional ByVal dimName As String = "", Optional ByVal strTaskActivityItemFinal As String = "Completed")
		Try
			
			If strTaskActivityItemFinal <> "Completed" Then
				Log(si,$"Creating request row for {dimType} {dimName} and {strTaskActivityItemFinal} status")
				Dim requestText As String = $"R000000NA"
				Dim requestNum As String = requestText
	
				Log(si,"Add request to email datatable")
				Dim dsStatus As String = GetSessionStateValue(si,dsErrorKey)
				If dsStatus Is Nothing Or dsStatus = "" Then dsStatus = "Unknown"
				dtRequests.Rows.Add({requestText, dimType, dimName, strTaskActivityItemFinal,dsStatus})
				Log(si,$"Email datatable now has {dtRequests.Rows.Count} rows")
			Else
				'Open a connection to the database
				Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					
					'Find newly credated requests in a status of waiting
					Log(si,"Query for request info")
					Dim requestInfo As DataTable = BRApi.Database.ExecuteSql(dbConn,"SELECT r.ID as 'Request', count(i.ItemID) as 'Item Count', r.[Created], r.RequestID FROM [XFW_ACM_Request] r INNER JOIN [XFW_ACM_Item] i ON r.RequestID = i.FKRequestID WHERE r.[Status] = 'Waiting' GROUP BY r.ID, r.[Created], r.RequestID",False)
					If Not requestInfo Is Nothing And requestInfo.Rows.Count > 0 Then
						Log(si,"Request info found")
						
						'For each request
						For Each dr As DataRow In requestInfo.Rows
							
							'Check if request was not pre-existing - don't want to report on requests already pending commit
							If Not existingRequests.Contains(dr("Request")) Then
								
								'Create first column cell text with request number, item count, and create timestamp
									'=======================================|
									'	R00000012							|
									'		8 Items							|
									'		Created 3/30/2021 3:23:45 PM	|
									'=======================================|
									
									Log(si,"Creating request text")
									Dim requestText As String = $"R{dr("Request"):00000000}"
									Dim requestNum As String = requestText
									If dr("Item Count") = 1 Then
										requestText += $"</br><small><div style='text-indent:1em'>1 Item</div>"
									Else
										requestText += $"</br><small><div style='text-indent:1em'>{dr("Item Count")} Items</div>"
									End If
									requestText += $"<div style='text-indent:1em'>Created {dr("Created")}</div></small>"
			
								#Region "Detailed Email Attachment"
								'======================================================================================================
								'Create XL file attachment with item details"
								'======================================================================================================
								
									'Query the [XFW_ACM_Item] table and parse the ItemProperties json
									'to discover the 'to' and 'from' values and only list them if they are different.
									'
									'In the case of an add, these values will come from the Properties tag in the item json.
									'Otherwise, the 'to' and 'from' values come from the 'Audit' tag in the item json.											
								
								If detailedEmailAttachment Then
									
									Log(si,$"Create detailed email attachment for request {requestNum}")
									Dim itemSQL As String = $"SELECT ItemProperties, ItemName, FlowOptions, ItemParentName FROM [XFW_ACM_Item] WHERE [FKRequestID] = '{dr("RequestID")}'"
									Dim dtDetails As DataTable = BRApi.Database.ExecuteSql(dbConn,itemSQL,False)
									If Not dtDetails Is Nothing And dtDetails.Rows.Count > 0 Then
										Log(si,"dtDetails has " & dtDetails.Rows.Count & " rows.")
										
										
										'Loop on items
										Log(si,"Getting values from json")
										Dim propertyList As List(Of String) = Nothing
										Dim removeColumns() As String = {"ParentName","Name"}
										Dim jsonColumns() As String = {"Request","DimType","DimName","ParentName","Name","Json"}
										Dim updateColumns() As String = {"Name","Property","From","To"}
										
										'Get groups from secGroup table
										Log(si,"Get groups from secGroup table")
										Dim dtSecGroup As DataTable = Nothing
										Using dbFmConn As DbConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
											dtSecGroup = BRApi.Database.ExecuteSql(dbFmConn,"SELECT UniqueID, Name FROM SecGroup",False)
										End Using
										
										'Add to dictionary
										Log(si,"Add to dictionary")
										Dim secGroupNameFromId As New Dictionary(Of String, String)
										For Each rSecGroup As DataRow In dtSecGroup.Rows
											If Not secGroupNameFromId.ContainsKey(rSecGroup("UniqueID").ToString) Then
												secGroupNameFromId.Add(rSecGroup("UniqueID").ToString,rSecGroup("Name"))
											End If
										Next rSecGroup
										
										'Get list of groups as backup
										Log(si,"Get list of groups as backup")
										Dim grps As List(Of OneStream.Shared.Wcf.Group) = BRApi.Security.Admin.GetGroups(si)
										
										Log(si,"Looping on items")
										For Each itemDetailRow As DataRow In dtDetails.Rows
											
											'Get' member name', 'parent name', and 'properties' from the item record
											Dim itemJson As String = itemDetailRow("ItemProperties")
											Dim itemName As String = itemDetailRow("ItemName")
											Dim itemParent As String = itemDetailRow("ItemParentName")
											

											
											'Get json as jObject
											Dim jObj As JObject = JObject.Parse(itemJson)

											
											'Get the item Action and add to DataTable
											Dim itemAction As String
											Try
												itemAction = jObj("Options")("Action").ToString
											Catch
												If itemDetailRow("FlowOptions").Contains(",") Then
													itemAction = itemDetailRow("FlowOptions").split(",")(1)
												Else
													itemAction = "Unknown"
													Log(si,$"Bad action on item {itemName}")
												End If
											End Try
											
											'Get Property List from item json
											If propertyList Is Nothing Then
												Select Case itemAction
													Case "ADD","MOVE","COPY"
														Log(si,"Adding property list")
														propertyList = GetACMItemPropertyNames(si,jObj)
												
														'if the first one is an UPDATE, remove the CurrentParentName as it is irrelavent
														If propertyList.Contains("CurrentParentName") Then
															propertyList.Remove("CurrentParentName")
														End If
												End Select
											End If										
											
											'Set up the json table
											If debug Then
												If Not bJson Then
													Log(si,"Adding json tab")
													dtJson.Columns.AddRange(jsonColumns.Select(Function(x) New DataColumn(x)).ToArray)
													bJson = True
												End If
												dtJson.Rows.Add({requestNum,dimType,dimName,itemParent,itemName,itemJson})
											End If										
											
											'Select case
											Dim fcpKeyNames As String() = {"Request","DimType","DimName"}
											Dim fcpKeyValues As String() = {requestNum,dimType,dimName}
											'Dim secGroupNames As New List(Of String)({"READ_DATA_GRP","READ_DATA_GRP2","READ_WRITE_DATA_GRP","READ_WRITE_DATA_GRP2"})
											Dim secGroupNames As New List(Of String)({"DisplayMemberGroup","ReadDataGroupUniqueID","ReadDataGroupUniqueID2","ReadWriteDataGroupUniqueID","ReadWriteDataGroupUniqueID2"})
											Select Case itemAction
												Case "ADD"
													If Not bAdd Then
														Log(si,"Adding columns to ADD table")
														dtAdd.Columns.AddRange(AddArrays(si,fcpKeyNames,,propertyList).Select(Function(x) New DataColumn(x)).ToArray())
														bAdd = True
													End If
													dtAdd.Rows.Add(AddArrays(si,fcpKeyValues,GetACMItemPropertyValues(si,jObj).ToArray))
													
		                                		Case "UPDATE"
													If Not bUpdate Then
														Log(si,"Adding columns to UPDATE table")
														dtUpdate.Columns.AddRange(AddArrays(si,fcpKeyNames,updateColumns).Select(Function(x) New DataColumn(x)).ToArray())
														bUpdate = True
													End If			
										            Dim jAuditParent As JToken = jObj("Audit")
										            Dim auditList As List(Of Audit) = JsonConvert.DeserializeObject(Of List(Of Audit))(jAuditParent.ToString)
										            For Each _audit As Audit In auditList
														If Not _audit.to.XFEqualsIgnoreCase(_audit.from) Then
															
															'TRUE=1 and FALSE=0. Hopefully remove after next version of ACM
															If (_audit.To = "1" And _audit.from.ToUpper = "TRUE") _
																Or (_audit.To.ToUpper = "TRUE" And _audit.From = "1") _
																Or (_audit.To = "0" And _audit.from.ToUpper = "FALSE") _
																Or (_audit.To.ToUpper = "FALSE" And _audit.From = "0") Then
																'do nothing, false alarm
															Else
																'============================================================================== CONVERT GUIDS TO NAMES
																'Replace SecGroup GUID with SecGroup Name 
																If secGroupNames.Contains(_audit.propertyName) Then
																	Dim guidOutput As Guid 'used for try parse only
																	
																	'Log(si,"   evaluating _audit.to")
																	If Guid.TryParse(_audit.to, guidOutput) Then
																		If secGroupNameFromId.ContainsKey(_audit.to) Then
																			_audit.to = secGroupNameFromId(_audit.to)
																		ElseIf grps.Select(Function(x) x.UniqueID.ToString).ToList().Contains(_audit.to) Then
																			_audit.to = grps.Find(Function(x) x.UniqueID.ToString = _audit.to).Name
																		ElseIf _audit.to = "00000000-0000-0000-0000-000000000000" Then
																			_audit.to = "Everyone"
																		End If
																	End If
																	
																	'Log(si,"   evaluating _audit.from")
																	If Guid.TryParse(_audit.from, guidOutput) Then
																		If secGroupNameFromId.ContainsKey(_audit.from) Then
																			_audit.from = secGroupNameFromId(_audit.from)
																		ElseIf grps.Select(Function(x) x.UniqueID.ToString).ToList().Contains(_audit.from) Then
																			_audit.from = grps.Find(Function(x) x.UniqueID.ToString = _audit.from).Name
																		ElseIf _audit.from = "00000000-0000-0000-0000-000000000000" Then
																			_audit.from = "Everyone"
																		End If
																	End If		
																Else
																	'unknown security group. do nothing.
																End If
																
																'============================================================================= CONVERT SOME KNOWN IDS TO NAMES
																If _audit.propertyName = "ICConstraint" Then
																	If _audit.from = "-999" Then
																		_audit.from = "None"
																	End If
																End If
																
																'Log(si,"   adding update row")	
																If Not _audit.to.XFEqualsIgnoreCase(_audit.from) Then
																	dtUpdate.Rows.Add(AddArrays(si,fcpKeyValues,{itemName,_audit.propertyName,_audit.from,_audit.to}))
																End If
															End If
										                End If
										            Next 
													
												Case "MOVE"
													If Not bMove Then	
														dtMove.Columns.AddRange(AddArrays(si,fcpKeyNames,,propertyList).Select(Function(x) New DataColumn(x)).ToArray())
														bMove = True
													End If					
													dtMove.Rows.Add(AddArrays(si,fcpKeyValues,GetACMItemPropertyValues(si,jObj).ToArray))
													
												Case "COPY"	
													If Not bCopy Then
														Log(si,"Adding columns to COPY table")
														dtCopy.Columns.AddRange(AddArrays(si,fcpKeyNames,,propertyList).Select(Function(x) New DataColumn(x)).ToArray())
														bCopy = True
													End If
													dtCopy.Rows.Add(AddArrays(si,fcpKeyValues,,GetACMItemPropertyValues(si,jObj)))
													
												Case "REMOVE"
													If Not bRemove Then
														Log(si,"Adding columns to REMOVE table")
														dtRemove.Columns.AddRange(AddArrays(si,fcpKeyNames,removeColumns).Select(Function(x) New DataColumn(x)).ToArray())
														bRemove = True
													End If
													
													If itemParent = "" Or itemName = "" Then
														Log(si,"Blank item name or parent found!!!")
													Else
														dtRemove.Rows.Add(AddArrays(si,fcpKeyValues,{itemParent,itemName}))
													End If		
		                                		Case Else
													Log(si,"Unknown action")
													Log(si,"Unknown action type: " & itemAction)  	
		                    				End Select
										Next 
										
									End If
								Else
									Log(si,"No attachment required")
									attachmentFileName = ""
								End If
								#End Region
								
								Log(si,"Add request to email datatable")
								dtRequests.Rows.Add({requestText, dimType, dimName, strTaskActivityItemFinal,"Pending Review"})
								Log(si,$"Email datatable now has {dtRequests.Rows.Count} rows")
								
								'Add request to existing requests (not sure if this is needed but it will prevent any duplicates)
								existingRequests.Add(dr("Request"))
								
								Exit For 'should only be one anyway
							End If
						Next dr	
					
					Else
						'no requests found
						If Not detailedEmailAttachment Then
							attachmentFileName = ""
						End If					
					End If
				End Using
			End If
			Catch ex As Exception
				Log(si,"FCP_GET_ACM AUTOMATION BR>GenerateEmailContent>Failed:" & ex.Message)
				detailedEmailAttachment = False
				err.Add("FCP_GET_ACM_AUTOMATION BR: GenerateEmailContent: Failed: " & ex.Message)
			End Try
		End Sub

		Sub Log(ByVal si As SessionInfo, ByVal logValue As String)
			If debug Then
				If detailedLog = "" Then
					detailedLog = logValue
				Else
					detailedLog += vbnewline & " " & logValue
				End If
			End If
		End Sub
		
		Private Function GetACMItemPropertyNames(ByVal si As sessioninfo, ByVal jObj As JObject) As List(Of String)
	        Dim jProperties As JToken = jObj("Properties")
	        Dim jProp As JProperty
	        Dim jPropName As String
			Dim retVal As New List(Of String)
	        For Each field As JToken In jProperties.Children
	            jProp = field.ToObject(Of JProperty)
	            jPropName = jProp.Name            
				'retVal.Add(chr(34) & jPropName & chr(34))
				retVal.Add(jPropName)
	        Next 	
			Return retVal
		End Function		
		
		Private Function GetACMItemPropertyValues(ByVal si As sessioninfo, ByVal jObj As JObject) As List(Of String)
	        Dim jProperties As JToken = jObj("Properties")
	        Dim jProp As JProperty
	        Dim jPropVal, jPropName As String
			Dim retVal As New List(Of String)
	        For Each field As JToken In jProperties.Children
	            jProp = field.ToObject(Of JProperty)
	            jPropVal = jProp.Value      
				jPropName = jProp.Name
				'retVal.Add(chr(34) & jPropVal & chr(34))
				If jPropName <> "CurrentParentName" Then
					retVal.Add(jPropVal)
				End If
	        Next 	
			Return retVal
		End Function		
		
		Private Function GetACMAuditValues(ByVal si As SessionInfo, ByVal jObj As Object) As List(Of List(Of String))	
		
            Dim jAuditParent As JToken = jObj("Audit")
            Dim auditList As List(Of Audit) = JsonConvert.DeserializeObject(Of List(Of Audit))(jAuditParent.ToString)
            
            'Dim changedFound As Boolean = False
			Dim fromList As New List(Of String)
			Dim toList As New List(Of String)
            For Each _audit As Audit In auditList
				fromList.Add(_audit.from)
				toList.Add(_audit.to)
                'If _audit.to <> _audit.from Then
                'sw.WriteLine($"R{dr("Request"):00000000},{dimType},{dimName},{itemName},{itemAction},{_audit.propertyName},{_audit.from},{_audit.to}")
                'End If
            Next 
			
			Return New List(Of List(Of String))({fromList, toList})
		End Function
	
		Public Function AddArrays(ByVal si As SessionInfo, ByVal array1 As String(), Optional ByVal array2 As String() = Nothing, Optional ByVal l2 As List(Of String) = Nothing ) As String()
			Dim l1 As List(Of String) = array1.ToList()
			If l2 Is Nothing Then l2 = array2.ToList()
			l1.AddRange(l2)
			Return l1.ToArray()
			
			'TODO: is there a faster way to combine two arrays?
			'	Tried using union, but that fails with multiples
			
		End Function
		
		Public Sub CombineTablesToXL(ByVal si As SessionInfo)
				
			'TODO: try to flag renames
			Log(si,"CombineTablesToXL")

			If dtAdd IsNot Nothing And dtAdd.Rows.Count > 0 Then 
				Log(si," Adding ADD Table to dataset")
				ds.Tables.Add(dtAdd)
			End If
			
			If dtUpdate IsNot Nothing And dtUpdate.Rows.Count > 0 Then ' And bUpdate2 Then 
				Log(si," Adding UPDATE Table to dataset")
				ds.Tables.Add(dtUpdate)
			End If
			
			If dtCopy IsNot Nothing And dtCopy.Rows.Count > 0 Then 
				Log(si," Adding COPY Table to dataset")
				ds.Tables.Add(dtCopy)
			End If
			
			If dtMove IsNot Nothing And dtMove.Rows.Count > 0 Then 
				ds.Tables.Add(dtMove)
				Log(si," Adding MOVE Table to dataset")
			End If
			
			If dtRemove IsNot Nothing And dtRemove.Rows.Count > 0 Then 
				Log(si," Adding REMOVE Table to dataset")
				ds.Tables.Add(dtRemove)
			End If
			
			If dtJson IsNot Nothing And dtJson.Rows.Count > 0 And debug Then
				Log(si," Adding JSON Table to dataset")
				ds.Tables.Add(dtJson)
			End If
			
			If debug Then
				
				Dim bf As New Runtime.Serialization.Formatters.Binary.BinaryFormatter
				
				Log(si," Evaluating RAW SOURCE Table")
				Dim objXFUserStateRaw As XFUserState = BRApi.State.GetSessionState(si, False, ClientModuleType.External, String.Empty, String.Empty, acmKey1, "RawSource")
				If objXFUserStateRaw IsNot Nothing Then
					Dim memStream As New MemoryStream
					memStream.Write(objXFUserStateRaw.BinaryValue, 0, objXFUserStateRaw.BinaryValue.Length)
					memStream.Seek(0, SeekOrigin.Begin)
					dtSourceRaw = bf.Deserialize(memStream)				
				End If
				If dtSourceRaw IsNot Nothing And dtSourceRaw.Rows.Count > 0 Then
					Log(si," Adding RAW SOURCE Table to dataset")
					dtSourceRaw.TableName = "RAW"
					ds.Tables.Add(dtSourceRaw)
				Else
					wrn.Add("No source data found")
				End If
				
				Log(si," Evaluating CLEAN Table")
				'dtSourceMod = LoadCsvToDataTableQCQ(si,modFilePath)
				Dim objXFUserStateClean As XFUserState = BRApi.State.GetSessionState(si, False, ClientModuleType.External, String.Empty, String.Empty, acmKey1, "CleanSource")
				If objXFUserStateClean IsNot Nothing Then
					Log(si,"  Getting table from session state")
					Dim memStream As New MemoryStream
					memStream.Write(objXFUserStateClean.BinaryValue, 0, objXFUserStateClean.BinaryValue.Length)
					memStream.Seek(0, SeekOrigin.Begin)
					dtSourceMod = bf.Deserialize(memStream)				
				End If										
				If dtSourceMod IsNot Nothing And dtSourceMod.Rows.COunt > 0 Then
					Log(si," Adding Modified Table to dataset")
					dtSourceMod.TableName = "CLEAN"
					ds.Tables.Add(dtSourceMod)
				End If		
				
			End If

			If includeEmail And detailedEmailAttachment And attachmentFileName <> "" And ds.Tables.Count > 0
				
				'Find possible renames
				If flagPossibleRenames Then
					
					Try
					
						Dim possibleRenames As New DataTable
						possibleRenames.Columns.AddRange({"FromParent","ToParent","AffectedChildren"}.Select(Function(x) New DataColumn(x)).toArray())
						'copyparent name is the key: copyRow("ParentName")
						For Each copyRow As DataRow In dtCopy.Rows
							For Each removeRow As DataRow In dtRemove.Rows
								If copyRow("Name") = removeRow("Name") And copyRow("ParentName") <> removeRow("ParentName") Then
									
									'Check if it already exists
									Dim foundRow As Boolean = False
									For Each prRow As DataRow In possibleRenames.Rows
										If prRow("FromParent") = removeRow("ParentName") Then
											foundRow = True
											prRow("AffectedChildren") = (Integer.Parse(prRow("AffectedChildren")) + 1).ToString
											Exit For
										End If
									Next prRow
									
									If Not foundRow Then					
										possibleRenames.Rows.Add({removeRow("ParentName"),copyRow("ParentName"),"1"})			
									End If
								End If
							Next removeRow
						Next copyRow
						
						If possibleRenames IsNot Nothing And possibleRenames.Rows.Count > 0 Then
							possibleRenames.TableName = "PSBLE_RENAMES"
							ds.Tables.Add(possibleRenames)
						End If
					Catch
						Log(si,"Error finding renames")
					End Try
				End If
				
				'Create excel file
				Log(si," Attempting to create excel file. DS table count: " & ds.Tables.Count)
				CreateExcelDocument(ds,attachmentFileName)
			End If
			
		End Sub
		
		Private Sub CreateExcelDocument(ds As DataSet, sFilename As String)
	        Try
	            Dim WB As SpreadsheetDocument = SpreadsheetDocument.Create(sFilename, SpreadsheetDocumentType.Workbook)

	            ' Add a WorkbookPart to the document.
	            Dim WBP As WorkbookPart = WB.AddWorkbookPart

	            WBP.Workbook = New Workbook
	            WB.WorkbookPart.Workbook.Sheets = New Spreadsheet.Sheets

	            Dim SheetID As Int32 = 1
	            ' Append a new worksheet and associate it with the workbook.
	            For Each dt As DataTable In ds.Tables
	                ' Add a WorksheetPart to the WorkbookPart.
	                Dim WSP As WorksheetPart = WBP.AddNewPart(Of WorksheetPart)()
	                Dim WSD As SheetData = New Spreadsheet.SheetData
	                WSP.Worksheet = New Spreadsheet.Worksheet(WSD)
	                Dim SHS As Sheets = WB.WorkbookPart.Workbook.GetFirstChild(Of Sheets)
	                Dim rID As String = WB.WorkbookPart.GetIdOfPart(WSP)

	                Dim SH As Sheet = New Sheet
	                SH.Id = WB.WorkbookPart.GetIdOfPart(WSP)
	                SH.SheetId = SheetID
	                SH.Name = dt.TableName
	                SheetID = SheetID + 1
	                SHS.Append(SH)

	                Dim HR As Spreadsheet.Row = New Spreadsheet.Row
	                Dim columns As List(Of String) = New List(Of String)
	                For Each column As System.Data.DataColumn In dt.Columns
	                    columns.Add(column.ColumnName)
	                    Dim Cell As Spreadsheet.Cell = New Spreadsheet.Cell
	                    Cell.DataType = Spreadsheet.CellValues.String
	                    Cell.CellValue = New Spreadsheet.CellValue(column.ColumnName)
	                    HR.AppendChild(Cell)
	                Next
	                WSD.AppendChild(HR)

	                For Each dr As System.Data.DataRow In dt.Rows
	                    Dim newRow As Spreadsheet.Row = New Spreadsheet.Row
	                    For Each col As String In columns
	                        Dim Cell As Spreadsheet.Cell = New Spreadsheet.Cell
	                        Cell.DataType = Spreadsheet.CellValues.String
	                        Cell.CellValue = New Spreadsheet.CellValue(dr(col).ToString())
	                        newRow.AppendChild(Cell)
	                    Next
	                    WSD.AppendChild(newRow)
	                Next


	            Next

	            WBP.Workbook.Save()

	            ' Close the document.
	            WB.Close()
	        Catch ex As Exception
	            Throw New Exception(ex.Message, ex)
	        End Try
	    End Sub				
		
		Private Function GetSessionStateValue(ByVal si As SessionInfo, ByVal key As String) As String
			Dim objXFUserState As XFUserState = BRApi.State.GetSessionState(si,False,ClientModuleType.External, String.Empty, String.Empty,acmKey1,key)
			If objXFUserState IsNot Nothing Then
				Return objXFUserState.TextValue
			Else
				Return String.Empty
			End If
		End Function
		#End Region
		
	End Class
	
	#Region "Helper Classes"
		Public Class Audit
			Public Property propertyName As String
			Public Property [from] As String
			Public Property [to] As String
		End Class
		
	#End Region
	
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="FCP_GET_Automation">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_UTILITY" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_UTILITY

Namespace OneStream.BusinessRule.Extender.FCP_GET_Automation
	Public Class MainClass		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				
				'************************************************************************************************************
				'**
				'** This is a BR to allow for automating batchjobs for Connector driven workflows.
				'** To use, you need to create a DataManagement Job, and you need to pass the following parameters to it:
				'** 	wfTop = <Top Workflow you want to loop through all descendants of>
				'**		T3Tag = <What is the tag in the Text3 field of the specific import workflow>
				'**		globScen = <which scenario to run for>
				'**		globTime = <which time to run for>
				'**
				'** Example to put in Parameter field of DataManagement Step:
				'**		wfTop = Clubs, T3Tag = AutoLoad, globScen = |GlobalScenario|, globTime = |GlobalTime|, ParallelCountTag = 10 
				'**  ParallelCountTag is optional, not needed. If not used Batch will will be serialized, if used it will run in parallel
				'**
				'************************************************************************************************************
				
			
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.Unknown, ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep

						'Note for testing purpose
						Dim testing As Boolean = False
					
						'Set all the needed variables
						Dim argProcessCube As Boolean = True
						If args.NameValuePairs.ContainsKey("processCube") Then
							argProcessCube = Convert.ToBoolean(args.NameValuePairs("processCube"))
						End If
						
						Dim globScen As String = args.NameValuePairs("globScen")
						Dim globTime As String = args.NameValuePairs("globTime")
						Dim systemTime As String = globTime
						Dim fixedScenario As String = globScen
						Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
						Dim bolError As Boolean = False
						Dim wfTop As String = args.NameValuePairs("wfTop")
						Dim T3Tag As String = args.NameValuePairs("T3Tag")
						Dim wfProfileInfo As WorkflowProfileInfo = BRApi.Workflow.Metadata.GetProfile(si, wfTop)
						Dim wfClusterPk As WorkflowUnitClusterPk
						Dim wfClusterPk3 As WorkflowUnitClusterPk = Nothing
						'Dim wfClusterPk2 As WorkflowUnitClusterPk
						Dim scenarioMemberID As Integer = BRApi.Finance.Members.GetMemberId(si, dimTypeId.Scenario, fixedScenario)
						Dim scentypeID As Integer = BRApi.Finance.Scenario.GetScenarioType(si,scenarioMemberID).Id
						Dim wfList As New List(Of String)
						Dim parallelCountTag As String = args.NameValuePairs.XFGetValue("ParallelCountTag","1")
						Dim wfProfileDeleteList As New List(Of WorkFlowProfileInfo)  'add 10/05 	
						Dim DMJobName As String = args.NameValuePairs.XFGetValue("DMJobName","DMJob Not Specified") 
						Dim SubjectDMJobName As String = args.NameValuePairs.XFGetValue("DMJobName","") 
						
						'Get all the Import WFs under WFTop with the correct T3Tag and add to list
						wfClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, WfTop, fixedScenario, systemTime)
						If WfTop ="MEC" Then 
							wfClusterPk3 = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, "MEC_DIRECTLOAD", fixedScenario, systemTime)
						Else If wfTop ="MEC_DIRECTLOAD"
							wfClusterPk3 = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, "MEC", fixedScenario, systemTime)
						End If 
						Dim wfpkList As List(Of WorkFlowProfileInfo) = BRApi.Workflow.Metadata.GetRelatives(si, wfClusterPk, WorkflowProfileRelativeTypes.Descendants, WorkflowProfileTypes.InputImportChild)
						Dim objList As List(Of WorkFlowProfileInfo) = New List(Of WorkFlowProfileInfo)
						objList.AddRange(wfpkList)
						If wfClusterPk3 IsNot Nothing 	Then 
							Dim wfpk3List As List(Of WorkFlowProfileInfo) = BRApi.Workflow.Metadata.GetRelatives(si, wfClusterPk3, WorkflowProfileRelativeTypes.Descendants, WorkflowProfileTypes.InputImportChild)
							objList.AddRange(wfpk3List)
						End If
						Dim dsList As List(Of String) = New List(Of String)
						For Each wfItem As WorkflowProfileInfo In objList
							'brapi.ErrorLog.LogMessage(si,$"Item : {wfItem} ; Top : {wfTop} ; T3Tag : {T3Tag}")
							If wfItem.GetAttributeValue(scentypeID,SharedConstants.WorkflowProfileAttributeIndexes.Text3).Split(",").Contains(T3Tag) Then
								'If WF is locked, do nothing
								Dim wfCLusterPk2 = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, wfItem.Name, fixedScenario, systemTime)						
								Dim wfStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfClusterPk2)	
								If Not wfStatus.Locked Then
									wfList.Add(stringhelper.ReplaceString(wfItem.Name,".",";",True))									
									dsList.Add(wfItem.GetAttribute(scentypeID, SharedConstants.WorkflowProfileAttributeIndexes.DataSource).Value)
								End If
							End If	 	
						Next	
						'Split By . group by Wfname (workflow which contains 2 Imports select Direct load Import based on condition)
						'Loop through the generated list of WFs, and create trigger file
						If wfList.Count > 0 Then
							'Loop through the generated list of WFs, and delete stagesummarytargetdata
							If wfProfileDeleteList.Count > 0 Then
								Dim timeId As Integer = BRApi.Finance.Members.GetMemberId(si,DimType.Time.Id, systemTime)
								For Each wfProfile As WorkflowProfileInfo In wfProfileDeleteList
									Me.DeleteAllRowsForScenarioTimeForStageSummaryTargetDataTable(si,wfProfile.UniqueID,scenarioMemberID,timeId,timeId)                                                    
								Next
							End If	

							For Each wfMem As String In WfList
								'Create GL WF Batch Trigger File
								Me.CreateBatchFileTrigger(si,FileShareFolderHelper.GetBatchHarvestFolderForApp(si, True, configSettings.FileShareRootFolder, configSettings.FileShareBatchHarvestRootFolder,si.AppToken.AppName),wfMem.ToString,fixedScenario,systemTime, Testing)
					    	Next
						End If
						
						'Set Processing Switches	
						Dim valTransform As Boolean = True
						Dim valIntersect As Boolean = True
						'7/16/2020 Change to False for import issue to not execute the load to cube
						Dim loadCube As Boolean = True
						'7/16/2020 Change to False for import issue to not execute the load to cube
						Dim processCube As Boolean = argProcessCube
						Dim confirm As Boolean = False
						Dim autoCertify As Boolean = False
						
						Dim batchinfo As WorkflowBatchFileCollection = Nothing
							
						If Not testing Then
							If parallelCountTag = "" Or parallelCountTag = "1" Then
								batchInfo = BRApi.Utilities.ExecuteFileHarvestBatch(si, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, False)
							Else 
								Dim parallelCount As Integer = parallelCountTag.XFConvertToInt
								If parallelCount > 8 Then
    							   parallelCount = 8
								End If

								batchInfo = BRApi.Utilities.ExecuteFileHarvestBatchParallel(si, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, parallelCount)
							End If
						End If
						
						If batchInfo IsNot Nothing Then
							Dim emailList = Me.GetEmailDistList(si, String.Join("', '", dsList))
							CommonUtility.SendMail(si, String.Empty, String.Empty, emailList, SubjectDMJobName, batchInfo)
						End If
						
				End Select

				Return Nothing
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Function GetEmailDistList(ByVal si As SessionInfo, ByVal moduleNames As String) As List(Of String)
		 	Dim result As List(Of String)
			Try 
			     Dim sqlStr As String = $"Select ParmValue From XFT_Global_Parameters GP, ParserLayouts PL WITH (NOLOCK) Where PL.UniqueID IN ('{moduleNames}') 
				 							AND Lower(GP.Module) = Lower(PL.LayoutName) AND AppName = '{si.AppName}' AND ParmName = 'EmailDist'"

				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					Using dt As DataTable = BRAPi.Database.ExecuteSql(dbConnApp, sqlStr, True)
						result = String.Join(",", dt.AsEnumerable().Select(Function(dr) dr("ParmValue"))).Split(",").Where(Function(x) Not String.IsNullOrWhiteSpace(x)).Select(Function(x) x.Trim).Distinct().ToList()
					End Using
				End Using
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
			Return result
	    End Function
		
		#Region "General Helpers"
			
			Private Sub CreateBatchFileTrigger(ByVal si As SessionInfo, ByVal harvestPath As String, ByVal wfName As String, ByVal wfScenario As String, ByVal wfTime As String, ByVal Testing As Boolean)
			
			Dim Path As String = String.Empty

				If Not Testing Then
					
					path = harvestPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-R.txt"
				Else
				Dim testingFolderPath As String = BRApi.FileSystem.GetFileShareFolder(si, Filesharefoldertypes.Batch, Nothing) & "\_Testing"
				If Not Directory.Exists(testingFolderPath) Then directory.CreateDirectory(testingFolderPath) 
					
					path = testingFolderPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-R.txt"
				End If
					
				If Not File.Exists(path) Or Testing = True Then
					' Create a file to write to. 
					Using sw As StreamWriter = File.CreateText(path)
						sw.WriteLine("Batch File Trigger")
					End Using
				End If
			End Sub		
				
		#End Region
		#Region "SummaryTargetDeleteHelper"
			Public Sub DeleteAllRowsForScenarioTimeForStageSummaryTargetDataTable(ByVal si As SessionInfo, ByVal workflowProfileID As Guid, ByVal scenarioId As Integer, ByVal startWFTimeId As Integer, ByVal endWFTimeId As Integer)
                Try
                    'Delete Summary Target Data For Clusters
                    Dim table As New StageSummaryTargetDataTable
                    Dim dbWheres As New List(Of DbWhere)
                    dbWheres.Add(New DbWhere(StageSummaryTargetDataColNames.DimWorkflowProfileKey, DbOperator.IsEqualTo, workflowProfileID))
                    dbWheres.Add(New DbWhere(StageSummaryTargetDataColNames.DimWorkflowScenarioKey, DbOperator.IsEqualTo, scenarioId))
                    dbWheres.Add(New DbWhere(StageSummaryTargetDataColNames.DimWorkflowTimeKey, DbOperator.IsGreaterThanOrEqualTo, startWFTimeId, "StartWFTimeId"))
                    dbWheres.Add(New DbWhere(StageSummaryTargetDataColNames.DimWorkflowTimeKey, DbOperator.IsLessThanOrEqualTo, endWFTimeId, "EndWFTimeId"))

                    Using dbConnApp As DbConnInfo = BRApi.DataBase.CreateApplicationDbConnInfo(si)
                  		table.BatchDeleteRows(dbConnApp, dbWheres, False)
                    End Using

                Catch ex As Exception
                    Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
                End Try
            End Sub
		#End Region
    End Class

End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="FCP_INTEGRATION_CT_PROCESS_PG">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_VARIABLES" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_GATEWAY" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_UTILITY" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports System.Net
Imports System.Net.Http
Imports System.Timers
Imports System.Threading
Imports System.Threading.Tasks
Imports System.Diagnostics
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
Imports Newtonsoft.Json.JsonPropertyAttribute

Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_VARIABLES
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_GATEWAY
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_UTILITY
Imports OneStream.BusinessRule.Extender.OS_Models


Namespace OneStream.BusinessRule.Extender.FCP_INTEGRATION_CT_PROCESS_PG
	Public Class MainClass
		
		Private m_FCPGateWay As IntegrationGateway(Of FCPPutIntegrationParams) = Nothing

		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
		
			Dim moduleName As String = args.NameValuePairs("ModuleName")
			
			m_FCPGateWay = New IntegrationGateway(Of FCPPutIntegrationParams)(si, moduleName, OSModuleType.FCPPut, args)
			
			BRApi.ErrorLog.LogMessage(si, $"Process1 : {m_FCPGateWay.Params.ModuleName} - Status: Started, AppUniqueId: {si.AppUniqueID}, TimeStamp: {DateTime.Now}")
			
			Dim emailBody As String = Nothing
			Dim emailSubject As String = $"{m_FCPGateWay.Params.ModuleName} data processing"
						
			Dim batchStatusMsg As String = String.Empty
			Dim batchResults As List(Of WorkflowBatchFileCollection) = Nothing
			Try
				Dim jsonStr As String = "{""Type"" :""" & m_FCPGateWay.Params.ModuleName & """}"
				
				If m_FCPGateWay.Params.Debugger
					'BRApi.ErrorLog.LogMessage(si, $"Process: {m_FCPGateWay.Params.ModuleName} - Batch ID requested for Endpoint: {m_FCPGateWay.Params.EndPoint(OSActionType.Guid.ToString)(0)}, Headers: [{m_FCPGateWay.Params.ConsumerID}, {m_FCPGateWay.Params.SvcEnv}, {m_FCPGateWay.Params.SvcName}]")
					BRApi.ErrorLog.LogMessage(si, $"Process2 : {m_FCPGateWay.Params.ModuleName} - Batch ID requested for Endpoint: {m_FCPGateWay.Params.EndPoint(OSActionType.Guid.ToString)(0)}, Json-Body: {jsonStr}, Headers: [{m_FCPGateWay.Params.ConsumerID}, {m_FCPGateWay.Params.SvcEnv}, {m_FCPGateWay.Params.SvcName}]")
				End If
				
				Dim processBatchID As String = String.Empty
				'Get batch id
				Dim response As Task(Of OSJsonResponse) = m_FCPGateWay.PutData(si, jsonStr, False, OSActionType.Guid)
				Dim jsonResult As Dictionary(Of String, String) = JsonConvert.DeserializeObject(Of Dictionary(Of String, String))(response.result.JsonData)

				If jsonResult.ContainsKey("Status") And jsonResult("Status").ToLower().Equals("success")  Then 
					processBatchID = jsonResult("BatchId")
					If m_FCPGateWay.Params.Debugger
						BRApi.ErrorLog.LogMessage(si, $"Process3 : {m_FCPGateWay.Params.ModuleName} - Batch Id: '{processBatchID}' generated successfully")
					End If
					
					Dim putSqlCount As Integer = 0					
					'Create and send pages to endpoint
					For Each sqlEle In m_FCPGateWay.Params.JsonSql
						'update the sql String for paging
						Dim pageSize As Integer = 50000

						'get the json by page			
						Dim compiledSql As String = sqlEle.Value.Replace("[BATCHID]", processBatchID).Replace("[PAGESIZE]", pageSize).Replace("[WFYEAR]", m_FCPGateWay.Params.WFTime)											
															 
						CommonUtility.ProcessPutRequest(si, m_FCPGateWay, compiledSql, putSqlCount, pageSize)
						BRApi.ErrorLog.LogMessage(si, $"CompiledSql: {compiledSql} {putSqlCount} - Check Sql")
						putSqlCount += 1
					Next
					
					jsonStr = "{""Batch_ID"" :""" & processBatchID & """, ""Type"" : """ & m_FCPGateWay.Params.ModuleName & """}"
					
					If m_FCPGateWay.Params.Debugger
						brapi.ErrorLog.LogMessage(si, $"Process4 : {m_FCPGateWay.Params.ModuleName} - Calling Put Trigger")
					End If
					
					' call the put trigger 
					Dim tgrResponse As Task(Of OSJsonResponse) = m_FCPGateWay.PutData(si, jsonStr, False, OSActionType.Trigger)
					Dim tgrResult = JsonConvert.DeserializeObject(Of Dictionary(Of String, String))(tgrResponse.result.JsonData)
					
					If tgrResult.ContainsKey("responseStatus") And tgrResult("responseStatus").ToLower().Equals("success") Then 
						'wait for the status pull to return finish
						Dim batchstatus As BatchStatus = CommonUtility.GetBatchStatus(si, m_fcpGateWay, processBatchID)
						If batchstatus = BatchStatus.Finished Then
							'Generate OS trigger file 
							batchResults = CommonUtility.CreateOSTriggerFiles(si, m_fcpGateWay)
						Else
							Throw New Exception($"Process5 : {m_FCPGateWay.Params.ModuleName} - Status: Request {batchstatus}, Msg: Failed to process data request from financial system.")
						End If
					Else
						Throw New Exception($"Process6 : {m_FCPGateWay.Params.ModuleName} - Status: {If(tgrResult.ContainsKey("responseStatus"), tgrResult("responseStatus"), tgrResponse.result.ReasonPhrase)}, Msg: Fcp Success Trigger Failed.")
					End If
				Else
					Throw New Exception($"Process6 : {m_FCPGateWay.Params.ModuleName} - Status: {If(jsonResult.ContainsKey("Status"), jsonResult("Status"), response.result.ReasonPhrase)}, Msg: Fcp Success Trigger Failed.")
				End If
				
				emailSubject &= ": SUCCESS"
				emailBody = "Import into OneStream completed successfully."
				Return Nothing
			Catch ex As Exception
				emailSubject &= $": ERROR"
				emailBody = ex.Message				
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			Finally
				CommonUtility.SendMail(si, emailSubject, emailBody, m_FCPGateWay.Params, batchResults)	
				BRapi.ErrorLog.LogMessage(si, $"Process7 : {m_FCPGateWay.Params.ModuleName} - Status: Exited, AppUniqueId: {si.AppUniqueID}, TimeStamp: {DateTime.Now}")
			End Try
		End Function	
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="FCP_INTEGRATION_FX_RATE">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="FCP_INTEGRATION_UTIL" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_VARIABLES" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_UTILITY" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports System.Diagnostics
Imports System.Net
Imports System.Net.Http
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
Imports System.Reflection
Imports System.Threading.Tasks

Imports FcpIntegrationUtil = OneStream.BusinessRule.Extender.FCP_INTEGRATION_UTIL
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_VARIABLES
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_UTILITY
Imports OneStream.BusinessRule.Extender.OS_Models


'DPA - 16060 OS E&S - FX Rate Load Dashboard
Namespace OneStream.BusinessRule.Extender.FCP_INTEGRATION_FX_RATE
	Public Class MainClass
		
		Public m_getFxRateLog As New Text.StringBuilder
		Public m_FxRateLogforEmail As New Text.StringBuilder
		Public Transformation As String
		Public Scenario As String
		Public ScenarioWeek As String
		Public Period As String
		
		Public RateType As String
		Public Version As String
		
		Dim fcpPeriod As Integer
		Dim recordsProcessedACT As Integer = 0
		Dim recordsProcessedFCST As Integer = 0
		Dim DEBUG As Boolean = True
		Dim fcpIntegrator As FcpIntegrationUtil.MainClass = Nothing
		
		'Load FxRates for selected Apps
		Private Const param_Selected As String = "prm_FX_Rate_app_list_selected"
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
			
				'Developed by vn51vvz
				'Load FxRates for selected Apps
				#Region "Load FxRates for selected Apps"
				'Dim AppName=Brapi.Dashboards.Parameters.GetLiteralParameterValue(si,False,param_Selected)
				
				'updated by vn51vvz on 20220302 -- FX Rate automation -- START
				'Dim AppName=""
				Dim errMsg As String
				
				Dim AppName = Brapi.Dashboards.Parameters.GetLiteralParameterValue(si,False,param_Selected)
				'brapi.ErrorLog.LogMessage(si, $"AppNameAppNameAppName ==>>: {AppName}")
				If AppName = "" Then
					If args.NameValuePairs.ContainsKey("app_Selected") Then
						AppName = args.NameValuePairs.XFGetValue("app_Selected")
						
						If String.IsNullOrWhiteSpace(AppName) Then
							If DEBUG Then brapi.ErrorLog.LogMessage(si, "Apps Selected Validations failed. Period can not be blank or null.")
							Return Nothing
						End If
					Else
						errMsg =  "app_Selected is missing from parameters"
						If DEBUG Then Me.AddLogMessage(si,errMsg)
						Throw New XFUserMsgException(si, New Exception(errMsg))
					End If
				End If
				
				brapi.ErrorLog.LogMessage(si, $"Selected Apps with hyphen ==>>: {AppName}")
				
	            Dim AppNames As String() = AppName.Split(New Char() {"|"c})
				'updated by vn51vvz on 20220302 -- FX Rate automation -- END
				
				For Each appName In AppNames
					
					Dim m_moduleName As String = "FCP_FX_RATES"
					
					#Region "Perform validations on the parameters passed in from DM Step"
				
					#Region "Parameters for _Reported, _Spot"
					If args.NameValuePairs.ContainsKey("Period") Then
						Period = args.NameValuePairs.XFGetValue("Period")
						
						If String.IsNullOrWhiteSpace(Period) Then
							If DEBUG Then brapi.ErrorLog.LogMessage(si, "Parameter Validations failed. Period can not be blank or null.")
							Return Nothing
						End If
					Else
						errMsg =  "Period is missing from parameters"
						If DEBUG Then Me.AddLogMessage(si,errMsg)
						Throw New XFUserMsgException(si, New Exception(errMsg))
					End If
					
					If args.NameValuePairs.ContainsKey("Transformation") Then
						Transformation = args.NameValuePairs.XFGetValue("Transformation")
						
						If String.IsNullOrWhiteSpace(Transformation) Then
							If DEBUG Then brapi.ErrorLog.LogMessage(si, "Parameter Validations failed. Transformation can not be blank or null.")
							Return Nothing
						End If
					Else
						errMsg =  "Transformation is missing from parameters"
						If DEBUG Then Me.AddLogMessage(si,errMsg)
						Throw New XFUserMsgException(si, New Exception(errMsg))
					End If
					
					If Transformation.XFContainsIgnoreCase("_Reported") Then
						If args.NameValuePairs.ContainsKey("Scenario") Then
							Scenario = args.NameValuePairs.XFGetValue("Scenario")
							
							If String.IsNullOrWhiteSpace(Scenario) Then
								If DEBUG Then brapi.ErrorLog.LogMessage(si, "Parameter Validations failed. Scenario can not be blank or null.")
								Return Nothing
							End If
						Else
							errMsg =  "Scenario is missing from parameters"
							If DEBUG Then Me.AddLogMessage(si,errMsg)
							Throw New XFUserMsgException(si, New Exception(errMsg))
						End If
					End If
					#End Region
				
					#Region "Parameters for _LRP"
					If Transformation.XFContainsIgnoreCase("_LRP") Then
						If args.NameValuePairs.ContainsKey("RateType") Then
							RateType = args.NameValuePairs.XFGetValue("RateType")
							
							If String.IsNullOrWhiteSpace(RateType) Then
								If DEBUG Then brapi.ErrorLog.LogMessage(si, "Parameter Validations failed. RateType can not be blank or null.")
								Return Nothing
							End If
						Else
							errMsg =  "RateType is missing from parameters"
							If DEBUG Then Me.AddLogMessage(si,errMsg)
							Throw New XFUserMsgException(si, New Exception(errMsg))
						End If
						
						If args.NameValuePairs.ContainsKey("Version") Then
							Version = args.NameValuePairs.XFGetValue("Version")
							
							If String.IsNullOrWhiteSpace(Version) Then
								If DEBUG Then brapi.ErrorLog.LogMessage(si, "Parameter Validations failed. Version can not be blank or null.")
								Return Nothing
							End If
						Else
							errMsg =  "Version is missing from parameters"
							If DEBUG Then Me.AddLogMessage(si,errMsg)
							Throw New XFUserMsgException(si, New Exception(errMsg))
						End If
					End If
					#End Region
				
					If args.NameValuePairs.ContainsKey("WeekNo") Then
						ScenarioWeek = args.NameValuePairs.XFGetValue("WeekNo")
					End If
					
					brapi.ErrorLog.LogMessage(si, $"Transformation : {Transformation}{vbNewLine}Period : {Period}{vbNewLine}Version : {Version}{vbNewLine}RateType : {RateType}{vbNewLine}ScenarioWeek : {ScenarioWeek}")
					
					#End Region

					Dim newSeshInfo As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si, appName.TrimStart(), openAppResult.Success)
					
					'fcpIntegrator = New FcpIntegrationUtil.MainClass(newSeshInfo, m_moduleName)
					fcpIntegrator = New FcpIntegrationUtil.MainClass(si, m_moduleName)
					
					Dim params = New Dictionary(Of String, String)
					
					#Region "Building endpoint Params"				
					If Transformation.XFContainsIgnoreCase("_LRP") Then
						params.Add("RATE_TYPE", $"{RateType}_{Version}")
					End If
					
					params.Add("YEAR", Period)
					
					Dim fxArguments As New Text.StringBuilder						
					fxArguments.Append("{EndPoint=" & fcpIntegrator.Params.EndPoint(OSActionType.Get.ToString)(0) & "}")
					fxArguments.Append("{EmailDistribution=" & fcpIntegrator.Params.EmailDistribution & "}")
					fxArguments.Append("{SvcName=" & fcpIntegrator.Params.SvcName & "}")
					fxArguments.Append("{ConsumerId=" & fcpIntegrator.Params.ConsumerId & "}")
					fxArguments.Append("{SvcEnv=" & fcpIntegrator.Params.SvcEnv & "}")
					fxArguments.Append("{Period=" & Period & "}")
					fxArguments.Append("{Transformation=" & Transformation & "}")
					Me.AddLogMessage(si, $"FX Rate Load Started: {fxArguments.ToString}")
					
					#End Region
				
					Dim dataResult As ActualsData = fcpIntegrator.GetDataTableFromFcp(si, params)
					
					Me.AddLogMessage(si, $"GetIntegrationLog : "+ fcpIntegrator.GetIntegrationLog)
					m_FxRateLogforEmail.AppendLine(m_getFxRateLog.ToString)
				
					Dim rateType_Log As String = ""
					If dataResult.Success Then
						If dataResult.Data IsNot Nothing Then
							Dim dv As New DataView(dataResult.Data)
							
							If Transformation.XFContainsIgnoreCase("_Reported") Then
								dv.RowFilter="RATE_TYPE = 'AverageRate_USD_Reported' OR RATE_TYPE = 'ClosingRate_USD_Reported' OR RATE_TYPE = 'YTDAverageRate_USD_Reported'"
								
								If Transformation.XFContainsIgnoreCase("_Reported_WK") Then
									rateType_Log = "FCST Weekly"
								Else 
									If	Scenario.XFContainsIgnoreCase("actuals") Then
										rateType_Log = "Actual"
									Else
										rateType_Log = "Forecast"
									End If
								End If
								
							Else If Transformation.XFContainsIgnoreCase("_Spot") Then
								rateType_Log = "Spot"
								dv.RowFilter="RATE_TYPE = 'AverageRate_USD_Spot' OR RATE_TYPE = 'ClosingRate_USD_Spot' OR RATE_TYPE = 'YTDAverageRate_USD_Spot'"
							
							Else If Transformation.XFContainsIgnoreCase("_Plan") Then
								rateType_Log = "Plan"
								dv.RowFilter="RATE_TYPE = 'AverageRate_USD_Plan' OR RATE_TYPE = 'ClosingRate_USD_Plan' OR RATE_TYPE = 'YTDAverageRate_USD_Plan'"
							
							Else If Transformation.XFContainsIgnoreCase("_PEG") Then
								rateType_Log = "PEG"
								dv.RowFilter="RATE_TYPE = 'AverageRate_USD_PEG' OR RATE_TYPE = 'ClosingRate_USD_PEG' OR RATE_TYPE = 'YTDAverageRate_USD_PEG'"
						
							Else If Transformation.XFContainsIgnoreCase("_LRP") Then
								rateType_Log = "LRP"
							
							End If
							
							If DEBUG Then brapi.ErrorLog.LogMessage(si, $" Records after filter : {dv.ToTable().Rows.Count}")
							brapi.ErrorLog.LogMessage(si, $"Line# 220")
							Me.ExecuteOsSetRate(newSeshInfo, dv.ToTable())
							
						Else
							Me.AddLogMessage(si, "Endpoint returned nothing.")
						End If
					Else
						Me.AddLogMessage(si,$"Errorcode:{dataResult.StatusCode}, Message: {dataResult.ReasonPhrase}")
					End If					
				
					If DEBUG Then brapi.ErrorLog.LogMessage(si, m_getFxRateLog.ToString)
					
					'Sending email with details
					CommonUtility.SendMail(newSeshInfo, "FX Rates Load - " & rateType_Log,  m_FxRateLogforEmail.ToString, "FX_RATES", fcpIntegrator.Params)
				Next
				#End Region
				
				Return Nothing
			Catch ex As Exception
				brapi.ErrorLog.LogMessage(si, $"Main Exception. {ex.Message} {vbNewLine} {m_getFxRateLog.ToString}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Sub ExecuteOsSetRate(ByVal si As SessionInfo, ByVal dt As DataTable)
			Try
				For Each dr As DataRow In dt.Rows
					Dim rateLogger As New Text.StringBuilder
					For Each dc As DataColumn In dt.Columns
						rateLogger.AppendLine($"{dc.ColumnName}: {dr(dc.ColumnName)}")
					Next
					
					If Transformation.XFContainsIgnoreCase("_LRP") Then
						Select Case Convert.ToString(dr("CAL_TYPE"))
							Case Is = ""	'PERIOD--Import all records When CAL_TYPE Is null/blank 
									Me.SetOsRate(si, dr("RATE_TYPE"), dr("FROM_CRNCY_CD"), dr("TO_CRNCY_CD"), dr("FX_RATE"), rateLogger.ToString, dr("YEAR") & "M" & dr("PERIOD"))
							Case Else
								'Skip it
								Me.AddLogMessage(si, $"Skipped Record (Bad CAL_TYPE): {rateLogger.ToString}")
						End Select
					Else If Transformation.XFContainsIgnoreCase("_WK") Then
						Select Case Convert.ToString(dr("CAL_TYPE"))
							Case Is ="FiscalYearRate"	'PERIOD--Import all records When CAL_TYPE Is “FiscalYearRate” 
								Me.SetOsRate(si, dr("RATE_TYPE") & "_" + ScenarioWeek, dr("FROM_CRNCY_CD"), dr("TO_CRNCY_CD"), dr("FX_RATE"), rateLogger.ToString, dr("YEAR") & "M" & dr("PERIOD"))
							Case Else
								'Skip it
								Me.AddLogMessage(si, $"Skipped Record (Bad CAL_TYPE): {rateLogger.ToString}")
						End Select
					Else
						Select Case Convert.ToString(dr("CAL_TYPE"))
							Case Is ="FiscalYearRate"	'PERIOD--Import all records When CAL_TYPE Is “FiscalYearRate” 
								Me.SetOsRate(si, dr("RATE_TYPE"), dr("FROM_CRNCY_CD"), dr("TO_CRNCY_CD"), dr("FX_RATE"), rateLogger.ToString, dr("YEAR") & "M" & dr("PERIOD"))
							Case Else
								'Skip it
								Me.AddLogMessage(si, $"Skipped Record (Bad CAL_TYPE): {rateLogger.ToString}")
						End Select
					End If
				Next
			Catch ex As Exception
				Me.AddLogMessage(si, ex.Message)
				'Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		Public Sub SetOsRate(ByVal si As SessionInfo, ByVal rateType As String, ByVal fromCurrency As String, ByVal toCurrency As String, ByVal fxRateValue As String, ByVal rateRecord As String, Optional ByVal OsTime As String = "")
			Try
				'-------------------------------------------------------------------------------------------------------------------------------------------------------------
				'Initialize FxRate objects
				'-------------------------------------------------------------------------------------------------------------------------------------------------------------
				Dim objFxRatePk As New FxRatePkUsingNames
				Dim objfxRate As New FxRateUsingNames
				Dim objXFResult As XFResult 
				'-------------------------------------------------------------------------------------------------------------------------------------------------------------
				
				'Lookup FCP to OS Rate type
				Dim osRateType As String
				osRateType = BRApi.Utilities.TransformText(si,  rateType, Transformation, False)
				
				If String.IsNullOrWhiteSpace(osRateType) Then
					If DEBUG Then Me.AddLogMessage(si, $"Lookup Rule Group ({Transformation}) didn't find a lookup for {rateType} {vbNewLine} {rateRecord}")
					Exit Sub
				End If
				
				objFxRatePk.FxRateType = osRateType
				If OsTime="" Then
						objFxRatePk.Time = Period
					Else
						objFxRatePk.Time = OsTime
				End If
				
				'This has commented by chittibabu due to the columns are flipped at FCP end.15/01/2021
				'objFxRatePk.SourceCurrency = toCurrency
				'objFxRatePk.DestCurrency = fromCurrency
				objFxRatePk.SourceCurrency = fromCurrency
				objFxRatePk.DestCurrency = toCurrency
				
				objFxRate.FxRatePkUsingNames = objFxRatePk
				
				'Convert FCP Rate to Decimal
				Dim rHolder As String = fxRateValue
				
				If IsNumeric(rHolder) Then
					Dim fcpRate As Decimal = rHolder.XFConvertToDecimal
					objfxRate.Amount = fcpRate
					objFxRate.HasData = True
					objFxRate.IsInvalid = False
					
					objXFResult = BRApi.Finance.Data.SetFxRate(si, objfxRate)
					
					If Not objXFResult.BoolValue Then
						'Unsuccessful Rate Load
						Me.AddLogMessage(si, "Rate Not Set: " & objXFResult.Message & vbNewLine &  vbNewLine & rateRecord)
					Else
						Me.AddLogMessage(si, "Rate Set: " & vbNewLine & rateRecord)
					End If
				Else
					Me.AddLogMessage(si, "FX_RATE is not numeric")
				End If
				
			Catch ex As Exception
				Me.AddLogMessage(si, ex.Message)
				'Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		Public Sub AddLogMessage(ByVal si As SessionInfo, ByVal message As String)
			Try
				
				m_getFxRateLog.AppendLine("-------------------------------------------------------------------------------------")
				m_getFxRateLog.AppendLine($"Time:{vbTab}{vbTab}{vbTab}{vbTab}{vbTab}{vbTab}{vbTab}{Date.Now.ToString}")
				m_getFxRateLog.AppendLine($"Message:{vbTab}{vbTab}{vbTab}{vbTab}{vbTab}{vbTab}{message}")
				m_getFxRateLog.AppendLine("-------------------------------------------------------------------------------------")
				m_getFxRateLog.AppendLine(String.Empty)
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
	End Class
	
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="FCP_Integration_Metadata_Refresh">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_GATEWAY" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_VARIABLES" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_UTILITY" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Threading.Tasks
Imports System.Net
Imports System.Net.Http
Imports System.Timers
Imports System.Threading
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
Imports System.Web.Script.Serialization
Imports Newtonsoft.Json.JsonPropertyAttribute
Imports System.Diagnostics
Imports System.Net.Mail

Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_GATEWAY
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_VARIABLES
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_UTILITY
Imports OneStream.BusinessRule.Extender.OS_Models


Namespace OneStream.BusinessRule.Extender.FCP_Integration_Metadata_Refresh	
	Public Class MainClass
		Private totalPages As Integer
		Private m_Total_Pages As Integer
		Private page_Row_Validator As Integer=1
		Private row_Count_Total As Integer=0
		Private row_Count_File As Integer=0
	    Private totalPageCount As Integer=1
		
		Private batchID As String 
		Private strbuHierarchy As New System.Text.StringBuilder
		Private strbuProperties As New System.Text.StringBuilder
		Private hierarchy_Data As String 
		Private  m_moduleName As String 
		Private dimesionsHierarchy As List(Of Object) = New List(Of Object)
		Private dimesionsProperty As List(Of Object) = New List(Of Object)
		Private m_PageSize As Integer = 50000
		Private Const edmcs_Property As String ="edmcs_property"
		Private Const edmcs_Hierarchy As String ="edmcs_hierarchy"
		Private Const property_TypeBatchID As String ="EDMCS_OS_METADATA"
		'Private Const hierarchy_TypeBatchID As String ="Edmcs_hierarchy"
		Private Const param_Selected As String = "param_app_list_selected"
		Private Const param_dim_Selected As String = "param_dim_list_selected"
		Private Export As String 
		Private securityGroups As Dictionary(Of String, String) = New Dictionary(Of String, String)()
		Private oneTimeLog As Boolean = False
		
'		Private clsJSONtoCSV As New clsJSONtoCSV()
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try	
				m_moduleName=  args.NameValuePairs("ModuleName")
				Export = args.NameValuePairs.XFGetValue("export") 
				Brapi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"param_app_last_run_by_user",si.UserName)
				Brapi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"param_app_last_run_time",(DateTime.Now).AddHours(6).ToString)
				strbuHierarchy.AppendLine(String.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8}", "APPLICATION_NAME", "DIMENSION_TYPE", "DIMENSION_NAME", "CHILD", "PARENT","OS_NM","OS_PARENT","SORT_ORDER", "AGG_WGT"))						
				strbuProperties.AppendLine(String.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13}", "APPLICATION_NAME", "DIMENSION_TYPE", "DIMENSION_NAME", "MEMBER_NAME", "OS_NAME", "OS_DESCRIPTION", "DESCRIPTION","TXT1", "TXT2", "TXT3", "TXT4","TXT5","TXT6","TXT7","TXT8"))				
				Dim AppName = args.NameValuePairs.XFGetValue(param_Selected)				
			    Dim DimName = args.NameValuePairs.XFGetValue(param_dim_Selected)
				BRApi.ErrorLog.LogMessage(si, $"Dimension name FCP is -{AppName}")

				Dim fcpGateway = New IntegrationGateWay(Of FCPDimensionParams)(si, m_moduleName, OSModuleType.DIMENSION)	
		 
	            Dim AppNames As String() = AppName.Split(New Char() {","c})	
				Dim DimNames As String() = DimName.Split(New Char() {","c})	
				For Each appName In AppNames					
					Dim newSeshInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si, appName.Trim, openAppResult.Success)
					'Clear security groups from old app and load for current app
					securityGroups.Clear
					LoadSecurityGroups(newSeshInfo)

					For Each dimName In DimNames 'New String() {"Flow", "UD2", "UD3", "UD4", "UD5", "UD6", "UD7", "UD8"}
						
						Dim dimInfo As KeyValuePair(Of DimType, String) = Me.GetDimensionType(dimName)
						Dim dims As List(Of OneStream.Shared.Wcf.Dim)  = BRApi.Finance.Dim.GetDims(newSeshInfo, dimInfo.Key.Id)
					
						For Each dimEntry In dims						
							Dim mbrs As List(Of Member) = BRApi.Finance.Members.GetAllMembers(newSeshInfo, dimEntry.DimPk, True)
							For Each mbr In mbrs
								Dim prntMbrs = BRApi.Finance.Members.GetParents(newSeshInfo, dimEntry.DimPk, mbr.MemberId, True)
								For Each prntMbr In prntMbrs 
									Dim relInfo = BRApi.Finance.Members.GetRelationshipInfo(newSeshInfo, mbr.DimTypeId, mbr.Name, prntMbr.Name)'										
                                    dimesionsHierarchy.add(GetDimensionInfoHierarchy(newSeshInfo, dimEntry.Name, mbr, prntMbr, relInfo))									   
                                    dimesionsProperty.add(GetDimensionInfoProperties(newSeshInfo, dimEntry.Name, mbr, prntMbr, relInfo))						
								Next
							Next
						Next			
					Next				
				Next			
			totalPages  = Math.Ceiling(dimesionsHierarchy.Count/m_PageSize)	
			BRApi.ErrorLog.LogMessage(si, $"Count ={dimesionsHierarchy.Count} Page size ={m_PageSize}  Total Page = {totalPages}")
		
			If export ="true" Then 				
				Dim logFolderPath As String = BRApi.Utilities.GetFileShareFolder(si, FileShareFolderTypes.ApplicationIncoming, Nothing).Replace("\Incoming","")  & "\Groups\Everyone\Metadata_Archive\"
				'logFolderPath &= "wfName\"
				If Not Directory.Exists(logFolderPath) Then
					Directory.CreateDirectory(logFolderPath) 
				End If 
				Dim hierarchyHeaderString As String="APP_NM,CHILD,PARENT,OS_NM,OS_PARENT,DIMENSION,DIMENSION_TYPE,SORT_ORDER, AGG_WGT" 
				Dim destfilePathHierarchy As String = $"{logFolderPath}\{DateTime.Now.ToString("ddMMyyyyHHmmss")}_{AppName}_{DimName}_Hierarchy_{si.UserName}.csv"
				Dim destfilePathProperty As String = $"{logFolderPath}\{DateTime.Now.ToString("ddMMyyyyHHmmss")}_{AppName}_{DimName}_Property_{si.UserName}.csv"
				File.WriteAllText(destfilePathHierarchy, strbuHierarchy.ToString()) 
				File.WriteAllText(destfilePathProperty, strbuProperties.ToString()) 
				BRApi.ErrorLog.LogMessage(si, $"File Export completed")
              Return Nothing
             End If 
			batchID = GetBatchIDFromFCP(si, fcpGateway,property_TypeBatchID)
 		    ProcessByPage(si, dimesionsProperty,edmcs_Property,batchID,fcpGateway,Export)
			ProcessByPage(si, dimesionsHierarchy,edmcs_Hierarchy,batchID,fcpGateway,Export)			
		    TriggerSendToFCP(si,fcpGateway)	 
			Return Nothing	
			
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
			
		End Function
		
		Private Sub ProcessByPage(si As SessionInfo, data As List(Of Object), typeName As String, batchGuid As String,fcpGateway As Object,export As String)
			
			Try		
			
			   For pageNo As Integer = 0 To totalPages-1
				Dim sentData = data.Skip(pageNo * m_PageSize).Take(m_PageSize)
				Dim jsonPayload =	"{""Batch_ID"" :""" & batchGuid & """, ""Status"" :""Success"", ""Dataset_Type"" :""EDMCS_OS_METADATA"",""page"" :" + (pageNo+1).ToString +", ""total_pages"" :"+totalPages.ToString +",""" +typeName+""" : { ""rowcount"" :"+ sentData.ToList.Count.ToString+", ""data"" : " + JsonConvert.SerializeObject(sentData) + "}}"		       
			
			BRApi.ErrorLog.LogMessage(si, export)


			    Dim response = fcpGateway.PutData(si, jsonPayload,False,OSActionType.Put,1)
			    BRApi.ErrorLog.LogMessage(si, response.result.JsonData)
				If Not response.Result.Success Then
				Dim subject As String = $"Refresh Metadata to FCP failed  "
				CommonUtility.sendmail(si, "GetBatchIDFromFCP", "jsonPayLoad", m_moduleName & " - GetBatchIDFromFCP", fcpGateway.Params)
			Else 
				If fcpGateway.Params.Debugger Then
				BRApi.ErrorLog.LogMessage(si, $"{m_moduleName} - Refresh Metadata to FCP  successfully")
				End If
			End If
			
			Next
			
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
			
		End Sub
		
		Private Sub LoadSecurityGroups(si As SessionInfo)
			
			securityGroups.Add("00000000-0000-0000-0000-000000000000","Everyone")
			Dim everyoneID As String = BRApi.Security.Admin.GetGroup(si, "Everyone").Group.UniqueID.ToString
			securityGroups.Add(everyoneID,"Everyone")
			Dim nobodyID As String = BRApi.Security.Admin.GetGroup(si, "Nobody").Group.UniqueID.ToString
			securityGroups.Add(nobodyID,"Nobody")  

			Dim dtSecGroup As DataTable = Nothing
			
			Using dbFmConn As DbConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
				dtSecGroup = BRApi.Database.ExecuteSql(dbFmConn,"SELECT UniqueID, Name FROM SecGroup WITH (NOLOCK)", False)                             
			End Using
			
			For Each rSecGroup As DataRow In dtSecGroup.Rows
				If Not securityGroups.ContainsKey(rSecGroup("UniqueID").ToString) Then
					securityGroups.Add(rSecGroup("UniqueID").ToString, rSecGroup("Name").ToString)
				End If
			Next rSecGroup
		End Sub
		
		Private Function GetBatchIDFromFCP(si As SessionInfo, fcpGateway As Object,type As String ) As String
			Dim payload As New Object()
						payload = New With {
						.Type =type
						}				
            
						
			Dim jsonPayLoad As String = JsonConvert.SerializeObject(payload)
			BRApi.ErrorLog.LogMessage(si,"Hi"+ jsonPayLoad)
			Dim response = fcpGateway.PutData(si, jsonPayLoad,False,OSActionType.Guid)
			Dim jsonResult = JsonConvert.DeserializeObject(Of Dictionary(Of String, Object))(response.result.JsonData)
			BRApi.ErrorLog.LogMessage(si, jsonResult("BatchId").Tostring())
             Return jsonResult("BatchId").Tostring()
'							
			If Not response.Result.Success Then
				Dim subject As String = $"DimensionData post failed for "
				CommonUtility.sendmail(si, "HI", jsonPayLoad, m_moduleName & " - GetBatchIDFromFCP", fcpGateway.Params)
			Else
				If fcpGateway.Params.Debugger Then
					BRApi.ErrorLog.LogMessage(si, $"{m_moduleName} - DimensionData Fetched GUID successfully")
				End If
			End If
		End Function
		
		Private Sub TriggerSendToFCP(si As SessionInfo,fcpGateway As Object)
				Dim jsonTriggerProperty =	"{""Batch_ID"" :""" & batchID & """, ""Type"" :"""+ property_TypeBatchID+"""}"			
				Dim responseTriggerProperty = fcpGateway.PutData(si, jsonTriggerProperty, False, OSActionType.Trigger,2)				
				BRApi.ErrorLog.LogMessage(si, responseTriggerProperty.result.JsonData)
		End Sub
		
			Private Function GetDimensionInfoHierarchy(si As SessionInfo, dimName As String, mbr As Member, prntMbr As Member, relInfo As RelationshipInfo) As  Object
                Dim resultHierarchy As Object() = New Object(1) {}		   
 			    row_Count_Total= row_Count_Total+1
				row_Count_File=row_Count_File+1
				Dim mbrInfo = BRApi.Finance.Members.GetMemberInfo(si, mbr.DimTypeId, mbr.MemberId, True)
				Dim sortOrder = If(relInfo Is Nothing, 0, relInfo.Relationship.SiblingSortOrder)
				Dim aggWeight = If(relInfo Is Nothing, 0, relInfo.Relationship.UDAggWeight)
				resultHierarchy(0) = New With { 
										.APP_NM = si.AppName, 
										.DIMENSION_TYPE = mbr.DimType.Name, 
										.MBR_DIMENSION = dimName, 
										.CHILD = Mbr.Name, 
										.PARENT = prntMbr.Name, 
										.OS_NM = mbr.Name, 
										.OS_Parent = prntMbr.Name, 
										.SORT_ORDER = sortorder, 
										.AGG_WGT = aggWeight 
									 }
			
   			strbuHierarchy.AppendLine(String.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8}", si.AppName, mbr.DimType.Name, dimName, Mbr.Name, prntMbr.Name, mbr.Name,prntMbr.Name,sortorder,aggWeight))
               
			
			Return resultHierarchy(0)
	
		End Function
		
		Private Function GetDimensionInfoProperties(si As SessionInfo, dimName As String, mbr As Member, prntMbr As Member, relInfo As RelationshipInfo) As Object
 			Try
				Dim mbrInfo = BRApi.Finance.Members.GetMemberInfo(si, mbr.DimTypeId, mbr.MemberId, True)
				Dim sortOrder = If(relInfo Is Nothing, 0, relInfo.Relationship.SiblingSortOrder)
				Dim aggWeight = If(relInfo Is Nothing, 0, relInfo.Relationship.UDAggWeight)
				  Dim result_Property As Object() = New Object(1) {}			
				Select mbr.DimType.Name
					Case "Entity"
					    Dim p = mbrInfo.GetEntityProperties()
'						If Not oneTimeLog And mbr.Name = "Walmart_Total_Company" Then
'							BRAPI.ErrorLog.LogMessage(si, $"{mbr.Name}:{JsonConvert.SerializeObject(p.Currency.GetStoredPropertyItem())}")
'							'BRAPI.ErrorLog.LogMessage(si, JsonConvert.SerializeObject(p.VMProperties))
'							oneTimeLog = True
'						End If 
						result_Property(0) =  New With { 
												 .APP_NM = si.AppName, 
												 .DIMENSION_TYPE = mbr.DimType.Name, 
												 .MBR_DIMENSION = dimName, 
												 .DIMENSION_NM = mbr.Name,												 
												 .OS_NM = mbr.Name,
												 .DIMENSION_DESC = mbr.Description, 
												 .TXT1 = p.Text1.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT2 = p.Text2.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT3 = p.Text3.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT4 = p.Text4.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT5 = p.Text5.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT6 = p.Text6.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT7 = p.Text7.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT8 = p.Text8.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId),
												 .RDATAGROUP = If(securityGroups.ContainsKey(mbr.ReadDataGroupUniqueID.ToString), securityGroups(mbr.ReadDataGroupUniqueID.ToString), mbr.ReadDataGroupUniqueID.ToString),
												 .RDATAGROUP1 = If(securityGroups.ContainsKey(mbr.ReadDataGroupUniqueID2.ToString), securityGroups(mbr.ReadDataGroupUniqueID2.ToString), mbr.ReadDataGroupUniqueID2.ToString),	
												 .RWDATAGROUP = If(securityGroups.ContainsKey(mbr.ReadWriteDataGroupUniqueID.ToString), securityGroups(mbr.ReadWriteDataGroupUniqueID.ToString), mbr.ReadWriteDataGroupUniqueID.ToString),
												 .RWDATAGROUP1 = If(securityGroups.ContainsKey(mbr.ReadWriteDataGroupUniqueID2.ToString), securityGroups(mbr.ReadWriteDataGroupUniqueID2.ToString), mbr.ReadWriteDataGroupUniqueID2.ToString),
												 .CUBEDATAACCESS = mbr.DataCellAccessCategories,
												 .CURRENCY = BRApi.Finance.Cons.GetCurrency(si, p.Currency.GetValue()), 
												 .ISIC = p.IsIC.GetStoredValue(),
												 .ISCONSOLIDATED = p.IsConsolidated.GetStoredValue(),
												 .INUSE = p.InUse.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId),
												 .ALLOWADJ = p.AllowAdjustments.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId),
												 .ALLOWAJDFROMCHILD = p.AllowAdjustmentsFromChildren.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId),
												 .ICCONSTRAINT = BRAPI.Finance.Entity.GetConstraintMemberForDimType(si, mbr.MemberId, DimType.IC.Id, p.ICConstraint.GetValue(CubeTypeId.Standard)).Name,
												 .UD1 = BRAPI.Finance.Entity.GetConstraintMemberForDimType(si, mbr.MemberId, DimType.UD1.Id, p.UD1Constraint.GetValue(CubeTypeId.Standard)).Name,
												 .UD2 = BRAPI.Finance.Entity.GetConstraintMemberForDimType(si, mbr.MemberId, DimType.UD2.Id, p.UD2Constraint.GetValue(CubeTypeId.Standard)).Name,
												 .UD3 = BRAPI.Finance.Entity.GetConstraintMemberForDimType(si, mbr.MemberId, DimType.UD3.Id, p.UD3Constraint.GetValue(CubeTypeId.Standard)).Name,
												 .UD4 = BRAPI.Finance.Entity.GetConstraintMemberForDimType(si, mbr.MemberId, DimType.UD4.Id, p.UD4Constraint.GetValue(CubeTypeId.Standard)).Name,
												 .UD5 = BRAPI.Finance.Entity.GetConstraintMemberForDimType(si, mbr.MemberId, DimType.UD5.Id, p.UD5Constraint.GetValue(CubeTypeId.Standard)).Name,
												 .UD6 = BRAPI.Finance.Entity.GetConstraintMemberForDimType(si, mbr.MemberId, DimType.UD6.Id, p.UD6Constraint.GetValue(CubeTypeId.Standard)).Name,
												 .UD7 = BRAPI.Finance.Entity.GetConstraintMemberForDimType(si, mbr.MemberId, DimType.UD7.Id, p.UD7Constraint.GetValue(CubeTypeId.Standard)).Name,
												 .UD8 = BRAPI.Finance.Entity.GetConstraintMemberForDimType(si, mbr.MemberId, DimType.UD8.Id, p.UD8Constraint.GetValue(CubeTypeId.Standard)).Name
											 }
					Case "Scenario"
						Dim p = mbrInfo.GetScenarioProperties()
						result_Property(0) =  New With { 
												 .APP_NM = si.AppName, 
												 .DIMENSION_TYPE = mbr.DimType.Name, 
												 .MBR_DIMENSION = dimName, 
												 .DIMENSION_NM = mbr.Name, 
												 .OS_NM = mbr.Name, 
												 .DIMENSION_DESC = mbr.Description, 
												 .TXT1 = p.Text1.GetStoredValue(), 
												 .TXT2 = p.Text2.GetStoredValue(), 
												 .TXT3 = p.Text3.GetStoredValue(), 
												 .TXT4 = p.Text4.GetStoredValue(), 
												 .TXT5 = p.Text5.GetStoredValue(), 
												 .TXT6 = p.Text6.GetStoredValue(), 
												 .TXT7 = p.Text7.GetStoredValue(), 
												 .TXT8 = p.Text8.GetStoredValue()
											 }
					Case "Account"
						Dim p = mbrInfo.GetAccountProperties()
						result_Property(0) =  New With { 
												 .APP_NM = si.AppName, 
												 .DIMENSION_TYPE = mbr.DimType.Name, 
												 .MBR_DIMENSION = dimName, 
												 .DIMENSION_NM = mbr.Name, 
												 .OS_NM = mbr.Name, 
												 .DIMENSION_DESC = mbr.Description, 
												 .TXT1 = p.Text1.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT2 = p.Text2.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT3 = p.Text3.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT4 = p.Text4.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT5 = p.Text5.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT6 = p.Text6.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT7 = p.Text7.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT8 = p.Text8.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId)
											 }
					Case "Flow"
						Dim p = mbrInfo.GetFlowProperties()
						result_Property(0) =  New With { 
												 .APP_NM = si.AppName, 
												 .DIMENSION_TYPE = mbr.DimType.Name, 
												 .MBR_DIMENSION = dimName, 
												 .DIMENSION_NM = mbr.Name, 
												 .OS_NM = mbr.Name, 
												 .DIMENSION_DESC = mbr.Description, 
												 .TXT1 = p.Text1.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT2 = p.Text2.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT3 = p.Text3.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT4 = p.Text4.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT5 = p.Text5.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT6 = p.Text6.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT7 = p.Text7.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT8 = p.Text8.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId)
											 }
					Case Else 'UD1, UD2, UD3, UD4, UD5,  UD6, UD7, UD8
						 Dim p = mbrInfo.GetUDProperties()
						 result_Property(0) =  New With { 
												 .APP_NM = si.AppName, 
												 .DIMENSION_TYPE = mbr.DimType.Name, 
												 .MBR_DIMENSION = dimName, 
												 .DIMENSION_NM = mbr.Name, 
												 .OS_NM = mbr.Name, 
												 .DIMENSION_DESC = mbr.Description, 
												 .TXT1 = p.Text1.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT2 = p.Text2.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT3 = p.Text3.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT4 = p.Text4.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT5 = p.Text5.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT6 = p.Text6.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT7 = p.Text7.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId), 
												 .TXT8 = p.Text8.GetStoredValue(DimType.Scenario.DefaultMemberId, DimType.Time.DefaultMemberId)
											 }
				End Select
				If Not ((mbr.DimType.Name="Entity")	Or (export ="false"))			   
				strbuProperties.AppendLine(String.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13}", si.AppName, mbr.DimType.Name, dimName, Mbr.Name, Mbr.Name, mbr.Name, Mbr.Description, result_Property(0).TXT1, result_Property(0).TXT2, result_Property(0).TXT3, result_Property(0).TXT4, result_Property(0).TXT5, result_Property(0).TXT6, result_Property(0).TXT7, result_Property(0).TXT8))
				
			Else If((mbr.DimType.Name="Entity")	Or (export ="True"))				
				strbuProperties.AppendLine(String.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23},{24},{25},{26},{27},{28},{29},{30},{31},{32},{33}", si.AppName, mbr.DimType.Name, dimName, Mbr.Name, Mbr.Name, mbr.Name, Mbr.Description, result_Property(0).TXT1, result_Property(0).TXT2, result_Property(0).TXT3, result_Property(0).TXT4, result_Property(0).TXT5, result_Property(0).TXT6, result_Property(0).TXT7, result_Property(0).TXT8,result_Property(0).RDATAGROUP,result_Property(0).RDATAGROUP1,result_Property(0).RWDATAGROUP, result_Property(0).RWDATAGROUP1, result_Property(0).CUBEDATAACCESS,result_Property(0).CURRENCY, result_Property(0).ISIC, result_Property(0).ISCONSOLIDATED,result_Property(0).ICCONSTRAINT, result_Property(0).INUSE, result_Property(0).ALLOWADJ, result_Property(0).ALLOWAJDFROMCHILD,result_Property(0).UD1,result_Property(0).UD2, result_Property(0).UD3,result_Property(0).UD4, result_Property(0).UD5,result_Property(0).UD6,result_Property(0).UD7,result_Property(0).UD8))
				'strbuProperties.AppendLine(String.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13}", si.AppName, mbr.DimType.Name, dimName, Mbr.Name, Mbr.Name, mbr.Name, Mbr.Description, result_Property(0).TXT1, result_Property(0).TXT2, result_Property(0).TXT3, result_Property(0).TXT4, result_Property(0).TXT5, result_Property(0).TXT6, result_Property(0).TXT7, result_Property(0).TXT8))
			End If
				
'				Return (JsonConvert.SerializeObject(result_Property(0)) + ",")
                Return (result_Property(0))
			Catch ex As Exception				
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
			
		End Function
		
		Private Function GetDimensionType(dimTypeName As String) As KeyValuePair(Of DimType, String)
			Select dimTypeName
				Case "Entity"
					Return New KeyValuePair(Of DimType, String)(DimType.Entity, "E#")
				Case "Scenario"
					Return New KeyValuePair(Of DimType, String)(DimType.Scenario, "S#")
				Case "Account"
					Return New KeyValuePair(Of DimType, String)(DimType.Account, "A#")
				Case "Flow"
					Return New KeyValuePair(Of DimType, String)(DimType.Flow, "F#")
				Case "UD1"
					Return New KeyValuePair(Of DimType, String)(DimType.UD1, "U1#")
				Case "UD2"
					Return New KeyValuePair(Of DimType, String)(DimType.UD2, "U2#")
				Case "UD3"
					Return New KeyValuePair(Of DimType, String)(DimType.UD3, "U3#")
				Case "UD4"
					Return New KeyValuePair(Of DimType, String)(DimType.UD4, "U4#")
				Case "UD5"
					Return New KeyValuePair(Of DimType, String)(DimType.UD5, "U5#")
				Case "UD6"
					Return New KeyValuePair(Of DimType, String)(DimType.UD6, "U6#")
				Case "UD7"
					Return New KeyValuePair(Of DimType, String)(DimType.UD7, "U7#")
				Case Else
					Return New KeyValuePair(Of DimType, String)(DimType.UD8, "U8#")
			End Select
		End Function
		

	End Class
	
	
	#Region "Dimension"
	
	Public Class Dimension
		
		Private m_dimType As String
		Public Property DimType() As String
			Get
				Return m_dimType
			End Get
			Set
				m_dimType = value
			End Set
		End Property
		
		Private m_dimName As String
		Public Property DimName() As String
			Get
				Return m_dimName
			End Get
			Set
				m_dimName = value
			End Set
		End Property
		
		Private m_memberName As String
		Public Property MemberName() As String
			Get
				Return m_memberName
			End Get
			Set
				m_memberName = value
			End Set
		End Property
		
		Private m_memberDesc As String
		Public Property MemberDesc() As String
			Get
				Return m_memberDesc
			End Get
			Set
				m_memberDesc = value
			End Set
		End Property
		
		Private m_rdatagroup1 As String
		Public Property RDataGroup1() As String
			Get
				Return m_rdatagroup1
			End Get
			Set
				m_rdatagroup1 = value
			End Set
		End Property
		
		Private m_rdatagroup2 As String
		Public Property rDataGroup2() As String
			Get
				Return m_rdatagroup2
			End Get
			Set
				m_rdatagroup2 = value
			End Set
		End Property
		Private m_rwdatagroup1 As String
		Public Property RWDataGroup1() As String
			Get
				Return m_rwdatagroup1
			End Get
			Set
				m_rwdatagroup1 = value
			End Set
		End Property
		
		Private m_rwdatagroup2 As String
		Public Property rwDataGroup2() As String
			Get
				Return m_rwdatagroup2
			End Get
			Set
				m_rwdatagroup2 = value
			End Set
		End Property
		
		Private m_dataaccessSecurity As String
		Public Property rwdasecurity() As String
			Get
				Return m_dataaccessSecurity
			End Get
			Set
				m_dataaccessSecurity = value
			End Set
		End Property
		
		Private m_currency As String
		Public Property currency() As String
			Get
				Return m_currency
			End Get
			Set
				m_currency = value
			End Set
		End Property
		
		
		Private m_isconsolidated As String
		Public Property IsConsolidated() As String
			Get
				Return m_isconsolidated
			End Get
			Set
				m_isconsolidated = value
			End Set
		End Property
		
		Private m_inuse As String
		Public Property inuse() As String
			Get
				Return m_inuse
			End Get
			Set
				m_inuse = value
			End Set
		End Property
		
		Private m_allwoAdjustment As String
		Public Property allowadjustment() As String
			Get
				Return m_allwoAdjustment
			End Get
			Set
				m_allwoAdjustment = value
			End Set
		End Property
		
		
		Private m_allwoAdjustmentfromchilderen As String
		Public Property allowadjustmentfromchildern() As String
			Get
				Return m_allwoAdjustmentfromchilderen
			End Get
			Set
				m_allwoAdjustmentfromchilderen = value
			End Set
		End Property
		
		Private m_UD1 As String
		Public Property UD1() As String
			Get
				Return m_UD1
			End Get
			Set
				m_UD1 = value
			End Set
		End Property
		
		Private m_UD2 As String
		Public Property UD2() As String
			Get
				Return m_UD2
			End Get
			Set
				m_UD2 = value
			End Set
		End Property
		Private m_UD4 As String
		Public Property UD4() As String
			Get
				Return m_UD4
			End Get
			Set
				m_UD4 = value
			End Set
		End Property
		Private m_UD3 As String
		Public Property UD3() As String
			Get
				Return m_UD3
			End Get
			Set
				m_UD3 = value
			End Set
		End Property
		Private m_UD5 As String
		Public Property UD5() As String
			Get
				Return m_UD5
			End Get
			Set
				m_UD5 = value
			End Set
		End Property
		Private m_UD6 As String
		Public Property UD6() As String
			Get
				Return m_UD6
			End Get
			Set
				m_UD6 = value
			End Set
		End Property
		Private m_UD7 As String
		Public Property UD7() As String
			Get
				Return m_UD7
			End Get
			Set
				m_UD7 = value
			End Set
		End Property
		Private m_UD8 As String
		Public Property UD8() As String
			Get
				Return m_UD8
			End Get
			Set
				m_UD8 = value
			End Set
		End Property
		
		Private m_isIC	 As String
		Public Property IsIc() As String
			Get
				Return m_isIC
			End Get
			Set
				m_isIC = value
			End Set
		End Property
		
		Private m_parentMember As String
		Public Property ParentMember() As String
			Get
				Return m_parentMember
			End Get
			Set
				m_parentMember = value
			End Set
		End Property
		
		Private m_text1 As String
		Public Property Text1() As String
			Get
				Return m_text1
			End Get
			Set
				m_text1 = value
			End Set
		End Property
		
		Private m_text2 As String
		Public Property Text2() As String
			Get
				Return m_text2
			End Get
			Set
				m_text2 = value
			End Set
		End Property
		
		Private m_text3 As String
		Public Property Text3() As String
			Get
				Return m_text3
			End Get
			Set
				m_text3 = value
			End Set
		End Property
		
		Private m_text4 As String
		Public Property Text4() As String
			Get
				Return m_text4
			End Get
			Set
				m_text4 = value
			End Set
		End Property
		
		Private m_text5 As String
		Public Property Text5() As String
			Get
				Return m_text5
			End Get
			Set
				m_text5 = value
			End Set
		End Property
		
		Private m_text6 As String
		Public Property Text6() As String
			Get
				Return m_text6
			End Get
			Set
				m_text6 = value
			End Set
		End Property
		
		Private m_text7 As String
		Public Property Text7() As String
			Get
				Return m_text7
			End Get
			Set
				m_text7 = value
			End Set
		End Property
		
		Private m_text8 As String
		Public Property Text8() As String
			Get
				Return m_text8
			End Get
			Set
				m_text8 = value
			End Set
		End Property
		
'		Public Sub New(dimType As String, dimName As String, memberName As String, memberDesc As String, parentMember As String, text1 As String, text2 As String, text3 As String, text4 As String, text5 As String, text6 As String, text7 As String, text8 As String)
'			Me.DimType = dimType
'			Me.DimName = dimName
'			Me.MemberName = memberName
'			Me.MemberDesc = memberDesc
'			Me.ParentMember = parentMember
'			Me.Text1 = text1
'			Me.Text2 = text2
'			Me.Text3 = text3
'			Me.Text4 = text4
'			Me.Text5 = text5
'			Me.Text6 = text6
'			Me.Text7 = text7
'			Me.Text8 = text8
'		End Sub

	End Class
	
	#End Region
	 	
End Namespace
	]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="FCP_INTEGRATION_UTIL">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_GATEWAY" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_VARIABLES" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports System.Diagnostics
Imports System.Net
Imports System.Net.Http
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
Imports System.Reflection
Imports System.Threading.Tasks

Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_GATEWAY
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_VARIABLES
Imports OneStream.BusinessRule.Extender.OS_Models

Namespace OneStream.BusinessRule.Extender.FCP_INTEGRATION_UTIL
	Public Class MainClass
		
		'Globals
		Private m_PrintDataToFile As Boolean = False
		Private m_IntegrationLog As Text.StringBuilder
		Private m_getWatch As Stopwatch
		Private m_ModuleName As String
		
		Private m_FCPGateWay As IntegrationGateway(Of FCPIntegrationParams) = Nothing
		
		'Set after retrieving the first page of data from FCP
		Private m_Total_Pages As Integer
		
		Private m_maxAsync As Short = 5
		Public Sub SetMaxAsync(ByVal maxAsync As Short) 
			m_maxAsync = maxAsync
		End Sub
		
		Private m_PrintDataRowLimit As Integer = 500000
		Public Sub SetPrintDataRowLimit(ByVal rowLimit As Integer) 
			m_PrintDataRowLimit = rowLimit
		End Sub
		
		Private m_IntegrationDataLog As New Text.StringBuilder
		Public Sub AddLogDataLine(ByVal si As SessionInfo, ByVal message As String)
			Try
				m_IntegrationDataLog.AppendLine(message)				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		Public Function GetIntegrationLog() As String
			Return m_IntegrationLog.ToString
		End Function
		
		Public ReadOnly Property Params As FCPIntegrationParams
			Get
				If m_FCPGateWay IsNot Nothing Then
					Return m_FCPGateWay.Params
				Else
					Throw New XFException("FCP Integration Gateway Instance is not yet set")
				End If
			End Get
		End Property
				
		Public Sub New(ByVal si As SessionInfo, ByVal moduleName As String, Optional ByVal moduleType As OSModuleType = OSModuleType.FCP)
			Try
				Dim argValue = String.Empty
				m_getWatch = Stopwatch.StartNew
				m_ModuleName = moduleName
				
				m_FCPGateWay = New IntegrationGateway(Of FCPIntegrationParams)(si, moduleName, moduleType)

				'-----------------------------------------------------------------------------------------
				'Init Globals
				'-----------------------------------------------------------------------------------------
				m_IntegrationLog = New Text.StringBuilder
				'-----------------------------------------------------------------------------------------
				m_PrintDataToFile = False
				'-----------------------------------------------------------------------------------------
				'Get optional args
				'-----------------------------------------------------------------------------------------
				
'				If Not args.NameValuePairs.TryGetValue("WriteFCPDataToFile", argValue) Then
'					'default to False
'					m_PrintDataToFile = False
'				Else
'					m_PrintDataToFile = argValue.XFConvertToBool
'				End If
				'-----------------------------------------------------------------------------------------

			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
						
		Public Function GetDataTableFromFcp(ByVal si As SessionInfo, ByVal params As Dictionary(Of String, String)) As ActualsData
			
			Dim result = New ActualsData	

			Try
				Dim firstPageTask As Task(Of OSJsonResponse) = Me.TryGetJsonFromApiAsync(si, params)
				
				Try
					firstPageTask.Wait
				Catch ex As Exception
					Me.AddLogMessage(si, "Failed to get data from FCP.")
					result.Success = firstPageTask.Result.Success
					result.StatusCode = firstPageTask.Result.StatusCode
					result.ReasonPhrase = firstPageTask.Result.ReasonPhrase
					Return result
				End Try
				'-----------------------------------------------------------------------------------------
				
				Me.AddLogMessage(si, "Tried and waited for data from FCP.")
				
				'-----------------------------------------------------------------------------------------
				'Process Task Result (json)
				'	-Convert JSON to DataTable
				'-----------------------------------------------------------------------------------------
				If Not firstPageTask.Result.Success OrElse String.IsNullOrWhiteSpace(firstPageTask.Result.JsonData) Then
					result.Success = firstPageTask.Result.Success
					result.StatusCode = firstPageTask.Result.StatusCode
					result.ReasonPhrase = firstPageTask.Result.ReasonPhrase
					Return result
				Else
					result = Me.GetDTFromJson(si, firstPageTask.Result.JsonData, "meta", "data")
					If result.Success And result.Data IsNot Nothing Then
						Me.AddLogMessage(si, "First page convert to JSON complete.")
					End If
				End If
				
				'-----------------------------------------------------------------------------------------
				
				Me.AddLogMessage(si, "First page converted and processed by OS API.")
				
				If m_Total_Pages = 1 Then 
					If m_PrintDataToFile Then
						If result.Data IsNot Nothing Then
							Me.WriteDtToLog(si, result.Data)
						Else
							Return result
						End If
					End If
					
					If result.Data IsNot Nothing Then
						Me.AddLogMessage(si, $"Recordcount: {result.Data.Rows.Count}")
						Return result
					Else
						Me.AddLogMessage(si, "Recordcount: 0")
						result.ReasonPhrase = "Zero records returned from FCP"
						Return result
					End If
				End If
				
				'-----------------------------------------------------------------------------------------
				'Run async FCP request then wait - Remaining Pages (maxAsyn at a time)
				'	-After first call, m_Total_Pages will be initialized
				'-----------------------------------------------------------------------------------------				
				Me.AddLogMessage(si, $"Start Async Tasks. {m_Total_Pages - 1} remaining pages will be requested from FCP. {m_maxAsync} at a time will run in parallel.")
				
				Dim asyncGets = New List(Of Task(Of OSJsonResponse))				
				
				Dim pageNum As Integer = 2
				Do While pageNum <= m_Total_Pages
					For i As Integer = 1 To m_maxAsync
						If pageNum <= m_Total_Pages Then
							If(params.ContainsKey("page"))
								params("page") = pageNum.XFToString
							Else
								params.Add("page", pageNum.XFToString)	
							End If
							asyncGets.Add(Me.TryGetJsonFromApiAsync(si, params))							
							pageNum += 1
						Else
							pageNum += 1
							Exit For
						End If
					Next
										
					Try
						Task.WaitAll(asyncGets.ToArray)
						
						Dim failedTask = asyncGets.Where(Function(x) Not x.Result.Success).FirstOrDefault
						If failedTask IsNot Nothing Then
							result.Success = False
							result.Data = Nothing
							result.StatusCode = failedTask.Result.StatusCode
							Dim querystring = failedTask.Result.Url.Substring(failedTask.Result.Url.IndexOf("?"c))
							Dim parameters As System.Collections.Specialized.NameValueCollection = System.Web.HttpUtility.ParseQueryString(querystring)				
							result.ReasonPhrase = $"{failedTask.Result.ReasonPhrase}, Page {parameters("page")}"
							Return result
						End If					
						
					Catch ex As Exception
						Me.AddLogMessage(si, "Failed to get page data from FCP.")
						result.Success = False
						result.Data = Nothing
						result.StatusCode = "000"
						result.ReasonPhrase = "Failed to get the page data from FCP."
						Return result
					End Try
				Loop
				'-----------------------------------------------------------------------------------------				
				
				Me.AddLogMessage(si, $"All {asyncGets.Count} async tasks have completed. Next step - convert from JSON to DataTable")
				
				'-----------------------------------------------------------------------------------------
				'Process Task Result (json)
				'	-Convert JSON to DataTable
				'	-Process Data Table with OS API
				'-----------------------------------------------------------------------------------------
				For Each taskItem As Task(Of OSJsonResponse) In asyncGets
					If taskItem.Result.Success Then
						'Step 2 - Convert To DT
						Dim pageResult = Me.GetDTFromJson(si, taskItem.Result.JsonData, "meta", "data")
						
						'Step 3 - Import into XF Stage						
						If pageResult.Success And pageResult.Data IsNot Nothing Then
							result.Data.Merge(pageResult.Data)
						End If
					End If
				Next
				
				Me.AddLogMessage(si, "Completed convert from JSON to DataTable")
				'-----------------------------------------------------------------------------------------
				
				If m_PrintDataToFile Then
					If result.Data IsNot Nothing Then
						Me.WriteDtToLog(si, result.Data)
					Else
						Me.AddLogMessage(si, "No data to write to data log file")
					End If
				End If
				
				If result.Data IsNot Nothing Then
					Me.AddLogMessage(si, $"Recordcount: {result.Data.Rows.Count}")
				End If
				Return result
			Catch ex As Exception
				Me.AddLogMessage(si, $"GetDataTableFromFcp Main Exception: {ex.Message}")
				Return result
			End Try
		End Function
		
		Public Function GetFieldList(ByVal si As SessionInfo, ByVal params As Dictionary(Of String, String)) As List(Of String)
			Try
				Dim asyncGets = New List(Of Task(Of OSJsonResponse))
				asyncGets.Add(Me.TryGetJsonFromApiAsync(si, params, False))
				
				Try
					Task.WaitAll(asyncGets.ToArray)
				Catch ex As Exception
					Me.AddLogMessage(si, "Failed to get field list data from FCP.")
					Return Nothing
				End Try
				
				'-----------------------------------------------------------------------------------------
				'Process Task Result (json)
				'	-Convert JSON to DataTable
				'-----------------------------------------------------------------------------------------
				For Each taskItem As Task(Of OSJsonResponse) In asyncGets
					If Not taskItem.Result.Success Then
						Throw ErrorHandler.LogWrite(si, New XFException(si, New XFException("Error: " & taskItem.Result.StatusCode & " - " & taskItem.Result.ReasonPhrase)))
					Else					
						Dim fldList As New List(Of String)
						Dim fullJson As JObject = JObject.Parse(taskItem.Result.JsonData)
						Dim columns = fullJson("meta").Children
				        Dim jProp As JProperty
				        Dim jPropName As String
				        For Each col In columns
				            jProp = col.ToObject(Of JProperty)
				            jPropName = jProp.Name
							fldList.Add(jPropName)
				        Next
						Me.AddLogMessage(si, "Field List Retrieved.")
						Return fldList
					End If
				Next
				'-----------------------------------------------------------------------------------------
				
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Async Function TryGetJsonFromApiAsync(ByVal si As SessionInfo, ByVal params As Dictionary(Of String, String), Optional ByVal isData As Boolean = True) As Task(Of OSJsonResponse)
			Dim rTask As OSJsonResponse = New OSJsonResponse

			Try
				Dim s As String = String.Empty
				'brapi.ErrorLog.LogMessage(si, $"In TryGetJsonFromApiAsync method")
				For i As Short = 1 To 3
					Me.AddLogMessage(si, $"Requesting (try #{i})")

					Try
						rTask = Await Me.GetDataFromApiAsync(si, params, isData)

						Me.AddLogMessage(si, $"Endpoint: {rTask.Url}") 
						If rTask.Success Or i = 3 Then ' Or rTask.StatusCode = "114"
							If i = 3 Then
								Me.AddLogMessage(si, $"Retry limit reached ({i}) for {rTask.Url}")
							End If
							Exit For
						End If
					Catch ex As Exception
						'do nothing
					End Try
									
					If i = 1 Then
						Await Task.Delay(TimeSpan.FromSeconds(5))
					ElseIf i = 2 Then
						Await Task.Delay(TimeSpan.FromSeconds(8))
					End If
				Next
				
				Return rTask
				
			Catch ex As Exception
				Throw ex
			End Try
		End Function

		Public Async Function GetDataFromApiAsync(ByVal si As SessionInfo, ByVal params As Dictionary(Of String, String), ByVal isData As Boolean) As Task(Of OSJsonResponse)
			Dim result = New OSJsonResponse							
			Dim response = Await m_FCPGateWay.GetData(si, params, isData)

			result.Url = response.Url	
			If Not response.Success Then
				If Not String.IsNullOrWhiteSpace(response.JsonData) Then
					Dim fullJson As JObject = Nothing
					Dim status As String = String.Empty
					Try
						Dim jp = JsonConvert.DeserializeObject(response.JsonData)
						fullJson = JObject.FromObject(jp)
						status = fullJson("status")
					Catch
					End Try

					If status.XFContainsIgnoreCase("Failed") Then
						result.Success = False
						result.StatusCode = fullJson("errorCode")
						result.ReasonPhrase = fullJson("errorMssg")
						result.JsonData = Nothing
					Else
						result.Success = False
						result.StatusCode = response.StatusCode
						result.ReasonPhrase = response.ReasonPhrase & $" - FCP Response: {response.JsonData}"
						result.JsonData = Nothing
					End If
				Else
					result.Success = response.Success
					result.StatusCode = response.StatusCode
					result.ReasonPhrase = response.ReasonPhrase
					result.JsonData = Nothing
				End If
			Else
				result.JsonData = response.JsonData
			End If 
			Return Await Task.FromResult(result)
		End Function
		
		Private Sub WriteDtToLog(ByVal si As SessionInfo, ByVal dt As DataTable)
			If dt IsNot Nothing Then
				If dt.Rows.Count > m_PrintDataRowLimit Then
					Me.AddLogMessage(si, $"Too many records to write out to file. Limit: {m_PrintDataRowLimit} RowCount: {dt.Rows.Count}")
					Exit Sub
				End If
				
				For Each dr As DataRow In dt.Rows
					Dim rowVal As New Text.StringBuilder
					For Each dc As DataColumn In dt.Columns
						rowVal.Append(dr(dc.ColumnName) & ",")
					Next
					Me.AddLogDataLine(si, rowVal.ToString)
					rowVal.Clear
				Next
			End If
		End Sub
		
		Private Function GetDTFromJson(si As SessionInfo, json As String, cols As String, rows As String) As ActualsData
			Try
				Dim response As ActualsData = New ActualsData
				'This will force the serialization of decimals to decimals.  
				'Decimals With standard parsing were getting converted to Scientific Notation and erroring when writing to the datatable
				Dim serializer As JsonSerializer = New JsonSerializer ()
				serializer.FloatParseHandling = Newtonsoft.Json.FloatParseHandling.Decimal
				Dim fullJson As JObject
				
				Using tr As System.IO.TextReader = New StringReader(json)
					Using jr As JsonTextReader = New JsonTextReader(tr)
						Dim jp = serializer.Deserialize(jr)
						fullJson  = JObject.FromObject(jp)
					End Using
				End Using
				
				Dim dt As New DataTable
				
'*** for debugging of the E- E+ scientific notation issues ***
'		        Dim fullJsonOrg As JObject = JObject.Parse(json)
				
'				Dim jsonOrg As String = fullJsonOrg.ToString(Newtonsoft.Json.Formatting.None)
'				Dim jsonSer As String = fullJson.ToString(Newtonsoft.Json.Formatting.None)				
'				Dim fileName, fileName1, fileName2, fileName3 As String
'				Dim mg As String =  System.Guid.NewGuid.ToString()
'				fileName = BRApi.FileSystem.GetFileShareFolder(si, FileShareFolderTypes.ApplicationRoot, Nothing) & "\" & si.AppName.Replace(" ", String.Empty) & "\Groups\Everyone\"
'				fileName1 = fileName + mg.ToString + "_json_GET.txt"
'				My.Computer.FileSystem.WriteAllText(fileName1, json, False)
'				fileName2 = fileName + mg.ToString + "_jsonOrg_GET.txt"
'				My.Computer.FileSystem.WriteAllText(fileName2, jsonOrg, False)
'				fileName3 = fileName + mg.ToString + "_jsonSer_GET.txt"
'				My.Computer.FileSystem.WriteAllText(fileName3, jsonSer, False)
'*** End of debug code ***				
			  		        
				'FCP response should contain status within json (at minimum):
				Dim status As String = fullJson("status")
				If status.XFContainsIgnoreCase("Failed") Then
					Dim errorCode As String = fullJson("errorCode")
					Dim errorMessage As String = fullJson("errorMssg")
					'Throw ErrorHandler.LogWrite(si, New XFException(si, New XFException("FCP errorCode: " & errorCode & " - " & errorMessage)))
					Me.AddLogMessage(si, $"FCP Error: {errorCode} - {errorMessage}")
					response.Success = False
					response.StatusCode = errorCode
					response.ReasonPhrase = errorMessage
					response.Data = Nothing
					Return response
				End If
				
				Dim columns = fullJson(cols).Children
				
				Dim total_pages As String = fullJson("total_pages")
				If String.IsNullOrWhiteSpace(total_pages) Then
					m_Total_Pages = 1
				Else
					m_Total_Pages = total_pages.XFConvertToInt
				End If
				
				'TODO: Add a column with total_pages if this is helpful for the Import
				'TODO: Check FX rate where total_pages might be missing
				
		        Dim sqlHelper As New SqlHelper
		        Dim jProp As JProperty
		        Dim jPropName As String
		        Dim jPropVal As String
		        For Each col In columns
		            jProp = col.ToObject(Of JProperty)
		            jPropName = jProp.Name
		            jPropVal = jProp.Value
		            jPropVal = jPropVal.Split("(")(0).Trim 'remove any sql sizes. i.e. varchar(3)
		            dt.Columns.Add(New DataColumn(jPropName, sqlHelper.GetNetType(jPropVal.ToLower)))
		        Next
		        Dim jsonRows = fullJson(rows)
		        For Each jsonRow In jsonRows
		            Dim newRow = dt.Rows.Add()
					
		            For Each jsonRowValuePair In jsonRow
		                jProp = jsonRowValuePair.ToObject(Of JProperty)
		                jPropName = jProp.Name
		                jPropVal = jProp.Value
		                If Not jPropVal Is Nothing Then
							newRow(jPropName) = jPropVal
						End If
		            Next
		        Next
				
				response.Success = True
				response.Data = dt
		        
				Return response
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
	    End Function
		
		Public Sub AddLogMessage(ByVal si As SessionInfo, ByVal message As String)
			Try
				
				m_IntegrationLog.AppendLine("-------------------------------------------------------------------------------------")
				m_IntegrationLog.AppendLine($"Time:{vbTab}{vbTab}{vbTab}{vbTab}{vbTab}{vbTab}{vbTab}{Date.Now.ToString}")
				m_IntegrationLog.AppendLine($"Message:{vbTab}{vbTab}{vbTab}{vbTab}{vbTab}{vbTab}{message}")
				m_IntegrationLog.AppendLine($"FCP Integration elapsed (seconds):{vbTab}{m_getWatch.Elapsed.TotalSeconds}")
				m_IntegrationLog.AppendLine("-------------------------------------------------------------------------------------")
				m_IntegrationLog.AppendLine(String.Empty)
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
	End Class	
	
	Public Class SqlHelper
        Private typeMap As Dictionary(Of String, Type)

        Public Sub New()
            typeMap = New Dictionary(Of String, Type)
            typeMap.Add("varchar", GetType(String))
            typeMap.Add("nvarchar", GetType(String))
            typeMap.Add("char", GetType(String))
            typeMap.Add("decimal", GetType(Decimal))
            typeMap.Add("datetime", GetType(DateTime))
			typeMap.Add("date", GetType(Date))
            typeMap.Add("smallint", GetType(Int16))
			typeMap.Add("bigint", GetType(Integer))
			typeMap.Add("int", GetType(Integer))
			typeMap.Add("float", GetType(Decimal))
			'New DataTypes added for GCP 
			typeMap.Add("int64", GetType(Int64))
			typeMap.Add("string", GetType(String))
			typeMap.Add("numeric", GetType(Decimal))
			typeMap.Add("double", GetType(Double))
			typeMap.Add("timestamp", GetType(TimeSpan))
			typeMap.Add("float64", GetType(Double))
			typeMap.Add("bool", GetType(Boolean))
			typeMap.Add("bytes", GetType(Byte))
			typeMap.Add("bignumeric", GetType(Decimal))
			typeMap.Add("bigdecimal", GetType(Decimal))
			typeMap.Add("time", GetType(TimeSpan))
	        End Sub

        Public Function GetNetType(ByVal sqlTypeName As String) As Type
            Return typeMap.Item(sqlTypeName)
        End Function
    End Class
End Namespace]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="FCP_PUT_DATA">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="CommandCenter_Utility" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_VARIABLES" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_GATEWAY" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_UTILITY" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports System.Threading.Tasks
Imports System.Text
Imports System.Net
Imports System.Net.Http
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
Imports Newtonsoft.Json.JsonPropertyAttribute


Imports OneStream.BusinessRule.Extender.CommandCenter_Utility
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_VARIABLES
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_GATEWAY
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_UTILITY
Imports OneStream.BusinessRule.Extender.OS_Models

Namespace OneStream.BusinessRule.Extender.FCP_PUT_DATA
	Public Class MainClass
		'global Declaration
		Private m_asyncGets As List(Of Task(Of OSJsonResponse))
		Private m_PutErrorOccurred As Boolean
		Private m_ExtenderLog As New Text.StringBuilder
		Private m_Client As HttpClient
		Private m_Base_URI As String
		Private m_Tribase_URI As String
		Private m_Consumer_ID As String
		Private m_SVC_Name As String
		Private m_SVC_Env As String
		Private scenarioDimName As String = String .Empty
		Const m_PUT_PageSize As Integer = 50000
		Private m_PutPageCount As Integer = 0
		Private m_PutTotalRecordCount As Integer = 0
		Dim pageNo As Integer = 1
		Private webResponseData As String = String.Empty
		'Dim JsonResult As Boolean=False
		Dim CCDataset As String = String.Empty
		Private m_FCPGateWay As IntegrationGateway(Of FCPIntegrationParams) = Nothing
		Dim datasetName As String = String.Empty
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Dim CCIntegrator As New CommandCenter_Utility.MainClass(si,api, args)
			Dim dashMaintName As String = String.Empty
			Dim Entity As String = String.Empty
			Dim scenarioMemFilter As String = String.Empty
			Dim cubeName As String = String.Empty
			Dim timeMemFilter As String = String.Empty	
			
			Dim dt As DataTable= Nothing
			Dim PTime As String = args.NameValuePairs.XFGetValue("TimePeriod")
			Dim CCDataset As String = String.Empty
			Dim CCSeqName As String = String.Empty
			BRApi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"prm_CFR_Time_Period", PTime.Split("M")(0))
			
			'BRApi.ErrorLog.LogMessage(si,"TBD CFR Actual Started===========================" & PTime)
			
			Try
				
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown, ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim cubeViewName As String = Nothing
						
						'Segmentwise assigning CubeView,Dataset Name and Scenario Name 
						If args.NameValuePairs("Segment")="CORP_CorpFcst" Then
							cubeViewName = "CORP_CFR_Extract_CorpFcst"
							datasetName="CORP_CFR"
							scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_CORP_ES_Scenario_CorpFcst_Sub_Forecast")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_CORP_ES_INPUT_Year")
							
						Else If args.NameValuePairs("Segment")="CORP_Fcst"
							cubeViewName= "CORP_CFR_Extract_Fcst"
							datasetName="CORP_CFR"
							scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_CORP_ES_Scenario_Fcst_Sub_Forecast")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_CORP_ES_INPUT_Year")
							
						Else If args.NameValuePairs("Segment")="CORP_PlanCorp"
							cubeViewName = "CORP_CFR_Extract_PlanCorp"
							datasetName="CORP_CFR"
							scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_CORP_ES_Scenario_Plan_Corp")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_CORP_ES_INPUT_Year")
							
						Else If args.NameValuePairs("Segment")="CORP_Actuals"
							cubeViewName = "CFR_Actual_Periodic"
							datasetName="CORP_CFR"	
							scenarioDimName = "S#Actual"
							Entity = "E#Walmart_Corp"
							BRApi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"prm_CFR_INPUT_Entity", Entity)
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_CFR_Time_Period")
							
						Else If args.NameValuePairs("Segment")="INTL_CorpFcst"
							cubeViewName = "INTL_CFR_Extract_CorpFcst"
							datasetName="INTL_CFR"
						 	scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_INTL_ES_Scenario_CorpFcst_Sub_Forecast")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_INTL_ES_INPUT_Year")
						
						Else If args.NameValuePairs("Segment")="INTL_Fcst"
							cubeViewName = "INTL_CFR_Extract_Fcst"
							datasetName="INTL_CFR"
							scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_INTL_ES_Scenario_Fcst_Sub_Forecast")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_INTL_ES_INPUT_Year")
							
						Else If args.NameValuePairs("Segment")="INTL_PlanCorp"
							cubeViewName = "INTL_CFR_Extract_PlanCorp"
							datasetName="INTL_CFR"
							scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_INTL_ES_Scenario_Plan_Corp")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_INTL_ES_INPUT_Year")
						
						Else If args.NameValuePairs("Segment")="INTL_Actuals"
							cubeViewName = "CFR_Actual_Periodic"
							datasetName="INTL_CFR"
							scenarioDimName = "S#Actual"
							Entity = "E#Walmart_International"
							BRApi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"prm_CFR_INPUT_Entity", Entity)
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_CFR_Time_Period")
							
						Else If args.NameValuePairs("Segment")="SAMS_CorpFcst"
							cubeViewName = "SAMS_CFR_Extract_CorpFcst"
							datasetName="SAMS_CFR"
							scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_SAMS_ES_Scenario_CorpFcst_Sub_Forecast")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_SAMS_ES_INPUT_Year")
						
						Else If args.NameValuePairs("Segment")="SAMS_Fcst"
							cubeViewName = "SAMS_CFR_Extract_Fcst"
							datasetName="SAMS_CFR"	
							scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_SAMS_ES_Scenario_Fcst_Sub_Forecast")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_SAMS_ES_INPUT_Year")
							
						Else If args.NameValuePairs("Segment")="SAMS_PlanCorp"
							cubeViewName = "SAMS_CFR_Extract_PlanCorp"
							datasetName="SAMS_CFR"
							scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_SAMS_ES_Scenario_Plan_Corp")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_SAMS_ES_INPUT_Year")
						
						Else If args.NameValuePairs("Segment")="SAMS_Actuals"
							cubeViewName = "CFR_Actual_Periodic"
							datasetName="SAMS_CFR"	
							scenarioDimName = "S#Actual"
							Entity = "E#Sams_US"
							BRApi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"prm_CFR_INPUT_Entity", Entity)
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_CFR_Time_Period")
							
						Else If args.NameValuePairs("Segment")="WMTUS_CorpFcst"
							cubeViewName = "WMTUS_CFR_Extract_CorpFcst"
							datasetName="WMTUS_CFR"
							scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_WMTUS_ES_Scenario_CorpFcst_Sub_Forecast")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_WMTUS_ES_INPUT_Year")
						
						Else If args.NameValuePairs("Segment")="WMTUS_Fcst"
							cubeViewName = "WMTUS_CFR_Extract_Fcst"
							datasetName="WMTUS_CFR"
							scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_WMTUS_ES_Scenario_Fcst_Sub_Forecast")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_WMTUS_ES_INPUT_Year")
						
						Else If args.NameValuePairs("Segment")="WMTUS_PlanCorp"
							cubeViewName = "WMTUS_CFR_Extract_PlanCorp"	
							datasetName="WMTUS_CFR"
							scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_WMTUS_ES_Scenario_Plan_Corp")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_WMTUS_ES_INPUT_Year")
						
						Else If args.NameValuePairs("Segment")="WMTUS_Actuals"
							cubeViewName = "CFR_Actual_Periodic"	
							datasetName="WMTUS_CFR"
							scenarioDimName = "S#Actual"
							Entity = "E#Walmart_US"
							BRApi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"prm_CFR_INPUT_Entity", Entity)
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_CFR_Time_Period")
						
						Else If args.NameValuePairs("Segment")="Anaplan_Plan"
							cubeViewName = "Anaplan"
							datasetName="Anaplan_Plan"
							scenarioDimName = "S#Plan_Working"
							Entity = "E#Sams_US"
							'BRApi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"prm_CFR_INPUT_Entity", Entity)
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_CFR_Time_Period")
							
						Else If args.NameValuePairs("Segment")="eCF_Plan"
							cubeViewName = "eCF"
							datasetName="wmtus_ecf"
							scenarioDimName = "S#Plan_Working"
							Entity = "E#Walmart_US"
							'BRApi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"prm_CFR_INPUT_Entity", Entity)
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_CFR_Time_Period")	
						End If
						
						Dim endPoint As String = String.Empty
						dashMaintName = args.NameValuePairs.XFGetValue("DashMaintUnitName")
						m_FCPGateWay = New IntegrationGateway(Of FCPIntegrationParams)(si, dashMaintName, OSModuleType.FCP)
						Dim includeCellTextCols As Boolean = False
						Dim useStandardFactTableFields As Boolean = True
						Dim useGenericTimeColNames As Boolean = False
						Dim filter As String = String.Empty
						Dim parallelQueryCount As Integer = 8
						Dim logStatistics As Boolean = False
						Dim isSystemLevel As Boolean = False
						
						brapi.ErrorLog.LogMessage(si, $"Get DashboardMaintUnit {dashMaintName}")
						Dim dashMaintUnit As DashboardMaintUnit = BRApi.Dashboards.MaintUnits.GetMaintUnit(si, False, Nothing, dashMaintName)
						If dashMaintUnit IsNot Nothing Then
							If datasetName = "Anaplan_Plan" Then 
								cubeName = "SAMS"
							ElseIf datasetName = "wmtus_ecf" Then 
								cubeName = "WMT_US"
							Else
								cubeName = "ENT"
							End If	
							
							'Scenrio 
							If String.IsNullOrWhiteSpace(scenarioDimName) Then
							brapi.ErrorLog.LogMessage(si, $"Invalid Parameter Scenario: {scenarioDimName}")
							Return Nothing
							End If
							
							'Time
							If String.IsNullOrWhiteSpace(timeMemFilter) Then
							brapi.ErrorLog.LogMessage(si, $"Invalid Parameter Time: {timeMemFilter}")
							Return Nothing
							End If
							
							If datasetName ="WMTUS_CFR" Then
								CCDataset="WMT_US"
								CCSeqName="EXECUTE_CONS_WMTUS"
							Else If datasetName="SAMS_CFR" 
								CCDataset ="SAMS"
								CCSeqName="EXECUTE_CONS_SAMS"
							Else If datasetName="INTL_CFR"
								CCDataset="INTL"
								CCSeqName="EXECUTE_CONS_INTL"
							Else If datasetName="CORP_CFR"
								CCDataset="ENT"	
								CCSeqName="EXECUTE_CONS_CORP"
							Else If datasetName="Anaplan_Plan"
								CCDataset="Anaplan"	
								CCSeqName="EXECUTE_PLAN_ANAPLAN"
							Else If datasetName="wmtus_ecf"
								CCDataset="WMT_US"	
								CCSeqName="EXECUTE_PLAN_ECF"	
							End If
							
							'Extract Cube View Data to Data Table
							'======================================
							'Dim timeMemFilterNew As String = String.Empty
							If timeMemFilter.Split(",").ToList().Count > 1 Then
								timeMemFilter = timeMemFilter.Replace("T#","").Replace(".Base","").Replace(" ","")
								timeMemFilter = String.Join(",", timeMemFilter.Split(",").Select(Function(t) $"T#{t}.Base"))
							End If
							'======================================
							
							Dim currTimeMemIndex As Integer = 0							
							Dim timeMemFilterCount As Integer = timeMemFilter.Split(",").ToList().Count
							Dim successfiletrigger As Boolean = True
						For Each timeparam As String In timeMemFilter.Split(",").ToList()
							currTimeMemIndex += 1
							successfiletrigger = (currTimeMemIndex=timeMemFilterCount)
							timeMemFilter =timeparam
							scenarioDimName = scenarioDimName.Replace("S#","")
							timeMemFilter = timeMemFilter.Replace("T#","").Replace(".Base","").Replace(" ","")
							timeMemFilter =timeMemFilter.Substring(0,4)
							
							If datasetName ="CORP_CFR" Then
							   BRapi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"prm_DB_FCP_PUT_CORP_ES_INPUT_Year",timeMemFilter)
						    Else If datasetName = "INTL_CFR"
								BRapi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"prm_DB_FCP_PUT_INTL_ES_INPUT_Year",timeMemFilter)
							Else If datasetName = "SAMS_CFR"
								BRapi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"prm_DB_FCP_PUT_SAMS_ES_INPUT_Year",timeMemFilter)	
							Else If datasetName = "WMTUS_CFR"
								BRapi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"prm_DB_FCP_PUT_WMTUS_ES_INPUT_Year",timeMemFilter)		
							End If	
							'Removing S#,T# from Scenario,Time and replacing it with blank only CorpFcst_Wk13 will be sent to FCP instead of S#CorpFcst_Wk13
							brapi.ErrorLog.LogMessage(si,$"CubeViewName: {cubeViewName}; Entity : {Entity};DatasetName : {datasetName} ; scenario Name: {scenarioDimName}; TimeFilter: {timeMemFilter}")
							
							'Execute Cube View and Load into Data table
							dt = BRApi.Import.Data.FdxExecuteCubeView(si, 
							cubeViewName,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing, 
							includeCellTextCols,useStandardFactTableFields,filter,parallelQueryCount,logStatistics)
									 
								dt.Columns("Time").ColumnName = "Year"
								dt.Columns.Remove("Parent")
								dt.Columns.Remove("RowHdr0ParentName")
								dt.Columns("V" & timeMemFilter &"M1").ColumnName = "M1"
								dt.Columns("V" & timeMemFilter &"M2").ColumnName = "M2"
								dt.Columns("V" & timeMemFilter &"M3").ColumnName = "M3"
								dt.Columns("V" & timeMemFilter &"M4").ColumnName = "M4"
								dt.Columns("V" & timeMemFilter &"M5").ColumnName = "M5"
								dt.Columns("V" & timeMemFilter &"M6").ColumnName = "M6"
								dt.Columns("V" & timeMemFilter &"M7").ColumnName = "M7"
								dt.Columns("V" & timeMemFilter &"M8").ColumnName = "M8"
								dt.Columns("V" & timeMemFilter &"M9").ColumnName = "M9"
								dt.Columns("V" & timeMemFilter &"M10").ColumnName = "M10"
								dt.Columns("V" & timeMemFilter &"M11").ColumnName = "M11"
								dt.Columns("V" & timeMemFilter &"M12").ColumnName = "M12"
								
						'convert the filled DT into JSON
						 LoopOsDtPutByPage(si,dt)
'						 Dim serializer As New System.Web.Script.Serialization.JavaScriptSerializer()
'						 Dim rows As New List(Of Dictionary(Of String, Object))()
'						 Dim row As Dictionary(Of String, Object)
'							For Each dr As DataRow In dt.Rows
'							  row = New Dictionary(Of String, Object)()
'								 For Each col As DataColumn In dt.Columns
'								    row.Add(col.ColumnName, dr(col))
'								  Next
'							    rows.Add(row)
'							 Next
							 
'							Dim numOfPages As Integer = Math.Ceiling(dt.Rows.Count / m_PUT_PageSize)
'							If PageNo<=m_PUT_PageSize Then 
'								pageNo= 1
'							Else
'								pageNo = Math.Ceiling(dt.Rows.Count/m_PUT_PageSize)
'							End If
'							Dim jsonPayLoad As String = JsonConvert.SerializeObject(rows)
'							Dim strbuilder As New Text.StringBuilder
'							strbuilder.AppendLine("{")
'							strbuilder.AppendLine("""status"" : null,")
'							strbuilder.AppendLine($"""rowCount"" : {dt.Rows.Count},")
'							strbuilder.AppendLine("""data"" : ")
'							strbuilder.AppendLine($"{jsonPayLoad},")
'							strbuilder.AppendLine($"""page"" : {pageNo},")
'							strbuilder.AppendLine($"""total_pages"" : {numOfPages},")
'							strbuilder.AppendLine($"""dataset_name"" : ""{datasetname}""")
'							strbuilder.AppendLine("}")
'							'brapi.ErrorLog.LogMessage(Si,$"{strbuilder.ToString}")
'							Dim JsonResult = m_FCPGateWay.PutData(si, strbuilder.ToString, False,OSActionType.Put)
							
'						If JsonResult.Result.Success Then
'							Dim JsonStrbuilder As New Text.StringBuilder
'							JsonStrbuilder.AppendLine("{")
'							JsonStrbuilder.AppendLine($"""CUBE"" : ""{cubeName}"",")
'							JsonStrbuilder.AppendLine($"""SCENARIO"" : ""{scenarioDimName}"",")
'							JsonStrbuilder.AppendLine($"""DATASET_NAME"" : ""{datasetname}""")
'							JsonStrbuilder.AppendLine("}")
'							brapi.ErrorLog.LogMessage(Si,$"{JsonStrbuilder.ToString}")
'							m_FCPGateWay.PutData(si, JsonStrbuilder.ToString, True,OSActionType.Put)
							
'							'For sending Segment Name to Command Center Need to Exclude _CFR tag
'							If datasetName ="WMTUS_CFR" Then
'								CCDataset="WMT_US"
'							Else If datasetName="SAMS_CFR" 
'								CCDataset ="SAMS"
'							Else If datasetName="INTL_CFR"
'								CCDataset="INTL"
'							Else If datasetName="CORP_CFR"
'								CCDataset="ENT"
'							Else If datasetName="Anaplan_Plan"
'								CCDataset="SAMS"
'							Else If datasetName = "wmtus_ecf" Then 
'								CCDataset = "WMT_US"	
'							End If 	
'						If JsonResult.Result.Success Then 	
'							If scenarioDimName="Actual" Then
'								CCIntegrator.GeneratePayloadForCC(si,scenarioDimName,CCDataset,timeMemFilter,"CFRActuals","","Success",dt.Rows.Count,"","CommandCenter_PUTCFRActuals",CCSeqName)
'							ElseIf scenarioDimName="Plan_Working" Then
'								CCIntegrator.GeneratePayloadForCC(si,scenarioDimName,CCDataset,timeMemFilter,"AOP","","Success",dt.Rows.Count,"","CommandCenter_PUTAOP",CCSeqName)
'							Else 
'								CCIntegrator.GeneratePayloadForCC(si,scenarioDimName,CCDataset,timeMemFilter,"CFR","","Success",dt.Rows.Count,"","CommandCenter_PUTnCFR",CCSeqName)
'							End If 
'						End If
'							 'Save the extracted Data to Shared folder in csv format
'							'SaveExtractFile(si,dt)
'						Else
'							If scenarioDimName="Actual" Then
'								CCIntegrator.GeneratePayloadForCC(si,scenarioDimName,CCDataset,timeMemFilter,"CFRActuals","","Failed",0,"Fail to Process data","CommandCenter_PUTCFRActuals",CCSeqName)
'							ElseIf scenarioDimName="Plan_Working" Then
'								CCIntegrator.GeneratePayloadForCC(si,scenarioDimName,CCDataset,timeMemFilter,"AOP","","Failed",dt.Rows.Count,"","CommandCenter_PUTAOP",CCSeqName)
'							Else
'								CCIntegrator.GeneratePayloadForCC(si,scenarioDimName,CCDataset,timeMemFilter,"CFR","","Failed",0,"Fail to Process data","CommandCenter_PUTnCFR",CCSeqName)	
'							End If	
'						End If 
					Next		
						Return Nothing
					End If	
				End Select
				Return Nothing
			Catch ex As Exception
						If datasetName ="WMTUS_CFR" Then
								CCDataset="WMT_US"
								CCSeqName="EXECUTE_CONS_WMTUS"
							Else If datasetName="SAMS_CFR" 
								CCDataset ="SAMS"
								CCSeqName="EXECUTE_CONS_SAMS"
							Else If datasetName="INTL_CFR"
								CCDataset="INTL"
								CCSeqName="EXECUTE_CONS_INTL"
							Else If datasetName="CORP_CFR"
								CCDataset="ENT"	
								CCSeqName="EXECUTE_CONS_CORP"
							Else If datasetName="Anaplan_Plan"
								CCDataset="Anaplan"	
								CCSeqName="EXECUTE_PLAN_ANAPLAN"	
						End If
					If scenarioDimName="Actual" Then
						CCIntegrator.GeneratePayloadForCC(si,scenarioDimName,CCDataset,timeMemFilter,"CFRActuals","","Failed",0,ex.Message,"CommandCenter_PUTCFRActuals",CCSeqName)
					ElseIf scenarioDimName="Plan_Working" Then
						CCIntegrator.GeneratePayloadForCC(si,scenarioDimName,CCDataset,timeMemFilter,"AOP","","Success",dt.Rows.Count,"","CommandCenter_PUTAOP",CCSeqName)
					Else
						CCIntegrator.GeneratePayloadForCC(si,scenarioDimName,CCDataset,timeMemFilter,"CFR","","Failed",0,ex.Message,"CommandCenter_PUTnCFR",CCSeqName)
				End If
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Sub LoopOsDtPutByPage(ByVal si As SessionInfo, ByVal dt As DataTable) 
		    Try
				
		        Dim numOfPages As Integer = Math.Ceiling(dt.Rows.Count / m_PUT_PageSize)
				Dim pageNum As Integer = 1
				Do While pageNum <= numOfPages
					For i As Integer = 1 To 5
						If pageNum <= numOfPages
							'put m_PUT_PageSize records
							
							Dim dtPage As DataTable = dt.Rows.Cast(Of System.Data.DataRow).Skip((pageNum - 1) * m_PUT_PageSize).Take(m_PUT_PageSize).CopyToDataTable()
		                    
							If dtPage IsNot Nothing Then
								
								m_PutPageCount += 1
								m_PutTotalRecordCount += dtPage.Rows.Count
								
'								If m_SaveToFile Then
'									Me.AddDataToFile(si, dtPage, pageNum)
'								Else
									Dim jObj As JObject = New Jobject
									jObj("status") = Nothing
									jObj("rowCount") = dt.Rows.Count

									'DPA-12922 vn512cg If DataSet is available and has value then add to Payload else ignore
									If Not String.IsNullOrWhiteSpace(datasetName) Then
										jObj("dataset_name") = datasetName 'datasetName
									End If								
									
									jObj("page") = m_PutPageCount
									jObj("data") = JArray.FromObject(dtPage, JsonSerializer.CreateDefault)
															
				                    m_asyncGets.Add(Me.TryPutToFcpAsync(si,jObj.ToString))
								
								
									'BRApi.ErrorLog.LogMessage(si, $"JSON PAYLOAD1111: {jObj.ToString}")	
									'Me.AddLogMessage(si, $"JSON PAYLOAD1111: {jObj.ToString}")
									'vn512cf - RK implemented as per STOREOPS
									BRApi.ErrorLog.LogMessage(si, $"Page {pageNum} of {numOfPages} and RowCount: {dtPage.Rows.Count}")						
								'End If
							End If
							
							'increment page
							pageNum += 1
						Else
							'increment page
							pageNum += 1
						End If
		        	Next

					Dim result As Task
					result = Task.WhenAll(m_asyncGets.ToArray)
					
					Try
						result.Wait()
					Catch e As Exception
						Throw ErrorHandler.LogWrite(si, New XFException(si, e))
					End Try
					
				Loop
				
				Dim content As String
				Dim successCount As Integer = 0
				
				For Each tResults As Task(Of OSJsonResponse) In m_asyncGets
					If tResults.Result.Success = False Then
						content = tResults.Result.JsonData
						'Me.AddLogMessage(si, $"FCP PUT Response Error. {content}")
						m_PutErrorOccurred = True
						Exit For
					Else
						successCount += 1
					End If
				Next
				
				m_asyncGets.Clear
				
				If successCount <> numOfPages Then
					'Me.AddLogMessage(si, $"Completed PUT with errors in {m_getWatch.Elapsed.TotalMinutes} minutes")
				Else
					'Me.AddLogMessage(si, $"Completed PUT (all {numOfPages} pages) in {m_getWatch.Elapsed.TotalMinutes} minutes")
				End If
				
			Catch ex As Exception
				m_PutErrorOccurred = True
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		Public Async Function TryPutToFcpAsync(ByVal si As SessionInfo, ByVal json As String, Optional ByVal isSuccessTrigger As Boolean = False) As Task(Of OSJsonResponse)
			Try
				Dim rTask As OSJsonResponse = Nothing
				Dim mainEx As Exception = Nothing
				
				'BRApi.ErrorLog.LogMessage(si, $"JSON PAY LOAD3 : {json}")
				For i As Integer = 1 To 3
					Try
						rTask = Await Me.PutDataToFcpAsync(si, json, isSuccessTrigger)
						If rTask IsNot Nothing Then							
							Return rTask
						End If
						
					Catch exWhen As Exception
						mainEx = exWhen
					End Try
				
					If i = 1 Then
						'Me.AddLogMessage(si, $"Trying again in 5 seconds")
						Await Task.Delay(TimeSpan.FromSeconds(5))
					ElseIf i = 2 Then
						'Me.AddLogMessage(si, $"Trying again in 8 seconds")
						Await Task.Delay(TimeSpan.FromSeconds(8))
					Else
						Throw(ErrorHandler.LogWrite(si, New XFException(si, mainEx)))
					End If
				Next
				
				Return rTask
				
			Catch exMain As Exception
				m_PutErrorOccurred = True
				'Me.AddLogMessage(si, $"TryPutToFcpAsync Exception: {exMain.Message}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, exMain))
			End Try	
		End Function
		
		Public Async Function PutDataToFcpAsync(ByVal si As SessionInfo, ByVal json As String, ByVal isSuccessTrigger As Boolean) As Task(Of OSJsonResponse)
			Try				
				Return Await m_FCPGateWay.PutData(si, json, isSuccessTrigger)
				Brapi.ErrorLog.LogMessage(si,"Put Sucessfully Completed")
			Catch ex As Exception
				m_PutErrorOccurred = True
				'Me.AddLogMessage(si, $"PutDataToFcpAsync Exception: {ex.Message}")		
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Sub SaveExtractFile(ByVal si As SessionInfo,ByVal Dt As DataTable)
		Dim filePath As String = BRApi.Utilities.GetFileShareFolder(si, filesharefoldertypes.ApplicationRoot,Nothing) & "\" & stringhelper.RemoveWhiteSpace(si.AppName) & "\Groups\Everyone\"& scenarioDimName &".csv"
			brapi.ErrorLog.LogMessage(si,$"{filePath}")
			Using sw As StreamWriter = file.CreateText(filepath)
				For Each DC As DataColumn In dt.Columns
					sw.Write(DC.ColumnName & ",")
				Next
					sw.Write(vbnewline)
				For Each DR As DataRow In dt.Rows
					For Each DC As DataColumn In dt.Columns
						sw.Write(DR(DC.ColumnName).ToString & ",")	
					Next 
						sw.Write(vbnewline)
				Next
			End Using
		End Sub
		Public Function GetDashboardParam_DefaultValue(ByVal si As SessionInfo, ByVal paramName As String)
			Try				
				Dim defValue As String = String.Empty
				
				Dim objDashboardParamDisplayInfo As DashboardParamDisplayInfo = BRApi.Dashboards.Parameters.GetParameterDisplayInfo(si, False, Nothing, paramName)
				If objDashboardParamDisplayInfo IsNot Nothing Then
					defValue = objDashboardParamDisplayInfo.DefaultValueAfterSubstitution
				Else
					Brapi.ErrorLog.LogMessage(si, $"Invalid Filter Param: Couldn't find Dashboard Parameter {paramName}")
				End If
				
				Return defValue
			Catch ex As Exception
				Brapi.ErrorLog.LogMessage(si, $"Exception during GetDashboardParam_DefaultValue: {ex.Message}.")
				Return Nothing
			End Try
		End Function
		Public Function GetDashboardParam_MemberFilter(ByVal si As SessionInfo, ByVal paramName As String) As String
			Try		
				Dim memFilter As String = String.Empty
				
				Dim objDashboardParamDisplayInfo As DashboardParamDisplayInfo = BRApi.Dashboards.Parameters.GetParameterDisplayInfo(si, False, Nothing, paramName)
				If objDashboardParamDisplayInfo IsNot Nothing Then
					If objDashboardParamDisplayInfo.ComboBoxItemsForBoundList.Count > 0 Then
						memFilter = objDashboardParamDisplayInfo.MemberFilterAfterSubstitution
					Else
						Brapi.ErrorLog.LogMessage(si, $"Invalid Filter Param (GetDashboardParam_MemberFilter). Dashboard Parameter {paramName} must return at least one member.")
					End If
				Else
					Brapi.ErrorLog.LogMessage(si, $"Invalid Filter Param: Couldn't find Dashboard Parameter {paramName}")
				End If
				
				Return memFilter
			Catch ex As Exception
				Brapi.ErrorLog.LogMessage(si, $"Exception during GetDashboardParam_MemberFilter: {ex.Message}.")
				Return String.Empty
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="FCP_PUT_DATA_VALIDATION">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="CommandCenter_Utility" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_VARIABLES" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_GATEWAY" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_UTILITY" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports System.Threading.Tasks
Imports System.Text
Imports System.Net
Imports System.Net.Http
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
Imports Newtonsoft.Json.JsonPropertyAttribute


Imports OneStream.BusinessRule.Extender.CommandCenter_Utility
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_VARIABLES
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_GATEWAY
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_UTILITY
Imports OneStream.BusinessRule.Extender.OS_Models

Namespace OneStream.BusinessRule.Extender.FCP_PUT_DATA_VALIDATION
	Public Class MainClass
		'global Declaration
		Private m_ExtenderLog As New Text.StringBuilder
		Private m_Client As HttpClient
		Private m_Base_URI As String
		Private m_Tribase_URI As String
		Private m_Consumer_ID As String
		Private m_SVC_Name As String
		Private m_SVC_Env As String
		Private scenarioDimName As String = String .Empty
		Const m_PUT_PageSize As Integer = 50000
		Dim pageNo As Integer = 1
		Private webResponseData As String = String.Empty
		'Dim JsonResult As Boolean=False
		Dim CCDataset As String = String.Empty
		Private m_FCPGateWay As IntegrationGateway(Of FCPIntegrationParams) = Nothing
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Dim CCIntegrator As New CommandCenter_Utility.MainClass(si,api, args)
			Dim dashMaintName As String = String.Empty
			Dim Entity As String = String.Empty
			Dim scenarioMemFilter As String = String.Empty
			Dim cubeName As String = String.Empty
			Dim timeMemFilter As String = String.Empty	
			Dim datasetName As String = String.Empty
			Dim dt As DataTable= Nothing
			Dim PTime As String = args.NameValuePairs.XFGetValue("TimePeriod")
			Dim CCDataset As String = String.Empty
			Dim CCSeqName As String = String.Empty
			BRApi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"prm_CFR_Time_Period", PTime.Split("M")(0))
			
			'BRApi.ErrorLog.LogMessage(si,"TBD CFR Actual Started===========================" & PTime)
			
			Try
				
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown, ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim cubeViewName As String = Nothing
						
						'Segmentwise assigning CubeView,Dataset Name and Scenario Name 
						If args.NameValuePairs("Segment")="CORP_CorpFcst" Then
							cubeViewName = "CORP_CFR_Extract_CorpFcst"
							datasetName="CORP_CFR"
							scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_CORP_ES_Scenario_CorpFcst_Sub_Forecast")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_CORP_ES_INPUT_Year")
							
						Else If args.NameValuePairs("Segment")="CORP_Fcst"
							cubeViewName= "CORP_CFR_Extract_Fcst"
							datasetName="CORP_CFR"
							scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_CORP_ES_Scenario_Fcst_Sub_Forecast")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_CORP_ES_INPUT_Year")
							
						Else If args.NameValuePairs("Segment")="CORP_PlanCorp"
							cubeViewName = "CORP_CFR_Extract_PlanCorp"
							datasetName="CORP_CFR"
							scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_CORP_ES_Scenario_Plan_Corp")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_CORP_ES_INPUT_Year")
							
						Else If args.NameValuePairs("Segment")="CORP_Actuals"
							cubeViewName = "CFR_Actual_Periodic"
							datasetName="CORP_CFR"	
							scenarioDimName = "S#Actual"
							Entity = "E#Walmart_Corp"
							BRApi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"prm_CFR_INPUT_Entity", Entity)
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_CFR_Time_Period")
							
						Else If args.NameValuePairs("Segment")="INTL_CorpFcst"
							cubeViewName = "INTL_CFR_Extract_CorpFcst"
							datasetName="INTL_CFR"
						 	scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_INTL_ES_Scenario_CorpFcst_Sub_Forecast")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_INTL_ES_INPUT_Year")
						
						Else If args.NameValuePairs("Segment")="INTL_Fcst"
							cubeViewName = "INTL_CFR_Extract_Fcst"
							datasetName="INTL_CFR"
							scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_INTL_ES_Scenario_Fcst_Sub_Forecast")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_INTL_ES_INPUT_Year")
							
						Else If args.NameValuePairs("Segment")="INTL_PlanCorp"
							cubeViewName = "INTL_CFR_Extract_PlanCorp"
							datasetName="INTL_CFR"
							scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_INTL_ES_Scenario_Plan_Corp")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_INTL_ES_INPUT_Year")
						
						Else If args.NameValuePairs("Segment")="INTL_Actuals"
							cubeViewName = "CFR_Actual_Periodic"
							datasetName="INTL_CFR"
							scenarioDimName = "S#Actual"
							Entity = "E#Walmart_International"
							BRApi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"prm_CFR_INPUT_Entity", Entity)
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_CFR_Time_Period")
							
						Else If args.NameValuePairs("Segment")="SAMS_CorpFcst"
							cubeViewName = "SAMS_CFR_Extract_CorpFcst"
							datasetName="SAMS_CFR"
							scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_SAMS_ES_Scenario_CorpFcst_Sub_Forecast")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_SAMS_ES_INPUT_Year")
						
						Else If args.NameValuePairs("Segment")="SAMS_Fcst"
							cubeViewName = "SAMS_CFR_Extract_Fcst"
							datasetName="SAMS_CFR"	
							scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_SAMS_ES_Scenario_Fcst_Sub_Forecast")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_SAMS_ES_INPUT_Year")
							
						Else If args.NameValuePairs("Segment")="SAMS_PlanCorp"
							cubeViewName = "SAMS_CFR_Extract_PlanCorp"
							datasetName="SAMS_CFR"
							scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_SAMS_ES_Scenario_Plan_Corp")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_SAMS_ES_INPUT_Year")
						
						Else If args.NameValuePairs("Segment")="SAMS_Actuals"
							cubeViewName = "CFR_Actual_Periodic"
							datasetName="SAMS_CFR"	
							scenarioDimName = "S#Actual"
							Entity = "E#Sams_US"
							BRApi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"prm_CFR_INPUT_Entity", Entity)
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_CFR_Time_Period")
							
						Else If args.NameValuePairs("Segment")="WMTUS_CorpFcst"
							cubeViewName = "WMTUS_CFR_Extract_CorpFcst"
							datasetName="WMTUS_CFR"
							scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_WMTUS_ES_Scenario_CorpFcst_Sub_Forecast")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_WMTUS_ES_INPUT_Year")
						
						Else If args.NameValuePairs("Segment")="WMTUS_Fcst"
							cubeViewName = "WMTUS_CFR_Extract_Fcst"
							datasetName="WMTUS_CFR"
							scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_WMTUS_ES_Scenario_Fcst_Sub_Forecast")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_WMTUS_ES_INPUT_Year")
						
						Else If args.NameValuePairs("Segment")="WMTUS_PlanCorp"
							cubeViewName = "WMTUS_CFR_Extract_PlanCorp"	
							datasetName="WMTUS_CFR"
							scenarioDimName = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_WMTUS_ES_Scenario_Plan_Corp")
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_DB_FCP_PUT_WMTUS_ES_INPUT_Year")
						
						Else If args.NameValuePairs("Segment")="WMTUS_Actuals"
							cubeViewName = "CFR_Actual_Periodic"	
							datasetName="WMTUS_CFR"
							scenarioDimName = "S#Actual"
							Entity = "E#Walmart_US"
							BRApi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"prm_CFR_INPUT_Entity", Entity)
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_CFR_Time_Period")
						
						Else If args.NameValuePairs("Segment")="Anaplan_Plan"
							cubeViewName = "Anaplan"
							datasetName="Anaplan_Plan"
							scenarioDimName = "S#Plan_Working"
							Entity = "E#Sams_US"
							'BRApi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"prm_CFR_INPUT_Entity", Entity)
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_CFR_Time_Period")
							
						Else If args.NameValuePairs("Segment")="eCF_Plan"
							cubeViewName = "eCF"
							datasetName="wmtus_ecf"
							scenarioDimName = "S#Plan_Working"
							Entity = "E#Walmart_US"
							'BRApi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"prm_CFR_INPUT_Entity", Entity)
							timeMemFilter = Me.GetDashboardParam_DefaultValue(si,$"prm_CFR_Time_Period")	
						End If
						
						Dim endPoint As String = String.Empty
						dashMaintName = args.NameValuePairs.XFGetValue("DashMaintUnitName")
						m_FCPGateWay = New IntegrationGateway(Of FCPIntegrationParams)(si, dashMaintName, OSModuleType.FCP)
						Dim includeCellTextCols As Boolean = False
						Dim useStandardFactTableFields As Boolean = True
						Dim useGenericTimeColNames As Boolean = False
						Dim filter As String = String.Empty
						Dim parallelQueryCount As Integer = 8
						Dim logStatistics As Boolean = False
						Dim isSystemLevel As Boolean = False
						
						brapi.ErrorLog.LogMessage(si, $"Get DashboardMaintUnit {dashMaintName}")
						Dim dashMaintUnit As DashboardMaintUnit = BRApi.Dashboards.MaintUnits.GetMaintUnit(si, False, Nothing, dashMaintName)
						If dashMaintUnit IsNot Nothing Then
							If datasetName = "Anaplan_Plan" Then 
								cubeName = "SAMS"
							ElseIf datasetName = "wmtus_ecf" Then 
								cubeName = "WMT_US"
							Else
								cubeName = "ENT"
							End If	
							
							'Scenrio 
							If String.IsNullOrWhiteSpace(scenarioDimName) Then
							brapi.ErrorLog.LogMessage(si, $"Invalid Parameter Scenario: {scenarioDimName}")
							Return Nothing
							End If
							
							'Time
							If String.IsNullOrWhiteSpace(timeMemFilter) Then
							brapi.ErrorLog.LogMessage(si, $"Invalid Parameter Time: {timeMemFilter}")
							Return Nothing
							End If
							
							If datasetName ="WMTUS_CFR" Then
								CCDataset="WMT_US"
								CCSeqName="EXECUTE_CONS_WMTUS"
							Else If datasetName="SAMS_CFR" 
								CCDataset ="SAMS"
								CCSeqName="EXECUTE_CONS_SAMS"
							Else If datasetName="INTL_CFR"
								CCDataset="INTL"
								CCSeqName="EXECUTE_CONS_INTL"
							Else If datasetName="CORP_CFR"
								CCDataset="ENT"	
								CCSeqName="EXECUTE_CONS_CORP"
							Else If datasetName="Anaplan_Plan"
								CCDataset="Anaplan"	
								CCSeqName="EXECUTE_PLAN_ANAPLAN"
							Else If datasetName="wmtus_ecf"
								CCDataset="WMT_US"	
								CCSeqName="EXECUTE_PLAN_ECF"	
							End If
							
							'Extract Cube View Data to Data Table
							'======================================
							'Dim timeMemFilterNew As String = String.Empty
							If timeMemFilter.Split(",").ToList().Count > 1 Then
								timeMemFilter = timeMemFilter.Replace("T#","").Replace(".Base","").Replace(" ","")
								timeMemFilter = String.Join(",", timeMemFilter.Split(",").Select(Function(t) $"T#{t}.Base"))
							End If
							'======================================
							
							Dim currTimeMemIndex As Integer = 0							
							Dim timeMemFilterCount As Integer = timeMemFilter.Split(",").ToList().Count
							Dim successfiletrigger As Boolean = True
						For Each timeparam As String In timeMemFilter.Split(",").ToList()
							currTimeMemIndex += 1
							successfiletrigger = (currTimeMemIndex=timeMemFilterCount)
							timeMemFilter =timeparam
							scenarioDimName = scenarioDimName.Replace("S#","")
							timeMemFilter = timeMemFilter.Replace("T#","").Replace(".Base","").Replace(" ","")
							timeMemFilter =timeMemFilter.Substring(0,4)
							
							If datasetName ="CORP_CFR" Then
							   BRapi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"prm_DB_FCP_PUT_CORP_ES_INPUT_Year",timeMemFilter)
						    Else If datasetName = "INTL_CFR"
								BRapi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"prm_DB_FCP_PUT_INTL_ES_INPUT_Year",timeMemFilter)
							Else If datasetName = "SAMS_CFR"
								BRapi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"prm_DB_FCP_PUT_SAMS_ES_INPUT_Year",timeMemFilter)	
							Else If datasetName = "WMTUS_CFR"
								BRapi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"prm_DB_FCP_PUT_WMTUS_ES_INPUT_Year",timeMemFilter)		
							End If	
							'Removing S#,T# from Scenario,Time and replacing it with blank only CorpFcst_Wk13 will be sent to FCP instead of S#CorpFcst_Wk13
							brapi.ErrorLog.LogMessage(si,$"CubeViewName: {cubeViewName}; Entity : {Entity};DatasetName : {datasetName} ; scenario Name: {scenarioDimName}; TimeFilter: {timeMemFilter}")
							
							'Execute Cube View and Load into Data table
							dt = BRApi.Import.Data.FdxExecuteCubeView(si, 
							cubeViewName,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing, 
							includeCellTextCols,useStandardFactTableFields,filter,parallelQueryCount,logStatistics)
							
								dt.Columns("Time").ColumnName = "Year"
								dt.Columns.Remove("Parent")
								dt.Columns.Remove("RowHdr0ParentName")
								dt.Columns("V" & timeMemFilter &"M1").ColumnName = "M1"
								dt.Columns("V" & timeMemFilter &"M2").ColumnName = "M2"
								dt.Columns("V" & timeMemFilter &"M3").ColumnName = "M3"
								dt.Columns("V" & timeMemFilter &"M4").ColumnName = "M4"
								dt.Columns("V" & timeMemFilter &"M5").ColumnName = "M5"
								dt.Columns("V" & timeMemFilter &"M6").ColumnName = "M6"
								dt.Columns("V" & timeMemFilter &"M7").ColumnName = "M7"
								dt.Columns("V" & timeMemFilter &"M8").ColumnName = "M8"
								dt.Columns("V" & timeMemFilter &"M9").ColumnName = "M9"
								dt.Columns("V" & timeMemFilter &"M10").ColumnName = "M10"
								dt.Columns("V" & timeMemFilter &"M11").ColumnName = "M11"
								dt.Columns("V" & timeMemFilter &"M12").ColumnName = "M12"
								
						'convert the filled DT into JSON
						 Dim serializer As New System.Web.Script.Serialization.JavaScriptSerializer()
						 Dim rows As New List(Of Dictionary(Of String, Object))()
						 Dim row As Dictionary(Of String, Object)
							For Each dr As DataRow In dt.Rows
							  row = New Dictionary(Of String, Object)()
								 For Each col As DataColumn In dt.Columns
								    row.Add(col.ColumnName, dr(col))
								  Next
							    rows.Add(row)
							 Next
							 BRApi.ErrorLog.LogMessage(si,"After Dr Loop")
							Dim numOfPages As Integer = Math.Ceiling(dt.Rows.Count / m_PUT_PageSize)
							If PageNo<=m_PUT_PageSize Then 
								pageNo= 1
							Else
								pageNo = Math.Ceiling(dt.Rows.Count/m_PUT_PageSize)
							End If
							Dim jsonPayLoad As String = JsonConvert.SerializeObject(rows)
							Dim strbuilder As New Text.StringBuilder
							strbuilder.AppendLine("{")
							strbuilder.AppendLine("""status"" : null,")
							strbuilder.AppendLine($"""rowCount"" : {dt.Rows.Count},")
							strbuilder.AppendLine("""data"" : ")
							strbuilder.AppendLine($"{jsonPayLoad},")
							strbuilder.AppendLine($"""page"" : {pageNo},")
							strbuilder.AppendLine($"""total_pages"" : {numOfPages},")
							strbuilder.AppendLine($"""dataset_name"" : ""{datasetname}""")
							strbuilder.AppendLine("}")
							'brapi.ErrorLog.LogMessage(Si,$"{strbuilder.ToString}")
							Dim JsonResult = m_FCPGateWay.PutData(si, strbuilder.ToString, False,OSActionType.Put)
							
						If JsonResult.Result.Success Then
							Dim JsonStrbuilder As New Text.StringBuilder
							JsonStrbuilder.AppendLine("{")
							JsonStrbuilder.AppendLine($"""CUBE"" : ""{cubeName}"",")
							JsonStrbuilder.AppendLine($"""SCENARIO"" : ""{scenarioDimName}"",")
							JsonStrbuilder.AppendLine($"""DATASET_NAME"" : ""{datasetname}""")
							JsonStrbuilder.AppendLine("}")
							'brapi.ErrorLog.LogMessage(Si,$"{JsonStrbuilder.ToString}")
							m_FCPGateWay.PutData(si, JsonStrbuilder.ToString, True,OSActionType.Put)
							
							'For sending Segment Name to Command Center Need to Exclude _CFR tag
							If datasetName ="WMTUS_CFR" Then
								CCDataset="WMT_US"
							Else If datasetName="SAMS_CFR" 
								CCDataset ="SAMS"
							Else If datasetName="INTL_CFR"
								CCDataset="INTL"
							Else If datasetName="CORP_CFR"
								CCDataset="ENT"
							Else If datasetName="Anaplan_Plan"
								CCDataset="SAMS"
							Else If datasetName = "wmtus_ecf" Then 
								CCDataset = "WMT_US"	
							End If 	
						If JsonResult.Result.Success Then 	
							If scenarioDimName="Actual" Then
								CCIntegrator.GeneratePayloadForCC(si,scenarioDimName,CCDataset,timeMemFilter,"CFRActuals","","Success",dt.Rows.Count,"","CommandCenter_PUTCFRActuals",CCSeqName)
							ElseIf scenarioDimName="Plan_Working" Then
								CCIntegrator.GeneratePayloadForCC(si,scenarioDimName,CCDataset,timeMemFilter,"AOP","","Success",dt.Rows.Count,"","CommandCenter_PUTAOP",CCSeqName)
							Else 
								CCIntegrator.GeneratePayloadForCC(si,scenarioDimName,CCDataset,timeMemFilter,"CFR","","Success",dt.Rows.Count,"","CommandCenter_PUTnCFR",CCSeqName)
							End If 
						End If
							 'Save the extracted Data to Shared folder in csv format
							'SaveExtractFile(si,dt)
						Else
							If scenarioDimName="Actual" Then
								CCIntegrator.GeneratePayloadForCC(si,scenarioDimName,CCDataset,timeMemFilter,"CFRActuals","","Failed",0,"Fail to Process data","CommandCenter_PUTCFRActuals",CCSeqName)
							ElseIf scenarioDimName="Plan_Working" Then
								CCIntegrator.GeneratePayloadForCC(si,scenarioDimName,CCDataset,timeMemFilter,"AOP","","Failed",dt.Rows.Count,"","CommandCenter_PUTAOP",CCSeqName)
							Else
								CCIntegrator.GeneratePayloadForCC(si,scenarioDimName,CCDataset,timeMemFilter,"CFR","","Failed",0,"Fail to Process data","CommandCenter_PUTnCFR",CCSeqName)	
							End If	
						End If 
					Next		
						Return Nothing
					End If	
				End Select
				Return Nothing
			Catch ex As Exception
						If datasetName ="WMTUS_CFR" Then
								CCDataset="WMT_US"
								CCSeqName="EXECUTE_CONS_WMTUS"
							Else If datasetName="SAMS_CFR" 
								CCDataset ="SAMS"
								CCSeqName="EXECUTE_CONS_SAMS"
							Else If datasetName="INTL_CFR"
								CCDataset="INTL"
								CCSeqName="EXECUTE_CONS_INTL"
							Else If datasetName="CORP_CFR"
								CCDataset="ENT"	
								CCSeqName="EXECUTE_CONS_CORP"
							Else If datasetName="Anaplan_Plan"
								CCDataset="Anaplan"	
								CCSeqName="EXECUTE_PLAN_ANAPLAN"	
						End If
					If scenarioDimName="Actual" Then
						CCIntegrator.GeneratePayloadForCC(si,scenarioDimName,CCDataset,timeMemFilter,"CFRActuals","","Failed",0,ex.Message,"CommandCenter_PUTCFRActuals",CCSeqName)
					ElseIf scenarioDimName="Plan_Working" Then
						CCIntegrator.GeneratePayloadForCC(si,scenarioDimName,CCDataset,timeMemFilter,"AOP","","Success",dt.Rows.Count,"","CommandCenter_PUTAOP",CCSeqName)
					Else
						CCIntegrator.GeneratePayloadForCC(si,scenarioDimName,CCDataset,timeMemFilter,"CFR","","Failed",0,ex.Message,"CommandCenter_PUTnCFR",CCSeqName)
				End If
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Sub SaveExtractFile(ByVal si As SessionInfo,ByVal Dt As DataTable)
		Dim filePath As String = BRApi.Utilities.GetFileShareFolder(si, filesharefoldertypes.ApplicationRoot,Nothing) & "\" & stringhelper.RemoveWhiteSpace(si.AppName) & "\Groups\Everyone\"& scenarioDimName &".csv"
			brapi.ErrorLog.LogMessage(si,$"{filePath}")
			Using sw As StreamWriter = file.CreateText(filepath)
				For Each DC As DataColumn In dt.Columns
					sw.Write(DC.ColumnName & ",")
				Next
					sw.Write(vbnewline)
				For Each DR As DataRow In dt.Rows
					For Each DC As DataColumn In dt.Columns
						sw.Write(DR(DC.ColumnName).ToString & ",")	
					Next 
						sw.Write(vbnewline)
				Next
			End Using
		End Sub
		Public Function GetDashboardParam_DefaultValue(ByVal si As SessionInfo, ByVal paramName As String)
			Try				
				Dim defValue As String = String.Empty
				
				Dim objDashboardParamDisplayInfo As DashboardParamDisplayInfo = BRApi.Dashboards.Parameters.GetParameterDisplayInfo(si, False, Nothing, paramName)
				If objDashboardParamDisplayInfo IsNot Nothing Then
					defValue = objDashboardParamDisplayInfo.DefaultValueAfterSubstitution
				Else
					Brapi.ErrorLog.LogMessage(si, $"Invalid Filter Param: Couldn't find Dashboard Parameter {paramName}")
				End If
				
				Return defValue
			Catch ex As Exception
				Brapi.ErrorLog.LogMessage(si, $"Exception during GetDashboardParam_DefaultValue: {ex.Message}.")
				Return Nothing
			End Try
		End Function
		Public Function GetDashboardParam_MemberFilter(ByVal si As SessionInfo, ByVal paramName As String) As String
			Try		
				Dim memFilter As String = String.Empty
				
				Dim objDashboardParamDisplayInfo As DashboardParamDisplayInfo = BRApi.Dashboards.Parameters.GetParameterDisplayInfo(si, False, Nothing, paramName)
				If objDashboardParamDisplayInfo IsNot Nothing Then
					If objDashboardParamDisplayInfo.ComboBoxItemsForBoundList.Count > 0 Then
						memFilter = objDashboardParamDisplayInfo.MemberFilterAfterSubstitution
					Else
						Brapi.ErrorLog.LogMessage(si, $"Invalid Filter Param (GetDashboardParam_MemberFilter). Dashboard Parameter {paramName} must return at least one member.")
					End If
				Else
					Brapi.ErrorLog.LogMessage(si, $"Invalid Filter Param: Couldn't find Dashboard Parameter {paramName}")
				End If
				
				Return memFilter
			Catch ex As Exception
				Brapi.ErrorLog.LogMessage(si, $"Exception during GetDashboardParam_MemberFilter: {ex.Message}.")
				Return String.Empty
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="FCP_PUT_Secure">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_GATEWAY" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_VARIABLES" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_UTILITY" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="CommandCenter_Utility" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports System.Diagnostics
Imports System.Net
Imports System.Net.Http
Imports System.Reflection
Imports System.Threading.Tasks
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq

Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_GATEWAY
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_VARIABLES
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_UTILITY
Imports OneStream.BusinessRule.Extender.OS_Models
Imports OneStream.BusinessRule.Extender.CommandCenter_Utility


''' Summary
''' DM - Step Parameters
''' Parameter Name: Optional - runConsolidation - Boolean, Set true to run cube consolidation before running FDX query.
''' Parameter Name: Optional - SaveToFile - Boolean, Set true to supress FCP export and export to data files by page to onestream fileshare /Enterprise/Groups/Everyone/[userid]
''' Parameter Name: Optional - WriteDataLogFile - Boolean, Turn this on (True) if you want a file extracted to the FileShare. False to turn off "\Groups\Everyone\"
''' Parameter Name: DashMaintUnitName - String, DMU name to read all the parameters/filters needed for FDX query
''' Parameter Name: Timepivot - Boolean, Set to true to export time pivoted data to FCP
''' DMU - Parameters
''' Parameter Name: Optional - {dashMaintName}_Dataset_Name, If DataSet is available and has value then add to Payload else ignore
''' Parameter Name: {dashMaintName}_MemberFilter_Time, This can have comma seperated multiple time periods and we run multiple fdx queries for each time period.
Namespace OneStream.BusinessRule.Extender.FCP_PUT_Secure
		Public Class MainClass
		
		'Globals
		Private m_asyncGets As List(Of Task(Of OSJsonResponse))
		Private m_FCPGateWay As IntegrationGateway(Of FCPIntegrationParams) = Nothing
		
		'Keeps track of all logging for extender.
		Private m_ExtenderLog As New Text.StringBuilder
		Private m_ExtenderDataLog As New Text.StringBuilder
		Private m_getWatch As Stopwatch
		
		Const m_PUT_PageSize As Integer = 50000
		Const m_Timeout As Short = 10
		
		Private m_PutPageCount As Integer = 0
		Private m_PutErrorOccurred As Boolean
		Private m_FdxTotalRecordCount As Integer = 0
		Private m_PutTotalRecordCount As Integer = 0
		
		'Turn this on (True) if you want a file extracted to the FileShare. False to turn off
			'"\Groups\Everyone\"
		Private m_WriteDataOutToFile As Boolean = False
		Private m_FileID As String
		
		Private objTaskActivityItem As TaskActivityItem 
		
		'DPA-12918,12919-vn512cf-Split WMTUS Forecast PUT into two Put to optimize performance
		Private successfiletrigger As Boolean = True
		
		'DPA 12922 - vn512cg Added to accomodate Dataset_Name Parameter if available and if it has any value - 
		Private datasetName As String = String.Empty 'Get Dataset Value
		Private m_saveToFile As Boolean = False
		Private m_FileTextBuilder As New Text.StringBuilder
		Private dashMaintName As String = String.Empty
		Private	scenarioMemFilter As String = String.Empty
		Private fileTimeStamp As String = DateTime.Now.ToString("yyyyMMddHHmmssfff")

		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			'Dim dashMaintName As String = String.Empty
			'Dim scenarioMemFilter As String = String.Empty
			Dim cubeName As String = String.Empty
			Dim timeMemFilter As String = String.Empty
			Dim newTimeMemFilter As String = String.Empty
			Dim CCIntegrator As New CommandCenter_Utility.MainClass(si,api, args)										
			
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep ', ExtenderFunctionType.Unknown
												
						m_getWatch = Stopwatch.StartNew()
						
						Dim entityMemFilter As String = String.Empty
						Dim consNameMF As String = String.Empty
						Dim consMembers As List(Of NameValuePair)
						Dim timePivotParam As String = String.Empty
						Dim timePivot As Boolean
						Dim viewName As String = String.Empty
						Dim filterParamNameList As New List(Of String)
						Dim filterCondition As String = String.Empty
						Dim putArguments As String = String.Empty
						
'						'DPA-10331-vn512cf-Dynamically run a consolidation as part of PUT business rule based on parameters selected on the Dashboard unit
						Dim runConsolidaiton As Boolean = False
												
						'Get required arguments
						Me.AddLogMessage(si, "PUT Process initiated. Getting Required Args (DashMaintUnitName, WriteDataLogFile, ScenarioType, TimePivot)")
						
						dashMaintName = args.NameValuePairs.XFGetValue("DashMaintUnitName")						
						timePivotParam = args.NameValuePairs.XFGetValue("TimePivot")
						
						'Create new instance of FCPIntegrationGateway
						m_FCPGateWay = New IntegrationGateway(Of FCPIntegrationParams)(si, dashMaintName, OSModuleType.FCP)
						
						If args.NameValuePairs.ContainsKey("WriteDataLogFile") Then
							m_WriteDataOutToFile = args.NameValuePairs("WriteDataLogFile")
							brapi.ErrorLog.LogMessage(si, $"WriteDataLogFile: {m_WriteDataOutToFile}")
						End If
						
'						'DPA-10331-vn512cf-Dynamically run a consolidation as part of PUT business rule based on parameters selected on the Dashboard unit												
						If args.NameValuePairs.ContainsKey("RunConsolidation") Then
							runConsolidaiton = args.NameValuePairs("RunConsolidation")
							brapi.ErrorLog.LogMessage(si, $"{runConsolidaiton}")
						End If
																		
						'DPA-12918,12919-vn512cf-Split WMTUS Forecast PUT into two Put to optimize performance
						If args.NameValuePairs.ContainsKey("SuccessFileTrigger") Then
							successfiletrigger = args.NameValuePairs("SuccessFileTrigger")
							brapi.ErrorLog.LogMessage(si, $"Success File Trigger was set to {SuccessFileTrigger}")
						End If
						
						If args.NameValuePairs.ContainsKey("SaveToFile") Then
							m_saveToFile = CBool(args.NameValuePairs("SaveToFile"))
						End If
						
						Me.AddLogMessage(si, $"Get DashboardMaintUnit {dashMaintName}")
						Dim dashMaintUnit As DashboardMaintUnit = BRApi.Dashboards.MaintUnits.GetMaintUnit(si, False, Nothing, dashMaintName)
						If dashMaintUnit IsNot Nothing Then
							'Set all of the Required PUT Arguments
							
							'	<dashMaintName>_MemberName_ViewName
							'		-Note: This param must return a single Member (View Name) which will be used during the OS FDX Query
							viewName = Me.GetDashboardParam_SingleMember(si, $"{dashMaintName}_MemberName_ViewName")
							
							'	<dashMaintName>_MemberName_ConsName
							'		-Note: This param must return a single Member (Cons Name) which will be used during the OS FDX Query
							'		-Update for Jira Ticket DPA-7660: 
							'			- This param can return a Member Filter which will be used to retrieve a list of ConsName each of which
							'				will be used during the OS FDX Query.
							'			- Initiate trigger after looping through each MemberFilter_Cons items
							consMembers = Me.GetDashboardParam_ComboBoxItemsForBoundList(si, $"{dashMaintName}_MemberName_ConsName")
							If consMembers Is Nothing Then
								Me.AddLogMessage(si, $"Consolidation parameter must return one or more Cons Names")
								Return Nothing
							End If
							
							'Added By Mushtaq
							'Dim ScParam As String = args.SelectionChangedTaskInfo.CustomSubstVars.XFGetValue("Param_Select_Weekly_Forecast")
							'BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, False,  "Param_FCP_Scenario",ScParam)
														
							'	<dashMaintName>_MemberFilter_Scenario
							'		-Note: This param will only be used to capture the Member Filter which will be used during the OS FDX Query
							scenarioMemFilter = Me.GetDashboardParam_MemberFilter(si, $"{dashMaintName}_MemberFilter_Scenario")
							
							'	<dashMaintName>_MemberFilter_Time
							'		-Note: This param will only be used to capture the Member Filter which will be used during the OS FDX Query
							timeMemFilter = Me.GetDashboardParam_MemberFilter(si, $"{dashMaintName}_MemberFilter_Time")
							'======================================
							'Dim timeMemFilterNew As String = String.Empty
							If timeMemFilter.Split(",").ToList().Count > 1 Then
								timeMemFilter = timeMemFilter.Replace("T#","").Replace(".Base","").Replace(" ","")
								timeMemFilter = String.Join(",", timeMemFilter.Split(",").Select(Function(t) $"T#{t}.Base"))
							End If
							newTimeMemFilter=timeMemFilter
							'======================================
							'	<dashMaintName>_MemberFilter_Entity
							'		-Note: This param will only be used to capture the Member Filter which will be used during the OS FDX Query
							entityMemFilter = Me.GetDashboardParam_MemberFilter(si, $"{dashMaintName}_MemberFilter_Entity")
							
							'cubeName is taken from <dashMaintName>_MemberFilter_Entity param's cube setting
							cubeName = Me.GetDashboardParam_CubeName(si, $"{dashMaintName}_MemberFilter_Entity")
							
							'DPA-12922 vn512cg Check if Dashboard has "Dataset_Name" as a default parameter listed
							'If yes then get the default value, ignore if no
							Dim dtParamFilters As DataTable = Me.GetDashboardParamsDT_FiltersOnly(si, dashMaintUnit.UniqueID, $"{dashMaintName}_Dataset_Name")							
							If dtParamFilters IsNot Nothing Then
								For Each dr As DataRow In dtParamFilters.Rows
									Dim pName As String = dr("Name")
									datasetName = Me.GetDashboardParam_DefaultValue(si, pName)
									Exit For
								Next
							End If
														
							'	<dashMaintName>_Filter_<List of filter params. Only 1 per DimType>
							'		-Note: Code will retrieve all _Filter_ params. You can only have one per DimType
							dtParamFilters = Me.GetDashboardParamsDT_FiltersOnly(si, dashMaintUnit.UniqueID, $"{dashMaintName}_Filter_%")
							If dtParamFilters IsNot Nothing Then
								For Each dr As DataRow In dtParamFilters.Rows
									Dim pName As String = dr("Name")
									If Not pName.Contains("FilterCondition") Then
										Dim filterMFItem As String = Me.GetDashboardParam_MemberFilter(si, pName)
										If Not String.IsNullOrWhiteSpace(filterMFItem) Then
											filterParamNameList.Add(pName)
										End If
									End If
								Next
							Else
								Me.AddLogMessage(si, $"Couldn't find any {dashMaintName}_Filter params from Dashboard Maintenance Unit: {dashMaintName}")
							End If
							
							'	<dashMaintName>_FilterCondition
							'		-Note: This param must have a static value with 1 of the following values
							'			1) AND - This value will indicate AND operatin on the filters. 
							'			2) OR  - This value will indicate OR operation on the filters.
							'		-Note: 	The FDX query results will be iterated one time by the filter process. The process will capture all of the
							'				fields that need to be checked (DimTypes defined in Filter params above). Next, depending on the Filter
							'				Condition the records will be PUT to FCP. For AND condition all fields (defined by DimType above) will have
							'				to exist in the record being checked by the filter process. For OR condition, finding only one DimType in the 
							'				record will result in that record being PUT to FCP.
							filterCondition = Me.GetDashboardParam_DefaultValue(si, $"{dashMaintName}_FilterCondition")
						Else
							Me.AddLogMessage(si, $"Could not find Dashboard Maintenance Unit: {dashMaintName}")
							Return Nothing
						End If
						
						'DPA-13222 and DPA-13948-vn50ugm-E&S: Capture PUT API events (Start, end, failed, etc) for a scenario & post them to Command Centre
						CCIntegrator.GeneratePayloadForCC(si,scenarioMemFilter.Replace("S#",""),cubeName,newTimeMemFilter.Replace("T#","").Replace(".Base",""),"Start",dashMaintName,"Success","0","","CommandCenter_PUTnCFR","PUT")
						'DPA-13222 and DPA-13948-vn50ugm-E&S: Capture PUT API events (Start, end, failed, etc) for a scenario & post them to Command Centre
						
						
						putArguments += vbTab & "{DashMaintUnitName=" & dashMaintName & "}" & vbNewLine
						putArguments += vbTab & "{WriteDataLogFile=" & m_WriteDataOutToFile & "}" & vbNewLine
						putArguments += vbTab & "{svcConsumerId=" & m_FCPGateWay.Params.ConsumerId  & "}" & vbNewLine
						putArguments += vbTab & "{svcName=" & m_FCPGateWay.Params.SvcName & "}" & vbNewLine
						putArguments += vbTab & "{svcEnv=" & m_FCPGateWay.Params.SvcEnv & "}" & vbNewLine
						putArguments += vbTab & "{CubeName=" & cubeName & "}" & vbNewLine
						putArguments += vbTab & "{EntityMemFilter=" & entityMemFilter & "}" & vbNewLine
						
						Dim consArgs As String = String.Empty
						Dim consArgsFileSafe As String = String.Empty
						For Each nvp As NameValuePair In consMembers
							consArgs += nvp.Value
							consArgs += ","
							
							consArgsFileSafe += nvp.Value
							consArgsFileSafe += "_"
						Next
						'remove the last comma
						consArgs = consArgs.Remove(consArgs.Length - 1, 1)
						consArgsFileSafe = consArgsFileSafe.Remove(consArgsFileSafe.Length - 1, 1)
							
						putArguments += vbTab & "{ConsName=" & consArgs & "}" & vbNewLine
						putArguments += vbTab & "{ScenarioMemFilter=" & scenarioMemFilter & "}" & vbNewLine
						putArguments += vbTab & "{TimeMemFilter=" & timeMemFilter & "}" & vbNewLine
						putArguments += vbTab & "{TimePivot=" & timePivotParam & "}" & vbNewLine
						putArguments += vbTab & "{ViewName=" & viewName & "}" & vbNewLine
						putArguments += vbTab & "{EndPoint=" & m_FCPGateWay.Params.EndPoint(OSActionType.Put.ToString)(0) & "}" & vbNewLine
						
						putArguments += vbTab & "{Filters="						
						For Each filterItem As String In filterParamNameList
							If Not String.IsNullOrWhiteSpace(filterItem) Then
								putArguments += filterItem & ","
							End If
						Next
						If filterParamNameList.Count > 0 Then
							putArguments = putArguments.Remove(putArguments.Length - 1, 1)
						End If
						putArguments += "}"
						
						Me.AddLogMessage(si, $"PUT Started with the following arguments: {vbNewLine}{putArguments}")
						
						'-----------------------------------------------------------------------------------------
						'Perform validations on the parameters passed in from DM Step
						'-----------------------------------------------------------------------------------------						
						If String.IsNullOrWhiteSpace(filterCondition) Then
							Me.AddLogMessage(si, $"Invalid Parameter: {dashMaintName}_FilterCondition")
							Return Nothing
						Else
							If filterCondition.XFContainsIgnoreCase("AND") Or filterCondition.XFContainsIgnoreCase("OR") Then
								'filterCondition is set as expected
							Else
								Me.AddLogMessage(si, $"Invalid Parameter: {dashMaintName}_FilterCondition must be set to AND or OR")
								Return Nothing
							End If
						End If
						
						'DPA 12922 vn512cg Check if dataset name Exist						
						If Not datasetName = String.Empty Then 
							If String.IsNullOrWhiteSpace(datasetName) Then
								Me.AddLogMessage(si, $"Invalid Parameter: {dashMaintName}_Dataset_Name")
								Return Nothing
							End If
						End If
						
						'Validate TimePivot as boolean
						If Not String.IsNullOrWhiteSpace(timePivotParam) Then
							Boolean.TryParse(timePivotParam, timePivot)
						Else
							'Default to false
							timePivot = False
						End If
						
						Dim objCubeInfo As CubeInfo = BRApi.Finance.Cubes.GetCubeInfo(si, cubeName)
						If objCubeInfo Is Nothing Then
							'raise a user exception
							Me.AddLogMessage(si, "Couldn't get cube info")
							Return Nothing
						Else
							'Used for data log file name
							m_FileID = cubeName & "_" & consArgsFileSafe
						End If
						
						Dim mbrInfo As OneStream.Shared.Wcf.MemberInfo
						
						For Each consMember As NameValuePair In consMembers
							mbrInfo = BRApi.Finance.Metadata.GetMember(si, DimTypeID.Consolidation, consMember.Value)
							If mbrInfo Is Nothing Then							
								Me.AddLogMessage(si, $"Couldn't get ConsName ({consMember}) member info")
								Return Nothing
							End If
						Next
						
						mbrInfo = BRApi.Finance.Metadata.GetMember(si, DimTypeID.View, viewName)
						If mbrInfo Is Nothing Then
							Me.AddLogMessage(si, "Couldn't get ViewName member info")
							Return Nothing
						End If
						
						Dim fdxFilterList As New List(Of FdxFilterInfo)
						Dim fdxFilterItem As FdxFilterInfo

						If filterParamNameList.Count > 0 Then
							'---------------------------------------------------
							'Initialize all of the Filter Info Objects
							'	-Get Param Member Filter Result
							'	-Create a list of all the dims that needs to be filtered so 
							'	 we can Loop through those columns in the Fdx DataTable for each 
							'	 row. These values will be searched in the List of FdxFilterInfo Collection
							For Each filterParamName In filterParamNameList
								fdxFilterItem = Me.GetFdxFilterInfo(si, filterParamName.Trim)
								If fdxFilterItem IsNot Nothing Then
									fdxFilterList.Add(fdxFilterItem)
								End If
							Next
						End If
							'-----------------------------------------------------------------------------------------
							'The below code is to handle multiple time periods
					Dim currTimeMemIndex As Integer = 0							
					Dim timeMemFilterCount As Integer = timeMemFilter.Split(",").ToList().Count
					
					For Each timeparam As String In timeMemFilter.Split(",").ToList()
						currTimeMemIndex += 1
						successfiletrigger = (currTimeMemIndex=timeMemFilterCount)
						timeMemFilter =timeparam 
							'The below code is to handle multiple time periods
							'-------------------------------------------------
						'DPA-10331-vn512cf-Dynamically run a consolidation as part of PUT business rule based on parameters selected on the Dashboard unit
						If runConsolidaiton Then							
								Dim customSubstrVars As New Dictionary(Of String, String)
								customSubstrVars.Add("CubeName", cubeName)
								customSubstrVars.Add("EntityFilter", entityMemFilter)							
								customSubstrVars.Add("ConsFilter", "C#" & consArgsFileSafe)
								customSubstrVars.Add("ScenarioFilter", scenarioMemFilter)
								'customSubstrVars.Add("TimeFilter", timeMemFilter)
								
								Dim boolTimeMemFilter As Boolean = timeMemFilter.Contains(".Base")
								If boolTimeMemFilter = True Then
									'If Time Member Filter value contains 
									'1. T#2022.Base --> T#2022M12
									'2. T#|!prm_DB_FCP_PUT_WMTUS_ES_INPUT_Year!|.Base --> T#XXXXM12
									Dim strarr() As String
									strarr = timeMemFilter.Split(".")
									customSubstrVars.Add("TimeFilter", strarr(0).Substring(0, 6) & "M12")
									brapi.ErrorLog.LogMessage(si, "Run Consolidation Time Filter(.Base): " & strarr(0).Substring(0, 6) & "M12")
								Else	
									'If Time Member Filter value contains 
									'1. T#2022--> T#2022M12
									customSubstrVars.Add("TimeFilter", timeMemFilter.Substring(0, 6) & "M12")
									brapi.ErrorLog.LogMessage(si, "Run Consolidation Time Filter(T#2020): " & timeMemFilter.Substring(0, 6) & "M12")
								End If					
																
								'objTaskActivityItem =BRApi.Utilities.ExecuteDataMgmtSequence(si,"RunConsolidationSeq", customSubstrVars)
								objTaskActivityItem =BRApi.Utilities.StartDataMgmtSequence(si,"RunConsolidationSeq", customSubstrVars)
						End If						
						'-------------------------------------------------						
						
						Dim fdxInfoItem As New FdxDataUnitInfo	
						
						fdxInfoItem.cubeName = cubeName
						fdxInfoItem.entityMemFilter = entityMemFilter
						fdxInfoItem.consNameList = consMembers
						fdxInfoItem.scenarioMemFilter = scenarioMemFilter
						'fdxInfoItem.scenarioTypeId = ScenarioTypeId.Forecast
						fdxInfoItem.timeMemFilter = timeMemFilter
						fdxInfoItem.viewName = viewName
						fdxInfoItem.suppressNoData = True
						fdxInfoItem.useGenericTimeColNames = False
						fdxInfoItem.filter = Nothing
						fdxInfoItem.parallelQueryCount = 10
						fdxInfoItem.logStatistics = False
						fdxInfoItem.timePivot = timePivot
						
						m_asyncGets = New List(Of Task(Of OSJsonResponse))					
						
						If timePivot Then
							Me.RunPivotPUTtoFCP(si, dashMaintName, fdxInfoItem, fdxFilterList, filterCondition)
						Else
							Me.RunNonPivotPUTtoFCP(si, fdxInfoItem, fdxFilterList, filterCondition)
						End If		
					Next
						'DPA-13222 and DPA-13948-vn50ugm-E&S: Capture PUT API events (Start, end, failed, etc) for a scenario & post them to Command Centre
						 CCIntegrator.GeneratePayloadForCC(si,scenarioMemFilter.Replace("S#",""),cubeName,newTimeMemFilter.Replace("T#","").Replace(".Base",""),"End",dashMaintName,"Success",m_PutTotalRecordCount,"","CommandCenter_PUTnCFR","PUT")
						'DPA-13222 and DPA-13948-vn50ugm-E&S: Capture PUT API events (Start, end, failed, etc) for a scenario & post them to Command Centre	
						
				End Select
			
				Return Nothing
			Catch ex As Exception
					'DPA-13222 and DPA-13948-vn50ugm-E&S: Capture PUT API events (Start, end, failed, etc) for a scenario & post them to Command Centre
					 CCIntegrator.GeneratePayloadForCC(si,scenarioMemFilter.Replace("S#",""),cubeName,newTimeMemFilter.Replace("T#","").Replace(".Base",""),"End",dashMaintName,"Failed",m_PutTotalRecordCount,ex.Message,"CommandCenter_PUTnCFR","PUT")
					'DPA-13222 and DPA-13948-vn50ugm-E&S: Capture PUT API events (Start, end, failed, etc) for a scenario & post them to Command Centre
					
				Me.AddLogMessage(si, $"Main Exception: {ex.Message}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			Finally
				Try
					brapi.ErrorLog.LogMessage(si, $"{vbNewLine}{vbTab}{vbTab}{vbTab}{vbTab}****************** FCP PUT Log ******************{vbNewLine}{m_ExtenderLog.ToString}")
					
					'vn512cf - RK - Below line implemented as per STOREAPPS
					CommonUtility.SendMail(si, "OneStream to FCP: PUT Job Completed - Status",  m_ExtenderLog.ToString, dashMaintName, m_FCPGateway.Params)
					
					If m_WriteDataOutToFile Then
						Dim everyonePath As String = BRApi.FileSystem.GetFileShareFolder(si, FileShareFolderTypes.ApplicationRoot, Nothing) & "\" & si.AppName.Replace(" ", String.Empty) & "\Groups\Everyone\"
						
						brapi.ErrorLog.LogMessage(si, "Put Data File Path: " & everyonePath & "PUT_" & m_FileID & ".csv")
						
						Using fdxDataFile As System.IO.StreamWriter = New StreamWriter(everyonePath & "PUT_" & m_FileID & ".csv", False)
							fdxDataFile.Write(m_ExtenderDataLog.ToString)
							fdxDataFile.Close									
						End Using
					End If
				Catch exFinally As Exception
					Me.AddLogMessage(si, $"Finally Exception: {exFinally.Message}")
				End Try				
			End Try
		End Function		
		Public Sub RunNonPivotPUTtoFCP(ByVal si As SessionInfo, ByVal fdxInfoItem As FdxDataUnitInfo, ByVal fdxFilterList As List(Of FdxFilterInfo), ByVal filterCondition As String)
			Try
				Dim fdxDt As DataTable
				
				For Each consMember As NameValuePair In fdxInfoItem.consNameList
					fdxDt = Me.GetCubeDataFromOsFdxQuery(si, fdxInfoItem, consMember.Value)
					Dim putDt As DataTable = Nothing
					If fdxDt IsNot Nothing Then
						If fdxFilterList.Count > 0 Then
							'filter the data
							putDt = Me.FilterFdxData(si, fdxDt, fdxFilterList, filterCondition)
						Else
							putDt = fdxDt
						End If
						
					End If
					
					If putDt IsNot Nothing Then
						If putDt.Rows.Count > 0 Then
							Me.InitiateFcpPut(si, putDt)
							'Added from StoreOps - Start: Send Sucess Trigger for Non Pivot
							'-------------------------------------------------------------
							' Drop success trigger for Non Pivot - b0l03cl - added for SS 
							'Only Trigger when all data was put without error
							If successfiletrigger = True Then
								If m_PutPageCount > 0 Then
									Me.AddLogMessage(si, $"{m_PutPageCount} total number of pages sent to FCP.")
								
									'Build JSON for loadDataTrigger
									Dim scenario As String = fdxInfoitem.scenarioMemFilter.Replace("S#", String.Empty)
									Dim jsonRaw As String = $"{chr(34)}CUBE{chr(34)}:{chr(34)}{fdxInfoitem.cubeName}{chr(34)},{chr(34)}SCENARIO{chr(34)}:{chr(34)}{scenario}{chr(34)}"
									jsonRaw = "{" & jsonRaw & "}"
									
'									BRApi.ErrorLog.LogMessage(si, $"JSON PayLoad 1: {jsonRaw}")
									m_asyncGets.Add(Me.TryPutToFcpAsync(si, jsonRaw, successfiletrigger))
									
									Dim result As Task
									result = Task.WhenAll(m_asyncGets.ToArray)
									
									Try
										result.Wait()
									Catch e As Exception
										Throw ErrorHandler.LogWrite(si, New XFException(si, e))
									End Try
									
									'Get response
									Dim content As String				
									For Each tResults As Task(Of OSJsonResponse) In m_asyncGets
										If tResults.Result.Success = False Then
											content = tResults.Result.JsonData
											Me.AddLogMessage(si, $"FCP PUT loadDataTrigger Response Error. {content}")
										Else
											content = tResults.Result.JsonData
											Me.AddLogMessage(si, $"FCP PUT loadDataTrigger Success Response. {content}")
										End If
									Next
									'Added from StoreOps - End
								Else
									Me.AddLogMessage(si, $"Nothing was sent to FCP.")
								End If
							End If
							'-------------------------------------------------------------
						Else
							Me.AddLogMessage(si, "Zero Records to PUT")
						End If
					Else
						Me.AddLogMessage(si, "Zero Records to PUT. FDX DT is nothing")
					End If
				Next
			Catch ex As Exception
				Me.AddLogMessage(si, $"RunNonPivotPUTtoFCP Exception: {ex.Message}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		Public Sub RunPivotPUTtoFCP(ByVal si As SessionInfo, ByVal dashMaintName As String, ByVal fdxInfoItem As FdxDataUnitInfo, ByVal fdxFilterList As List(Of FdxFilterInfo), ByVal filterCondition As String)
			Try
				'-----------------------------------------------------------------------------------------
				'DPA-5966
				'	-This should only be applied to WMTUS
				'	-Add Year column
				'	-Rename And make sure time Is pivoted And always has 12 periods
				'	-Entity Member filter must be changed To Parent1, Parent2 instead Of actual member filter. Parent1, Parent2 will be converted To E#Parent1.Children, E#Parent2.Children. From there we will Loop And pass data To FCP For Each Child.Base In the Entity selected In the Dashboard Parameter.
				'	-Execute New FCP Endpoint (“done sending data”) When process completes.
				'-----------------------------------------------------------------------------------------
				
				'Must be 1 year only
				'	-If any commas exist then fail
				'	-Must be Year.base
				If fdxInfoItem.timeMemFilter.Contains(",") Then
					Me.AddLogMessage(si, $"Time Filter Contains multiple entries. Must be YYYY.Base.  {fdxInfoItem.timeMemFilter}")
					Exit Sub
				End If

				For Each consMember As NameValuePair In fdxInfoItem.consNameList
					If Not m_PutErrorOccurred Then
						Me.GetAndPutPut_PartitionedByEntity(si, dashMaintName, fdxInfoItem, fdxFilterList, filterCondition, consMember.Value)						
					Else
						Exit For
					End If
				Next
				
				m_asyncGets.Clear
				
				'Only Trigger when all data was put without error
				If Not m_PutErrorOccurred And m_PutPageCount > 0 Then
					Me.AddLogMessage(si, $"{m_PutPageCount} total number of pages sent to FCP. {m_PutTotalRecordCount} total number of records sent to FCP.")
					
					'DPA-12918,12919-vn512cf-Split WMTUS Forecast PUT into two Put to optimize performance
					'For the Optimising the performance Of the Job, bifurcated the exsisitng Job into two steps And controlling it based On the Switch parameter passed.
					'If Success trigger Is Set To False it will Not create the success files. As there Is second PUT In process Of creating the files.
					'Exit if success trigger in DM job is set to false
					
					'//For Sucess File Trigger - RK
					If successfiletrigger = True Then						
						'Build JSON for loadDataTrigger
						Dim scenario As String = fdxInfoitem.scenarioMemFilter.Replace("S#", String.Empty)
						Dim jsonRaw As String = $"{chr(34)}CUBE{chr(34)}:{chr(34)}{fdxInfoitem.cubeName}{chr(34)},{chr(34)}SCENARIO{chr(34)}:{chr(34)}{scenario}{chr(34)}"
						jsonRaw = "{" & jsonRaw & "}"
						
						'BRApi.ErrorLog.LogMessage(si, $"JSON PayLoad 2: {jsonRaw}")
						m_asyncGets.Add(Me.TryPutToFcpAsync(si, jsonRaw, successfiletrigger))
						
						
						Dim result As Task
						result = Task.WhenAll(m_asyncGets.ToArray)
						
						Try
							result.Wait()
						Catch e As Exception
							Throw ErrorHandler.LogWrite(si, New XFException(si, e))
						End Try
						
						'Get response
						Dim content As String				
						For Each tResults As Task(Of OSJsonResponse) In m_asyncGets
							If tResults.Result.Success = False Then
								content = tResults.Result.JsonData
								Me.AddLogMessage(si, $"FCP PUT loadDataTrigger Response Error. {content}")
							Else
								content = tResults.Result.JsonData
								Me.AddLogMessage(si, $"FCP PUT loadDataTrigger Success Response. {content}")
							End If
						Next
					End If
					'//For Sucess File Trigger - RK
					'DPA-12918,12919-vn512cf-Split WMTUS Forecast PUT into two Put to optimize performance
				Else
					If m_PutErrorOccurred Then
						Me.AddLogMessage(si, $"There was an error in the PUT. FCP team needs to clear and request a re-run.")
						Throw New XFUserMsgException(si, New Exception("There was an error in the PUT. FCP team needs to clear and request a re-run."))
					Else
						Me.AddLogMessage(si,"No data was sent to FCP")
					End If
				End If
				
			Catch ex As Exception
				Me.AddLogMessage(si, $"RunPivotPUTtoFCP Exception: {ex.Message}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		Public Sub GetAndPutPut_PartitionedByEntity(ByVal si As SessionInfo, ByVal dashMaintName As String, ByVal fdxInfoItem As FdxDataUnitInfo, ByVal fdxFilterList As List(Of FdxFilterInfo), ByVal filterCondition As String, ByVal consName As String)
			Try
				Dim lstChildren As List(Of NameValuePair) = Me.GetDashboardParam_ComboBoxItemsForBoundList(si, $"{dashMaintName}_MemberFilter_Entity")
				If lstChildren IsNot Nothing Then
					
					For Each nvp As NameValuePair In lstChildren
						Dim fdxDt As DataTable = Nothing
						Dim putDt As DataTable = Nothing
						
						fdxInfoItem.entityMemFilter = $"E#{nvp.Value}.Base"
						
						fdxDt = Me.GetCubeDataFromOsFdxQuery(si, fdxInfoItem, consName)
						If fdxDt IsNot Nothing Then
							If fdxFilterList.Count > 0 Then
								'filter the data
								putDt = Me.FilterFdxData(si, fdxDt, fdxFilterList, filterCondition)
							Else
								putDt = fdxDt
							End If
						End If
						
						If putDt IsNot Nothing Then
							If putDt.Rows.Count > 0 Then
								
								Dim yearOnly As String = fdxInfoItem.timeMemFilter.Replace("T#", String.Empty).ToUpper
								yearOnly = yearOnly.Replace(".BASE", String.Empty)
'								yearOnly = yearOnly.Replace(".BASE", String.Empty).Replace("H1", String.Empty).Replace("H2", String.Empty).Replace("Q1", "").Replace("Q2", "").Replace("Q3", "").Replace("Q4", "")
								For Each col As DataColumn In putDt.Columns
									If col.ColumnName.StartsWith("T") And (Not col.ColumnName.XFEqualsIgnoreCase("TIME")) Then
'										'Debug
'										Me.AddLogMessage(si, col.ColumnName)
										'putDt.Columns(col.ColumnName).ColumnName = col.ColumnName.Substring(5)
										putDt.Columns(col.ColumnName).ColumnName =  If (col.ColumnName.Length>5, col.ColumnName.Substring(5),col.ColumnName.Substring(1))
									End If
								Next
								
								putDt.Columns.Add("Year", GetType(String), yearOnly)
								
								Me.InitiateFcpPut(si, putDt)
							End If
						End If
						
						If m_PutErrorOccurred Then
							Exit For
						End If
					Next
				Else
					Me.AddLogMessage(si, $"{dashMaintName}_MemberFilter_Entity did not return any Entity Children")
				End If
				
			Catch ex As Exception
				m_PutErrorOccurred = True
				Me.AddLogMessage(si, $"GetAndPutPut_PartitionedByEntity Exception: {ex.Message}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		Public Sub InitiateFcpPut(ByVal si As SessionInfo, ByVal putDt As DataTable)
			Try
				
				'add the null columns
				putDt.Columns.Add(New DataColumn("HasData", GetType(String)))
				putDt.Columns.Add(New DataColumn("Annotation", GetType(String)))
				putDt.Columns.Add(New DataColumn("Assumptions", GetType(String)))
				putDt.Columns.Add(New DataColumn("AuditComment", GetType(String)))
				putDt.Columns.Add(New DataColumn("Footnote", GetType(String)))
				putDt.Columns.Add(New DataColumn("VarianceExplanation", GetType(String)))
				
				Me.LoopOsDtPutByPage(si, putDt)
				
				If m_WriteDataOutToFile Then
					Dim headerLine As New Text.StringBuilder
					For Each dc As DataColumn In putDt.Columns
						headerLine.Append(dc.ColumnName)
						headerLine.Append(",")
					Next
					'Remove last comma
					headerLine.Remove(headerLine.Length - 1, 1)
					
					Me.AddLogDataLine(si, headerLine.ToString)
					
					Dim rowInfo As New Text.StringBuilder
					For Each dr As DataRow In putDt.Rows										
						For Each dc As DataColumn In putDt.Columns
							rowInfo.Append(dr(dc.ColumnName) & ",")
						Next
						rowInfo.Remove(rowInfo.Length - 1, 1)
						
						Me.AddLogDataLine(si, rowInfo.ToString)
						rowInfo.Clear
					Next
				End If
			Catch ex As Exception
				m_PutErrorOccurred = True
				Me.AddLogMessage(si, $"InitiateFcpPut Exception: {ex.Message}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		Public Function GetCubeDataFromOsFdxQuery(ByVal si As SessionInfo, ByVal fdxInfoItem As FdxDataUnitInfo, ByVal consName As String)
			Try
				If Not fdxInfoItem Is Nothing Then
					Dim dt As DataTable = Nothing
					
					Try
						
						If fdxInfoItem.timePivot Then
							dt = BRApi.Import.Data.FdxExecuteDataUnitTimePivot(si, 
								fdxInfoItem.cubeName, 
								fdxInfoItem.entityMemFilter, 
								consName, 
								fdxInfoItem.scenarioTypeId, 
								fdxInfoItem.scenarioMemFilter, 
								fdxInfoItem.timeMemFilter, 
								fdxInfoItem.viewName, 
								fdxInfoItem.suppressNoData, 
								fdxInfoItem.useGenericTimeColNames,
								String.Empty, 
								fdxInfoItem.parallelQueryCount, 
								fdxInfoItem.logStatistics)
						Else							
							dt = BRApi.Import.Data.FdxExecuteDataUnit(si, 
								fdxInfoItem.cubeName, 
								fdxInfoItem.entityMemFilter, 
								consName, 
								fdxInfoItem.scenarioTypeId, 
								fdxInfoItem.scenarioMemFilter, 
								fdxInfoItem.timeMemFilter, 
								fdxInfoItem.viewName, 
								fdxInfoItem.suppressNoData,
								String.Empty, 
								fdxInfoItem.parallelQueryCount, 
								fdxInfoItem.logStatistics)
						End If
						
						If dt IsNot Nothing Then
							m_FdxTotalRecordCount += dt.Rows.Count
							Me.AddLogMessage(si, $"OS FDX Query (details below) generated {dt.Rows.Count} records.{vbNewLine}{vbTab}Cube Name: {fdxInfoItem.cubeName}{vbNewLine}{vbTab}Entity Member Filter: {fdxInfoItem.entityMemFilter}{vbNewLine}{vbTab}Cons Name: {consName}{vbNewLine}{vbTab}fdxInfoItem.scenarioTypeId: {fdxInfoItem.scenarioTypeId}{vbNewLine}{vbTab}fdxInfoItem.scenarioMemFilter: {fdxInfoItem.scenarioMemFilter}{vbNewLine}{vbTab}fdxInfoItem.timeMemFilter: {fdxInfoItem.timeMemFilter}{vbNewLine}{vbTab}fdxInfoItem.viewName: {fdxInfoItem.viewName}{vbNewLine}{vbTab}fdxInfoItem.filter: String.Empty{vbNewLine}{vbTab}TimePivot: {fdxInfoItem.timePivot}")
						Else
							Me.AddLogMessage(si, $"OS FDX Query (details below) generated 0 records.{vbNewLine}{vbTab}Cube Name: {fdxInfoItem.cubeName}{vbNewLine}{vbTab}Entity Member Filter: {fdxInfoItem.entityMemFilter}{vbNewLine}{vbTab}Cons Name: {consName}{vbNewLine}{vbTab}fdxInfoItem.scenarioTypeId: {fdxInfoItem.scenarioTypeId}{vbNewLine}{vbTab}fdxInfoItem.scenarioMemFilter: {fdxInfoItem.scenarioMemFilter}{vbNewLine}{vbTab}fdxInfoItem.timeMemFilter: {fdxInfoItem.timeMemFilter}{vbNewLine}{vbTab}fdxInfoItem.viewName: {fdxInfoItem.viewName}{vbNewLine}{vbTab}fdxInfoItem.filter: String.Empty{vbNewLine}{vbTab}TimePivot: {fdxInfoItem.timePivot}")
						End If
						
					Catch exFdx As Exception
						Me.AddLogMessage(si, $"FDX failed. {exFdx}")
						Return Nothing
					End Try
					
					Return dt
				End If
				
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		Public Function FilterFdxData(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal fdxFilterList As List(Of FdxFilterInfo), ByVal filterCondition As String) As DataTable
			Try
				'---------------------------------------------------
				'Loop through all the dimTypes (columns) in the row 
				'and search the filter dictionaries (PUT or SKIP record)
				'---------------------------------------------------
				If dt IsNot Nothing Then
					
					Dim filteredDt As DataTable = dt.Clone
					
					 'make a clone of the datatable (structure only)
					Dim foundCount As Integer
					
'					Loop through the dt once And search For filter criteria
					For Each dr As DataRow In dt.Rows
						'Loop through the columns in the dt to get all of the values that are in the filter list
						For Each fdxFilterItem As FdxFilterInfo In fdxFilterList
							If fdxFilterItem.FindMember(dr(fdxFilterItem.dimTypeName)) = True Then
								foundCount += 1
								If filterCondition.XFContainsIgnoreCase("OR") Then
									Exit For
								End If
							End If
						Next
						
						If filterCondition.XFContainsIgnoreCase("OR") Then
							If foundCount > 0 Then
								filteredDt.ImportRow(dr)
							End If
						Else
							If foundCount = fdxFilterList.Count Then
								filteredDt.ImportRow(dr)
							End If
						End If
						
						foundCount = 0
					Next					
				
					If filteredDt IsNot Nothing Then
						Me.AddLogMessage(si, $"Record count after filters applied: {filteredDt.Rows.Count}")
					End If
					
					Return filteredDt
				Else
					Return dt
				End If
			Catch ex As Exception
				Return dt
			End Try		
		End Function
		Public Sub LoopOsDtPutByPage(ByVal si As SessionInfo, ByVal dt As DataTable) 
		    Try
				
		        Dim numOfPages As Integer = Math.Ceiling(dt.Rows.Count / m_PUT_PageSize)
				Dim pageNum As Integer = 1
				
				Me.AddLogMessage(si, $"Preparing to send data to FCP. Row Count: {dt.Rows.Count}. Number of pages: {numOfPages}")
				
				Do While pageNum <= numOfPages
					For i As Integer = 1 To 5
						If pageNum <= numOfPages
							'put m_PUT_PageSize records
							
							Dim dtPage As DataTable = dt.Rows.Cast(Of System.Data.DataRow).Skip((pageNum - 1) * m_PUT_PageSize).Take(m_PUT_PageSize).CopyToDataTable()
		                    
							If dtPage IsNot Nothing Then
								
								m_PutPageCount += 1
								m_PutTotalRecordCount += dtPage.Rows.Count
								
								If m_SaveToFile Then
									Me.AddDataToFile(si, dtPage, pageNum)
								Else
									Dim jObj As JObject = New Jobject
									jObj("status") = Nothing
									jObj("rowCount") = dt.Rows.Count

									'DPA-12922 vn512cg If DataSet is available and has value then add to Payload else ignore
									If Not String.IsNullOrWhiteSpace(datasetName) Then
										jObj("dataset_name") = datasetName 'datasetName
									End If								
									
									jObj("page") = m_PutPageCount
									jObj("data") = JArray.FromObject(dtPage, JsonSerializer.CreateDefault)
															
				                    m_asyncGets.Add(Me.TryPutToFcpAsync(si,jObj.ToString))
								
								
									'BRApi.ErrorLog.LogMessage(si, $"JSON PAYLOAD1111: {jObj.ToString}")	
									'Me.AddLogMessage(si, $"JSON PAYLOAD1111: {jObj.ToString}")
									'vn512cf - RK implemented as per STOREOPS
									BRApi.ErrorLog.LogMessage(si, $"Page {pageNum} of {numOfPages} and RowCount: {dtPage.Rows.Count}")						
								End If
							End If
							
							'increment page
							pageNum += 1
						Else
							'increment page
							pageNum += 1
						End If
		        	Next

					Dim result As Task
					result = Task.WhenAll(m_asyncGets.ToArray)
					
					Try
						result.Wait()
					Catch e As Exception
						Throw ErrorHandler.LogWrite(si, New XFException(si, e))
					End Try
					
				Loop
				
				Dim content As String
				Dim successCount As Integer = 0
				
				For Each tResults As Task(Of OSJsonResponse) In m_asyncGets
					If tResults.Result.Success = False Then
						content = tResults.Result.JsonData
						Me.AddLogMessage(si, $"FCP PUT Response Error. {content}")
						m_PutErrorOccurred = True
						Exit For
					Else
						successCount += 1
					End If
				Next
				
				m_asyncGets.Clear
				
				If successCount <> numOfPages Then
					Me.AddLogMessage(si, $"Completed PUT with errors in {m_getWatch.Elapsed.TotalMinutes} minutes")
				Else
					Me.AddLogMessage(si, $"Completed PUT (all {numOfPages} pages) in {m_getWatch.Elapsed.TotalMinutes} minutes")
				End If
				
			Catch ex As Exception
				m_PutErrorOccurred = True
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		Public Async Function TryPutToFcpAsync(ByVal si As SessionInfo, ByVal json As String, Optional ByVal isSuccessTrigger As Boolean = False) As Task(Of OSJsonResponse)
			Try
				Dim rTask As OSJsonResponse = Nothing
				Dim mainEx As Exception = Nothing
				
				'BRApi.ErrorLog.LogMessage(si, $"JSON PAY LOAD3 : {json}")
				For i As Integer = 1 To 3
					Try
						rTask = Await Me.PutDataToFcpAsync(si, json, isSuccessTrigger)
						If rTask IsNot Nothing Then							
							Return rTask
						End If
						
					Catch exWhen As Exception
						mainEx = exWhen
					End Try
				
					If i = 1 Then
						Me.AddLogMessage(si, $"Trying again in 5 seconds")
						Await Task.Delay(TimeSpan.FromSeconds(5))
					ElseIf i = 2 Then
						Me.AddLogMessage(si, $"Trying again in 8 seconds")
						Await Task.Delay(TimeSpan.FromSeconds(8))
					Else
						Throw(ErrorHandler.LogWrite(si, New XFException(si, mainEx)))
					End If
				Next
				
				Return rTask
				
			Catch exMain As Exception
				m_PutErrorOccurred = True
				Me.AddLogMessage(si, $"TryPutToFcpAsync Exception: {exMain.Message}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, exMain))
			End Try	
		End Function
		Public Async Function PutDataToFcpAsync(ByVal si As SessionInfo, ByVal json As String, ByVal isSuccessTrigger As Boolean) As Task(Of OSJsonResponse)
					
			Try				
				Return Await m_FCPGateWay.PutData(si, json, isSuccessTrigger)
				
			Catch ex As Exception
				m_PutErrorOccurred = True
				Me.AddLogMessage(si, $"PutDataToFcpAsync Exception: {ex.Message}")		
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		Public Function GetFdxFilterInfo(ByVal si As SessionInfo, ByVal filterParamName As String) As FdxFilterInfo
			Try				
				Dim fdxFilterInfoItem As FdxFilterInfo = Nothing
				
				Dim objDashboardParamDisplayInfo As DashboardParamDisplayInfo = BRApi.Dashboards.Parameters.GetParameterDisplayInfo(si, False, Nothing, filterParamName)
				If objDashboardParamDisplayInfo IsNot Nothing Then
					If objDashboardParamDisplayInfo.ComboBoxItemsForBoundList.Count > 0 Then
						fdxFilterInfoItem = New FdxFilterInfo
						fdxFilterInfoItem.dimTypeName = objDashboardParamDisplayInfo.Parameter.DimTypeName
						Dim index As Integer = 1
						For Each nvp As NameValuePair In objDashboardParamDisplayInfo.ComboBoxItemsForBoundList
							fdxFilterInfoItem.AddMember(index, nvp.Value)
							index += 1
						Next
					Else
						Me.AddLogMessage(si, $"Invalid Filter Param: GetMemberFilterClause returned nothing for Dashboard Parameter {filterParamName}")
					End If
				Else
					Me.AddLogMessage(si, $"Invalid Filter Param: Couldn't find Dashboard Parameter {filterParamName}")
				End If
				
				Return fdxFilterInfoItem
			Catch ex As Exception
				m_PutErrorOccurred = True
				Me.AddLogMessage(si, $"Exception during GetMembersUsingFilter: {ex.Message}. Filter skipped: {filterParamName}")
				Return Nothing
			End Try
		End Function
		Public Function GetDashboardParamsDT_FiltersOnly(ByVal si As SessionInfo, ByVal uniqueID As Guid, ByVal filterBy As String)
			Try
				Dim dt As DataTable = Nothing
				'from tabel with (nolock)
				'Retrieve all parameters belonging to dashMaintUnit
				Using objDbConnInfoApp As DbConnInfoApp = BRApi.Database.CreateApplicationDbConnInfo(si)
					'Get All Params for the dashMaintName
					Dim sqlStatement As String = $"Select * From DashboardParameter with (nolock) Where MaintUnitID = '{uniqueID}' AND Name Like '{filterBy}'"
					'Me.AddLogMessage(si, sqlStatement)
					dt = BRApi.Database.ExecuteSqlUsingReader(objDbConnInfoApp, sqlStatement, False)
				End Using
				
				Return dt
			Catch ex As Exception
				Me.AddLogMessage(si, $"Exception in GetDashboardParamsDT_FiltersOnly: {ex.Message}")
				Return Nothing
			End Try		
		End Function
		Public Function GetDashboardParam_DefaultValue(ByVal si As SessionInfo, ByVal paramName As String)
			Try				
				Dim defValue As String = String.Empty
				
				Dim objDashboardParamDisplayInfo As DashboardParamDisplayInfo = BRApi.Dashboards.Parameters.GetParameterDisplayInfo(si, False, Nothing, paramName)
				If objDashboardParamDisplayInfo IsNot Nothing Then
					defValue = objDashboardParamDisplayInfo.DefaultValueAfterSubstitution
				Else
					Me.AddLogMessage(si, $"Invalid Filter Param: Couldn't find Dashboard Parameter {paramName}")
				End If
				
				Return defValue
			Catch ex As Exception
				Me.AddLogMessage(si, $"Exception during GetDashboardParam_DefaultValue: {ex.Message}.")
				Return Nothing
			End Try
			
		End Function
		Public Function GetDashboardParam_SingleMember(ByVal si As SessionInfo, ByVal paramName As String) As String
			Try				
				Dim singleMem As String = String.Empty
				
				Dim objDashboardParamDisplayInfo As DashboardParamDisplayInfo = BRApi.Dashboards.Parameters.GetParameterDisplayInfo(si, False, Nothing, paramName)
				If objDashboardParamDisplayInfo IsNot Nothing Then
					If objDashboardParamDisplayInfo.ComboBoxItemsForBoundList.Count = 1 Then
						For Each nvp As NameValuePair In objDashboardParamDisplayInfo.ComboBoxItemsForBoundList
							singleMem = nvp.Value
							Exit For
						Next
					Else
						Me.AddLogMessage(si, $"Invalid Filter Param (GetDashboardParam_SingleMember). Dashboard Parameter {paramName} must return a single member.")
					End If
				Else
					Me.AddLogMessage(si, $"Invalid Filter Param: Couldn't find Dashboard Parameter {paramName}")
				End If
				
				Return singleMem
			Catch ex As Exception
				Me.AddLogMessage(si, $"Exception during GetDashboardParam_SingleMember: {ex.Message}.")
				Return Nothing
			End Try
		End Function
		Public Function GetDashboardParam_MemberFilter(ByVal si As SessionInfo, ByVal paramName As String) As String
			Try		
				Dim memFilter As String = String.Empty
				
				Dim objDashboardParamDisplayInfo As DashboardParamDisplayInfo = BRApi.Dashboards.Parameters.GetParameterDisplayInfo(si, False, Nothing, paramName)
				If objDashboardParamDisplayInfo IsNot Nothing Then
					If objDashboardParamDisplayInfo.ComboBoxItemsForBoundList.Count > 0 Then
						memFilter = objDashboardParamDisplayInfo.MemberFilterAfterSubstitution
					Else
						Me.AddLogMessage(si, $"Invalid Filter Param (GetDashboardParam_MemberFilter). Dashboard Parameter {paramName} must return at least one member.")
					End If
				Else
					Me.AddLogMessage(si, $"Invalid Filter Param: Couldn't find Dashboard Parameter {paramName}")
				End If
				
				Return memFilter
			Catch ex As Exception
				Me.AddLogMessage(si, $"Exception during GetDashboardParam_MemberFilter: {ex.Message}.")
				Return String.Empty
			End Try
		End Function
		Public Function GetDashboardParam_CubeName(ByVal si As SessionInfo, ByVal paramName As String) As String
			Try		
				Dim cubeName As String = String.Empty
				
				Dim objDashboardParamDisplayInfo As DashboardParamDisplayInfo = BRApi.Dashboards.Parameters.GetParameterDisplayInfo(si, False, Nothing, paramName)
				If objDashboardParamDisplayInfo IsNot Nothing Then
					If objDashboardParamDisplayInfo.ComboBoxItemsForBoundList.Count > 0 Then
						cubeName = objDashboardParamDisplayInfo.CubeNameAfterSubstitution
					Else
						Me.AddLogMessage(si, $"Invalid Filter Param (GetDashboardParam_CubeName). Dashboard Parameter {paramName} must return at least one member.")
					End If
				Else
					Me.AddLogMessage(si, $"Invalid Filter Param: Couldn't find Dashboard Parameter {paramName}")
				End If
				
				Return cubeName
			Catch ex As Exception
				Me.AddLogMessage(si, $"Exception during GetDashboardParam_CubeName: {ex.Message}.")
				Return String.Empty
			End Try
		End Function
		Public Function GetDashboardParam_DimName(ByVal si As SessionInfo, ByVal paramName As String) As String
			Try		
				Dim dimName As String = String.Empty
				
				Dim objDashboardParamDisplayInfo As DashboardParamDisplayInfo = BRApi.Dashboards.Parameters.GetParameterDisplayInfo(si, False, Nothing, paramName)
				If objDashboardParamDisplayInfo IsNot Nothing Then
					If objDashboardParamDisplayInfo.ComboBoxItemsForBoundList.Count > 0 Then
						dimName = objDashboardParamDisplayInfo.DimNameAfterSubstitution
					Else
						Me.AddLogMessage(si, $"Invalid Filter Param (GetDashboardParam_DimName). Dashboard Parameter {paramName} must return at least one member.")
					End If
				Else
					Me.AddLogMessage(si, $"Invalid Filter Param: Couldn't find Dashboard Parameter {paramName}")
				End If
				
				Return dimName
			Catch ex As Exception
				Me.AddLogMessage(si, $"Exception during GetDashboardParam_DimName: {ex.Message}.")
				Return String.Empty
			End Try
		End Function
		Public Function GetDashboardParam_ComboBoxItemsForBoundList(ByVal si As SessionInfo, ByVal paramName As String) As List(Of NameValuePair)
			Try		
				Dim objDashboardParamDisplayInfo As DashboardParamDisplayInfo = BRApi.Dashboards.Parameters.GetParameterDisplayInfo(si, False, Nothing, paramName)
				If objDashboardParamDisplayInfo IsNot Nothing Then
					If objDashboardParamDisplayInfo.ComboBoxItemsForBoundList.Count > 0 Then
						Return objDashboardParamDisplayInfo.ComboBoxItemsForBoundList
					Else
						Me.AddLogMessage(si, $"Invalid Filter Param (GetDashboardParam_ComboBoxItemsForBoundList). Dashboard Parameter {paramName} must return at least one member.")
					End If
				Else
					Me.AddLogMessage(si, $"Invalid Filter Param: Couldn't find Dashboard Parameter {paramName}")
				End If
				
				Return Nothing
			Catch ex As Exception
				Me.AddLogMessage(si, $"Exception during GetDashboardParam_ComboBoxItemsForBoundList: {ex.Message}.")
				Return Nothing
			End Try
		End Function
		Public Sub AddLogMessage(ByVal si As SessionInfo, ByVal message As String)
			Try
				
				m_ExtenderLog.AppendLine("-------------------------------------------------------------------------------------------------------------------")
				m_ExtenderLog.AppendLine($"Time:{vbTab}{vbTab}{Date.Now.ToString}")
				m_ExtenderLog.AppendLine($"Message:{vbTab}{message}")
				m_ExtenderLog.AppendLine("-------------------------------------------------------------------------------------------------------------------")
				m_ExtenderLog.AppendLine(String.Empty)
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		Public Sub AddLogDataLine(ByVal si As SessionInfo, ByVal message As String)
			Try
				
				m_ExtenderDataLog.AppendLine(message)
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		Public Sub AddDataToFile(ByVal si As SessionInfo, ByVal data As DataTable, ByVal pageNum As Integer)
			Try
				'm_savetofile
				m_FileTextBuilder.AppendLine(String.Join(",", data.Columns.Cast(Of DataColumn).Select(Function(dc) dc.ColumnName)))
				
				data.AsEnumerable() _
					.ToList() _
					.ForEach(Sub(dr)
								m_FileTextBuilder.AppendLine(String.Join(",", dr.ItemArray))
							End Sub)
				
				Dim currentUserPath = $"{BRApi.Utilities.GetFileShareFolder(si, filesharefoldertypes.ApplicationRoot, Nothing)}\{stringhelper.RemoveWhiteSpace(si.AppName)}\Groups\Everyone\{si.UserName}\"
				If Not Directory.Exists(currentUserPath) Then
					Directory.CreateDirectory(currentUserPath)
				End If
				Dim filePath = $"{currentUserPath}PUT_{m_FileID}_{scenarioMemFilter.Replace("S#", String.Empty)}_{fileTimeStamp}_PageNo_{pageNum}.csv"
			
				'brapi.ErrorLog.LogMessage(si, $"Put Data File Path: {filePath}")
				
				Using fdxDataFile As System.IO.StreamWriter = New StreamWriter(filePath, False)
					fdxDataFile.Write(m_FileTextBuilder.ToString)
					fdxDataFile.Close									
				End Using
				
				m_FileTextBuilder.Clear
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub

		
	End Class
	Public Class FdxFilterInfo
		Public dimTypeName As String
		Private m_filterCollectionDim As Dictionary(Of Integer, String)
		Public Sub New()
			m_filterCollectionDim = New Dictionary(Of Integer, String)
		End Sub
		Public Sub AddMember(ByVal index As Integer, ByVal memberName As String)
			m_filterCollectionDim.Add(index, memberName)
		End Sub
		Public Function FindMember(ByVal memberName As String)
			Return m_filterCollectionDim.ContainsValue(memberName)
		End Function
	End Class
	Public Class FdxDataUnitInfo
		Public cubeName As String
		Public entityMemFilter As String
		Public consNameList As List(Of NameValuePair)
		Public scenarioTypeId As Integer 
		Public scenarioMemFilter As String
		Public timeMemFilter As String
		Public viewName As String
		Public suppressNoData As Boolean
		Public useGenericTimeColNames As Boolean
		Public filter As String
		Public parallelQueryCount As Integer
		Public logStatistics As Boolean
		Public timePivot As Boolean
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="FCP_PUT_Secure_Chitti">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_GATEWAY" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_VARIABLES" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_UTILITY" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="CommandCenter_Utility" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports System.Diagnostics
Imports System.Net
Imports System.Net.Http
Imports System.Reflection
Imports System.Threading.Tasks
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq

Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_GATEWAY
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_VARIABLES
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_UTILITY
Imports OneStream.BusinessRule.Extender.OS_Models
Imports OneStream.BusinessRule.Extender.CommandCenter_Utility

Namespace OneStream.BusinessRule.Extender.FCP_PUT_Secure_Chitti
		Public Class MainClass
		
		'Globals
		Private m_asyncGets As List(Of Task(Of OSJsonResponse))
		Private m_FCPGateWay As IntegrationGateway(Of FCPIntegrationParams) = Nothing
		
		'Keeps track of all logging for extender.
		Private m_ExtenderLog As New Text.StringBuilder
		Private m_ExtenderDataLog As New Text.StringBuilder
		Private m_getWatch As Stopwatch
		
		Const m_PUT_PageSize As Integer = 50000
		Const m_Timeout As Short = 10
		
		Private m_PutPageCount As Integer = 0
		Private m_PutErrorOccurred As Boolean
		Private m_FdxTotalRecordCount As Integer = 0
		Private m_PutTotalRecordCount As Integer = 0
		
		'Turn this on (True) if you want a file extracted to the FileShare. False to turn off
			'"\Groups\Everyone\"
		Private m_WriteDataOutToFile As Boolean
		Private m_FileID As String
		
		Private objTaskActivityItem As TaskActivityItem 
		
		'DPA-12918,12919-vn512cf-Split WMTUS Forecast PUT into two Put to optimize performance
		Private successfiletrigger As Boolean = True
		
		'DPA 12922 - vn512cg Added to accomodate Dataset_Name Parameter if available and if it has any value - 
		Private datasetName As String = String.Empty 'Get Dataset Value
				
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Dim smtpName As String = String.Empty
			Dim dashMaintName As String = String.Empty
			Dim scenarioMemFilter As String = String.Empty
			Dim cubeName As String = String.Empty
			Dim timeMemFilter As String = String.Empty	
			Dim newTimeMemFilter As String = String.Empty	
			Dim CCIntegrator As New CommandCenter_Utility.MainClass(si,api, args)										
			
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep ', ExtenderFunctionType.Unknown
												
						m_getWatch = Stopwatch.StartNew()
						
						Dim entityMemFilter As String = String.Empty
						Dim consNameMF As String = String.Empty
						Dim consMembers As List(Of NameValuePair)
						Dim scenarioTypeName As String = String.Empty
						Dim timePivotParam As String = String.Empty
						Dim timePivot As Boolean
						Dim viewName As String = String.Empty
						Dim filterParamNameList As New List(Of String)
						Dim filterCondition As String = String.Empty
						Dim putArguments As String = String.Empty
						
'						'DPA-10331-vn512cf-Dynamically run a consolidation as part of PUT business rule based on parameters selected on the Dashboard unit
						Dim runConsolidaiton As Boolean = False
												
						'Get required arguments
						Me.AddLogMessage(si, "PUT Process initiated. Getting Required Args (DashMaintUnitName, WriteDataLogFile, ScenarioType, TimePivot)")
						
						dashMaintName = args.NameValuePairs.XFGetValue("DashMaintUnitName")						
						m_WriteDataOutToFile = args.NameValuePairs.XFGetValue("WriteDataLogFile")
						scenarioTypeName = args.NameValuePairs.XFGetValue("ScenarioType")
						timePivotParam = args.NameValuePairs.XFGetValue("TimePivot")
						
						'Create new instance of FCPIntegrationGateway
						m_FCPGateWay = New IntegrationGateway(Of FCPIntegrationParams)(si, dashMaintName, OSModuleType.FCP)
						
'						'DPA-10331-vn512cf-Dynamically run a consolidation as part of PUT business rule based on parameters selected on the Dashboard unit												
						If args.NameValuePairs.ContainsKey("RunConsolidation") Then
							runConsolidaiton = args.NameValuePairs("RunConsolidation")
							brapi.ErrorLog.LogMessage(si, $"{runConsolidaiton}")
						End If
																		
						'DPA-12918,12919-vn512cf-Split WMTUS Forecast PUT into two Put to optimize performance
						If args.NameValuePairs.ContainsKey("SuccessFileTrigger") Then
							successfiletrigger = args.NameValuePairs("SuccessFileTrigger")
							brapi.ErrorLog.LogMessage(si, $"Success File Trigger was set to {SuccessFileTrigger}")
						End If
						
						Me.AddLogMessage(si, $"Get DashboardMaintUnit {dashMaintName}")
						Dim dashMaintUnit As DashboardMaintUnit = BRApi.Dashboards.MaintUnits.GetMaintUnit(si, False, Nothing, dashMaintName)
						If dashMaintUnit IsNot Nothing Then
							'Set all of the Required PUT Arguments
							
							'	<dashMaintName>_MemberName_ViewName
							'		-Note: This param must return a single Member (View Name) which will be used during the OS FDX Query
							viewName = Me.GetDashboardParam_SingleMember(si, $"{dashMaintName}_MemberName_ViewName")
							
							'	<dashMaintName>_MemberName_ConsName
							'		-Note: This param must return a single Member (Cons Name) which will be used during the OS FDX Query
							'		-Update for Jira Ticket DPA-7660: 
							'			- This param can return a Member Filter which will be used to retrieve a list of ConsName each of which
							'				will be used during the OS FDX Query.
							'			- Initiate trigger after looping through each MemberFilter_Cons items
							consMembers = Me.GetDashboardParam_ComboBoxItemsForBoundList(si, $"{dashMaintName}_MemberName_ConsName")
							If consMembers Is Nothing Then
								Me.AddLogMessage(si, $"Consolidation parameter must return one or more Cons Names")
								Return Nothing
							End If
							
							'Added By Mushtaq
							'Dim ScParam As String = args.SelectionChangedTaskInfo.CustomSubstVars.XFGetValue("Param_Select_Weekly_Forecast")
							'BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, False,  "Param_FCP_Scenario",ScParam)
														
							'	<dashMaintName>_MemberFilter_Scenario
							'		-Note: This param will only be used to capture the Member Filter which will be used during the OS FDX Query
							scenarioMemFilter = Me.GetDashboardParam_MemberFilter(si, $"{dashMaintName}_MemberFilter_Scenario")
							
							'	<dashMaintName>_MemberFilter_Time
							'		-Note: This param will only be used to capture the Member Filter which will be used during the OS FDX Query
							timeMemFilter = Me.GetDashboardParam_MemberFilter(si, $"{dashMaintName}_MemberFilter_Time")
							newTimeMemFilter=timeMemFilter
							'======================================
							Dim timeMemFilterNew As String = String.Empty
							If timeMemFilter.Split(",").ToList().Count > 1 Then
								timeMemFilter=timeMemFilter.Replace("T#","").Replace(".Base","").Replace(" ","")
								For Each timeparam As String In timeMemFilter.Split(",").ToList()
									timeMemFilterNew += "T#" + timeparam + ".Base,"
								Next
							   timeMemFilter=timeMemFilterNew.Remove(timeMemFilterNew.Length - 1, 1)
							   newTimeMemFilter=timeMemFilter
							End If
							'======================================
							'	<dashMaintName>_MemberFilter_Entity
							'		-Note: This param will only be used to capture the Member Filter which will be used during the OS FDX Query
							entityMemFilter = Me.GetDashboardParam_MemberFilter(si, $"{dashMaintName}_MemberFilter_Entity")
							
							'cubeName is taken from <dashMaintName>_MemberFilter_Entity param's cube setting
							cubeName = Me.GetDashboardParam_CubeName(si, $"{dashMaintName}_MemberFilter_Entity")
							
							'DPA-12922 vn512cg Check if Dashboard has "Dataset_Name" as a default parameter listed
							'If yes then get the default value, ignore if no
							Dim dtParamFilters As DataTable = Me.GetDashboardParamsDT_FiltersOnly(si, dashMaintUnit.UniqueID, $"{dashMaintName}_Dataset_Name")							
							If dtParamFilters IsNot Nothing Then
								For Each dr As DataRow In dtParamFilters.Rows
									Dim pName As String = dr("Name")
									datasetName = Me.GetDashboardParam_DefaultValue(si, pName)
									Exit For
								Next
							End If
														
							'	<dashMaintName>_Filter_<List of filter params. Only 1 per DimType>
							'		-Note: Code will retrieve all _Filter_ params. You can only have one per DimType
							dtParamFilters = Me.GetDashboardParamsDT_FiltersOnly(si, dashMaintUnit.UniqueID, $"{dashMaintName}_Filter_%")
							If dtParamFilters IsNot Nothing Then
								For Each dr As DataRow In dtParamFilters.Rows
									Dim pName As String = dr("Name")
									If Not pName.Contains("FilterCondition") Then
										Dim filterMFItem As String = Me.GetDashboardParam_MemberFilter(si, pName)
										If Not String.IsNullOrWhiteSpace(filterMFItem) Then
											filterParamNameList.Add(pName)
										End If
									End If
								Next
							Else
								Me.AddLogMessage(si, $"Couldn't find any {dashMaintName}_Filter params from Dashboard Maintenance Unit: {dashMaintName}")
							End If
							
							'	<dashMaintName>_FilterCondition
							'		-Note: This param must have a static value with 1 of the following values
							'			1) AND - This value will indicate AND operatin on the filters. 
							'			2) OR  - This value will indicate OR operation on the filters.
							'		-Note: 	The FDX query results will be iterated one time by the filter process. The process will capture all of the
							'				fields that need to be checked (DimTypes defined in Filter params above). Next, depending on the Filter
							'				Condition the records will be PUT to FCP. For AND condition all fields (defined by DimType above) will have
							'				to exist in the record being checked by the filter process. For OR condition, finding only one DimType in the 
							'				record will result in that record being PUT to FCP.
							filterCondition = Me.GetDashboardParam_DefaultValue(si, $"{dashMaintName}_FilterCondition")
							
							'	<dashMaintName>_SMTP
							'		-Note: This param must have a static value for the name of the External Connection SMPT Server
							'smtpName = Me.GetDashboardParam_DefaultValue(si, $"{dashMaintName}_SMTP")
						Else
							Me.AddLogMessage(si, $"Could not find Dashboard Maintenance Unit: {dashMaintName}")
							Return Nothing
						End If
						
						'DPA-13222 and DPA-13948-vn50ugm-E&S: Capture PUT API events (Start, end, failed, etc) for a scenario & post them to Command Centre
						CCIntegrator.GeneratePayloadForCC(si,scenarioMemFilter.Replace("S#",""),cubeName,newTimeMemFilter.Replace("T#","").Replace(".Base",""),"Start",dashMaintName,"Success","0","","CommandCenter_PUTnCFR","PUT")
						'DPA-13222 and DPA-13948-vn50ugm-E&S: Capture PUT API events (Start, end, failed, etc) for a scenario & post them to Command Centre
						
						
						putArguments += vbTab & "{DashMaintUnitName=" & dashMaintName & "}" & vbNewLine
						putArguments += vbTab & "{WriteDataLogFile=" & m_WriteDataOutToFile & "}" & vbNewLine
						putArguments += vbTab & "{svcConsumerId=" & m_FCPGateWay.Params.ConsumerId  & "}" & vbNewLine
						putArguments += vbTab & "{svcName=" & m_FCPGateWay.Params.SvcName & "}" & vbNewLine
						putArguments += vbTab & "{svcEnv=" & m_FCPGateWay.Params.SvcEnv & "}" & vbNewLine
						putArguments += vbTab & "{CubeName=" & cubeName & "}" & vbNewLine
						putArguments += vbTab & "{EntityMemFilter=" & entityMemFilter & "}" & vbNewLine
						
						Dim consArgs As String = String.Empty
						Dim consArgsFileSafe As String = String.Empty
						For Each nvp As NameValuePair In consMembers
							consArgs += nvp.Value
							consArgs += ","
							
							consArgsFileSafe += nvp.Value
							consArgsFileSafe += "_"
						Next
						'remove the last comma
						consArgs = consArgs.Remove(consArgs.Length - 1, 1)
						consArgsFileSafe = consArgsFileSafe.Remove(consArgsFileSafe.Length - 1, 1)
							
						putArguments += vbTab & "{ConsName=" & consArgs & "}" & vbNewLine
						putArguments += vbTab & "{ScenarioMemFilter=" & scenarioMemFilter & "}" & vbNewLine
						putArguments += vbTab & "{ScenarioType=" & scenarioTypeName & "}" & vbNewLine
						putArguments += vbTab & "{TimeMemFilter=" & timeMemFilter & "}" & vbNewLine
						putArguments += vbTab & "{TimePivot=" & timePivotParam & "}" & vbNewLine
						putArguments += vbTab & "{ViewName=" & viewName & "}" & vbNewLine
						putArguments += vbTab & "{EndPoint=" & m_FCPGateWay.Params.EndPoint(OSActionType.Put.ToString)(0) & "}" & vbNewLine
						
						putArguments += vbTab & "{Filters="						
						For Each filterItem As String In filterParamNameList
							If Not String.IsNullOrWhiteSpace(filterItem) Then
								putArguments += filterItem & ","
							End If
						Next
						If filterParamNameList.Count > 0 Then
							putArguments = putArguments.Remove(putArguments.Length - 1, 1)
						End If
						putArguments += "}"
						
						Me.AddLogMessage(si, $"PUT Started with the following arguments: {vbNewLine}{putArguments}")
						
						'-----------------------------------------------------------------------------------------
						'Perform validations on the parameters passed in from DM Step
						'-----------------------------------------------------------------------------------------						
						If String.IsNullOrWhiteSpace(filterCondition) Then
							Me.AddLogMessage(si, $"Invalid Parameter: {dashMaintName}_FilterCondition")
							Return Nothing
						Else
							If filterCondition.XFContainsIgnoreCase("AND") Or filterCondition.XFContainsIgnoreCase("OR") Then
								'filterCondition is set as expected
							Else
								Me.AddLogMessage(si, $"Invalid Parameter: {dashMaintName}_FilterCondition must be set to AND or OR")
								Return Nothing
							End If
						End If
						
						'DPA 12922 vn512cg Check if dataset name Exist						
						If Not datasetName = String.Empty Then 
							If String.IsNullOrWhiteSpace(datasetName) Then
								Me.AddLogMessage(si, $"Invalid Parameter: {dashMaintName}_Dataset_Name")
								Return Nothing
							End If
						End If
						
						'Validate TimePivot as boolean
						If Not String.IsNullOrWhiteSpace(timePivotParam) Then
							Boolean.TryParse(timePivotParam, timePivot)
						Else
							'Default to false
							timePivot = False
						End If
						
						Dim objCubeInfo As CubeInfo = BRApi.Finance.Cubes.GetCubeInfo(si, cubeName)
						If objCubeInfo Is Nothing Then
							'raise a user exception
							Me.AddLogMessage(si, "Couldn't get cube info")
							Return Nothing
						Else
							'Used for data log file name
							m_FileID = cubeName & "_" & consArgsFileSafe
						End If
						
						Dim mbrInfo As OneStream.Shared.Wcf.MemberInfo
						
						For Each consMember As NameValuePair In consMembers
							mbrInfo = BRApi.Finance.Metadata.GetMember(si, DimTypeID.Consolidation, consMember.Value)
							If mbrInfo Is Nothing Then							
								Me.AddLogMessage(si, $"Couldn't get ConsName ({consMember}) member info")
								Return Nothing
							End If
						Next
						
						If ScenarioType.GetItem(scenarioTypeName).Id = SharedConstants.Unknown Then
							Me.AddLogMessage(si, "Invalid Scenario Type provided")
							Return Nothing
						End If
						
						mbrInfo = BRApi.Finance.Metadata.GetMember(si, DimTypeID.View, viewName)
						If mbrInfo Is Nothing Then
							Me.AddLogMessage(si, "Couldn't get ViewName member info")
							Return Nothing
						End If
						
						Dim fdxFilterList As New List(Of FdxFilterInfo)
						Dim fdxFilterItem As FdxFilterInfo

						If filterParamNameList.Count > 0 Then
							'---------------------------------------------------
							'Initialize all of the Filter Info Objects
							'	-Get Param Member Filter Result
							'	-Create a list of all the dims that needs to be filtered so 
							'	 we can Loop through those columns in the Fdx DataTable for each 
							'	 row. These values will be searched in the List of FdxFilterInfo Collection
							For Each filterParamName In filterParamNameList
								fdxFilterItem = Me.GetFdxFilterInfo(si, filterParamName.Trim)
								If fdxFilterItem IsNot Nothing Then
									fdxFilterList.Add(fdxFilterItem)
								End If
							Next
						End If
							'-----------------------------------------------------------------------------------------
							'The below code is to handle multiple time periods
					Dim currTimeMemIndex As Integer = 0							
					Dim timeMemFilterCount As Integer = timeMemFilter.Split(",").ToList().Count
					
					For Each timeparam As String In timeMemFilter.Split(",").ToList()
						currTimeMemIndex += 1
						successfiletrigger = (currTimeMemIndex=timeMemFilterCount)
						timeMemFilter =timeparam 
						brapi.ErrorLog.LogMessage(si,"time member for consolidation " & timeMemFilter.Substring(0, 6))
							'The below code is to handle multiple time periods
							'-------------------------------------------------
						'DPA-10331-vn512cf-Dynamically run a consolidation as part of PUT business rule based on parameters selected on the Dashboard unit
						If runConsolidaiton Then							
								Dim customSubstrVars As New Dictionary(Of String, String)
								customSubstrVars.Add("CubeName", cubeName)
								customSubstrVars.Add("EntityFilter", entityMemFilter)							
								customSubstrVars.Add("ConsFilter", "C#" & consArgsFileSafe)
								customSubstrVars.Add("ScenarioFilter", scenarioMemFilter)
								'customSubstrVars.Add("TimeFilter", timeMemFilter)
								
								Dim boolTimeMemFilter As Boolean = timeMemFilter.Contains(".Base")
								If boolTimeMemFilter = True Then
									'If Time Member Filter value contains 
									'1. T#2022.Base --> T#2022M12
									'2. T#|!prm_DB_FCP_PUT_WMTUS_ES_INPUT_Year!|.Base --> T#XXXXM12
									Dim strarr() As String
									strarr = timeMemFilter.Split(".")
									customSubstrVars.Add("TimeFilter", strarr(0).Substring(0, 6) & "M12")
									brapi.ErrorLog.LogMessage(si, "Run Consolidation Time Filter(.Base): " & strarr(0).Substring(0, 6) & "M12")
								Else	
									'If Time Member Filter value contains 
									'1. T#2022--> T#2022M12
									customSubstrVars.Add("TimeFilter", timeMemFilter.Substring(0, 6) & "M12")
									brapi.ErrorLog.LogMessage(si, "Run Consolidation Time Filter(T#2020): " & timeMemFilter.Substring(0, 6) & "M12")
								End If					
																
								'objTaskActivityItem =BRApi.Utilities.ExecuteDataMgmtSequence(si,"RunConsolidationSeq", customSubstrVars)
								objTaskActivityItem =BRApi.Utilities.StartDataMgmtSequence(si,"RunConsolidationSeq", customSubstrVars)
						End If						
						'-------------------------------------------------						
						
						Dim fdxInfoItem As New FdxDataUnitInfo	
						
						fdxInfoItem.cubeName = cubeName
						fdxInfoItem.entityMemFilter = entityMemFilter
						fdxInfoItem.consNameList = consMembers
						fdxInfoItem.scenarioMemFilter = scenarioMemFilter
						fdxInfoItem.scenarioTypeId = ScenarioTypeId.Forecast
						fdxInfoItem.timeMemFilter = timeMemFilter
						fdxInfoItem.viewName = viewName
						fdxInfoItem.suppressNoData = True
						fdxInfoItem.useGenericTimeColNames = False
						fdxInfoItem.filter = Nothing
						fdxInfoItem.parallelQueryCount = 10
						fdxInfoItem.logStatistics = False
						fdxInfoItem.timePivot = timePivot
						
						m_asyncGets = New List(Of Task(Of OSJsonResponse))					
						
						If timePivot Then
							Me.RunPivotPUTtoFCP(si, dashMaintName, fdxInfoItem, fdxFilterList, filterCondition)
						Else
							Me.RunNonPivotPUTtoFCP(si, fdxInfoItem, fdxFilterList, filterCondition)
						End If		
					Next
						'DPA-13222 and DPA-13948-vn50ugm-E&S: Capture PUT API events (Start, end, failed, etc) for a scenario & post them to Command Centre
						 CCIntegrator.GeneratePayloadForCC(si,scenarioMemFilter.Replace("S#",""),cubeName,newTimeMemFilter.Replace("T#","").Replace(".Base",""),"End",dashMaintName,"Success",m_PutTotalRecordCount,"","CommandCenter_PUTnCFR","PUT")
						'DPA-13222 and DPA-13948-vn50ugm-E&S: Capture PUT API events (Start, end, failed, etc) for a scenario & post them to Command Centre	
						
				End Select
			
				Return Nothing
			Catch ex As Exception
					'DPA-13222 and DPA-13948-vn50ugm-E&S: Capture PUT API events (Start, end, failed, etc) for a scenario & post them to Command Centre
					 CCIntegrator.GeneratePayloadForCC(si,scenarioMemFilter.Replace("S#",""),cubeName,newTimeMemFilter.Replace("T#","").Replace(".Base",""),"End",dashMaintName,"Failed",m_PutTotalRecordCount,ex.Message,"CommandCenter_PUTnCFR","PUT")
					'DPA-13222 and DPA-13948-vn50ugm-E&S: Capture PUT API events (Start, end, failed, etc) for a scenario & post them to Command Centre
					
				Me.AddLogMessage(si, $"Main Exception: {ex.Message}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			Finally
				Try
					brapi.ErrorLog.LogMessage(si, $"{vbNewLine}{vbTab}{vbTab}{vbTab}{vbTab}****************** FCP PUT Log ******************{vbNewLine}{m_ExtenderLog.ToString}")
					
					If True Then
						'brapi.Utilities.SendMail(si, smtpName, emailsList,  "FCP - OneSteam: PUT Job Completed - Status" , m_ExtenderLog.ToString, Nothing)
						'vn512cf - RK - Below line implemented as per STOREAPPS
						CommonUtility.SendMail(si, "OneStream to FCP: PUT Job Completed - Status",  m_ExtenderLog.ToString, dashMaintName, m_FCPGateway.Params)
					End If
					
					If m_WriteDataOutToFile Then
						Dim everyonePath As String = BRApi.FileSystem.GetFileShareFolder(si, FileShareFolderTypes.ApplicationRoot, Nothing) & "\" & si.AppName.Replace(" ", String.Empty) & "\Groups\Everyone\"
						
						brapi.ErrorLog.LogMessage(si, "Put Data File Path: " & everyonePath & "PUT_" & m_FileID & ".csv")
						
						Using fdxDataFile As System.IO.StreamWriter = New StreamWriter(everyonePath & "PUT_" & m_FileID & ".csv", False)
							fdxDataFile.Write(m_ExtenderDataLog.ToString)
							fdxDataFile.Close									
						End Using
					End If
				Catch exFinally As Exception
					Me.AddLogMessage(si, $"Finally Exception: {exFinally.Message}")
				End Try				
			End Try
		End Function		
		Public Sub RunNonPivotPUTtoFCP(ByVal si As SessionInfo, ByVal fdxInfoItem As FdxDataUnitInfo, ByVal fdxFilterList As List(Of FdxFilterInfo), ByVal filterCondition As String)
			Try
				Dim fdxDt As DataTable
				
				For Each consMember As NameValuePair In fdxInfoItem.consNameList
					fdxDt = Me.GetCubeDataFromOsFdxQuery(si, fdxInfoItem, consMember.Value)
					Dim putDt As DataTable = Nothing
					If fdxDt IsNot Nothing Then
						If fdxFilterList.Count > 0 Then
							'filter the data
							putDt = Me.FilterFdxData(si, fdxDt, fdxFilterList, filterCondition)
						Else
							putDt = fdxDt
						End If
						
					End If
					
					If putDt IsNot Nothing Then
						If putDt.Rows.Count > 0 Then
							Me.InitiateFcpPut(si, putDt)
							'Added from StoreOps - Start: Send Sucess Trigger for Non Pivot
							'-------------------------------------------------------------
							' Drop success trigger for Non Pivot - b0l03cl - added for SS 
							'Only Trigger when all data was put without error
							If successfiletrigger = True Then
								If m_PutPageCount > 0 Then
									Me.AddLogMessage(si, $"{m_PutPageCount} total number of pages sent to FCP.")
								
									'Build JSON for loadDataTrigger
									Dim scenario As String = fdxInfoitem.scenarioMemFilter.Replace("S#", String.Empty)
									Dim jsonRaw As String = $"{chr(34)}CUBE{chr(34)}:{chr(34)}{fdxInfoitem.cubeName}{chr(34)},{chr(34)}SCENARIO{chr(34)}:{chr(34)}{scenario}{chr(34)}"
									jsonRaw = "{" & jsonRaw & "}"
									
'									BRApi.ErrorLog.LogMessage(si, $"JSON PayLoad 1: {jsonRaw}")
									m_asyncGets.Add(Me.TryPutToFcpAsync(si, jsonRaw, successfiletrigger))
									
									Dim result As Task
									result = Task.WhenAll(m_asyncGets.ToArray)
									
									Try
										result.Wait()
									Catch e As Exception
										Throw ErrorHandler.LogWrite(si, New XFException(si, e))
									End Try
									
									'Get response
									Dim content As String				
									For Each tResults As Task(Of OSJsonResponse) In m_asyncGets
										If tResults.Result.Success = False Then
											content = tResults.Result.JsonData
											Me.AddLogMessage(si, $"FCP PUT loadDataTrigger Response Error. {content}")
										Else
											content = tResults.Result.JsonData
											Me.AddLogMessage(si, $"FCP PUT loadDataTrigger Success Response. {content}")
										End If
									Next
									'Added from StoreOps - End
								Else
									Me.AddLogMessage(si, $"Nothing was sent to FCP.")
								End If
							End If
							'-------------------------------------------------------------
						Else
							Me.AddLogMessage(si, "Zero Records to PUT")
						End If
					Else
						Me.AddLogMessage(si, "Zero Records to PUT. FDX DT is nothing")
					End If
				Next
			Catch ex As Exception
				Me.AddLogMessage(si, $"RunNonPivotPUTtoFCP Exception: {ex.Message}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		Public Sub RunPivotPUTtoFCP(ByVal si As SessionInfo, ByVal dashMaintName As String, ByVal fdxInfoItem As FdxDataUnitInfo, ByVal fdxFilterList As List(Of FdxFilterInfo), ByVal filterCondition As String)
			Try
				'-----------------------------------------------------------------------------------------
				'DPA-5966
				'	-This should only be applied to WMTUS
				'	-Add Year column
				'	-Rename And make sure time Is pivoted And always has 12 periods
				'	-Entity Member filter must be changed To Parent1, Parent2 instead Of actual member filter. Parent1, Parent2 will be converted To E#Parent1.Children, E#Parent2.Children. From there we will Loop And pass data To FCP For Each Child.Base In the Entity selected In the Dashboard Parameter.
				'	-Execute New FCP Endpoint (“done sending data”) When process completes.
				'-----------------------------------------------------------------------------------------
				
				'Must be 1 year only
				'	-If any commas exist then fail
				'	-Must be Year.base
				If fdxInfoItem.timeMemFilter.Contains(",") Then
					Me.AddLogMessage(si, $"Time Filter Contains multiple entries. Must be YYYY.Base.  {fdxInfoItem.timeMemFilter}")
					Exit Sub
				End If

				For Each consMember As NameValuePair In fdxInfoItem.consNameList
					If Not m_PutErrorOccurred Then
						Me.GetAndPutPut_PartitionedByEntity(si, dashMaintName, fdxInfoItem, fdxFilterList, filterCondition, consMember.Value)						
					Else
						Exit For
					End If
				Next
				
				m_asyncGets.Clear
				
				'Only Trigger when all data was put without error
				If Not m_PutErrorOccurred And m_PutPageCount > 0 Then
					Me.AddLogMessage(si, $"{m_PutPageCount} total number of pages sent to FCP. {m_PutTotalRecordCount} total number of records sent to FCP.")
					
					'DPA-12918,12919-vn512cf-Split WMTUS Forecast PUT into two Put to optimize performance
					'For the Optimising the performance Of the Job, bifurcated the exsisitng Job into two steps And controlling it based On the Switch parameter passed.
					'If Success trigger Is Set To False it will Not create the success files. As there Is second PUT In process Of creating the files.
					'Exit if success trigger in DM job is set to false
					
					'//For Sucess File Trigger - RK
					If successfiletrigger = True Then						
						'Build JSON for loadDataTrigger
						Dim scenario As String = fdxInfoitem.scenarioMemFilter.Replace("S#", String.Empty)
						Dim jsonRaw As String = $"{chr(34)}CUBE{chr(34)}:{chr(34)}{fdxInfoitem.cubeName}{chr(34)},{chr(34)}SCENARIO{chr(34)}:{chr(34)}{scenario}{chr(34)}"
						jsonRaw = "{" & jsonRaw & "}"
						
						'BRApi.ErrorLog.LogMessage(si, $"JSON PayLoad 2: {jsonRaw}")
						m_asyncGets.Add(Me.TryPutToFcpAsync(si, jsonRaw, successfiletrigger))
						
						
						Dim result As Task
						result = Task.WhenAll(m_asyncGets.ToArray)
						
						Try
							result.Wait()
						Catch e As Exception
							Throw ErrorHandler.LogWrite(si, New XFException(si, e))
						End Try
						
						'Get response
						Dim content As String				
						For Each tResults As Task(Of OSJsonResponse) In m_asyncGets
							If tResults.Result.Success = False Then
								content = tResults.Result.JsonData
								Me.AddLogMessage(si, $"FCP PUT loadDataTrigger Response Error. {content}")
							Else
								content = tResults.Result.JsonData
								Me.AddLogMessage(si, $"FCP PUT loadDataTrigger Success Response. {content}")
							End If
						Next
					End If
					'//For Sucess File Trigger - RK
					'DPA-12918,12919-vn512cf-Split WMTUS Forecast PUT into two Put to optimize performance
				Else
					If m_PutErrorOccurred Then
						Me.AddLogMessage(si, $"There was an error in the PUT. FCP team needs to clear and request a re-run.")
						Throw New XFUserMsgException(si, New Exception("There was an error in the PUT. FCP team needs to clear and request a re-run."))
					Else
						Me.AddLogMessage(si,"No data was sent to FCP")
					End If
				End If
				
			Catch ex As Exception
				Me.AddLogMessage(si, $"RunPivotPUTtoFCP Exception: {ex.Message}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		Public Sub GetAndPutPut_PartitionedByEntity(ByVal si As SessionInfo, ByVal dashMaintName As String, ByVal fdxInfoItem As FdxDataUnitInfo, ByVal fdxFilterList As List(Of FdxFilterInfo), ByVal filterCondition As String, ByVal consName As String)
			Try
				Dim lstChildren As List(Of NameValuePair) = Me.GetDashboardParam_ComboBoxItemsForBoundList(si, $"{dashMaintName}_MemberFilter_Entity")
				If lstChildren IsNot Nothing Then
					
					For Each nvp As NameValuePair In lstChildren
						Dim fdxDt As DataTable = Nothing
						Dim putDt As DataTable = Nothing
						
						fdxInfoItem.entityMemFilter = $"E#{nvp.Value}.Base"
						
						fdxDt = Me.GetCubeDataFromOsFdxQuery(si, fdxInfoItem, consName)
						If fdxDt IsNot Nothing Then
							If fdxFilterList.Count > 0 Then
								'filter the data
								putDt = Me.FilterFdxData(si, fdxDt, fdxFilterList, filterCondition)
							Else
								putDt = fdxDt
							End If
						End If
						
						If putDt IsNot Nothing Then
							If putDt.Rows.Count > 0 Then
								
								Dim yearOnly As String = fdxInfoItem.timeMemFilter.Replace("T#", String.Empty).ToUpper
								yearOnly = yearOnly.Replace(".BASE", String.Empty).Replace("H1", String.Empty).Replace("H2", String.Empty)
								For Each col As DataColumn In putDt.Columns
									If col.ColumnName.StartsWith("T") And (Not col.ColumnName.XFEqualsIgnoreCase("TIME")) Then
'										'Debug
'										Me.AddLogMessage(si, col.ColumnName)
										putDt.Columns(col.ColumnName).ColumnName = col.ColumnName.Substring(5)
									End If
								Next
								
								putDt.Columns.Add("Year", GetType(String), yearOnly)
								
								Me.InitiateFcpPut(si, putDt)
							End If
						End If
						
						If m_PutErrorOccurred Then
							Exit For
						End If
					Next
				Else
					Me.AddLogMessage(si, $"{dashMaintName}_MemberFilter_Entity did not return any Entity Children")
				End If
				
			Catch ex As Exception
				m_PutErrorOccurred = True
				Me.AddLogMessage(si, $"GetAndPutPut_PartitionedByEntity Exception: {ex.Message}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		Public Sub InitiateFcpPut(ByVal si As SessionInfo, ByVal putDt As DataTable)
			Try
				'add the null columns
				putDt.Columns.Add(New DataColumn("HasData", GetType(String)))
				putDt.Columns.Add(New DataColumn("Annotation", GetType(String)))
				putDt.Columns.Add(New DataColumn("Assumptions", GetType(String)))
				putDt.Columns.Add(New DataColumn("AuditComment", GetType(String)))
				putDt.Columns.Add(New DataColumn("Footnote", GetType(String)))
				putDt.Columns.Add(New DataColumn("VarianceExplanation", GetType(String)))
				
				Me.LoopOsDtPutByPage(si, putDt)
				
				If m_WriteDataOutToFile Then
					Dim headerLine As New Text.StringBuilder
					For Each dc As DataColumn In putDt.Columns
						headerLine.Append(dc.ColumnName)
						headerLine.Append(",")
					Next
					'Remove last comma
					headerLine.Remove(headerLine.Length - 1, 1)
					
					Me.AddLogDataLine(si, headerLine.ToString)
					
					Dim rowInfo As New Text.StringBuilder
					For Each dr As DataRow In putDt.Rows										
						For Each dc As DataColumn In putDt.Columns
							rowInfo.Append(dr(dc.ColumnName) & ",")
						Next
						rowInfo.Remove(rowInfo.Length - 1, 1)
						
						Me.AddLogDataLine(si, rowInfo.ToString)
						rowInfo.Clear
					Next
				End If
			Catch ex As Exception
				m_PutErrorOccurred = True
				Me.AddLogMessage(si, $"InitiateFcpPut Exception: {ex.Message}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		Public Function GetCubeDataFromOsFdxQuery(ByVal si As SessionInfo, ByVal fdxInfoItem As FdxDataUnitInfo, ByVal consName As String)
			Try
				If Not fdxInfoItem Is Nothing Then
					Dim dt As DataTable = Nothing
					
					Try
						
						If fdxInfoItem.timePivot Then
							dt = BRApi.Import.Data.FdxExecuteDataUnitTimePivot(si, 
								fdxInfoItem.cubeName, 
								fdxInfoItem.entityMemFilter, 
								consName, 
								fdxInfoItem.scenarioTypeId, 
								fdxInfoItem.scenarioMemFilter, 
								fdxInfoItem.timeMemFilter, 
								fdxInfoItem.viewName, 
								fdxInfoItem.suppressNoData, 
								fdxInfoItem.useGenericTimeColNames,
								String.Empty, 
								fdxInfoItem.parallelQueryCount, 
								fdxInfoItem.logStatistics)
						Else							
							dt = BRApi.Import.Data.FdxExecuteDataUnit(si, 
								fdxInfoItem.cubeName, 
								fdxInfoItem.entityMemFilter, 
								consName, 
								fdxInfoItem.scenarioTypeId, 
								fdxInfoItem.scenarioMemFilter, 
								fdxInfoItem.timeMemFilter, 
								fdxInfoItem.viewName, 
								fdxInfoItem.suppressNoData,
								String.Empty, 
								fdxInfoItem.parallelQueryCount, 
								fdxInfoItem.logStatistics)
						End If
						
						If dt IsNot Nothing Then
							m_FdxTotalRecordCount += dt.Rows.Count
							Me.AddLogMessage(si, $"OS FDX Query (details below) generated {dt.Rows.Count} records.{vbNewLine}{vbTab}Cube Name: {fdxInfoItem.cubeName}{vbNewLine}{vbTab}Entity Member Filter: {fdxInfoItem.entityMemFilter}{vbNewLine}{vbTab}Cons Name: {consName}{vbNewLine}{vbTab}fdxInfoItem.scenarioTypeId: {fdxInfoItem.scenarioTypeId}{vbNewLine}{vbTab}fdxInfoItem.scenarioMemFilter: {fdxInfoItem.scenarioMemFilter}{vbNewLine}{vbTab}fdxInfoItem.timeMemFilter: {fdxInfoItem.timeMemFilter}{vbNewLine}{vbTab}fdxInfoItem.viewName: {fdxInfoItem.viewName}{vbNewLine}{vbTab}fdxInfoItem.filter: String.Empty{vbNewLine}{vbTab}TimePivot: {fdxInfoItem.timePivot}")
						Else
							Me.AddLogMessage(si, $"OS FDX Query (details below) generated 0 records.{vbNewLine}{vbTab}Cube Name: {fdxInfoItem.cubeName}{vbNewLine}{vbTab}Entity Member Filter: {fdxInfoItem.entityMemFilter}{vbNewLine}{vbTab}Cons Name: {consName}{vbNewLine}{vbTab}fdxInfoItem.scenarioTypeId: {fdxInfoItem.scenarioTypeId}{vbNewLine}{vbTab}fdxInfoItem.scenarioMemFilter: {fdxInfoItem.scenarioMemFilter}{vbNewLine}{vbTab}fdxInfoItem.timeMemFilter: {fdxInfoItem.timeMemFilter}{vbNewLine}{vbTab}fdxInfoItem.viewName: {fdxInfoItem.viewName}{vbNewLine}{vbTab}fdxInfoItem.filter: String.Empty{vbNewLine}{vbTab}TimePivot: {fdxInfoItem.timePivot}")
						End If
						
					Catch exFdx As Exception
						Me.AddLogMessage(si, $"FDX failed. {exFdx}")
						Return Nothing
					End Try
					
					Return dt
				End If
				
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		Public Function FilterFdxData(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal fdxFilterList As List(Of FdxFilterInfo), ByVal filterCondition As String) As DataTable
			Try
				'---------------------------------------------------
				'Loop through all the dimTypes (columns) in the row 
				'and search the filter dictionaries (PUT or SKIP record)
				'---------------------------------------------------
				If dt IsNot Nothing Then
					
					Dim filteredDt As DataTable = dt.Clone
					
					 'make a clone of the datatable (structure only)
					Dim foundCount As Integer
					
'					Loop through the dt once And search For filter criteria
					For Each dr As DataRow In dt.Rows
						'Loop through the columns in the dt to get all of the values that are in the filter list
						For Each fdxFilterItem As FdxFilterInfo In fdxFilterList
							If fdxFilterItem.FindMember(dr(fdxFilterItem.dimTypeName)) = True Then
								foundCount += 1
								If filterCondition.XFContainsIgnoreCase("OR") Then
									Exit For
								End If
							End If
						Next
						
						If filterCondition.XFContainsIgnoreCase("OR") Then
							If foundCount > 0 Then
								filteredDt.ImportRow(dr)
							End If
						Else
							If foundCount = fdxFilterList.Count Then
								filteredDt.ImportRow(dr)
							End If
						End If
						
						foundCount = 0
					Next					
				
					If filteredDt IsNot Nothing Then
						Me.AddLogMessage(si, $"Record count after filters applied: {filteredDt.Rows.Count}")
					End If
					
					Return filteredDt
				Else
					Return dt
				End If
			Catch ex As Exception
				Return dt
			End Try		
		End Function
		Public Sub LoopOsDtPutByPage(ByVal si As SessionInfo, ByVal dt As DataTable) 
		    Try
				
		        Dim numOfPages As Integer = Math.Ceiling(dt.Rows.Count / m_PUT_PageSize)
				Dim pageNum As Integer = 1
				
				Me.AddLogMessage(si, $"Preparing to send data to FCP. Row Count: {dt.Rows.Count}. Number of pages: {numOfPages}")
				
				Do While pageNum <= numOfPages
					For i As Integer = 1 To 5
						If pageNum <= numOfPages
							'put m_PUT_PageSize records
							
							Dim dtPage As DataTable = dt.Rows.Cast(Of System.Data.DataRow).Skip((pageNum - 1) * m_PUT_PageSize).Take(m_PUT_PageSize).CopyToDataTable()
		                    
							If dtPage IsNot Nothing Then
								Dim jObj As JObject = New Jobject
								jObj("status") = Nothing
								jObj("rowCount") = dt.Rows.Count
								
								m_PutPageCount += 1
								m_PutTotalRecordCount += dtPage.Rows.Count
								
								'DPA-12922 vn512cg If DataSet is available and has value then add to Payload else ignore
								If Not String.IsNullOrWhiteSpace(datasetName) Then
									jObj("dataset_name") = datasetName 'datasetName
								End If								
								
								jObj("page") = m_PutPageCount
								jObj("data") = JArray.FromObject(dtPage, JsonSerializer.CreateDefault)
														
			                    m_asyncGets.Add(Me.TryPutToFcpAsync(si,jObj.ToString))
								
								
								'BRApi.ErrorLog.LogMessage(si, $"JSON PAYLOAD1111: {jObj.ToString}")	
								'Me.AddLogMessage(si, $"JSON PAYLOAD1111: {jObj.ToString}")
								'vn512cf - RK implemented as per STOREOPS
								BRApi.ErrorLog.LogMessage(si, $"Page {pageNum} of {numOfPages} and RowCount: {dtPage.Rows.Count}")						
							End If
							
							'increment page
							pageNum += 1
						Else
							'increment page
							pageNum += 1
						End If
		        	Next

					Dim result As Task
					result = Task.WhenAll(m_asyncGets.ToArray)
					
					Try
						result.Wait()
					Catch e As Exception
						Throw ErrorHandler.LogWrite(si, New XFException(si, e))
					End Try
					
				Loop
				
				Dim content As String
				Dim successCount As Integer = 0
				
				For Each tResults As Task(Of OSJsonResponse) In m_asyncGets
					If tResults.Result.Success = False Then
						content = tResults.Result.JsonData
						Me.AddLogMessage(si, $"FCP PUT Response Error. {content}")
						m_PutErrorOccurred = True
						Exit For
					Else
						successCount += 1
					End If
				Next
				
				m_asyncGets.Clear
				
				If successCount <> numOfPages Then
					Me.AddLogMessage(si, $"Completed PUT with errors in {m_getWatch.Elapsed.TotalMinutes} minutes")
				Else
					Me.AddLogMessage(si, $"Completed PUT (all {numOfPages} pages) in {m_getWatch.Elapsed.TotalMinutes} minutes")
				End If
				
			Catch ex As Exception
				m_PutErrorOccurred = True
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		Public Async Function TryPutToFcpAsync(ByVal si As SessionInfo, ByVal json As String, Optional ByVal isSuccessTrigger As Boolean = False) As Task(Of OSJsonResponse)
			Try
				Dim rTask As OSJsonResponse = Nothing
				Dim mainEx As Exception = Nothing
				
				'BRApi.ErrorLog.LogMessage(si, $"JSON PAY LOAD3 : {json}")
				For i As Integer = 1 To 3
					Try
						rTask = Await Me.PutDataToFcpAsync(si, json, isSuccessTrigger)
						If rTask IsNot Nothing Then							
							Return rTask
						End If
						
					Catch exWhen As Exception
						mainEx = exWhen
					End Try
				
					If i = 1 Then
						Me.AddLogMessage(si, $"Trying again in 5 seconds")
						Await Task.Delay(TimeSpan.FromSeconds(5))
					ElseIf i = 2 Then
						Me.AddLogMessage(si, $"Trying again in 8 seconds")
						Await Task.Delay(TimeSpan.FromSeconds(8))
					Else
						Throw(ErrorHandler.LogWrite(si, New XFException(si, mainEx)))
					End If
				Next
				
				Return rTask
				
			Catch exMain As Exception
				m_PutErrorOccurred = True
				Me.AddLogMessage(si, $"TryPutToFcpAsync Exception: {exMain.Message}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, exMain))
			End Try	
		End Function
		Public Async Function PutDataToFcpAsync(ByVal si As SessionInfo, ByVal json As String, ByVal isSuccessTrigger As Boolean) As Task(Of OSJsonResponse)
					
			Try				
				Return Await m_FCPGateWay.PutData(si, json, isSuccessTrigger)
				
			Catch ex As Exception
				m_PutErrorOccurred = True
				Me.AddLogMessage(si, $"PutDataToFcpAsync Exception: {ex.Message}")		
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		Public Function GetFdxFilterInfo(ByVal si As SessionInfo, ByVal filterParamName As String) As FdxFilterInfo
			Try				
				Dim fdxFilterInfoItem As FdxFilterInfo = Nothing
				
				Dim objDashboardParamDisplayInfo As DashboardParamDisplayInfo = BRApi.Dashboards.Parameters.GetParameterDisplayInfo(si, False, Nothing, filterParamName)
				If objDashboardParamDisplayInfo IsNot Nothing Then
					If objDashboardParamDisplayInfo.ComboBoxItemsForBoundList.Count > 0 Then
						fdxFilterInfoItem = New FdxFilterInfo
						fdxFilterInfoItem.dimTypeName = objDashboardParamDisplayInfo.Parameter.DimTypeName
						Dim index As Integer = 1
						For Each nvp As NameValuePair In objDashboardParamDisplayInfo.ComboBoxItemsForBoundList
							fdxFilterInfoItem.AddMember(index, nvp.Value)
							index += 1
						Next
					Else
						Me.AddLogMessage(si, $"Invalid Filter Param: GetMemberFilterClause returned nothing for Dashboard Parameter {filterParamName}")
					End If
				Else
					Me.AddLogMessage(si, $"Invalid Filter Param: Couldn't find Dashboard Parameter {filterParamName}")
				End If
				
				Return fdxFilterInfoItem
			Catch ex As Exception
				m_PutErrorOccurred = True
				Me.AddLogMessage(si, $"Exception during GetMembersUsingFilter: {ex.Message}. Filter skipped: {filterParamName}")
				Return Nothing
			End Try
		End Function
		Public Function GetDashboardParamsDT_FiltersOnly(ByVal si As SessionInfo, ByVal uniqueID As Guid, ByVal filterBy As String)
			Try
				Dim dt As DataTable = Nothing
				'from tabel with (nolock)
				'Retrieve all parameters belonging to dashMaintUnit
				Using objDbConnInfoApp As DbConnInfoApp = BRApi.Database.CreateApplicationDbConnInfo(si)
					'Get All Params for the dashMaintName
					Dim sqlStatement As String = $"Select * From DashboardParameter with (nolock) Where MaintUnitID = '{uniqueID}' AND Name Like '{filterBy}'"
					'Me.AddLogMessage(si, sqlStatement)
					dt = BRApi.Database.ExecuteSqlUsingReader(objDbConnInfoApp, sqlStatement, False)
				End Using
				
				Return dt
			Catch ex As Exception
				Me.AddLogMessage(si, $"Exception in GetDashboardParamsDT_FiltersOnly: {ex.Message}")
				Return Nothing
			End Try		
		End Function
		Public Function GetDashboardParam_DefaultValue(ByVal si As SessionInfo, ByVal paramName As String)
			Try				
				Dim defValue As String = String.Empty
				
				Dim objDashboardParamDisplayInfo As DashboardParamDisplayInfo = BRApi.Dashboards.Parameters.GetParameterDisplayInfo(si, False, Nothing, paramName)
				If objDashboardParamDisplayInfo IsNot Nothing Then
					defValue = objDashboardParamDisplayInfo.DefaultValueAfterSubstitution
				Else
					Me.AddLogMessage(si, $"Invalid Filter Param: Couldn't find Dashboard Parameter {paramName}")
				End If
				
				Return defValue
			Catch ex As Exception
				Me.AddLogMessage(si, $"Exception during GetDashboardParam_DefaultValue: {ex.Message}.")
				Return Nothing
			End Try
			
		End Function
		Public Function GetDashboardParam_SingleMember(ByVal si As SessionInfo, ByVal paramName As String) As String
			Try				
				Dim singleMem As String = String.Empty
				
				Dim objDashboardParamDisplayInfo As DashboardParamDisplayInfo = BRApi.Dashboards.Parameters.GetParameterDisplayInfo(si, False, Nothing, paramName)
				If objDashboardParamDisplayInfo IsNot Nothing Then
					If objDashboardParamDisplayInfo.ComboBoxItemsForBoundList.Count = 1 Then
						For Each nvp As NameValuePair In objDashboardParamDisplayInfo.ComboBoxItemsForBoundList
							singleMem = nvp.Value
							Exit For
						Next
					Else
						Me.AddLogMessage(si, $"Invalid Filter Param (GetDashboardParam_SingleMember). Dashboard Parameter {paramName} must return a single member.")
					End If
				Else
					Me.AddLogMessage(si, $"Invalid Filter Param: Couldn't find Dashboard Parameter {paramName}")
				End If
				
				Return singleMem
			Catch ex As Exception
				Me.AddLogMessage(si, $"Exception during GetDashboardParam_SingleMember: {ex.Message}.")
				Return Nothing
			End Try
		End Function
		Public Function GetDashboardParam_MemberFilter(ByVal si As SessionInfo, ByVal paramName As String) As String
			Try		
				Dim memFilter As String = String.Empty
				
				Dim objDashboardParamDisplayInfo As DashboardParamDisplayInfo = BRApi.Dashboards.Parameters.GetParameterDisplayInfo(si, False, Nothing, paramName)
				If objDashboardParamDisplayInfo IsNot Nothing Then
					If objDashboardParamDisplayInfo.ComboBoxItemsForBoundList.Count > 0 Then
						memFilter = objDashboardParamDisplayInfo.MemberFilterAfterSubstitution
					Else
						Me.AddLogMessage(si, $"Invalid Filter Param (GetDashboardParam_MemberFilter). Dashboard Parameter {paramName} must return at least one member.")
					End If
				Else
					Me.AddLogMessage(si, $"Invalid Filter Param: Couldn't find Dashboard Parameter {paramName}")
				End If
				
				Return memFilter
			Catch ex As Exception
				Me.AddLogMessage(si, $"Exception during GetDashboardParam_MemberFilter: {ex.Message}.")
				Return String.Empty
			End Try
		End Function
		Public Function GetDashboardParam_CubeName(ByVal si As SessionInfo, ByVal paramName As String) As String
			Try		
				Dim cubeName As String = String.Empty
				
				Dim objDashboardParamDisplayInfo As DashboardParamDisplayInfo = BRApi.Dashboards.Parameters.GetParameterDisplayInfo(si, False, Nothing, paramName)
				If objDashboardParamDisplayInfo IsNot Nothing Then
					If objDashboardParamDisplayInfo.ComboBoxItemsForBoundList.Count > 0 Then
						cubeName = objDashboardParamDisplayInfo.CubeNameAfterSubstitution
					Else
						Me.AddLogMessage(si, $"Invalid Filter Param (GetDashboardParam_CubeName). Dashboard Parameter {paramName} must return at least one member.")
					End If
				Else
					Me.AddLogMessage(si, $"Invalid Filter Param: Couldn't find Dashboard Parameter {paramName}")
				End If
				
				Return cubeName
			Catch ex As Exception
				Me.AddLogMessage(si, $"Exception during GetDashboardParam_CubeName: {ex.Message}.")
				Return String.Empty
			End Try
		End Function
		Public Function GetDashboardParam_DimName(ByVal si As SessionInfo, ByVal paramName As String) As String
			Try		
				Dim dimName As String = String.Empty
				
				Dim objDashboardParamDisplayInfo As DashboardParamDisplayInfo = BRApi.Dashboards.Parameters.GetParameterDisplayInfo(si, False, Nothing, paramName)
				If objDashboardParamDisplayInfo IsNot Nothing Then
					If objDashboardParamDisplayInfo.ComboBoxItemsForBoundList.Count > 0 Then
						dimName = objDashboardParamDisplayInfo.DimNameAfterSubstitution
					Else
						Me.AddLogMessage(si, $"Invalid Filter Param (GetDashboardParam_DimName). Dashboard Parameter {paramName} must return at least one member.")
					End If
				Else
					Me.AddLogMessage(si, $"Invalid Filter Param: Couldn't find Dashboard Parameter {paramName}")
				End If
				
				Return dimName
			Catch ex As Exception
				Me.AddLogMessage(si, $"Exception during GetDashboardParam_DimName: {ex.Message}.")
				Return String.Empty
			End Try
		End Function
		Public Function GetDashboardParam_ComboBoxItemsForBoundList(ByVal si As SessionInfo, ByVal paramName As String) As List(Of NameValuePair)
			Try		
				Dim objDashboardParamDisplayInfo As DashboardParamDisplayInfo = BRApi.Dashboards.Parameters.GetParameterDisplayInfo(si, False, Nothing, paramName)
				If objDashboardParamDisplayInfo IsNot Nothing Then
					If objDashboardParamDisplayInfo.ComboBoxItemsForBoundList.Count > 0 Then
						Return objDashboardParamDisplayInfo.ComboBoxItemsForBoundList
					Else
						Me.AddLogMessage(si, $"Invalid Filter Param (GetDashboardParam_ComboBoxItemsForBoundList). Dashboard Parameter {paramName} must return at least one member.")
					End If
				Else
					Me.AddLogMessage(si, $"Invalid Filter Param: Couldn't find Dashboard Parameter {paramName}")
				End If
				
				Return Nothing
			Catch ex As Exception
				Me.AddLogMessage(si, $"Exception during GetDashboardParam_ComboBoxItemsForBoundList: {ex.Message}.")
				Return Nothing
			End Try
		End Function
		Public Sub AddLogMessage(ByVal si As SessionInfo, ByVal message As String)
			Try
				
				m_ExtenderLog.AppendLine("-------------------------------------------------------------------------------------------------------------------")
				m_ExtenderLog.AppendLine($"Time:{vbTab}{vbTab}{Date.Now.ToString}")
				m_ExtenderLog.AppendLine($"Message:{vbTab}{message}")
				m_ExtenderLog.AppendLine("-------------------------------------------------------------------------------------------------------------------")
				m_ExtenderLog.AppendLine(String.Empty)
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		Public Sub AddLogDataLine(ByVal si As SessionInfo, ByVal message As String)
			Try
				
				m_ExtenderDataLog.AppendLine(message)
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
	End Class
	Public Class FdxFilterInfo
		Public dimTypeName As String
		Private m_filterCollectionDim As Dictionary(Of Integer, String)
		Public Sub New()
			m_filterCollectionDim = New Dictionary(Of Integer, String)
		End Sub
		Public Sub AddMember(ByVal index As Integer, ByVal memberName As String)
			m_filterCollectionDim.Add(index, memberName)
		End Sub
		Public Function FindMember(ByVal memberName As String)
			Return m_filterCollectionDim.ContainsValue(memberName)
		End Function
	End Class
	Public Class FdxDataUnitInfo
		Public cubeName As String
		Public entityMemFilter As String
		Public consNameList As List(Of NameValuePair)
		Public scenarioTypeId As Integer 
		Public scenarioMemFilter As String
		Public timeMemFilter As String
		Public viewName As String
		Public suppressNoData As Boolean
		Public useGenericTimeColNames As Boolean
		Public filter As String
		Public parallelQueryCount As Integer
		Public logStatistics As Boolean
		Public timePivot As Boolean
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="FDX_To_File">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.FDX_To_File
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				
'				Cube Name: INTL
'				Entity Member Filter: E#International_Operations_incl_FK.Base
'				Cons Name: Local
'				fdxInfoItem.scenarioTypeId: 3
'				fdxInfoItem.scenarioMemFilter: S#CorpFcst_Wk28
'				fdxInfoItem.timeMemFilter: T#2021.Base
'				fdxInfoItem.viewName: Periodic
'				fdxInfoItem.filter: String.Empty
'				TimePivot: True
				
				Dim timePivot As Boolean = True
				Dim cubeName As String = "WMT_US"
				Dim consName As String = "Local"
				Dim entityMemFilter As String = "E#US00377"
				Dim scenarioTypeId As Integer = ScenarioType.ScenarioType1.Id
				Dim scenarioMemFilter As String = "S#CorpFcst_Wk36"
				Dim timeMemFilter As String = "T#2021M1"
				Dim viewName As String = "Periodic"
				
				Dim dt As DataTable = Nothing
				If timePivot Then
					dt = BRApi.Import.Data.FdxExecuteDataUnitTimePivot(si, 
						cubeName, 
						entityMemFilter, 
						consName, 
						scenarioTypeId, 
						scenarioMemFilter, 
						timeMemFilter, 
						viewName, 
						False, 
						False,
						String.Empty, 
						10, 
						False)
				Else							
					dt = BRApi.Import.Data.FdxExecuteDataUnit(si, 
						cubeName, 
						entityMemFilter, 
						consName, 
						scenarioTypeId, 
						scenarioMemFilter, 
						timeMemFilter, 
						viewName, 
						False,
						String.Empty, 
						10, 
						False)
				End If
				
				If dt IsNot Nothing Then
					Dim everyonePath As String = BRApi.FileSystem.GetFileShareFolder(si, FileShareFolderTypes.ApplicationRoot, Nothing) & "\" & si.AppName.Replace(" ", String.Empty) & "\Groups\Everyone\"
					Using fdxDataFile As System.IO.StreamWriter = New StreamWriter(everyonePath & "fdxtofile_" & cubeName & ".csv", False)
						
					
						Dim writeThis As New Text.StringBuilder
						For Each dc As DataColumn In dt.Columns
								writeThis.Append(dc.ColumnName)
								writeThis.Append(",")
						Next
						'Remove last comma
						writeThis.Remove(writeThis.Length - 1, 1)
						fdxDataFile.WriteLine(writeThis.ToString)
						
						writeThis.Clear						
						For Each dr As DataRow In dt.Rows										
							For Each dc As DataColumn In dt.Columns
								writeThis.Append(dr(dc.ColumnName) & ",")
							Next
							writeThis.Remove(writeThis.Length - 1, 1)										
							fdxDataFile.WriteLine(writeThis.ToString)
							writeThis.Clear
						Next
						
						fdxDataFile.Close									
					End Using
				End If

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="FileShare_Cleanup">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.FileShare_Cleanup
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						Dim filelist As New Text.StringBuilder
						Dim filepath As String = BRApi.Utilities.GetFileShareFolder(si,FileShareFolderTypes.ApplicationIncoming, Nothing).Replace("Incoming",String.Empty) & "\Groups\Everyone\"
						Dim files As String() = Directory.GetFiles(filepath, "*.csv")

						For Each file As String In files
							If (System.IO.File.Exists(file)) Then
'								filelist.AppendLine(file)
								System.IO.File.Delete(file)
							End If
						Next	
'						BRApi.ErrorLog.LogMessage(si, "file list", filelist.ToString)
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="FormsEventHandler" name="FormsEventHandler">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.FormsEventHandler.FormsEventHandler
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As FormsEventHandlerArgs) As Object
			Try
				Dim returnValue As Object = args.DefaultReturnValue
				args.UseReturnValueFromBusinessRule = False
				args.Cancel = False

				Return returnValue
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="get_metadata">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Net
Imports System.Net.Http
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq

Namespace OneStream.BusinessRule.Extender.get_metadata
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Me.getmetadta(si)
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		#Region "send data"
            Public Sub sendData(ByVal si As SessionInfo, j_data As String)
                Try
                    
                    Dim jsontext As String = j_data
                    Dim jsonData As Byte()
                    Dim webResponseData As String = String.Empty
                    Dim webClientRequest As HttpWebRequest = WebRequest.Create("https://metabackend.dev.walmart.com/onestream/metadata")
                    
                    Dim encoding As New Text.UTF8Encoding
                    jsonData = encoding.GetBytes(jsonText)
                    webClientRequest.ContentLength = jsonData.Length                                                                       
                    
                    webClientRequest.ContentType = "application/json"
                    webClientRequest.Method = "Post"
                    
                    Dim reqStream As IO.Stream = webClientRequest.GetRequestStream()
                    reqStream.Write(jsonData,0,jsonData.Length)
                    reqStream.Close()
                    
                    Dim webClientResponse As HttpWebResponse = webClientRequest.GetResponse()
                    BRApi.ErrorLog.LogMessage(si,"response message",webClientResponse.ToString())
                    If webClientResponse.StatusCode = HttpStatusCode.OK Then
                        Dim respStream As IO.StreamReader = New StreamReader(webClientResponse.GetResponseStream())
                        webResponseData = respStream.ReadToEnd 
                        BRApi.ErrorLog.LogMessage(si,"successful","ok")
                    Else
                        BRApi.ErrorLog.LogMessage(si,"Unsuccessful","failed")
                    End If
                    
                    webClientResponse.Close()    
                Catch ex As Exception
                    Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
                End Try
            End Sub
            #End Region

		#Region "generate metadata json"
        Public Sub getmetadta(ByVal si As SessionInfo)
            Try
            #Region "SAMS"
            Dim memdimpk As DimPk = BRApi.Finance.Dim.GetDimPk(si,"SAMS")
            Dim memlist As List(Of MemberInfo) = BRApi.Finance.Members.GetMembersUsingFilter(si,memdimpk,"E#SAMS_US.DescendantsInclusive",False)
            Dim metadata As List(Of App) = New List(Of App)()
            
            Dim samsList As List(Of NodeMember) = New List(Of NodeMember)()
            
            Dim t_dict As New Dictionary(Of String, String) From {{"True","1"}, {"False","0"}}
            
            BRApi.ErrorLog.LogMessage(si,"Sams")
            For Each mbr As MemberInfo In memlist
                Dim member = BRApi.Finance.Members.GetMemberInfo(si, DimType.Entity.Id, mbr.Member.Name,True)
                Dim EMemberID As Integer = BRApi.Finance.Members.GetMemberId(si, DimType.Entity.Id, mbr.Member.Name)
                Dim SourceMbrParent As String = ""
                
                If(mbr.Member.Name.XFEqualsIgnoreCase("SAMS_US")) Then
                    SourceMbrParent  = "Walmart_Total_Company"
                    'SourceMbrParent ="root"
                Else
                    SourceMbrParent = BRApi.Finance.Members.GetParents(si, BRApi.Finance.Dim.GetDimPk(si, "SAMS"), EMemberID, False)(0).Name          
                End If
                Dim nodeProperty As PropertyList = New PropertyList With {
                .Currency = "USD",
                .Text1 = member.GetEntityProperties.Text1.GetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown).ToString(),
                .Text2 = member.GetEntityProperties.Text2.GetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown).ToString(),
                .Text3 = member.GetEntityProperties.Text3.GetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown).ToString(),
                .Text4 = member.GetEntityProperties.Text4.GetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown).ToString(),
                .Text5 = member.GetEntityProperties.Text5.GetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown).ToString(),
                .Text6 = member.GetEntityProperties.Text6.GetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown).ToString(),
                .Text7 = member.GetEntityProperties.Text7.GetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown).ToString(),
                .Text8 = member.GetEntityProperties.Text8.GetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown).ToString(),
                .InUse = t_dict(member.GetEntityProperties.InUse.GetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown).ToString()),
                .AllowAdjustments = t_dict(member.GetEntityProperties.AllowAdjustments.GetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown).ToString()),
                .AllowAdjustmentsFromChildren = t_dict(member.GetEntityProperties.AllowAdjustmentsFromChildren.GetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown).ToString())
                }
                Dim node As NodeMember = New NodeMember With {
                .Node = mbr.Member.Name,
                .Parent = SourceMbrParent,
                .properties = nodeProperty
                }
                samsList.Add(node)
            Next
            #End Region

            memdimpk = BRApi.Finance.Dim.GetDimPk(si,"WMTUS")
            memlist = BRApi.Finance.Members.GetMembersUsingFilter(si,memdimpk,"E#Walmart_US.DescendantsInclusive",False)
            Dim wmtusList As List(Of NodeMember) = New List(Of NodeMember)()
        
            BRApi.ErrorLog.LogMessage(si,"wmtus")
            For Each mbr As MemberInfo In memlist
                Dim member = BRApi.Finance.Members.GetMemberInfo(si, DimType.Entity.Id, mbr.Member.Name,True)
                Dim EMemberID As Integer = BRApi.Finance.Members.GetMemberId(si, DimType.Entity.Id, mbr.Member.Name)
                Dim SourceMbrParent As String = ""
                
                If(mbr.Member.Name.XFEqualsIgnoreCase("Walmart_US")) Then
                    'SourceMbrParent  = "root"
                    SourceMbrParent = "Walmart_Total_Company"
                Else
                    SourceMbrParent = BRApi.Finance.Members.GetParents(si, BRApi.Finance.Dim.GetDimPk(si, "WMTUS"), EMemberID, False)(0).Name
				End If
                Dim nodeProperty As PropertyList = New PropertyList With {
                .Currency = "USD",
                .Text1 = member.GetEntityProperties.Text1.GetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown).ToString(),
                .Text2 = member.GetEntityProperties.Text2.GetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown).ToString(),
                .Text3 = member.GetEntityProperties.Text3.GetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown).ToString(),
                .Text4 = member.GetEntityProperties.Text4.GetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown).ToString(),
                .Text5 = member.GetEntityProperties.Text5.GetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown).ToString(),
                .Text6 = member.GetEntityProperties.Text6.GetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown).ToString(),
                .Text7 = member.GetEntityProperties.Text7.GetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown).ToString(),
                .Text8 = member.GetEntityProperties.Text8.GetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown).ToString(),
                .InUse = t_dict(member.GetEntityProperties.InUse.GetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown).ToString()),
                .AllowAdjustments = t_dict(member.GetEntityProperties.AllowAdjustments.GetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown).ToString()),
                .AllowAdjustmentsFromChildren = t_dict(member.GetEntityProperties.AllowAdjustmentsFromChildren.GetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown).ToString())
                }
                Dim node As NodeMember = New NodeMember With {
                .Node = mbr.Member.Name,
                .Parent = SourceMbrParent,
                .properties = nodeProperty
                }
				samsList.Add(node)
                'wmtusList.Add(node)
            Next
            
            #Region "Walmart_Total_Company"
            Dim wtcList As List(Of NodeMember) = New List(Of NodeMember)()
            Dim nodeMbr As NodeMember = New NodeMember With{
            .Node = "Walmart_Total_Company",
            .Parent = "Root",
            .properties = New PropertyList With{
            .Currency = "",
            .Text1 = "",
            .Text2 = "",
            .Text3 = "",
            .Text4 = "",
            .Text5 = "",
            .Text6 = "",
            .Text7 = "",
            .Text8 = "",
            .InUse = "",
            .AllowAdjustments = "",
            .AllowAdjustmentsFromChildren = ""
            }
            }
			samsList.Add(nodeMbr)
			
            'wtcList.Add(nodeMbr)
            #End Region
            
            metadata.Add(New App With{.Application = "E&S",.Data = samsList})
'            metadata.Add(New App With{.Application = "Walmart_US",.Data = wmtusList})
'            metadata.Add(New App With{.Application = "Walmart_Total_Company",.Data = wtcList})
            
            Dim json_allDimension As String = JsonConvert.SerializeObject(metadata, Formatting.None)
			BRApi.ErrorLog.LogMessage(si,"row 1",json_allDimension)
            Me.sendData(si,json_allDimension)
            'File.WriteAllText(filePath, json_sams)
            'BRApi.ErrorLog.LogMessage(si,"abc",memlist(50).GetEntityProperties.AllowAdjustments.GetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown).ToString())
            Catch ex As Exception
                Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
            End Try
        End Sub
        #End Region

	End Class
    Public Class NodeMember
        Public Property Node As String
        Public Property Parent As String
        Public Property properties As PropertyList
    End Class
    Public Class PropertyList
        'Public Property Description As String
        Public Property Currency As String
        Public Property Text1 As String
        Public Property Text2 As String
        Public Property Text3 As String
        Public Property Text4 As String
        Public Property Text5 As String
        Public Property Text6 As String
        Public Property Text7 As String
        Public Property Text8 As String
        Public Property InUse As String
        Public Property AllowAdjustments As String
        Public Property AllowAdjustmentsFromChildren As String
    End Class
    Public Class App
        Public Property Application As String
        Public Property Data As List(Of NodeMember)
    End Class
End Namespace

]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="GetAppID">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.GetAppID
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
						BRApi.ErrorLog.LogMessage(si, "App ID:" & si.AppUniqueID.ToString)
						BRApi.ErrorLog.LogMessage(si, "User ID:" & si.UserName)
						
					
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="getchange_metadata">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Net
Imports System.Net.Http
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq

Namespace OneStream.BusinessRule.Extender.getchange_metadata
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Me.getChange(si)
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
				
		#Region "getChangeList"
		Public Sub getChange(ByVal si As SessionInfo)
			Try
				Dim memberName As String =""
				Dim targetParent As String =""
				Dim sourceParent As String =""
				Dim sourceDim As String=""
				Dim targetDim As String=""
				Dim propertyName As String =""
				Dim propertyValue As String =""
				Dim i As Integer = 0
				'Dim dim_dict As New Dictionary(Of String, String) From {{"True","1"}, {"False","0"}}
				Dim webClient As New System.Net.WebClient
				Dim result As String = webClient.DownloadString("http://metabackend.dev.walmart.com/onestream/getChangeList?application=ENS")
				BRApi.ErrorLog.LogMessage(si,"metadata changes received",result)
'				Dim pullData As Object = JObject.Parse(result)
				Dim pullData = JsonConvert.DeserializeObject(result)
				'BRApi.ErrorLog.LogMessage(si,"ok",pullData.Count.ToString())
				For Each change In pullData
					Dim changeId As String = change("id")
					BRApi.ErrorLog.LogMessage(si,"changeId is " & changeId , change.ToString())
					For Each item In change("changeReport")
						'addDeleteNodes loop
						targetDim = item("dimensionName")
						If(targetDim.XFEqualsIgnoreCase("Sams_US")) Then
							targetDim = "SAMS"
						Else If(targetDim.XFEqualsIgnoreCase("Walmart_US")) Then
							targetDim = "WMTUS"
						End If
						For Each node In item("addDeleteNodes")
							Dim changeType As String = node("type")
							If(changeType.XFEqualsIgnoreCase("delete-node")) Then
								memberName = node("name")
								targetParent = node("targetParent")
								Me.RemoveRelation(si, targetParent, memberName, targetDim)
								Me.RenameMember(si, targetDim, memberName)
							Else If(changeType.XFEqualsIgnoreCase("new-node")) Then
								memberName = node("name")
								sourceParent = node("sourceParent")
								sourceDim = targetDim
								Me.CreateNewMember(si, sourceDim, memberName)
								Me.AddRelation(si, sourceParent, memberName)
							End If
							BRApi.ErrorLog.LogMessage(si,changeType & " is " & memberName)
						Next
						'segment change loop
						For Each seg In item("segmentChange")
							Dim changeType As String = seg("type")
							If(changeType.XFEqualsIgnoreCase("cross-segment")) Then
								BRApi.ErrorLog.LogMessage(si,"cross started")
								memberName = seg("name")
								sourceParent = seg("sourceParent")
								targetParent = seg("targetParent")
								sourceDim = seg("sourceDimension")
								If(sourceDim.XFEqualsIgnoreCase("Sams_US")) Then
									sourceDim = "SAMS"
								Else If(sourceDim.XFEqualsIgnoreCase("Walmart_US")) Then
									sourceDim = "WMTUS"
								End If
								Me.RemoveRelation(si, targetParent, memberName, targetDim)
								Me.RenameMember(si, targetDim, memberName)
								Me.CreateMember(si, sourceDim, memberName)
								Me.AddRelation(si, sourceParent, memberName)
								BRApi.ErrorLog.LogMessage(si,"cross segment change " & memberName)
							End If
							If(changeType.XFEqualsIgnoreCase("same-segment")) Then
								memberName = seg("name")
								sourceParent = seg("sourceParent")
								targetParent = seg("targetParent")
								
								Me.RemoveRelation(si, targetParent, memberName, targetDim)
								Me.AddRelation(si, sourceParent, memberName)
								BRApi.ErrorLog.LogMessage(si,"same segment Change " & memberName)
							End If
							
						Next
						'property change loop
						For Each props In item("propsChange")
							memberName = props("name")
							For Each prop In props("property")
								propertyName = prop("title")
								propertyValue = prop("value")
								Me.propertyChange(si,memberName,propertyName,propertyValue)
								BRApi.ErrorLog.LogMessage(si,i.ToString() & " propertychange" , memberName & "   " & propertyName & "     " & propertyValue)
								i = i + 1
							Next
						Next
					Next
				Next
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		#End Region
		
		#Region "send response"
            Public Sub sendResponse(ByVal si As SessionInfo, j_data As String)
                Try
                    
                    Dim jsontext As String = j_data
                    Dim jsonData As Byte()
                    Dim webResponseData As String = String.Empty
                    Dim webClientRequest As HttpWebRequest = WebRequest.Create("https://metabackend.dev.walmart.com/onestream/updateChangeReportStatus")
                    
                    Dim encoding As New Text.UTF8Encoding
                    jsonData = encoding.GetBytes(jsonText)
                    webClientRequest.ContentLength = jsonData.Length                                                                       
                    
                    webClientRequest.ContentType = "application/json"
                    webClientRequest.Method = "Post"
                    
                    Dim reqStream As IO.Stream = webClientRequest.GetRequestStream()
                    reqStream.Write(jsonData,0,jsonData.Length)
                    reqStream.Close()
                    
                    Dim webClientResponse As HttpWebResponse = webClientRequest.GetResponse()
                    BRApi.ErrorLog.LogMessage(si,"response message",webClientResponse.ToString())
                    If webClientResponse.StatusCode = HttpStatusCode.OK Then
                        Dim respStream As IO.StreamReader = New StreamReader(webClientResponse.GetResponseStream())
                        webResponseData = respStream.ReadToEnd 
                        BRApi.ErrorLog.LogMessage(si,"successful","ok")
                    Else
                        BRApi.ErrorLog.LogMessage(si,"Unsuccessful","failed")
                    End If
                    
                    webClientResponse.Close()    
                Catch ex As Exception
                    Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
                End Try
            End Sub
            #End Region
				
		#Region "Remove node relation"
		Public Sub RemoveRelation(ByVal si As SessionInfo, ByVal targetMbrParent As String,ByVal memberName As String,ByVal targetDim As String)
			Try
				Dim EMemberID As Integer = BRApi.Finance.Members.GetMemberId(si, DimType.Entity.Id, memberName)
				'Dim SourceMbrParent As String  = BRApi.Finance.Members.GetParents(si, BRApi.Finance.Dim.GetDimPk(si, SourceDim), EMemberID, False)(0).Name
				Dim EPMemberID As Integer = BRApi.Finance.Members.GetMemberId(si, DimType.Entity.Id, targetMbrParent)
				Dim vDimPk As DimPk = BRApi.Finance.Dim.GetDimPk(si, targetDim)

				Dim objRelationshipPk As New RelationshipPk(DimType.Entity.Id, EPMemberID, EMemberID)
				Dim LstPk As New List(Of RelationshipPk)
				LstPk.Add(objRelationshipPk)
				Dim objRemoveRelationshipResult As RemoveRelationshipResult = BRApi.Finance.MemberAdmin.RemoveRelationships(si, vDimPk,LstPk, True)
		 		BRApi.ErrorLog.LogMessage(si,"remove done")
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		#End Region
		
		#Region "Rename member"
		Public Sub RenameMember(ByVal si As SessionInfo, ByVal targetDim As String, ByVal memberName As String)
			Try	
				Dim vDimPk As DimPk = BRApi.Finance.Dim.GetDimPk(si, targetDim)
				BRApi.Finance.MemberAdmin.RenameMember(si, vDimPk, memberName, DateTime.UtcNow.ToString("yyyyMMdd_") & memberName)
				BRApi.ErrorLog.LogMessage(si,"rename done")
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		#End Region
		
		#Region "create member"
		Public Sub CreateMember(ByVal si As SessionInfo, ByVal sourceDim As String, ByVal memberName As String) 
			Try
				Dim objMemberPk As New MemberPk(DimType.Entity.Id, DimConstants.Unknown)
				Dim objDim As OneStream.Shared.Wcf.Dim = BRApi.Finance.Dim.GetDim(si,sourceDim)
				'Get decription of Member
				Dim sourceMemberObj = BRApi.Finance.Members.GetMember(si, DimType.Entity.Id, DateTime.UtcNow.ToString("yyyyMMdd_") & memberName)
				Dim objMember As New Member(objMemberPk, memberName, sourceMemberObj.Description, objDim.DimPk.DimId)
				
				Dim sourceMemberInfoObj = BRApi.Finance.Members.GetMemberInfo(si, DimType.Entity.Id, DateTime.UtcNow.ToString("yyyyMMdd_") & memberName, True)
				
				'Create VaryingMemberProperties object
				
				sourceMemberInfoObj.Properties.ClearMemberId()
				sourceMemberInfoObj.Properties.ParentId = DimConstants.Unknown
				Dim objProperties = sourceMemberInfoObj.Properties
				
				'Create new member info object for new member
				Dim objMemberInfo As New MemberInfo(objMember, objProperties, Nothing, objDim, DimConstants.Unknown)
				
				'Save the member and its properties.
				Dim newMember As MemberPK = BRApi.Finance.MemberAdmin.SaveMemberInfo(si, objMemberInfo, True, True, False, -1)
				BRApi.ErrorLog.LogMessage(si,"create done")
				Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		#End Region
		
		#Region "new member"
		Public Sub CreateNewMember(ByVal si As SessionInfo, ByVal sourceDim As String, ByVal memberName As String) 
			Try
				Dim objMemberPk As New MemberPk(DimType.Entity.Id, DimConstants.Unknown)
				Dim objDim As OneStream.Shared.Wcf.Dim = BRApi.Finance.Dim.GetDim(si, sourceDim)
				Dim objMember As New Member(objMemberPk,memberName, "metadata testing node", objDim.DimPk.DimId)
				
				'Create VaryingMemberProperties object
				Dim objProperties As New VaryingMemberProperties(objMemberPk.DimTypeId, objMemberPk.MemberId, DimConstants.Unknown)
'				
				'Create new member info object for new member
				Dim objMemberInfo As New MemberInfo(objMember, objProperties, Nothing, objDim, DimConstants.Unknown)
				Dim newMember As MemberPK = BRApi.Finance.MemberAdmin.SaveMemberInfo(si, objMemberInfo, True, True, False, -1)
				
				Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		#End Region
		
		#Region "Add node relation"
		Public Sub AddRelation(ByVal si As SessionInfo, ByVal sourceMbrParent As String, ByVal memberName As String)
			Try	
				'Add Relationship
				Dim parentMemberID As Integer = BRApi.Finance.Members.GetMemberId(si, DimType.Entity.Id, sourceMbrParent)
				
				Dim EMemberID As Integer = BRApi.Finance.Members.GetMemberId(si, DimType.Entity.Id, memberName)
				Dim childMemberId As Integer = EMemberID
				
				Dim relation As New Relationship 
				relation.RelationshipPk.ChildId = childMemberId
				relation.RelationshipPk.ParentId = parentMemberID
				relation.RelationshipPk.DimTypeId =  DimType.Entity.Id
				relation.UDAggWeight = 1.0
				relation.DimId = BRApi.Finance.Members.GetDimIdFromMemberId(si,  DimType.Entity.Id, parentMemberID)
				Dim relationpos As New RelationshipPositionOptions
				relationpos.MovementType = RelationshipMovementType.InsertAfterSibling
				Dim objProp As New VaryingMemberProperties(DimType.Entity.Id, childMemberId, DimConstants.Unknown)
		
				BRApi.Finance.MemberAdmin.SaveRelationshipInfo(si, True, relation, True, objProp, relationpos)
				BRApi.ErrorLog.LogMessage(si,"add done")
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		#End Region
		
		#Region "PropertyChange"
		Public Sub propertyChange(ByVal si As SessionInfo, ByVal memberName As String, ByVal propertyName As String, ByVal propertyValue As String)
			Try
				Dim member = BRApi.Finance.Members.GetMemberInfo(si, DimType.Entity.Id, memberName,True)
				BRApi.ErrorLog.LogMessage(si,"props done",memberName)
			
				If(propertyName.XFEqualsIgnoreCase("Text1")) Then
					member.GetEntityProperties.Text1.SetStoredValue(ScenarioType.Unknown.Id,DimConstants.Unknown,propertyValue)
				Else If(propertyName.XFEqualsIgnoreCase("Text2")) Then
					member.GetEntityProperties.Text2.SetStoredValue(ScenarioType.Unknown.Id,DimConstants.Unknown,propertyValue)
				Else If(propertyName.XFEqualsIgnoreCase("Text3")) Then
					member.GetEntityProperties.Text3.SetStoredValue(ScenarioType.Unknown.Id,DimConstants.Unknown,propertyValue)
				Else If(propertyName.XFEqualsIgnoreCase("Text4")) Then
					member.GetEntityProperties.Text4.SetStoredValue(ScenarioType.Unknown.Id,DimConstants.Unknown,propertyValue)
				Else If(propertyName.XFEqualsIgnoreCase("Text5")) Then
					member.GetEntityProperties.Text5.SetStoredValue(ScenarioType.Unknown.Id,DimConstants.Unknown,propertyValue)
				Else If(propertyName.XFEqualsIgnoreCase("Text6")) Then
					member.GetEntityProperties.Text6.SetStoredValue(ScenarioType.Unknown.Id,DimConstants.Unknown,propertyValue)
				Else If(propertyName.XFEqualsIgnoreCase("Text7")) Then
					member.GetEntityProperties.Text7.SetStoredValue(ScenarioType.Unknown.Id,DimConstants.Unknown,propertyValue)
				Else If(propertyName.XFEqualsIgnoreCase("Text8")) Then
					member.GetEntityProperties.Text8.SetStoredValue(ScenarioType.Unknown.Id,DimConstants.Unknown,propertyValue)
				Else If(propertyName.XFEqualsIgnoreCase("AllowAdjustments")) Then
					member.GetEntityProperties.AllowAdjustments.SetStoredValue(ScenarioType.Unknown.Id,DimConstants.Unknown,CType(propertyValue,Boolean))
				Else If(propertyName.XFEqualsIgnoreCase("AllowAdjustmentsFromChildren")) Then
					member.GetEntityProperties.AllowAdjustmentsFromChildren.SetStoredValue(ScenarioType.Unknown.Id,DimConstants.Unknown,CType(propertyValue,Boolean))
				End If
				
				Dim newMember As MemberPK = BRApi.Finance.MemberAdmin.SaveMemberInfo(si, member, True, True, False, -1)
			Catch ex As Exception
				
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
				
			End Try	
			
		End Sub
		#End Region
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="INTL_to_ES_App2App_Automation_ES">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.INTL_to_ES_App2App_Automation_ES
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
'************************************************************************************************************
				'**
				'** This is a BR to allow for automating batchjobs for Connector driven workflows.
				'** To use, you need to create a DataManagement Job, and you need to pass the following parameters to it:
				'** 	wfTop = <Top Workflow you want to loop through all descendants of>
				'**		T3Tag = <What is the tag in the Text3 field of the specific import workflow>
				'**		globScen = <which scenario to run for>
				'**		globTime = <which time to run for>
				'**
				'** Example to put in Parameter field of DataManagement Step:
				'**		wfTop = Clubs, T3Tag = AutoLoad, globScen = |GlobalScenario|, globTime = |GlobalTime|, ParallelCountTag = 10 
				'**  ParallelCountTag is optional, not needed. If not used Batch will will be serialized, if used it will run in parallel
				'**
				'************************************************************************************************************
				
			
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.Unknown, ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep

					'Note for testing purpose
					Dim testing As Boolean = False
					
						'Set all the needed variables
						Dim globScen As String = args.NameValuePairs("globScen")
						Dim globTime As String = args.NameValuePairs("globTime")
						Dim systemTime As String = globTime
						Dim fixedScenario As String = globScen
						Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
						Dim bolError As Boolean = False
						Dim wfTop As String = args.NameValuePairs("WfTop")
						Dim T3Tag As String = args.NameValuePairs("T3Tag")
						Dim wfProfileInfo As WorkflowProfileInfo = BRApi.Workflow.Metadata.GetProfile(si, wfTop)
						Dim wfClusterPk As WorkflowUnitClusterPk
						Dim wfClusterPk2 As WorkflowUnitClusterPk
						Dim scenarioMemberID As Integer = BRApi.Finance.Members.GetMemberId(si, dimTypeId.Scenario, fixedScenario)
						Dim scentypeID As Integer = BRApi.Finance.Scenario.GetScenarioType(si,scenarioMemberID).Id
						Dim wfList As New List(Of String)
						Dim ParallelCountTag As String = args.NameValuePairs.XFGetValue("ParallelCountTag","1")
							
						Dim DMJobName As String = args.NameValuePairs.XFGetValue("DMJobName","DMJob Not Specified") 
						Dim SubjectDMJobName As String = args.NameValuePairs.XFGetValue("DMJobName","") 
						
						'Get all the Import WFs under WFTop with the correct T3Tag and add to list
						wfClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, WfTop, fixedScenario, systemTime)
						
						Dim objList As List(Of WorkFlowProfileInfo) = BRApi.Workflow.Metadata.GetRelatives(si, wfClusterPk, WorkflowProfileRelativeTypes.Descendants, WorkflowProfileTypes.InputImportChild)
						
						For Each wfItem As WorkflowProfileInfo In objList
							If wfItem.GetAttributeValue(scentypeID,SharedConstants.WorkflowProfileAttributeIndexes.Text3) = T3Tag Then
								'If WF is locked, do nothing
								wfCLusterPk2 = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, wfItem.Name, fixedScenario, systemTime)						
								
								
								Dim wfStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfClusterPk2)	
								
								If Not wfStatus.Locked Then
									wfList.Add(stringhelper.ReplaceString(wfItem.Name,".",";",True))
								End If
							End If
						Next	
						
						'Loop through the generated list of WFs, and create trigger file
						If wfList.Count > 0 Then
							For Each wfMem As String In WfList
							'Create GL WF Batch Trigger File
								Me.CreateBatchFileTrigger(si,FileShareFolderHelper.GetBatchHarvestFolderForApp(si, True, configSettings.FileShareRootFolder, configSettings.FileShareBatchHarvestRootFolder,si.AppToken.AppName),wfMem.ToString,fixedScenario,systemTime, Testing)
								   				   
					    	Next
						'end Loop WFs
						End If
						
						'Set Processing Switches	
						Dim valTransform As Boolean = True
						Dim valIntersect As Boolean = True

						Dim loadCube As Boolean = True
						
						Dim processCube As Boolean = True
						Dim confirm As Boolean = True
						Dim autoCertify As Boolean = True
									
						
						If Not testing Then
						Dim Batchinfo As WorkflowBatchFileCollection 
''						Execute Batch		
							If ParallelCountTag = "" Or ParallelCountTag = "1" Then
								batchInfo = BRApi.Utilities.ExecuteFileHarvestBatch(si, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, False)
							Else 
	
								Dim ParallelCount As Integer = ParallelCountTag.XFConvertToInt
'						Dim batchInfo As WorkflowBatchFileCollection = BRApi.Utilities.ExecuteFileHarvestBatch(si, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, False)								
								batchInfo = BRApi.Utilities.ExecuteFileHarvestBatchParallel(si, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, ParallelCount)
							End If					
'						
						Dim fileGroupId As Integer = 1

''						'--------- Email Notification --------- 
						
''''						'define the email recipients
''						'the following dashboard parameters are stored in the '99_WMT_Notifications'- Dashboard Maintenance Unity (DMU)
'''''						Dim paramEmailBusiness As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "prm_WMT_EmailNotification_Business") ' to be commented out when not in test
''''		'				Dim paramEmailIT As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "prm_WMT_EmailNotification_IT")  ' to be commented out when not in test
''						Dim paramEmailServer As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "prm_WMT_EmailNotification_Server")
				
''						Dim ParamEmailTest As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "prm_WMT_EmailNotification_Test")
						
''						Dim emailList As New List(Of String)
'''''						emailList.Add(paramEmailBusiness) ' to be commented out when not in test
'''''						emailList.Add(paramEmailIT)  ' to be commented out when not in test
''						emailList.Add(paramEmailTest) ' for testing purpose only, this one can be commented 
						
						
''						'Send the Batch results to the administrator
''						If Not batchInfo Is Nothing Then
''							BRApi.ErrorLog.LogMessage(si, "Not batchInfo Is Nothing")
							
''							'Prepare the batch summary
''							Dim batchSummary As New Text.StringBuilder
''							batchSummary.AppendLine("_____________________________________________________________________________________")
''							batchSummary.AppendLine("")
''							batchSummary.AppendLine("Batch Name:			" & batchInfo.GetBatchName)
''							batchSummary.AppendLine("File Group Name:		" & batchInfo.GetFileGroupName(fileGroupId))
''							batchSummary.AppendLine("All File Count:		" & batchInfo.GetFileCount(fileGroupId, False))
''							batchSummary.AppendLine("Processed File Count:	" & batchInfo.GetFileCount(fileGroupId, True))
''							batchSummary.AppendLine("All Files Completed:	" & batchInfo.AllFilesCompleted(fileGroupId).ToString)
''							batchSummary.AppendLine("All Files Loaded:	" 	  & batchInfo.AllFilesLoaded(fileGroupId).ToString)
''							batchSummary.AppendLine("All Files Can Process:	" & batchInfo.AllFilesCanProcess(fileGroupId).ToString)
''							batchSummary.AppendLine("All Files Processed:	" & batchInfo.AllFilesProcessed(fileGroupId).ToString)
''							batchSummary.AppendLine("_____________________________________________________________________________________")
''							batchSummary.AppendLine("")
''							batchSummary.AppendLine("")

''							'Prepare the batch detail
''							Dim batchDetail As New Text.StringBuilder
''							batchDetail.AppendLine("File Details:")
''							batchDetail.AppendLine("_____________________________________________________________________________________")
							
''							For Each xfBatchFile As WorkflowBatchFileInfo In batchInfo.FileGroups(fileGroupId)

''								Dim subjectDMStartTime = "Data Management Job **** " & SubjectDMJobName & " **** started at " & Batchinfo.TaskActivityItem.StartTimeLocal
''								Dim subjectDMEndTime = "Data Management Job **** " & SubjectDMJobName & " **** finished at " & Batchinfo.TaskActivityItem.EndTimeLocal							
															
''								'create emailbody with starting time of data management job
''								Dim emailStartBody As New text.StringBuilder()						
''								emailStartBody.AppendLine("Start Time Information Automation:")
''								emailStartBody.AppendLine("********************")	
''								emailStartBody.AppendLine("Data Management Job: " & DMJobName)
''								emailStartBody.AppendLine("********************")	
''								emailStartBody.AppendLine($"Time Started: {Batchinfo.TaskActivityItem.StartTimeLocal}")
''								emailStartBody.AppendLine("********************")
								
''								'sent out email with starting time of data management job
''								brapi.Utilities.SendMail(si, paramEmailServer, emailList,  subjectDMStartTime.ToString , emailStartBody.ToString, Nothing)							
							
''								'create emailbody with ending time of data management job
''								Dim emailEndBody As New text.StringBuilder()						
''								emailEndBody.AppendLine("Finish Time Information Automation:")
''								emailEndBody.AppendLine("********************")
''								emailEndBody.AppendLine("Data Management Job: " & DMJobName)
''								emailEndBody.AppendLine("********************")
''								emailEndBody.AppendLine($"Time Finished: {Batchinfo.TaskActivityItem.EndTimeLocal}")
''								emailEndBody.AppendLine("********************")
								
''								'sent out email with ending time of data management job
''								brapi.Utilities.SendMail(si, paramEmailServer, emailList,  subjectDMEndTime.ToString , emailEndBody.ToString, Nothing)							

''								'create emailbody if data management job fails
''								batchDetail.AppendLine(xfBatchFile.FileName & xfBatchFile.FileExtension)
''								batchDetail.AppendLine("------------------------------------------------------------------------------------")
''								batchDetail.AppendLine("Fully Processed: " & xfBatchFile.FileProcessed.ToString)

''								If Not xfBatchFile.FileProcessed Then
''									batchDetail.AppendLine("Failure Information:")
''									batchDetail.AppendLine("********************")
''									batchDetail.AppendLine($"DataManagment Sequence: {xfbatchfile.DataMgmtSequenceName}")
''									batchDetail.AppendLine("********************")
''									batchDetail.AppendLine($"ProcessMessage: {xfBatchFile.ProcessMessage}")
''									batchDetail.AppendLine("********************")
''									batchDetail.AppendLine($"ErrorMessage: {xfBatchFile.ProcessInfo.ErrorMessage}")
''									batchDetail.AppendLine("********************")
''									batchDetail.AppendLine($"LogMessage: {xfBatchFile.ProcessInfo.LogMessage}")
										
''									bolError = True
''								End If
								
''								batchDetail.AppendLine("")
								
''							Next
''							batchDetail.AppendLine("")
''							batchDetail.Append(batchSummary.ToString)
							
							
''							'There is a bug with GetCompleteBatchStatusMessage - Exception is raised (Object reference not set to an instance of an object.) when there is a failure in the batch process (e.g. Cannot execute step because the parent workflow profile has been certified.)
''							'BRApi.ErrorLog.LogMessage(si, "batchInfo.GetCompleteBatchStatusMessage(si, True, True) = " & batchInfo.GetCompleteBatchStatusMessage(si, True, True))
							
''							'Email Batch Results
''							'BRApi.ErrorLog.LogMessage(si, "Batch Status: " & batchDetail.ToString)
'''							
''							If bolError Then
''								'Email errors only to email list
'''								
''								brapi.Utilities.SendMail(si, paramEmailServer, emailList,  batchInfo.GetBatchTitleMessage , batchDetail.ToString, Nothing)							

''								BRAPi.ErrorLog.LogMessage(si, batchDetail.ToString)
''							End If
''						Else
'''							BRAPi.ErrorLog.LogMessage(si, "Batch Execution Failed")
''						End If						
							
						End If
							
				
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
			#Region "General Helpers"
			Private Sub CreateBatchFileTrigger(ByVal si As SessionInfo, ByVal harvestPath As String, ByVal wfName As String, ByVal wfScenario As String, ByVal wfTime As String, ByVal Testing As Boolean)
			
			Dim Path As String = String.Empty

				If Not Testing Then
					
					path = harvestPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-R.txt"
				Else
				Dim testingFolderPath As String = BRApi.FileSystem.GetFileShareFolder(si, Filesharefoldertypes.Batch, Nothing) & "\_Testing"
				If Not Directory.Exists(testingFolderPath) Then directory.CreateDirectory(testingFolderPath) 
					
					path = testingFolderPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-R.txt"
				End If
					
				If Not File.Exists(path) Or Testing = True Then
					' Create a file to write to. 
					Using sw As StreamWriter = File.CreateText(path)
						sw.WriteLine("Batch File Trigger")
					End Using
				End If
			End Sub		

				
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="INTLtoEnS_Actuals_ApptoApp_Automation">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.INTLtoEnS_Actuals_ApptoApp_Automation
	Public Class MainClass
		Dim JobID As String = ""
		Dim JobStatus As String = "Success"	
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				'************************************************************************************************************
				'**
				'** This is a BR to allow for automating batchjobs for Connector driven workflows.
				'** To use, you need to create a DataManagement Job, and you need to pass the following parameters to it:
				'** 	wfTop = <Top Workflow you want to loop through all descendants of>
				'**		globScen = <which scenario to run for>
				'**		globTime = <which time to run for>
				'**
				'** Example to put in Parameter field of DataManagement Step:
				'**		wfTop = Clubs, globScen = |GlobalScenario|, globTime = |GlobalTime|, ParallelCountTag = 10 
				'**  ParallelCountTag is optional, not needed. If not used Batch will will be serialized, if used it will run in parallel
				'**
				'************************************************************************************************************
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown, ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
					'Note for testing purpose
					Dim testing As Boolean = False
					Dim EnSSourcePeriod As String = args.NameValuePairs("ActualPeriod")
					BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, False, "EnS_SourcePeriod_Lit", EnSSourcePeriod)
					
					brapi.ErrorLog.LogMessage(si, "EnSSourcePeriod" & EnSSourcePeriod)
					Dim sourceScenario As String = "Actual"
					Dim globScen As String = args.NameValuePairs("globScen")
					Dim globTime As String = args.NameValuePairs("globTime")
					Dim systemTime As String = $"{globTime}{EnSSourcePeriod}"
'					Dim systemTime As String = "2022M1"
					Dim fixedScenario As String = globScen
					Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
'					Dim intl_si As SessionInfo
					
					Dim App = "INTLHQ"
					Dim newSI = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si, App, Nothing)
					Dim test As Byte()=Nothing
					Dim wfClusterPk3 As WorkflowUnitClusterPk
					
					wfCLusterPk3 = BRApi.Workflow.General.GetWorkflowUnitClusterPk(newSI, "INTLtoES_App2App_StageImport.StageImport", sourceScenario, systemTime)
						
					Dim wfStatus1 As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(newSI, wfClusterPk3)
					
					Try
						Dim objLoadTransformProcessInfo As LoadTransformProcessInfo = BRApi.Import.Process.ClearStageData(newSI, wfClusterPk3, "Data Management Job")
						Catch Ex As Exception
							Return Nothing
					End Try							
						
					Dim dataMgmtSeq As String = "SetParam_Actual"    
                	Dim params As New Dictionary(Of String, String)'								
					'params.Add("WFScenario",args.NameValuePairs.XFGetValue("globScen").ToString)
					'params.Add("WFTime",args.NameValuePairs.XFGetValue("globTime").ToString)	
					params.Add("INTLtoES_Scen_Param",globScen)
					params.Add("INTLtoES_Time_Param",globTime)
					params.Add("INTLtoES_Month_Param",EnSSourcePeriod)
	'				params.Add("INTL2ES_Format_Scen_Param",format_globScen)
                	BRApi.Utilities.ExecuteDataMgmtSequence(newSI, dataMgmtSeq, params)
					BRApi.Workflow.General.SetSelectedWorkflowView(newSI,"INTLtoES_App2App_StageImport.StageImport",globScen,systemTime)
					BRApi.Import.Process.ExecuteParseAndTransform(newSI,wfClusterPk3,"INTL_App2App_ImportToStage_DM_EnS",test,TransformLoadMethodTypes.Replace,SourceDataOriginTypes.FromDataManagement,False)
						
					Dim wfTop As String = args.NameValuePairs("WfTop")
					
						If fixedScenario.contains ("Actual") Then 
							wfTop = "INTL"
						End If
						
					Dim wfProfileInfo As WorkflowProfileInfo = BRApi.Workflow.Metadata.GetProfile(si, wfTop)
					Dim wfClusterPk As WorkflowUnitClusterPk
					Dim wfClusterPk2 As WorkflowUnitClusterPk
					Dim scenarioMemberID As Integer = BRApi.Finance.Members.GetMemberId(si, dimTypeId.Scenario, fixedScenario)
					Dim scentypeID As Integer = BRApi.Finance.Scenario.GetScenarioType(si,scenarioMemberID).Id
					Dim wfList As New List(Of String)
					Dim ParallelCountTag As String = args.NameValuePairs.XFGetValue("ParallelCountTag","1")
					
					'OMD initializations
'					Dim ens_si As SessionInfo = GetOtherAppConnectionString(si)
					Dim jobid As Guid = Guid.NewGuid
'					Dim SubmitJobTAI As TaskActivityItem
'					Dim customSubstVars As New Dictionary(Of String, String)
					
					'Insert Job Details into Table
					Dim param As New Dictionary(Of String, String)
					param.Add("Year", globTime)
					param.Add("Period", EnSSourcePeriod)
					param.Add("import",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("validation",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("transformation",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("loadCube",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("processCube",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("details", "Running")
					Me.addLog(si, param)
					
					'Get all the Import WFs under WFTop with the correct T3Tag and add to list
					wfClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, WfTop, fixedScenario, systemTime)
	
'					Dim objList As List(Of WorkFlowProfileInfo) = BRApi.Workflow.Metadata.GetRelatives(si, wfClusterPk, WorkflowProfileRelativeTypes.Descendants, WorkflowProfileTypes.InputImportChild)

					
					'OMD execution
'					customSubstVars.Add("JobId", jobid.ToString)
'					customSubstVars.Add("Source","ENTERPRISE")
'					customSubstVars.Add("SourceAddInfo","ENT")
'					customSubstVars.Add("SourceScenario","Actual")
'					customSubstVars.Add("Target","INTL")
'					customSubstVars.Add("TargetAddInfo","INTL")
'					customSubstVars.Add("TargetScenario","Actual")
					
					' Create main subtask
'					SubmitJobTAI = BRApi.Utilities.ExecuteDataMgmtSequence(ens_si, "Sqnc_Submit_Job", customSubstVars)
'					Dim dt_mainTask As DataTable
'					Dim mainTaskQuery As String = $"SELECT Top(1) * FROM [OneStream_Framework_QA].[dbo].[TaskActivity] where [UserName] = '{si.UserName}' And Description ='INTL_to_EnS_Actuals_App2App_Automation' Order by [StartTime] Desc"
'					Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'						dt_mainTask = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, mainTaskQuery, True)
'					End Using
'					CreateSubTask(si, ens_si, jobid.ToString, dt_mainTask(0)("UniqueID").ToString, "Sqnc_Submit_SubTask","Yes")
					
'					For Each wfItem As WorkflowProfileInfo In objList
						'If WF is locked, do nothing
							wfCLusterPk2 = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, "INTL.Import_from_INTL", fixedScenario, systemTime)		
							Dim wfStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfClusterPk2)	
							If Not wfStatus.Locked Then
								wfList.Add(stringhelper.ReplaceString("INTL.Import_from_INTL",".",";",True))
							End If
							'Clear Stage Data
							Try
							Dim objLoadTransformProcessInfo As LoadTransformProcessInfo = BRApi.Import.Process.ClearStageData(si, wfClusterPk2, "INTL FDX Stage Query for EntSeg")
							
							Catch Ex As Exception
							'Update Job Details into Table
										param = New Dictionary(Of String, String)
										param.Add("import", Me.getImage("HasError"))
										param.Add("validation", Me.getImage("Nothing"))
										param.Add("transformation", Me.getImage("Nothing"))
										param.Add("loadCube", Me.getImage("Nothing"))
										param.Add("processCube", Me.getImage("Nothing"))
										param.Add("details", "Failed")
										Me.updateLog(si, param)										
								Return Nothing
							End Try							
						brapi.ErrorLog.LogMessage(si,  "Clear Stage Completed ")
						
'					Next
					
					'Loop through the generated list of WFs, and create trigger file
					If wfList.Count > 0 Then
						For Each wfMem As String In WfList
						'Create GL WF Batch Trigger File
							Me.CreateBatchFileTrigger(si,FileShareFolderHelper.GetBatchHarvestFolderForApp(si, True, configSettings.FileShareRootFolder, configSettings.FileShareBatchHarvestRootFolder,si.AppToken.AppName),wfMem.ToString,fixedScenario,systemTime, Testing)
				    	Next					
					End If
					
					'Set Processing Switches	
					Dim valTransform As Boolean = True
					Dim valIntersect As Boolean = True
					Dim loadCube As Boolean = True
					Dim processCube As Boolean = True
					Dim confirm As Boolean = False
					Dim autoCertify As Boolean = False
					
					If Not testing Then
						Dim Batchinfo As WorkflowBatchFileCollection 
''						Execute Batch		
						If ParallelCountTag = "" Or ParallelCountTag = "1" Then
							batchInfo = BRApi.Utilities.ExecuteFileHarvestBatch(si, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, False)
						Else 
							Dim ParallelCount As Integer = ParallelCountTag.XFConvertToInt
							batchInfo = BRApi.Utilities.ExecuteFileHarvestBatchParallel(si, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, ParallelCount)
						End If
						
						If Not batchInfo Is Nothing Then					
							For Each kvp As keyValuePair(Of Integer, List(Of WorkflowBatchFileInfo)) In batchInfo.FileGroups							
								For Each wfBatchInfo As WorkflowBatchFileInfo In kvp.Value
									Dim importStatus As String = "N/A"
									Dim transformationStatus As String = "N/A"
									Dim intersectionStatus As String = "N/A"
									Dim loadStatus As String = "N/A"
									Dim processCubeStatus As String = "N/A"
									Dim fullFilePathName As String = "N/A"
									
									Dim updatedWorkflowUnitPksCount As Integer = 0
									If wfBatchInfo.ProcessInfo.UpdatedWorkflowUnitPks.Count = 0 Then
										'Update Job Details into Table
										param = New Dictionary(Of String, String)
										param.Add("import", Me.getImage("HasError"))
										param.Add("validation", Me.getImage("Nothing"))
										param.Add("transformation", Me.getImage("Nothing"))
										param.Add("loadCube", Me.getImage("Nothing"))
										param.Add("processCube", Me.getImage("Nothing"))
										param.Add("details", Me.JobStatus)
										Me.updateLog(si, param)
									End If
									
									For Each batchWFUnitPk As WorkflowUnitPk In wfBatchInfo.ProcessInfo.UpdatedWorkflowUnitPks
										
										updatedWorkflowUnitPksCount += 1
										
										Dim wfName As String = BRApi.Workflow.Metadata.GetProfile(si, batchWFUnitPk.ProfileKey).Name									
										Dim wfInfoStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, batchWfUnitPk)

										importStatus =  wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateTransform).ToString
										transformationStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateTransform).ToString
										intersectionStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateIntersection).ToString
										loadStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.LoadCube).ToString
										processCubeStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ProcessCube).ToString
										
										If Not wfBatchInfo.FileProcessed Then
											Me.JobStatus = "Fail"											
										Else
											Me.JobStatus = "Success"											
										End If
										
										'Update Job Details into Table
										param = New Dictionary(Of String, String)
										param.Add("import", Me.getImage(importStatus))
										param.Add("validation", Me.getImage(intersectionStatus))
										param.Add("transformation", Me.getImage(transformationStatus))
										param.Add("loadCube", Me.getImage(loadStatus))
										param.Add("processCube", Me.getImage(processCubeStatus))
										param.Add("details", Me.JobStatus & $"")
										
										'Create sub tasks
'										checkSubTaskStatus(si, ens_si, jobid.ToString, 2000, importStatus)
'										checkSubTaskStatus(si, ens_si, jobid.ToString, 5000, intersectionStatus)
'										checkSubTaskStatus(si, ens_si, jobid.ToString, 6000, transformationStatus)
'										checkSubTaskStatus(si, ens_si, jobid.ToString, 7000, loadStatus)
'										checkSubTaskStatus(si, ens_si, jobid.ToString, 8000, processCubeStatus)
										
'										Dim validation_params As New Dictionary(Of String, String)		
'										validation_params.Add("JobId", jobid.ToString)
'										validation_params.Add("EntityList", "International_Incl_Div")
'										validation_params.Add("JsonFile","ens_INTL_actuals.json")
'										validation_params.Add("Year",globTime)
'										validation_params.Add("Month",EnSSourcePeriod)
										
'										Dim TaskActivityItem_validation As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(ens_si, "Sqnc_run_validation", validation_params)
'										CreateSubTask(si,ens_si,jobid.ToString,TaskActivityItem_validation.UniqueID.ToString,"Sqnc_Submit_SubTask",String.Empty)
										Me.updateLog(si, param)
									Next
								Next
							Next
						Else
							brapi.ErrorLog.LogMessage(si, "batch Info Empty ")
						End If
					End If
					
				End Select
				
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
#Region "General Helpers"
		Private Sub CreateBatchFileTrigger(ByVal si As SessionInfo, ByVal harvestPath As String, ByVal wfName As String, ByVal wfScenario As String, ByVal wfTime As String, ByVal Testing As Boolean)
		
		Dim Path As String = String.Empty
		
		If Not Testing Then
				Dim harvestFolderPath As String = BRApi.FileSystem.GetFileShareFolder(si, Filesharefoldertypes.Batch, Nothing) & "\Harvest"
'					path = harvestPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-R.txt"
				path = harvestFolderPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-RB.txt"
			Else
			Dim testingFolderPath As String = BRApi.FileSystem.GetFileShareFolder(si, Filesharefoldertypes.Batch, Nothing) & "\_Testing"
			If Not Directory.Exists(testingFolderPath) Then directory.CreateDirectory(testingFolderPath) 
				
				path = testingFolderPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-RB.txt"
			End If
				
			If Not File.Exists(path) Or Testing = True Then
				' Create a file to write to. 
				Using sw As StreamWriter = File.CreateText(path)
					sw.WriteLine("Batch File Trigger")
				End Using
			End If
		End Sub	
		
#End Region

'Private Function GetOtherAppConnectionString(ByVal si As SessionInfo) As Object
'	Try	
'		Dim appUniqueID As Guid = ConvertHelper.ToGuid("2d91c49e-2f2c-47a4-a061-19c39a9a957d")
'		Dim varAppToken As New ApplicationToken(si.AppToken.SHA1HashCode, "Enterprise", appUniqueID)
'		Dim newSeshInfoOtherApp As New SessionInfo(ClientModuleType.Silverlight, si.WebServerUrlUsedByClient, si.AuthToken, varAppToken, si.Culture)
			
'		Return newSeshInfoOtherApp

'	Catch ex As Exception
'		Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'	End Try
'End Function

'Private Sub checkSubTaskStatus(ByVal si As SessionInfo, ByVal ens_si As SessionInfo, ByVal jobid As String, ByVal status_code As Integer, ByVal status As String)
'	If status.XFEqualsIgnoreCase("Completed") Then
'		subTaskHelper(si, ens_si, jobid , status_code)
'	End If	
'End Sub

'Private Sub subTaskHelper(ByVal si As SessionInfo, ByVal ens_si As SessionInfo, ByVal jobid As String, ByVal status_code As Integer)
'	Try
'		Dim sqlQuery As String = $"SELECT Top(1) * FROM [OneStream_Framework_QA].[dbo].[TaskActivity] where [UserName] = '{si.UserName}' And TaskActivityType = '{status_code}' Order by [StartTime] Desc"
'		Dim dt_taskActivity As DataTable
'		Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'			dt_taskActivity = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, sqlQuery, True)
'		End Using
'		CreateSubTask(si, ens_si, jobid.ToString, dt_taskActivity(0)("UniqueID").ToString, "Sqnc_Submit_SubTask", String.Empty)
	
'	Catch ex As Exception
'		Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'	End Try	
'End Sub

'Private Sub CreateSubTask(ByVal si As SessionInfo, ByVal ens_si As SessionInfo, ByVal taskid As String, ByVal subtaskid As String, ByVal sequenceName_subtask As String, ByVal status As String)
'	Try
'		Dim subtask_dict As New Dictionary(Of String, String)
'		subtask_dict.Add("JobId", taskid)
'		subtask_dict.Add("SubTaskId", subtaskid)
'		subtask_dict.Add("Status", status)
'		BRApi.Utilities.ExecuteDataMgmtSequence(ens_si, sequenceName_subtask, subtask_dict)
'	Catch ex As Exception
'		Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'	End Try	
'End Sub

Private Sub processlog(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal logmessage As String)
	Try
		globals.GetObject("WFPtoENS_PROCESS_LOG").AppendLine(Environment.NewLine & "[" & DateTime.Now.ToString & "] - " & logmessage)
		
	Catch ex As Exception
		Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
	End Try	
End Sub	

Public Sub addLog(ByRef si As SessionInfo, ByRef data As Dictionary(Of String, String))
			Dim query As New Text.StringBuilder
			
			query.Append( $"INSERT INTO [XFT_App2App_Actuals_Status_Log] ([Process],[Year], [Period], [Start_Time], [ExecutedBy], [Triggered_From], [Import], [Transformation], [Validation], [Load_Cube], [Process_Cube], [Details], [End_Time]) VALUES ( ")
'			query.Append($"'{data.item("Process")}','{data.item("systemTime")}','{data.item("Period")}', GETDATE(), '{si.userName}', '{si.AppName}', '{data.item("import")}', '{data.item("transformation")}', '{data.item("validation")}', '{data.item("loadCube")}', '{data.item("processCube")}', '{data.item("details")}', NULL ) ")
			query.Append($" 'MEC Actuals Pull','{data.item("Year")}','{data.item("Period")}', GETDATE(), '{si.userName}', '{si.AppName}', '{data.item("import")}', '{data.item("transformation")}', '{data.item("validation")}', '{data.item("loadCube")}', '{data.item("processCube")}', '{data.item("details")}', NULL ) ")
			brapi.ErrorLog.LogMessage(si, "InsertLog", query.ToString)
			
			Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				BRAPi.Database.ExecuteSql(dbConnApp, query.ToString, True)	
				Me.jobID = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, "SELECT SCOPE_IDENTITY() as [SCOPE_IDENTITY]", True)(0)(0)
			End Using
End Sub

Public Sub updateLog(ByRef si As SessionInfo, ByRef data As Dictionary(Of String, String))
			Dim query As New Text.StringBuilder
			query.Append($"UPDATE [dbo].[XFT_App2App_Actuals_Status_Log] SET [Import] = '{data.Item("import")}' , [Transformation] = '{data.Item("transformation")}', ")
			query.Append($" [Validation] = '{data.Item("validation")}', [Load_Cube] = '{data.Item("loadCube")}', [Process_Cube] = '{data.Item("processCube")}', [Details] = '{data.Item("details")}', [End_Time] = CURRENT_TIMESTAMP")
			query.Append($" where [job_ID] = {Me.JobID}")
			
			brapi.ErrorLog.LogMessage(si, "uploadLog", query.ToString)
			
			Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				BRAPi.Database.ExecuteSql(dbConnApp, query.ToString, True)	
			End Using
End Sub

Public Function	getImage(ByVal status As String) As String
			If status.XFEqualsIgnoreCase("Completed") Then
				Return XFClientImageTypes.StatusGreenBall.Name
			Else If status.XFEqualsIgnoreCase("HasError") Then
				Me.JobStatus = "Failed" 
				Return XFClientImageTypes.StatusRedBall.Name
			Else If status.XFEqualsIgnoreCase("NotExecuted") Then
				Me.JobStatus = "Failed" 
				Return XFClientImageTypes.StatusOrangeBall.Name
				'Return XFClientImageTypes.StatusWhiteBall.Name
			Else 
				Me.JobStatus = "Failed" 
				Return XFClientImageTypes.StatusOrangeBall.Name
			End If
End Function

	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="INTLtoEnS_Corp_Fcst_ApptoApp_Automation">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.INTLtoEnS_Corp_Fcst_ApptoApp_Automation
	Public Class MainClass
		Dim JobID As String = ""
		Dim JobStatus As String = "Success"	
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown,ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
					Dim testing As Boolean = False
					
					Dim globScen As String = args.NameValuePairs("globScen")
'					Dim globScen As String = args.NameValuePairs.XFGetValue("globScen").ToString
'					Dim format_globScen As String = "S#"&globScen
					Dim globTime As String = args.NameValuePairs("globTime")
					Dim systemTime As String = globTime
					Dim fixedScenario As String = globScen					
					Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
					
				Dim sourceAppName As String = "INTLHQ"
				Dim newSI As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si, sourceAppName, openAppResult.Success)						
			
				Dim wfCLusterPk3 As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(newSI, "INTLtoES_App2App_StageImport.StageImport", globScen, globTime)
				Try
					Dim objLoadTransformProcessInfo As LoadTransformProcessInfo = BRApi.Import.Process.ClearStageData(newSI, wfClusterPk3, "Data Management Job")
				Catch Ex As Exception
					Return Nothing
				End Try				
				Dim dataMgmtSeq As String = "SetParam_Fcst_Plan"    
                Dim params As New Dictionary(Of String, String)'								
				'params.Add("WFScenario",args.NameValuePairs.XFGetValue("globScen").ToString)
				'params.Add("WFTime",args.NameValuePairs.XFGetValue("globTime").ToString)	
				params.Add("INTLtoES_Scen_Param",globScen)
				params.Add("INTLtoES_Time_Param",globTime)
'				params.Add("INTL2ES_Format_Scen_Param",format_globScen)
                BRApi.Utilities.ExecuteDataMgmtSequence(newSI, dataMgmtSeq, params)
				Dim test As Byte()=Nothing

				Try
								
							BRApi.Workflow.General.SetSelectedWorkflowView(newSI,"INTLtoES_App2App_StageImport",fixedScenario,globTime)

							BRApi.Import.Process.ExecuteParseAndTransform(newSI,wfClusterPk3,"INTL_App2App_ImportToStage_DM_EnS",test,TransformLoadMethodTypes.Replace,SourceDataOriginTypes.FromDataManagement,False)
							'brapi.Import.Process.
							Catch Ex As Exception
							Return Nothing
							End Try
				
						
					Dim wfTop As String = args.NameValuePairs("wfTop")
					
					If fixedScenario.contains ("CorpFcst") Then
						 	wfTop = "INTL"
					End If
					
					Dim wfProfileInfo As WorkflowProfileInfo = BRApi.Workflow.Metadata.GetProfile(si, wfTop)
					Dim wfClusterPk As WorkflowUnitClusterPk
					Dim wfClusterPk2 As WorkflowUnitClusterPk
					Dim scenarioMemberID As Integer = BRApi.Finance.Members.GetMemberId(si, dimTypeId.Scenario, fixedScenario)
					Dim scentypeID As Integer = BRApi.Finance.Scenario.GetScenarioType(si,scenarioMemberID).Id
					Dim wfList As New List(Of String)
					Dim ParallelCountTag As String = args.NameValuePairs.XFGetValue("ParallelCountTag","1")
					
					'OMD initializations
'					Dim ens_si As SessionInfo = GetOtherAppConnectionString(si)
					Dim jobid As Guid = Guid.NewGuid
'					Dim SubmitJobTAI As TaskActivityItem
'					Dim customSubstVars As New Dictionary(Of String, String)
					
					'Insert Job Details into Table
					Dim param As New Dictionary(Of String, String)
					param.Add("sourceScenario", globScen)
					param.Add("targetScenario", globScen)
					param.Add("sourceYear", globTime)
					param.Add("systemTime", globTime)
					param.Add("import",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("validation",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("transformation",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("loadCube",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("processCube",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("details", "Running")
					Me.addLog(si, param)
					
					'Get all the Import WFs under WFTop and add to list
					wfClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, wfTop, fixedScenario, systemTime)
														
					'OMD execution
'					customSubstVars.Add("JobId", jobid.ToString)
'					customSubstVars.Add("Description","ENTERPRISE:ENT->INTL:INTL")
'					customSubstVars.Add("Source","ENTERPRISE")
'					customSubstVars.Add("SourceAddInfo","ENT")
'					customSubstVars.Add("SourceScenario","Forecast")
'					customSubstVars.Add("Target","INTL")
'					customSubstVars.Add("TargetAddInfo","INTL")
'					customSubstVars.Add("TargetScenario","Forecast")
					
					' Create main subtask
'					SubmitJobTAI = BRApi.Utilities.ExecuteDataMgmtSequence(ens_si, "Sqnc_Submit_Job", customSubstVars)
'					Dim dt_mainTask As DataTable
'					Dim mainTaskQuery As String = $"SELECT Top(1) * FROM [OneStream_Framework_QA].[dbo].[TaskActivity] where [UserName] = '{si.UserName}' And Description ='INTL_to_EnS_Corp Wkly Fcst Push' Order by [StartTime] Desc"
'					Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'						dt_mainTask = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, mainTaskQuery, True)
'					End Using
'					CreateSubTask(si, ens_si, jobid.ToString, dt_mainTask(0)("UniqueID").ToString, "Sqnc_Submit_SubTask","Yes")
							
					'If WF is locked, do nothing
					wfCLusterPk2 = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, "INTL.Import_from_INTL", fixedScenario, systemTime)		
					Dim wfStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfClusterPk2)	
					If Not wfStatus.Locked Then
						wfList.Add(stringhelper.ReplaceString("INTL.Import_from_INTL",".",";",True))
					End If
					'Clear Stage Data
					Try
						Dim objLoadTransformProcessInfo As LoadTransformProcessInfo = BRApi.Import.Process.ClearStageData(si, wfClusterPk2, "INTL FDX Stage Query for EntSeg")	
						Catch Ex As Exception
							'Update Job Details into Table
								param = New Dictionary(Of String, String)
								param.Add("import", Me.getImage("HasError"))
								param.Add("validation", Me.getImage("Nothing"))
								param.Add("transformation", Me.getImage("Nothing"))
								param.Add("loadCube", Me.getImage("Nothing"))
								param.Add("processCube", Me.getImage("Nothing"))
								param.Add("details", "Failed")
								Me.updateLog(si, param)
								Return Nothing
					End Try	
					brapi.ErrorLog.LogMessage(si,  "Clear Stage Completed ")
					
					'Loop through the generated list of WFs, and create trigger file
					If wfList.Count > 0 Then
						For Each wfMem As String In WfList
						'Create GL WF Batch Trigger File
							Me.CreateBatchFileTrigger(si,FileShareFolderHelper.GetBatchHarvestFolderForApp(si, True, configSettings.FileShareRootFolder, configSettings.FileShareBatchHarvestRootFolder,si.AppToken.AppName),wfMem.ToString,fixedScenario,systemTime, Testing)
				    	Next
					'end Loop WFs
					End If
					
					'Set Processing Switches	
					Dim valTransform As Boolean = True
					Dim valIntersect As Boolean = True

					Dim loadCube As Boolean = True
					
					Dim processCube As Boolean = True
					Dim confirm As Boolean = False
					Dim autoCertify As Boolean = False
								
					
					If Not testing Then
						Dim Batchinfo As WorkflowBatchFileCollection 
'						Execute Batch		
						If ParallelCountTag = "" Or ParallelCountTag = "1" Then
							batchInfo = BRApi.Utilities.ExecuteFileHarvestBatch(si, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, False)
						Else 
							Dim ParallelCount As Integer = ParallelCountTag.XFConvertToInt
							batchInfo = BRApi.Utilities.ExecuteFileHarvestBatchParallel(si, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, ParallelCount)
						End If
						
						If Not batchInfo Is Nothing Then					
							For Each kvp As keyValuePair(Of Integer, List(Of WorkflowBatchFileInfo)) In batchInfo.FileGroups							
								For Each wfBatchInfo As WorkflowBatchFileInfo In kvp.Value
									Dim importStatus As String = "N/A"
									Dim transformationStatus As String = "N/A"
									Dim intersectionStatus As String = "N/A"
									Dim loadStatus As String = "N/A"
									Dim processCubeStatus As String = "N/A"
									Dim fullFilePathName As String = "N/A"
									
									Dim updatedWorkflowUnitPksCount As Integer = 0
									If wfBatchInfo.ProcessInfo.UpdatedWorkflowUnitPks.Count = 0 Then
										'Update Job Details into Table
										param = New Dictionary(Of String, String)
										param.Add("import", Me.getImage("HasError"))
										param.Add("validation", Me.getImage("Nothing"))
										param.Add("transformation", Me.getImage("Nothing"))
										param.Add("loadCube", Me.getImage("Nothing"))
										param.Add("processCube", Me.getImage("Nothing"))
										param.Add("details", Me.JobStatus)
										Me.updateLog(si, param)
									End If
									
									For Each batchWFUnitPk As WorkflowUnitPk In wfBatchInfo.ProcessInfo.UpdatedWorkflowUnitPks
										
										updatedWorkflowUnitPksCount += 1
										
										Dim wfName As String = BRApi.Workflow.Metadata.GetProfile(si, batchWFUnitPk.ProfileKey).Name									
										Dim wfInfoStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, batchWfUnitPk)

										importStatus =  wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateTransform).ToString
										transformationStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateTransform).ToString
										intersectionStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateIntersection).ToString
										loadStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.LoadCube).ToString
										processCubeStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ProcessCube).ToString
																				
										If Not wfBatchInfo.FileProcessed Then
											Me.JobStatus = "Fail"											
										Else
											Me.JobStatus = "Success"											
										End If
										
										'Update Job Details into Table
										param = New Dictionary(Of String, String)
										param.Add("import", Me.getImage(importStatus))
										param.Add("validation", Me.getImage(intersectionStatus))
										param.Add("transformation", Me.getImage(transformationStatus))
										param.Add("loadCube", Me.getImage(loadStatus))
										param.Add("processCube", Me.getImage(processCubeStatus))
										param.Add("details", Me.JobStatus & $"")
										
'										checkSubTaskStatus(si, ens_si, jobid.ToString, 2000, importStatus)
'										checkSubTaskStatus(si, ens_si, jobid.ToString, 5000, intersectionStatus)
'										checkSubTaskStatus(si, ens_si, jobid.ToString, 6000, transformationStatus)
'										checkSubTaskStatus(si, ens_si, jobid.ToString, 7000, loadStatus)
'										checkSubTaskStatus(si, ens_si, jobid.ToString, 8000, processCubeStatus)
																							
'										Dim validation_params As New Dictionary(Of String, String)		
'										validation_params.Add("JobId", jobid.ToString)
'										validation_params.Add("EntityList", "International_Incl_Div")
'										validation_params.Add("JsonFile","ens_INTL_corp_fcst.json")
'										validation_params.Add("Year",globTime)
										
'										Dim TaskActivityItem_validation As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(ens_si, "Sqnc_run_validation", validation_params)
'										CreateSubTask(si,ens_si,jobid.ToString,TaskActivityItem_validation.UniqueID.ToString,"Sqnc_Submit_SubTask",String.Empty)
										
										Me.updateLog(si, param)
									Next
								Next
							Next
						Else
							brapi.ErrorLog.LogMessage(si, "batch Info Empty ")
						End If
					End If
				End Select
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
	#Region "General Helpers"
		Private Sub CreateBatchFileTrigger(ByVal si As SessionInfo, ByVal harvestPath As String, ByVal wfName As String, ByVal wfScenario As String, ByVal wfTime As String, ByVal Testing As Boolean)
		Dim Path As String = String.Empty

			If Not Testing Then
				Dim harvestFolderPath As String = BRApi.FileSystem.GetFileShareFolder(si, Filesharefoldertypes.Batch, Nothing) & "\Harvest"
				path = harvestFolderPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-RB.txt"
			Else
				Dim testingFolderPath As String = BRApi.FileSystem.GetFileShareFolder(si, Filesharefoldertypes.Batch, Nothing) & "\_Testing"
				If Not Directory.Exists(testingFolderPath) Then directory.CreateDirectory(testingFolderPath) 
					path = testingFolderPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-RB.txt"
				End If
				
			If Not File.Exists(path) Or Testing = True Then
				' Create a file to write to. 
				Using sw As StreamWriter = File.CreateText(path)
					sw.WriteLine("Batch File Trigger")
				End Using
			End If
		End Sub
	#End Region
	
'	Private Function GetOtherAppConnectionString(ByVal si As SessionInfo) As Object
'			Try	
'				Dim appUniqueID As Guid = ConvertHelper.ToGuid("2d91c49e-2f2c-47a4-a061-19c39a9a957d")
'				Dim varAppToken As New ApplicationToken(si.AppToken.SHA1HashCode, "Enterprise", appUniqueID)
'				Dim newSeshInfoOtherApp As New SessionInfo(ClientModuleType.Silverlight, si.WebServerUrlUsedByClient, si.AuthToken, varAppToken, si.Culture)
					
'				Return newSeshInfoOtherApp

'			Catch ex As Exception
'				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'			End Try
'	End Function
	
'	Private Sub checkSubTaskStatus(ByVal si As SessionInfo, ByVal ens_si As SessionInfo, ByVal jobid As String, ByVal status_code As Integer, ByVal status As String)
'			If status.XFEqualsIgnoreCase("Completed") Then
'				subTaskHelper(si, ens_si, jobid , status_code)
'			End If	
'	End Sub
	
'	Private Sub subTaskHelper(ByVal si As SessionInfo, ByVal ens_si As SessionInfo, ByVal jobid As String, ByVal status_code As Integer)
'			Try
'				Dim sqlQuery As String = $"SELECT Top(1) * FROM [OneStream_Framework_QA].[dbo].[TaskActivity] where [UserName] = '{si.UserName}' And TaskActivityType = '{status_code}' Order by [StartTime] Desc"
'				Dim dt_taskActivity As DataTable
'				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'					dt_taskActivity = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, sqlQuery, True)
'				End Using
'				CreateSubTask(si, ens_si, jobid.ToString, dt_taskActivity(0)("UniqueID").ToString, "Sqnc_Submit_SubTask", String.Empty)
			
'			Catch ex As Exception
'				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'			End Try	
'	End Sub
	
'	Private Sub CreateSubTask(ByVal si As SessionInfo, ByVal ens_si As SessionInfo, ByVal taskid As String, ByVal subtaskid As String, ByVal sequenceName_subtask As String, ByVal status As String)
'			Try
'				Dim subtask_dict As New Dictionary(Of String, String)
'				subtask_dict.Add("JobId", taskid)
'				subtask_dict.Add("SubTaskId", subtaskid)
'				subtask_dict.Add("Status", status)
'				BRApi.Utilities.ExecuteDataMgmtSequence(ens_si, sequenceName_subtask, subtask_dict)
'			Catch ex As Exception
'				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'			End Try	
'	End Sub
	
	Private Sub processlog(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal logmessage As String)
			Try
				globals.GetObject("WFPtoENS_PROCESS_LOG").AppendLine(Environment.NewLine & "[" & DateTime.Now.ToString & "] - " & logmessage)
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	

	End Sub
	
	Public Sub addLog(ByRef si As SessionInfo, ByRef data As Dictionary(Of String, String))
			Dim query As New Text.StringBuilder
			
			query.Append( $"INSERT INTO [XFT_App2App_Status_Log_Forecast] ([Source_Scenario],[Target_Scenario], [Source_Year], [Target_Year], [Start_Time], [Executed_By], [Triggered_From], [Import], [Transformation], [Validation], [Load_Cube], [Process_Cube], [Details], [End_Time]) VALUES ( ")
			query.Append($"'{data.item("sourceScenario")}', '{data.item("targetScenario")}', '{data.item("sourceYear")}', '{data.item("systemTime")}', GETDATE(), '{si.userName}', '{si.AppName}', '{data.item("import")}', '{data.item("transformation")}', '{data.item("validation")}', '{data.item("loadCube")}', '{data.item("processCube")}', '{data.item("details")}', NULL ) ")
						
			brapi.ErrorLog.LogMessage(si, "InsertLog", query.ToString)
			
			Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				BRAPi.Database.ExecuteSql(dbConnApp, query.ToString, True)
				Me.jobID = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, "SELECT SCOPE_IDENTITY() as [SCOPE_IDENTITY]", True)(0)(0)
			End Using
	End Sub	
	
	Public Sub updateLog(ByRef si As SessionInfo, ByRef data As Dictionary(Of String, String))
			Dim query As New Text.StringBuilder
			query.Append($"UPDATE [dbo].[XFT_App2App_Status_Log_Forecast] SET [Import] = '{data.Item("import")}' , [Transformation] = '{data.Item("transformation")}', ")
			query.Append($" [Validation] = '{data.Item("validation")}', [Load_Cube] = '{data.Item("loadCube")}', [Process_Cube] = '{data.Item("processCube")}', [Details] = '{data.Item("details")}', [End_Time] = CURRENT_TIMESTAMP")
			query.Append($" where [job_ID] = {Me.JobID}")
			
			brapi.ErrorLog.LogMessage(si, "uploadLog", query.ToString)
			
			Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				BRAPi.Database.ExecuteSql(dbConnApp, query.ToString, True)	
			End Using
	End Sub
	
	Public Function	getImage(ByVal status As String) As String
			If status.XFEqualsIgnoreCase("Completed") Then
				Return XFClientImageTypes.StatusGreenBall.Name
			Else If status.XFEqualsIgnoreCase("HasError") Then
				Me.JobStatus = "Failed" 
				Return XFClientImageTypes.StatusRedBall.Name
			Else If status.XFEqualsIgnoreCase("NotExecuted") Then
				Me.JobStatus = "Failed" 
				Return XFClientImageTypes.StatusOrangeBall.Name				
			Else 
				Me.JobStatus = "Failed" 
				Return XFClientImageTypes.StatusOrangeBall.Name
			End If
	End Function

	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="INTLtoEnS_Plan_ApptoApp_Automation">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.INTLtoEnS_Plan_ApptoApp_Automation
	Public Class MainClass
		Dim JobID As String = ""
		Dim JobStatus As String = "Success"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				'************************************************************************************************************
				'**
				'** This is a BR to allow for automating batchjobs for Connector driven workflows.
				'** To use, you need to create a DataManagement Job, and you need to pass the following parameters to it:
				'** 	wfTop = <Top Workflow you want to loop through all descendants of>
				'**		globScen = <which scenario to run for>
				'**		globTime = <which time to run for>
				'**
				'** Example to put in Parameter field of DataManagement Step:
				'**		wfTop = Clubs, globScen = |GlobalScenario|, globTime = |GlobalTime|, ParallelCountTag = 10 
				'**  ParallelCountTag is optional, not needed. If not used Batch will will be serialized, if used it will run in parallel
				'**
				'************************************************************************************************************

				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown, ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
					Dim testing As Boolean = False
					
					Dim globScen As String = args.NameValuePairs("globScen")
					Dim globTime As String = args.NameValuePairs("globTime")
					Dim systemTime As String = globTime
					Dim fixedScenario As String = globScen
					Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
										
					Dim App = "INTLHQ"
					Dim newSI = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si, App, Nothing)
					Dim test As Byte()=Nothing
					Dim wfClusterPk3 As WorkflowUnitClusterPk
					
					wfCLusterPk3 = BRApi.Workflow.General.GetWorkflowUnitClusterPk(newSI, "INTLtoES_App2App_StageImport.StageImport", fixedScenario, systemTime)
						
					Dim wfStatus1 As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(newSI, wfClusterPk3)	
					Try
						Dim objLoadTransformProcessInfo As LoadTransformProcessInfo = BRApi.Import.Process.ClearStageData(newSI, wfClusterPk3, "Data Management Job")
						Catch Ex As Exception
							Return Nothing
					End Try	
					Dim dataMgmtSeq As String = "SetParam_Fcst_Plan"    
                Dim params As New Dictionary(Of String, String)'								
				'params.Add("WFScenario",args.NameValuePairs.XFGetValue("globScen").ToString)
				'params.Add("WFTime",args.NameValuePairs.XFGetValue("globTime").ToString)	
				params.Add("INTLtoES_Scen_Param",globScen)
				params.Add("INTLtoES_Time_Param",globTime)
'				params.Add("INTL2ES_Format_Scen_Param",format_globScen)
                BRApi.Utilities.ExecuteDataMgmtSequence(newSI, dataMgmtSeq, params)
						
						BRApi.Workflow.General.SetSelectedWorkflowView(newSI,"INTLtoES_App2App_StageImport.StageImport",globScen,globTime)
						BRApi.Import.Process.ExecuteParseAndTransform(newSI,wfClusterPk3,"INTL_App2App_ImportToStage_DM_EnS",test,TransformLoadMethodTypes.Replace,SourceDataOriginTypes.FromDataManagement,False)
						
					Dim wfTop As String = args.NameValuePairs("wfTop")
					
					If fixedScenario.contains ("Plan") Then
						 	wfTop = "INTL"
					End If
						
					Dim wfProfileInfo As WorkflowProfileInfo = BRApi.Workflow.Metadata.GetProfile(si, wfTop)
					Dim wfClusterPk As WorkflowUnitClusterPk
					Dim wfClusterPk2 As WorkflowUnitClusterPk
					Dim scenarioMemberID As Integer = BRApi.Finance.Members.GetMemberId(si, dimTypeId.Scenario, fixedScenario)
					Dim scentypeID As Integer = BRApi.Finance.Scenario.GetScenarioType(si,scenarioMemberID).Id
					Dim wfList As New List(Of String)
					Dim ParallelCountTag As String = args.NameValuePairs.XFGetValue("ParallelCountTag","1")
					
					'OMD initializations
'					Dim ens_si As SessionInfo = GetOtherAppConnectionString(si)
					Dim jobid As Guid = Guid.NewGuid
'					Dim SubmitJobTAI As TaskActivityItem
'					Dim customSubstVars As New Dictionary(Of String, String)
					
					'Insert Job Details into Table
					Dim param As New Dictionary(Of String, String)
					param.Add("sourceScenario", globScen)
					param.Add("targetScenario", globScen)
					param.Add("sourceYear", globTime)
					param.Add("systemTime", globTime)
					param.Add("import",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("validation",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("transformation",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("loadCube",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("processCube",XFClientImageTypes.StatusWhiteBall.Name)
					param.Add("details", "Running")
					Me.addLog(si, param)
					
					'Get all the Import WFs under WFTop and add to list
					wfClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, wfTop, fixedScenario, systemTime)
														
					'OMD execution
'					customSubstVars.Add("JobId", jobid.ToString)
'					customSubstVars.Add("Description","ENTERPRISE:ENT->INTL:INTL")
'					customSubstVars.Add("Source","ENTERPRISE")
'					customSubstVars.Add("SourceAddInfo","ENT")
'					customSubstVars.Add("SourceScenario","Plan_Working")
'					customSubstVars.Add("Target","INTL")
'					customSubstVars.Add("TargetAddInfo","INTL")
'					customSubstVars.Add("TargetScenario","Plan_Working")
					
'					' Create main subtask
'					SubmitJobTAI = BRApi.Utilities.ExecuteDataMgmtSequence(ens_si, "Sqnc_Submit_Job", customSubstVars)
'					Dim dt_mainTask As DataTable
'					Dim mainTaskQuery As String = $"SELECT Top(1) * FROM [OneStream_Framework_QA].[dbo].[TaskActivity] where [UserName] = '{si.UserName}' And Description ='INTL_to_EnS_Plan Push' Order by [StartTime] Desc"
'					Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'						dt_mainTask = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, mainTaskQuery, True)
'					End Using
'					CreateSubTask(si, ens_si, jobid.ToString, dt_mainTask(0)("UniqueID").ToString, "Sqnc_Submit_SubTask","Yes")
							
					'If WF is locked, do nothing
					wfCLusterPk2 = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, "INTL.Import_from_INTL", fixedScenario, systemTime)		
					Dim wfStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfClusterPk2)	
					If Not wfStatus.Locked Then
						wfList.Add(stringhelper.ReplaceString("INTL.Import_from_INTL",".",";",True))
					End If
					'Clear Stage Data
					Try
						Dim objLoadTransformProcessInfo As LoadTransformProcessInfo = BRApi.Import.Process.ClearStageData(si, wfClusterPk2, "INTL FDX Stage Query for EntSeg")	
						Catch Ex As Exception
							'Update Job Details into Table
								param = New Dictionary(Of String, String)
								param.Add("import", Me.getImage("HasError"))
								param.Add("validation", Me.getImage("Nothing"))
								param.Add("transformation", Me.getImage("Nothing"))
								param.Add("loadCube", Me.getImage("Nothing"))
								param.Add("processCube", Me.getImage("Nothing"))
								param.Add("details", "Failed")
								Me.updateLog(si, param)
								Return Nothing
					End Try	
					brapi.ErrorLog.LogMessage(si,  "Clear Stage Completed ")
					
					'Loop through the generated list of WFs, and create trigger file
					If wfList.Count > 0 Then
						For Each wfMem As String In WfList
						'Create GL WF Batch Trigger File
							Me.CreateBatchFileTrigger(si,FileShareFolderHelper.GetBatchHarvestFolderForApp(si, True, configSettings.FileShareRootFolder, configSettings.FileShareBatchHarvestRootFolder,si.AppToken.AppName),wfMem.ToString,fixedScenario,systemTime, Testing)
				    	Next
					'end Loop WFs
					End If
					
					'Set Processing Switches	
					Dim valTransform As Boolean = True
					Dim valIntersect As Boolean = True

					Dim loadCube As Boolean = True
					
					Dim processCube As Boolean = True
					Dim confirm As Boolean = False
					Dim autoCertify As Boolean = False
								
					
					If Not testing Then
						Dim Batchinfo As WorkflowBatchFileCollection 
'						Execute Batch		
						If ParallelCountTag = "" Or ParallelCountTag = "1" Then
							batchInfo = BRApi.Utilities.ExecuteFileHarvestBatch(si, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, False)
						Else 
							Dim ParallelCount As Integer = ParallelCountTag.XFConvertToInt
							batchInfo = BRApi.Utilities.ExecuteFileHarvestBatchParallel(si, fixedScenario, systemTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, ParallelCount)
						End If
						
						If Not batchInfo Is Nothing Then					
							For Each kvp As keyValuePair(Of Integer, List(Of WorkflowBatchFileInfo)) In batchInfo.FileGroups							
								For Each wfBatchInfo As WorkflowBatchFileInfo In kvp.Value
									Dim importStatus As String = "N/A"
									Dim transformationStatus As String = "N/A"
									Dim intersectionStatus As String = "N/A"
									Dim loadStatus As String = "N/A"
									Dim processCubeStatus As String = "N/A"
									Dim fullFilePathName As String = "N/A"
									
									Dim updatedWorkflowUnitPksCount As Integer = 0
									If wfBatchInfo.ProcessInfo.UpdatedWorkflowUnitPks.Count = 0 Then
										'Update Job Details into Table
										param = New Dictionary(Of String, String)
										param.Add("import", Me.getImage("HasError"))
										param.Add("validation", Me.getImage("Nothing"))
										param.Add("transformation", Me.getImage("Nothing"))
										param.Add("loadCube", Me.getImage("Nothing"))
										param.Add("processCube", Me.getImage("Nothing"))
										param.Add("details", Me.JobStatus)
										Me.updateLog(si, param)
									End If
									
									For Each batchWFUnitPk As WorkflowUnitPk In wfBatchInfo.ProcessInfo.UpdatedWorkflowUnitPks
										
										updatedWorkflowUnitPksCount += 1
										
										Dim wfName As String = BRApi.Workflow.Metadata.GetProfile(si, batchWFUnitPk.ProfileKey).Name									
										Dim wfInfoStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, batchWfUnitPk)
										
										importStatus =  wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateTransform).ToString
										transformationStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateTransform).ToString
										intersectionStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ValidateIntersection).ToString
										loadStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.LoadCube).ToString
										processCubeStatus = wfInfoStatus.GetStepStatus(StepClassificationTypes.ProcessCube).ToString
																				
										If Not wfBatchInfo.FileProcessed Then
											Me.JobStatus = "Fail"											
										Else
											Me.JobStatus = "Success"											
										End If
										
										'Update Job Details into Table
										param = New Dictionary(Of String, String)
										param.Add("import", Me.getImage(importStatus))
										param.Add("validation", Me.getImage(intersectionStatus))
										param.Add("transformation", Me.getImage(transformationStatus))
										param.Add("loadCube", Me.getImage(loadStatus))
										param.Add("processCube", Me.getImage(processCubeStatus))
										param.Add("details", Me.JobStatus & $"")
										
'										checkSubTaskStatus(si, ens_si, jobid.ToString, 2000, importStatus)
'										checkSubTaskStatus(si, ens_si, jobid.ToString, 5000, intersectionStatus)
'										checkSubTaskStatus(si, ens_si, jobid.ToString, 6000, transformationStatus)
'										checkSubTaskStatus(si, ens_si, jobid.ToString, 7000, loadStatus)
'										checkSubTaskStatus(si, ens_si, jobid.ToString, 8000, processCubeStatus)
																							
'										Dim validation_params As New Dictionary(Of String, String)		
'										validation_params.Add("JobId", jobid.ToString)
'										validation_params.Add("EntityList", "International_Incl_Div")
'										validation_params.Add("JsonFile","ens_INTL_plan.json")
'										validation_params.Add("Year",globTime)
										
'										Dim TaskActivityItem_validation As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(ens_si, "Sqnc_run_validation", validation_params)
'										CreateSubTask(si,ens_si,jobid.ToString,TaskActivityItem_validation.UniqueID.ToString,"Sqnc_Submit_SubTask",String.Empty)
										
										Me.updateLog(si, param)
									Next
								Next
							Next
						Else
							brapi.ErrorLog.LogMessage(si, "batch Info Empty ")
						End If
					End If
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		#Region "General Helpers"
			Private Sub CreateBatchFileTrigger(ByVal si As SessionInfo, ByVal harvestPath As String, ByVal wfName As String, ByVal wfScenario As String, ByVal wfTime As String, ByVal Testing As Boolean)
			Dim Path As String = String.Empty

				If Not Testing Then
					Dim harvestFolderPath As String = BRApi.FileSystem.GetFileShareFolder(si, Filesharefoldertypes.Batch, Nothing) & "\Harvest"
					path = harvestFolderPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-RB.txt"
				Else
					Dim testingFolderPath As String = BRApi.FileSystem.GetFileShareFolder(si, Filesharefoldertypes.Batch, Nothing) & "\_Testing"
					If Not Directory.Exists(testingFolderPath) Then directory.CreateDirectory(testingFolderPath) 
						path = testingFolderPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-RB.txt"
					End If
				
				If Not File.Exists(path) Or Testing = True Then
					' Create a file to write to. 
					Using sw As StreamWriter = File.CreateText(path)
						sw.WriteLine("Batch File Trigger")
					End Using
				End If
			End Sub
		#End Region
		
'		Private Function GetOtherAppConnectionString(ByVal si As SessionInfo) As Object
'			Try	
'				Dim appUniqueID As Guid = ConvertHelper.ToGuid("2d91c49e-2f2c-47a4-a061-19c39a9a957d")
'				Dim varAppToken As New ApplicationToken(si.AppToken.SHA1HashCode, "Enterprise", appUniqueID)
'				Dim newSeshInfoOtherApp As New SessionInfo(ClientModuleType.Silverlight, si.WebServerUrlUsedByClient, si.AuthToken, varAppToken, si.Culture)
					
'				Return newSeshInfoOtherApp

'			Catch ex As Exception
'				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'			End Try
'		End Function
	
'		Private Sub checkSubTaskStatus(ByVal si As SessionInfo, ByVal ens_si As SessionInfo, ByVal jobid As String, ByVal status_code As Integer, ByVal status As String)
'			If status.XFEqualsIgnoreCase("Completed") Then
'				subTaskHelper(si, ens_si, jobid , status_code)
'			End If	
'		End Sub
	
'		Private Sub subTaskHelper(ByVal si As SessionInfo, ByVal ens_si As SessionInfo, ByVal jobid As String, ByVal status_code As Integer)
'			Try
'				Dim sqlQuery As String = $"SELECT Top(1) * FROM [OneStream_Framework_QA].[dbo].[TaskActivity] where [UserName] = '{si.UserName}' And TaskActivityType = '{status_code}' Order by [StartTime] Desc"
'				Dim dt_taskActivity As DataTable
'				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'					dt_taskActivity = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, sqlQuery, True)
'				End Using
'				CreateSubTask(si, ens_si, jobid.ToString, dt_taskActivity(0)("UniqueID").ToString, "Sqnc_Submit_SubTask", String.Empty)
			
'			Catch ex As Exception
'				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'			End Try	
'		End Sub
	
'		Private Sub CreateSubTask(ByVal si As SessionInfo, ByVal ens_si As SessionInfo, ByVal taskid As String, ByVal subtaskid As String, ByVal sequenceName_subtask As String, ByVal status As String)
'			Try
'				Dim subtask_dict As New Dictionary(Of String, String)
'				subtask_dict.Add("JobId", taskid)
'				subtask_dict.Add("SubTaskId", subtaskid)
'				subtask_dict.Add("Status", status)
'				BRApi.Utilities.ExecuteDataMgmtSequence(ens_si, sequenceName_subtask, subtask_dict)
'			Catch ex As Exception
'				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'			End Try	
'		End Sub
	
		Private Sub processlog(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal logmessage As String)
			Try
				globals.GetObject("WFPtoENS_PROCESS_LOG").AppendLine(Environment.NewLine & "[" & DateTime.Now.ToString & "] - " & logmessage)
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub
	
		Public Sub addLog(ByRef si As SessionInfo, ByRef data As Dictionary(Of String, String))
			Dim query As New Text.StringBuilder
			
			query.Append( $"INSERT INTO [XFT_App2App_Status_Log_Plan] ([Source_Scenario],[Target_Scenario], [Source_Year], [Target_Year], [Start_Time], [Executed_By], [Triggered_From], [Import], [Transformation], [Validation], [Load_Cube], [Process_Cube], [Details], [End_Time]) VALUES ( ")
			query.Append($"'{data.item("sourceScenario")}', '{data.item("targetScenario")}', '{data.item("sourceYear")}', '{data.item("systemTime")}', GETDATE(), '{si.userName}', '{si.AppName}', '{data.item("import")}', '{data.item("transformation")}', '{data.item("validation")}', '{data.item("loadCube")}', '{data.item("processCube")}', '{data.item("details")}', NULL ) ")
						
			brapi.ErrorLog.LogMessage(si, "InsertLog", query.ToString)
			
			Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				BRAPi.Database.ExecuteSql(dbConnApp, query.ToString, True)
				Me.jobID = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, "SELECT SCOPE_IDENTITY() as [SCOPE_IDENTITY]", True)(0)(0)
			End Using
		End Sub	
	
		Public Sub updateLog(ByRef si As SessionInfo, ByRef data As Dictionary(Of String, String))
			Dim query As New Text.StringBuilder
			query.Append($"UPDATE [dbo].[XFT_App2App_Status_Log_Plan] SET [Import] = '{data.Item("import")}' , [Transformation] = '{data.Item("transformation")}', ")
			query.Append($" [Validation] = '{data.Item("validation")}', [Load_Cube] = '{data.Item("loadCube")}', [Process_Cube] = '{data.Item("processCube")}', [Details] = '{data.Item("details")}', [End_Time] = CURRENT_TIMESTAMP")
			query.Append($" where [job_ID] = {Me.JobID}")
			
			brapi.ErrorLog.LogMessage(si, "uploadLog", query.ToString)
			
			Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				BRAPi.Database.ExecuteSql(dbConnApp, query.ToString, True)	
			End Using
		End Sub
	
		Public Function	getImage(ByVal status As String) As String
			If status.XFEqualsIgnoreCase("Completed") Then
				Return XFClientImageTypes.StatusGreenBall.Name
			Else If status.XFEqualsIgnoreCase("HasError") Then
				Me.JobStatus = "Failed" 
				Return XFClientImageTypes.StatusRedBall.Name
			Else If status.XFEqualsIgnoreCase("NotExecuted") Then
				Me.JobStatus = "Failed" 
				Return XFClientImageTypes.StatusOrangeBall.Name				
			Else 
				Me.JobStatus = "Failed" 
				Return XFClientImageTypes.StatusOrangeBall.Name
			End If
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="JSONtoCSV">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[' Sytem.web.extensions.dll

Imports System.Text
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Threading.Tasks
Imports System.Net
Imports System.Net.Http
Imports System.Timers
Imports System.Threading
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
Imports System.Web.Script.Serialization
Imports Newtonsoft.Json.JsonPropertyAttribute
Imports System.Diagnostics
Imports System.Net.Mail


Namespace OneStream.BusinessRule.Extender.JSONtoCSV
	
	Public Class clsJSONtoCSV

    Public serializer As New JavaScriptSerializer()

   Public Function Main(ByVal fileData As IEnumerable(Of DataPoint),ByVal si As SessionInfo) As Boolean
   
       ' Dim fileData() As String = fileData1.Split(vbLf)
		 BRApi.ErrorLog.LogMessage(si, "hifile")
        Dim datapoints As New List(Of DataPoint)

'        For Each jsonData As String In fileData
'			 BRApi.ErrorLog.LogMessage(si, jsonData)
'           ' If jsonData.Trim() <> "" Then datapoints.AddRange(getDeserialisedChargeHRData(jsonData,si))
'		    If jsonData.Trim() <> "" Then datapoints.AddRange(fileData)
'        Next
        'BRApi.ErrorLog.LogMessage(si, datapoints.Count.ToString)
        Dim sortedDataPoints As List(Of DataPoint) = fileData.ToList()
         BRApi.ErrorLog.LogMessage(si, "hifile4")
        Dim sb As New StringBuilder()
		
        sb.AppendLine("Date and time,BPM,Confidence,Calories burned,Default zone,Custom zone")

        For Each dp As DataPoint In datapoints
			 BRApi.ErrorLog.LogMessage(si, "hifile4")
            sb.AppendLine(String.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9}", dp.APP_NM, dp.DIMENSION_TYPE, dp.MBR_DIMENSION, dp.CHILD, dp.PARENT, dp.OS_NAME,dp.OS_PARENT,dp.SORT_ORDER,dp.AGG_WGT))
			 BRApi.ErrorLog.LogMessage(si, "hifile5")
        Next

        File.WriteAllText("C:\\Users\\vn51b1z\\BMP_Data.csv", sb.ToString()) 
		
    return true
    End Function

    Public Function getDeserialisedChargeHRData(ByVal json As String,ByVal si As SessionInfo) As List(Of DataPoint)
		 BRApi.ErrorLog.LogMessage(si, "hifile1")
        Dim deserializedResult = serializer.Deserialize(Of List(Of RootObject))(json)
'		 BRApi.ErrorLog.LogMessage(si, deserializedResult)
        Return deserializedResult.Item(0).dataSets.activity.dataPoints
    End Function

End Class

Public Class DataPoint
'    Public Property APP_NM() As String
'    Public Property DIMENSION_TYPE() As String
'    Public Property MBR_DIMENSION() As String
'    Public Property CHILD() As String
'    Public Property PARENT() As String
'    Public Property OS_NAME () As String
'	 Public Property OS_PARENT () As String
'    Public Property SORT_ORDER () As Integer
'    Public Property AGG_WGT () As Integer

    Public Property App() As String
    Public Property DimensionType() As String
    Public Property Member_Dimension() As String
    Public Property Name() As String
    Public Property Parent() As String
    Public Property OneStream_Name () As String
	Public Property Onestream_Parent () As String
    Public Property Sort_Order () As Integer
    Public Property AggregationWeight () As Integer
End Class

Public Class Activity
    Public Property dataPoints() As List(Of DataPoint)
    Public Property granularity() As String
End Class

Public Class DataSets
    Public Property activity() As Activity
End Class

Public Class RootObject
    Public Property dataSets() As DataSets
End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="NonWage_UpdateWatcher">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_SharedConstants" />
            </referencedAssemblies>
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics
Imports OneStream.BusinessRule.DashboardStringFunction.EP_SharedConstants

#End Region

#Region "Rule Change Mgmt"

'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 -  - Spreadsheet functions for Financial Load Forms
	'Mods:		
	'--------------------------------------------------------------------------------------------------------------------------------------------

#End Region
Namespace OneStream.BusinessRule.Extender.NonWage_UpdateWatcher
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
			
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep,ExtenderFunctionType.Unknown
					        Dim sp As New Stopwatch()
			                sp.Start()
							
				
							Dim dt_queue As DataTable = Nothing
							
							
							
							dt_queue = ReadQueue(si)
'							BRApi.ErrorLog.LogMessage(si, "queue_picked", PrintDT(dt_queue).ToString)
							
							'ep to wmtus filter
							Dim wmtus_entityList_meminfo As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "ENT", "E#WMTUS_Total_Operations_mgmt.Base", True)
							'ep to sams filter
							Dim sams_entityList_meminfo As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "ENT", "E#SAMS_CLUB_OPERATIONS_VBO.Base", True)
							
							'ep to ent ecomm filter
							Dim sql_ecomm As String = "SELECT DISTINCT VBO FROM " & EPSharedConstants.sRACITable & " WHERE AnaplanECF_Filter LIKE '%ECF%'"
							Dim dt_ecomm As New DataTable
							Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								dt_ecomm = BRApi.Database.ExecuteSql(dbConnApp, sql_ecomm, False)
							End Using
							
							
'							BRApi.ErrorLog.LogMessage(si, "dt_ecomm", PrintDT(dt_ecomm).ToString)
							
							Dim ecomm_entityList As New List(Of String)
							If dt_ecomm IsNot Nothing AndAlso dt_ecomm.Rows.Count>0
								For Each dr_ecomm In dt_ecomm.Rows
									Dim ecomm_entityList_meminfo As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "ENT", "E#" & dr_ecomm("VBO") & ".Base", True)
									For Each ecomm_entity In ecomm_entityList_meminfo
										ecomm_entityList.Add(ecomm_entity.Member.Name)
									Next	
								Next	
							End If	
							
							
							'ep to capex filter
							Dim tech_entityList_meminfo As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "ENT", "E#Global_Tech_Rollup.Base", True)
						
							Dim wmtus_entityList As New List(Of String)
							Dim sams_entityList As New List(Of String)
'							Dim wmtus_ecomm_entityList As New List(Of String)
'							Dim sams_ecomm_entityList As New List(Of String)
							Dim tech_entityList As New List(Of String)
							
							For Each wmtus_entity In wmtus_entityList_meminfo
								wmtus_entityList.Add(wmtus_entity.Member.Name)
							Next
							For Each sams_entity In sams_entityList_meminfo
								sams_entityList.Add(sams_entity.Member.Name)
							Next
'							For Each wmtus_ecomm_entity In wmtus_ecomm_entityList_meminfo
'								wmtus_ecomm_entityList.Add(wmtus_ecomm_entity.Member.Name)
'							Next
'							For Each sams_ecomm_entity In sams_ecomm_entityList_meminfo
'								sams_ecomm_entityList.Add(sams_ecomm_entity.Member.Name)
'							Next
							For Each tech_entity In tech_entityList_meminfo
								tech_entityList.Add(tech_entity.Member.Name)
							Next
							
							'get activity details
							Dim sql_actdetails As String = "SELECT * FROM XFW_ExpensePlanning_ActivityDetails"
							Dim dt_actdetails As New DataTable
							Dim dict_actdetails As New Dictionary(Of String, String)
							Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								dt_actdetails = BRApi.Database.ExecuteSql(dbConnApp, sql_actdetails, False)
							End Using
							If dt_actdetails IsNot Nothing AndAlso dt_actdetails.Rows.Count>0
								For Each dr_actdetails In dt_actdetails.Rows
									dict_actdetails.Add(dr_actdetails("ActivityID").ToString,dr_actdetails("Enabled").ToString)
								Next	
							End If	
							
							
							Dim sqlCons As New Text.StringBuilder			
							If dt_queue.Rows.Count > 0
								Dim dt_watcher As DataTable = Nothing
								Dim sql As String = "SELECT * FROM " & EPSharedConstants.sWatcherTable
								'Dim sql As String = "Select * From " & EPSharedConstants.sWatcherTable & " As w inner Join xfw_expenseplanning_activitydetails As a On w.ActivityID = a.activityID And a.Enabled = 'True'"
								Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
									dt_watcher = BRApi.Database.ExecuteSql(dbConnApp, sql, False)
								End Using

								For Each dr_queue As DataRow In dt_queue.Rows
									sqlCons.Append(UpdateWatcher(si, dr_queue("CostCenter"), dt_watcher, wmtus_entityList, sams_entityList, ecomm_entityList, tech_entityList, dict_actdetails ))
								Next
							End If	
							If sqlCons.Length > 0
								Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								BRApi.Database.ExecuteActionQuery(dbConnApp, sqlCons.ToString, False, False)
								End Using
							End If
								
							sp.Stop()
'							BRApi.ErrorLog.LogMessage(si ,"Timetakenforwatcher" ,sp.ElapsedMilliseconds.ToString)	
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		#Region "Helper Function"
		Private Function ReadQueue(ByVal si As SessionInfo) As DataTable
			Try
				Dim currentdatetime As DateTime = DateTime.Now()
				
				Dim dt As DataTable = Nothing
				Dim sql As String = "SELECT DISTINCT CostCenter FROM " & EPSharedConstants.sExpenseplanningQueue & " WHERE Submitted_On >= DATEADD(minute, -120, CURRENT_TIMESTAMP) "
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt = BRApi.Database.ExecuteSql(dbConnApp, sql, False)
				End Using
			Return dt
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Private Function UpdateWatcher(ByVal si As SessionInfo, ByVal cc As String, ByVal dt_watcher As DataTable, ByVal wmtus_entityList As List(Of String), ByVal sams_entityList As List(Of String), ByVal ecomm_entityList As List(Of String), ByVal tech_entityList As List(Of String), ByVal dict_actdetails As Dictionary(Of String, String)) As Text.StringBuilder
			Try
				
				
'				BRApi.ErrorLog.LogMessage(si, "Start UpdateWatcher")
				Dim sql As New Text.StringBuilder
				Dim foundFlag As Boolean = False
				
				
				
				
				If dt_watcher IsNot Nothing AndAlso dt_watcher.Rows.Count > 0
					For Each dr_watcher As DataRow In dt_watcher.Rows	
						'if cost center is in watcher, update
						If dr_watcher("CostCenter") = cc 
							foundFlag = True
							If dict_actdetails.ContainsKey(dr_watcher("ActivityID")) And dict_actdetails(dr_watcher("ActivityID")).XFEqualsIgnoreCase("True")
								If dr_watcher("Run_Flag") = 1 Or dr_watcher("Run_Flag") = -1
									sql.Append("UPDATE " & EPSharedConstants.sWatcherTable & " SET Run_Flag=0,Wait_Flag=0 WHERE CostCenter='" & dr_watcher("CostCenter") & "' AND ActivityID='" & dr_watcher("ActivityID") & "' ")
								Else If  dr_watcher("Run_Flag") = 2
									sql.Append("UPDATE " & EPSharedConstants.sWatcherTable & " SET Wait_Flag=1 WHERE CostCenter='" & dr_watcher("CostCenter") & "' AND ActivityID='" & dr_watcher("ActivityID") & "' ")
								End If
							End If
						End If
					Next
				End If		
						'if cost center not in watcher, insert
						If foundFlag = False
							If Not ecomm_entityList.Contains(cc)
								sql.Append("INSERT INTO [" & EPSharedConstants.sWatcherTable & "] VALUES ('" & cc & "', 'TRG1', Null, Null, 1, 0)")
							End If
							If wmtus_entityList.Contains(cc)
								sql.Append("INSERT INTO [" & EPSharedConstants.sWatcherTable & "] VALUES ('" & cc & "', 'TRG2', Null, Null, 1, 0)")
							End If
							If sams_entityList.Contains(cc)
								sql.Append("INSERT INTO [" & EPSharedConstants.sWatcherTable & "] VALUES ('" & cc & "', 'TRG3', Null, Null, 1, 0)")
							End If
							If tech_entityList.Contains(cc)
								sql.Append("INSERT INTO [" & EPSharedConstants.sWatcherTable & "] VALUES ('" & cc & "', 'TRG4', Null, Null, 1, 0)")
							End If
							sql.Append("INSERT INTO [" & EPSharedConstants.sWatcherTable & "] VALUES ('" & cc & "', 'TRG5', Null, Null, 1, 0)")
							If wmtus_entityList.Contains(cc)
								sql.Append("INSERT INTO [" & EPSharedConstants.sWatcherTable & "] VALUES ('" & cc & "', 'TRG6', Null, Null, 0, 0)")
							End If
							If sams_entityList.Contains(cc)
								sql.Append("INSERT INTO [" & EPSharedConstants.sWatcherTable & "] VALUES ('" & cc & "', 'TRG7', Null, Null, 0, 0)")
							End If
						End If			
				
					
				BRApi.ErrorLog.LogMessage(si, "cc:" & cc & ", foundFlag:" & foundFlag, sql.ToString)
				
				Return sql
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Function		
		
		Private Function PrintDT(dt As DataTable) As Text.StringBuilder
			Dim sCSV As New Text.StringBuilder
			If dt IsNot Nothing Then
				If dt.Rows.Count > 0 Then
					
					For Each dc As DataColumn In dt.Columns
						sCSV.Append(dc.ColumnName & ",")
					Next
					sCSV.Remove(sCSV.Length-1,1)
					sCSV.Append(Environment.NewLine)
					For Each dr As DataRow In dt.Rows
						For Each dc As DataColumn In dt.Columns
	     					sCSV.Append(dr(dc).ToString & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
					Next
				End If
			End If
			Return sCSV
    	End Function
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="NonWage_Validation_Utility">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.NonWage_Validation_Utility
	Public Class MainClass
		
		Public Sub New(ByVal si As SessionInfo)
			Try
			
				'Nothing
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		Public Function Validate(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal profileName As String) As Validation_Results
		Try
			
			Dim profileNameArray As String() = profileName.Split(".")
			Dim parentWFProfileInfo As WorkflowProfileInfo = BRApi.Workflow.Metadata.GetParent(si, profileName)
			Dim VBO As String = parentWFProfileInfo.Name.Replace("EP_","").Replace("_ALL","")
			
			Dim entityNameList As New List(Of String)
			Dim entityList As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "ENT", "E#" & VBO & ".Base", True)														
			For Each entityName As MemberInfo In entityList
				entityNameList.Add(entityName.Member.Name)
			Next
			
			Dim VBOCCDict As New Dictionary(Of String, String)
			Dim VBOCCdt As New DataTable
			Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				VBOCCdt = BRAPi.Database.ExecuteSql(dbConnApp,"SELECT WORKFLOW_PROFILE_VBO,COST_CENTER FROM [dbo].[XFW_ExpensePlanning_VBO_CC_Mappings]", False)   
			End Using	
			For Each VBOCCdr As DataRow In VBOCCdt.Rows
				VBOCCDict.Add(VBOCCdr("COST_CENTER"),VBOCCdr("WORKFLOW_PROFILE_VBO"))
			Next
			
			Dim GLNameDict As New Dictionary(Of String, List(Of String))
			Dim GLNamdt As New DataTable
			Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				GLNamdt = BRAPi.Database.ExecuteSql(dbConnApp,"SELECT GL_Code,Package,Sub_Package,Planning_Methodology FROM [dbo].[XFW_ExpensePlanning_GLPlanner]", False)   
			End Using
			
			
			If GLNamdt IsNot Nothing
				If GLNamdt.Rows.Count > 0 Then
					For Each GLNamdr As DataRow In GLNamdt.Rows
						Dim list As New List(Of String)
						list.add(GLNamdr("Package").ToString.Substring(0,2))
						list.add(GLNamdr("Sub_Package").ToString.Substring(3,2))
						list.add(GLNamdr("Planning_Methodology"))
						GLNameDict.Add(GLNamdr("GL_Code"),list)
					Next
				End If
			End If
			
			Dim VR As New Validation_Results
			
			For Each dr As DataRow In dt.Rows
				If dr("YearTotal") = "" Then
					VR.Error_Code = "Warning"
					VR.Error_Message = "Please enter yeartotal amount. The record will be ignored during import to table"
				Else
					If dr("CostCenter") = "" And dr("GL") = ""  Then
						VR.errorflag = False
						VR.Error_Code = "Error"
						VR.Error_Message = "CostCenter/GL cannot be empty"
					ElseIf  dr("CostCenter") = "" And Not dr("GL") = ""  Then
						VR.errorflag  = False
						VR.Error_Code = "Error"
						VR.Error_Message = "CostCenter cannot be empty"
					ElseIf Not dr("CostCenter") = "" And dr("GL") = ""  Then
						VR.errorflag  = False
						VR.Error_Code = "Error"
						VR.Error_Message = "GL cannot be empty"
					Else
						If profileNameArray(1) = "Financial_Only"
							
							If Not VBOCCDict.ContainsKey(dr("CostCenter")) And Not GLNameDict.ContainsKey(dr("GL"))
								VR.errorflag = False
								VR.Error_Code = "Error"
								VR.Error_Message = "CostCenter and GL do not exist"
							ElseIf Not VBOCCDict.ContainsKey(dr("CostCenter")) And GLNameDict.ContainsKey(dr("GL"))
								VR.errorflag = False
								VR.Error_Code = "Error"
								VR.Error_Message = "CostCenter does not exist"
							ElseIf VBOCCDict.ContainsKey(dr("CostCenter")) And Not GLNameDict.ContainsKey(dr("GL"))
								VR.errorflag = False
								VR.Error_Code = "Error"
								VR.Error_Message = "GL does not exist"
							Else
								If Not entityNameList.Contains(dr("CostCenter")) And Not GLNameDict.Item(dr("GL"))(2).XFEqualsIgnoreCase("Financial")
									VR.errorflag = False
									VR.Error_Code = "Error"
									VR.Error_Message = "CostCenter does not belong to selected VBO and GL does not belong to financial planning methodology"
								ElseIf entityNameList.Contains(dr("CostCenter")) And Not GLNameDict.Item(dr("GL"))(2).XFEqualsIgnoreCase("Financial")
									VR.errorflag = False
									VR.Error_Code = "Error"
									VR.Error_Message = "GL does not belong to financial planning methodology"
								ElseIf Not entityNameList.Contains(dr("CostCenter")) And GLNameDict.Item(dr("GL"))(2).XFEqualsIgnoreCase("Financial")
									VR.errorflag = False
									VR.Error_Code = "Error"
									VR.Error_Message = "CostCenter does not belong to selected VBO"
								Else
									VR.Error_Code = "Success"
								End If
							End If
						End If
					End If
				End If
			Next
		Return VR
		Catch ex As Exception                
	   		Throw ErrorHandler.LogWrite(si,New XFException(si,ex))
		End Try		 
		End Function
	End Class
	
	Public Class Validation_Results
		Public errorflag As String = String.Empty
		Public Error_Code As String = String.Empty
		Public Error_Message As String = String.Empty
	End Class
	
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="NonWages_CubePush">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.NonWages_CubePush
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
				
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="NonWages_CustomTable_Helper">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
#End Region

Namespace OneStream.BusinessRule.Extender.NonWages_CustomTable_Helper
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
					
						Dim sql As New Text.StringBuilder
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
	

'							sql.AppendLine("DROP TABLE [XFW_NonWage_Register]")
'							sql.AppendLine("CREATE TABLE [XFW_NonWage_Register](
'							[UniqueID] [uniqueidentifier] Not Null,
'							[WFProfileName] [nvarchar](100) Not Null,
'							[WFScenarioName] [nvarchar](100) Not Null,
'							[WFTimeName] [nvarchar](100) Not Null,
'							[UserID] [nvarchar](100),
'							[CostCenter] [nvarchar](100) Not Null,
'							[GL] [nvarchar](100) Not Null,
'							[LineItem] [Integer],
'							[TF_1] [nvarchar](100),
'							[TF_2] [nvarchar](100),
'							[TF_3] [nvarchar](100),
'							[TF_4] [nvarchar](100),
'							[TF_5] [nvarchar](100),
'							[TF_6] [nvarchar](100),
'							[TF_7] [nvarchar](100),
'							[TF_8] [nvarchar](100),
'							[TF_9] [nvarchar](100),
'							[TF_10] [nvarchar](100),
'							[TF_11] [nvarchar](100),
'							[TF_12] [nvarchar](100),
'							[TF_13] [nvarchar](100),
'							[TF_14] [nvarchar](100),
'							[TF_15] [nvarchar](100),
'							[TF_16] [nvarchar](100),
'							[TF_17] [nvarchar](100),
'							[TF_18] [nvarchar](100),
'							[NF_1] [decimal](28, 9),
'							[NF_2] [decimal](28, 9),
'							[NF_3] [decimal](28, 9),
'							[NF_4] [decimal](28, 9),
'							[NF_5] [decimal](28, 9),
'							[NF_6] [decimal](28, 9),
'							[Updated_Time] [date],
'							[P01] [decimal](28, 9),
'							[P02] [decimal](28, 9),
'							[P03] [decimal](28, 9),
'							[P04] [decimal](28, 9),
'							[P05] [decimal](28, 9),
'							[P06] [decimal](28, 9),
'							[P07] [decimal](28, 9),
'							[P08] [decimal](28, 9),
'							[P09] [decimal](28, 9),
'							[P10] [decimal](28, 9),
'							[P11] [decimal](28, 9),
'							[P12] [decimal](28, 9),
'							[YearTotal] [decimal](28, 9),
'							CONSTRAINT [PK_XFW_NonWage_Register] PRIMARY KEY CLUSTERED 
'							(						
'								[UniqueID] ASC
'							)
'							)")
								
'							sql.AppendLine("ALTER TABLE [dbo].[XFW_NonWage_Register] DROP CONSTRAINT UNQ_XFW_NonWage_Register")
'							sql.AppendLine("ALTER TABLE [dbo].[XFW_NonWage_Register] ADD CONSTRAINT UNQ_XFW_NonWage_Register UNIQUE (WFScenarioName,WFTimeName,CostCenter,GL,LineItem);")
							
							
							
'							sql.AppendLine("DROP TABLE [dbo].[XFW_NonWage_TempRegister] ")
'							sql.AppendLine("CREATE TABLE [XFW_NonWage_TempRegister](
'								[WFProfileName] [nvarchar](100),
'								[WFScenarioName] [nvarchar](100),
'								[WFTimeName] [nvarchar](100),
'								[UserID] [nvarchar](100),
'								[UniqueID] [uniqueidentifier],
'								[Error_Code] [nvarchar](100),
'								[Error_Message] [varchar](200),
'								[CostCenter] [nvarchar](100),
'								[GL] [nvarchar](100),
'								[TF_1] [nvarchar](100),
'								[TF_2] [nvarchar](100),
'								[TF_3] [nvarchar](100),
'								[TF_4] [nvarchar](100),
'								[TF_5] [nvarchar](100),
'								[TF_6] [nvarchar](100),
'								[TF_7] [nvarchar](100),
'								[TF_8] [nvarchar](100),
'								[TF_9] [nvarchar](100),
'								[TF_10] [nvarchar](100),
'								[TF_11] [nvarchar](100),
'								[TF_12] [nvarchar](100),
'								[TF_13] [nvarchar](100),
'								[TF_14] [nvarchar](100),
'								[TF_15] [nvarchar](100),
'								[TF_16] [nvarchar](100),
'								[TF_17] [nvarchar](100),
'								[TF_18] [nvarchar](100),
'								[NF_1] [decimal](28, 9),
'								[NF_2] [decimal](28, 9),
'								[NF_3] [decimal](28, 9),
'								[NF_4] [decimal](28, 9),
'								[NF_5] [decimal](28, 9),
'								[NF_6] [decimal](28, 9),
'								[NF_7] [decimal](28, 9),
'								[YearTotal] [decimal](28, 2),
'								[P01] [decimal](28, 2),
'								[P02] [decimal](28, 2),
'								[P03] [decimal](28, 2),
'								[P04] [decimal](28, 2),
'								[P05] [decimal](28, 2),
'								[P06] [decimal](28, 2),
'								[P07] [decimal](28, 2),
'								[P08] [decimal](28, 2),
'								[P09] [decimal](28, 2),
'								[P10] [decimal](28, 2),
'								[P11] [decimal](28, 2),
'								[P12] [decimal](28, 2)
'								CONSTRAINT [PK_XFW_NonWage_TempRegister] PRIMARY KEY CLUSTERED 
'								(
'									[WFProfileName] ASC,
'									[WFScenarioName] ASC,
'									[WFTimeName] ASC,
'									[UserID],
'									[UniqueID]
'								))")

'							sql.AppendLine("DROP TABLE [dbo].[XFW_ExpensePlanning_Queue] ")
'							sql.AppendLine("CREATE TABLE [XFW_ExpensePlanning_Queue](
'								[UniqueID] [uniqueidentifier] PRIMARY KEY,
'								[PlanYear] [integer],
'								[CostCenter] [nvarchar](100),
'								[UserID] [nvarchar](100),
'							    [Submitted_On] [datetime],
'								)")

'							sql.AppendLine("TRUNCATE TABLE [dbo].[XFW_ExpensePlanning_DropDowns] ")
'							sql.AppendLine("CREATE TABLE [XFW_ExpensePlanning_DropDowns] (
'								[Package] [varchar] (100),
'								[DropDown_Type] [varchar] (100),
'								[Value] [varchar] (100),
'							    PRIMARY KEY ([DropDown_Type],[Value]) )" )
							

'							sql.AppendLine("DROP TABLE [dbo].[XFW_ExpensePlanning_GLPlanner] ")
'							sql.AppendLine("CREATE TABLE [XFW_ExpensePlanning_GLPlanner] (
'								[Package] [varchar] (100),
'								[Sub_Package] [varchar] (100),
'								[GL_Code] [varchar] (100) NOT NULL,
'								[Planning_Methodology] [varchar] (100),
'							    PRIMARY KEY ([GL_Code]) NOT NULL)" )
								
							
'							sql.AppendLine("DROP TABLE [dbo].[XFW_ExpensePlanning_VBO_CC_Mappings] ")
'							sql.AppendLine("CREATE TABLE [XFW_ExpensePlanning_VBO_CC_Mappings] (
'								[VBO_NAME] [varchar] (200),
'								[WORKFLOW_PROFILE_VBO] [varchar] (200),
'								[COST_CENTER] [varchar] (200) PRIMARY KEY,
'								[LOCAL_CURRENCY] [varchar] (200)
'							    )" )

'							sql.AppendLine("DROP TABLE [dbo].[XFW_ExpensePlanning_SEGMENT_VBO] ")
'							sql.AppendLine("CREATE TABLE [XFW_ExpensePlanning_SEGMENT_VBO] (
'								[VBO_NAME] [varchar] (200) PRIMARY KEY,
'								[VBO_DESCRIPTION] [varchar] (200),
'								[SEGMENT] [varchar] (200),
'								[Cube] [varchar] (200),
'								[GLOBAL_TECH] [varchar] (200)
'							    )" )

								
'							sql.AppendLine("DROP TABLE [dbo].[XFW_ExpensePlanning_PK04_P_Drivers] ")
'							sql.AppendLine("CREATE TABLE [XFW_ExpensePlanning_PK04_P_Drivers] (
'								[VBO] [nvarchar] (200) PRIMARY KEY,
'								[Onsite_Associate_Events_Price] [decimal] (10,2),
'								[Awards_and_Recognition_Price] [decimal] (10,2),
'								[Updated_By] [nvarchar] (200),
'								[Updated_On] [datetime]
'							    )" )
							
'							sql.AppendLine("DROP TABLE [dbo].[XFW_ExpensePlanning_PK04_TopDown_Adj] ")
'							sql.AppendLine("CREATE TABLE [XFW_ExpensePlanning_PK04_TopDown_Adj] (
'								[PlanYear] [integer], 
'								[Account] [nvarchar] (200),
'								[VBO] [nvarchar] (200),
'								[Center_Type] [nvarchar] (200),
'								[Org_Type] [nvarchar] (200),
'								[M1] [decimal] (10,2),
'								[M2] [decimal] (10,2),
'								[M3] [decimal] (10,2),
'								[M4] [decimal] (10,2),
'								[M5] [decimal] (10,2),
'								[M6] [decimal] (10,2),
'								[M7] [decimal] (10,2),
'								[M8] [decimal] (10,2),
'								[M9] [decimal] (10,2),
'								[M10] [decimal] (10,2),
'								[M11] [decimal] (10,2),
'								[M12] [decimal] (10,2),
'								[YearTotal] [decimal] (10,2),
'								[Updated_By] [nvarchar] (200),
'								[Updated_On] [datetime],
'								CONSTRAINT [PK_XFW_ExpensePlanning_PK04_TopDown_Adj] PRIMARY KEY CLUSTERED 
'									(						
'										[PlanYear],
'										[Account],
'										[VBO],
'										[Center_Type],
'										[Org_Type]
'									)
'								)")


'							sql.AppendLine("DROP TABLE [dbo].[XFW_ExpensePlanning_ActivityDetails] ")
'							sql.AppendLine("CREATE TABLE [XFW_ExpensePlanning_ActivityDetails](
'								[ActivityID] [nvarchar](100) PRIMARY KEY,
'								[Source] [nvarchar](100),
'								[Target] [nvarchar](100),
'								[Description] [nvarchar](100),
'								[Enabled] [nvarchar](100),
'							    [Frequency] [decimal]
'								)")
							
'							sql.AppendLine("DROP TABLE [dbo].[XFW_ExpensePlanning_Watcher] ")
'							sql.AppendLine("CREATE TABLE [XFW_ExpensePlanning_Watcher](
'								[CostCenter] [nvarchar](100), 
'								[ActivityID] [nvarchar](100),
'								[Requested_On] [datetime],
'								[Processed_On] [datetime],
'								[Run_Flag] [int],
'							    [Wait_Flag] [int]
'							CONSTRAINT [PK_XFW_ExpensePlanning_Watcher] PRIMARY KEY CLUSTERED 
'									(						
'										[CostCenter],
'										[ActivityID]
'									)
							   
''							)")
								            

'							sql.AppendLine("DROP TABLE [dbo].[XFW_RACI_PlanningMethod]")
'							sql.AppendLine("CREATE TABLE [XFW_RACI_PlanningMethod](
'								[MethodID] [integer] PRIMARY KEY, 
'								[Planning_Source] [nvarchar](100),
'								[Planning_Method] [nvarchar](100))")
							
							
'							sql.AppendLine("DROP TABLE [dbo].[XFW_RACI_Matrix]")
'							sql.AppendLine("CREATE TABLE [XFW_RACI_Matrix](
'								[VBO] [nvarchar] (100),
'								[Org_Type] [nvarchar] (100),
'								[Center_Type] [nvarchar] (100),
'								[Country] [nvarchar](100),
'								[Package_ID] [nvarchar] (100),
'								[SubPackage_ID] [nvarchar] (100),
'								[GL] [nvarchar] (100),
'								[MethodID] [integer],
'								[AnaplanECF_Filter] [nvarchar] (100)
'								CONSTRAINT [PK_XFW_RACI_Matrix] PRIMARY KEY CLUSTERED 
'									(						
'										[VBO],
'										[Org_Type],
'										[Center_Type],
'										[GL],
'										[Country],
'										[MethodID]
'								)
'							    )" )


'							sql.AppendLine("DROP TABLE [dbo].[XFW_ExpensePlanning_PK05_TopDown_Adj] ")
'							sql.AppendLine("CREATE TABLE [XFW_ExpensePlanning_PK05_TopDown_Adj] (
'								[PlanYear] [integer], 
'								[Account] [nvarchar] (200),
'								[VBO] [nvarchar] (200),
'								[M1] [decimal] (10,2),
'								[M2] [decimal] (10,2),
'								[M3] [decimal] (10,2),
'								[M4] [decimal] (10,2),
'								[M5] [decimal] (10,2),
'								[M6] [decimal] (10,2),
'								[M7] [decimal] (10,2),
'								[M8] [decimal] (10,2),
'								[M9] [decimal] (10,2),
'								[M10] [decimal] (10,2),
'								[M11] [decimal] (10,2),
'								[M12] [decimal] (10,2),
'								[YearTotal] [decimal] (10,2),
'								[Updated_By] [nvarchar] (200),
'								[Updated_On] [datetime],
'								CONSTRAINT [PK_XFW_ExpensePlanning_PK05_TopDown_Adj] PRIMARY KEY CLUSTERED 
'									(						
'										[PlanYear],
'										[Account],
'										[VBO]
'									)
'								)")

								
'							sql.AppendLine("DROP TABLE [dbo].[XFW_ExpensePlanning_PK05_InflationRate]")
'							sql.AppendLine("CREATE TABLE [XFW_ExpensePlanning_PK05_InflationRate](
'								[GL] [nvarchar](100) PRIMARY KEY,
'								[Description] [nvarchar](100),
'								[Inflation_Rate] [decimal] (10,5))")

'                            sql.AppendLine("ALTER TABLE [dbo].[XFW_NonWage_TempRegister] ALTER COLUMN [Error_Message] [varchar](500)")


'							sql.AppendLine("CREATE TABLE [XFW_ExpensePlanning_Skip_Triggers](
'								[UniqueID] [uniqueidentifier] PRIMARY KEY,
'								[Trigger] [nvarchar](100),
'								[Executed_By] [nvarchar](100),
'								[Execution_Time] [datetime])")


'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [WFProfileName] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [WFScenarioName] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [WFTimeName] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [UserID] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [CostCenter] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [GL] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [TF_1] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [TF_2] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [TF_3] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [TF_4] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [TF_5] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [TF_6] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [TF_7] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [TF_8] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [TF_9] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [TF_10] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [TF_11] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [TF_12] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [TF_13] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [TF_14] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [TF_15] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [TF_16] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [TF_17] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN [TF_18] [nvarchar](256)")
							
							
'							sql.AppendLine("ALTER TABLE XFW_NonWage_TempRegister ALTER COLUMN [Error_Code] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_TempRegister ALTER COLUMN [Error_Message] [nvarchar](500)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_TempRegister ALTER COLUMN [CostCenter] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_TempRegister ALTER COLUMN [GL] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_TempRegister ALTER COLUMN [TF_1] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_TempRegister ALTER COLUMN [TF_2] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_TempRegister ALTER COLUMN [TF_3] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_TempRegister ALTER COLUMN [TF_4] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_TempRegister ALTER COLUMN [TF_5] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_TempRegister ALTER COLUMN [TF_6] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_TempRegister ALTER COLUMN [TF_7] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_TempRegister ALTER COLUMN [TF_8] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_TempRegister ALTER COLUMN [TF_9] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_TempRegister ALTER COLUMN [TF_10] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_TempRegister ALTER COLUMN [TF_11] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_TempRegister ALTER COLUMN [TF_12] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_TempRegister ALTER COLUMN [TF_13] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_TempRegister ALTER COLUMN [TF_14] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_TempRegister ALTER COLUMN [TF_15] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_TempRegister ALTER COLUMN [TF_16] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_TempRegister ALTER COLUMN [TF_17] [nvarchar](256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_TempRegister ALTER COLUMN [TF_18] [nvarchar](256)")

'							sql.AppendLine("UPDATE XFW_NonWage_Register SET WFProfileName = REPLACE(WFProfileName,'PK_05 Utilities & Sustainability','Financial_Only') WHERE WFProfileName LIKE '%.PK_05 Utilities & Sustainability'")
'							sql.AppendLine("DELETE FROM XFW_NonWage_Register WHERE GL LIKE 'A6%'")

'							sql.AppendLine("DROP TABLE [XFW_EP_Data_Movement_Mappings]")
'							sql.AppendLine("CREATE TABLE [XFW_EP_Data_Movement_Mappings](
'							[UniqueID] [uniqueidentifier] Not Null PRIMARY KEY,
'							[Interface] [nvarchar](100) Not Null,
'							[Description] [nvarchar](500),
'							[Parameter] [nvarchar](100) Not Null,
'							[Source] [nvarchar](100) Not Null,
'							[Target] [nvarchar](100) Not Null
'							)")

'							Dim newid As Guid = Guid.NewGuid
'							brapi.ErrorLog.LogMessage(Si, "newid:" & newid.ToString)

'							sql.AppendLine("CREATE TABLE [XFW_EP_VC_Tables](
'							[TableName] [nvarchar](100) Not Null PRIMARY KEY
'							)")
							
'							sql.AppendLine("DROP TABLE [dbo].[XFW_EP_VC_TRACKER]")
'							sql.AppendLine("CREATE TABLE [dbo].[XFW_EP_VC_TRACKER]")
'							sql.AppendLine("(")
'							sql.AppendLine(" [ID] [varchar] (200) PRIMARY KEY, ")
'							sql.AppendLine(" [ProcessID] [varchar] (200), ")
'							sql.AppendLine(" [AppName] [varchar] (200), ")
'							sql.AppendLine(" [Node_Name] [varchar] (200),")
'							sql.AppendLine(" [Source_Table_Name] [varchar] (200),")
'							sql.AppendLine(" [Source_Scenario] [varchar] (100),")
'							sql.AppendLine(" [UserName] [varchar] (100),")
'							sql.AppendLine(" [Target_Table_Name] [varchar] (300),")
'							sql.AppendLine(" [Target_Scenario] [varchar] (100),")
'							sql.AppendLine(" [Year] [varchar] (10),")
'							sql.AppendLine(" [Created_TS] [DATETIME],")
'							sql.AppendLine(" [Status] [varchar] (100)")
'							sql.AppendLine(")")

'							sql.AppendLine("CREATE TABLE [dbo].[XFW_EP_CC_Attribute]")
'							sql.AppendLine("(")
'							sql.AppendLine(" [CC] [nvarchar] (100) PRIMARY KEY,")
'							sql.AppendLine(" [Attribute1] [varchar] (200),")
'							sql.AppendLine(" [Attribute2] [varchar] (200),")
'							sql.AppendLine(" [Attribute3] [varchar] (200),")
'							sql.AppendLine(" [Attribute4] [varchar] (200),")
'							sql.AppendLine(" [Attribute5] [varchar] (200)")
'							sql.AppendLine(")")
'							sql.AppendLine("UPDATE XFW_NonWage_Register SET WFProfileName = REPLACE(WFProfileName,'PK_10 Credit Card Fees and Bank Charges','PK_10 Credit Card Fees Bank Charges') WHERE WFProfileName LIKE '%.PK_10 Credit Card Fees and Bank Charges'")

'							sql.AppendLine("CREATE TABLE [dbo].[XFW_CORP_VERSIONCOPY_TRACKER]")
'							sql.AppendLine("(")
'							sql.AppendLine(" [ID] [varchar] (200) PRIMARY KEY, ")
'							sql.AppendLine(" [AppName] [varchar] (200), ")
'							sql.AppendLine(" [Year] [varchar] (10),")
'							sql.AppendLine(" [Source_Scenario] [varchar] (100),")
'							sql.AppendLine(" [Target_Scenario] [varchar] (100),")
'							sql.AppendLine(" [Entity] [varchar] (100),")
'							sql.AppendLine(" [UserId] [varchar] (100),")
'							sql.AppendLine(" [Start_Time] [DATETIME],")
'							sql.AppendLine(" [End_Time] [DATETIME],")
'							sql.AppendLine(" [Status] [varchar] (100),")
'							sql.AppendLine(")")

'							sql.AppendLine("DELETE FROM XFW_CORP_VERSIONCOPY_TRACKER")
							
'							sql.AppendLine("CREATE TABLE [XFW_NonWage_Register](
'							[UniqueID] [uniqueidentifier] Not Null,
'							[WFProfileName] [nvarchar](100) Not Null,
'							[WFScenarioName] [nvarchar](100) Not Null,
'							[WFTimeName] [nvarchar](100) Not Null,
'							[UserID] [nvarchar](100),
'							[CostCenter] [nvarchar](100) Not Null,
'							[GL] [nvarchar](100) Not Null,
'							[LineItem] [Integer],
'							[TF_1] [nvarchar](100),
'							[TF_2] [nvarchar](100),
'							[TF_3] [nvarchar](100),
'							[TF_4] [nvarchar](100),
'							[TF_5] [nvarchar](100),
'							[TF_6] [nvarchar](100),
'							[TF_7] [nvarchar](100),
'							[TF_8] [nvarchar](100),
'							[TF_9] [nvarchar](100),
'							[TF_10] [nvarchar](100),
'							[TF_11] [nvarchar](100),
'							[TF_12] [nvarchar](100),
'							[TF_13] [nvarchar](100),
'							[TF_14] [nvarchar](100),
'							[TF_15] [nvarchar](100),
'							[TF_16] [nvarchar](100),
'							[TF_17] [nvarchar](100),
'							[TF_18] [nvarchar](100),
'							[NF_1] [decimal](28, 9),
'							[NF_2] [decimal](28, 9),
'							[NF_3] [decimal](28, 9),
'							[NF_4] [decimal](28, 9),
'							[NF_5] [decimal](28, 9),
'							[NF_6] [decimal](28, 9),
'							[Updated_Time] [date],
'							[P01] [decimal](28, 9),
'							[P02] [decimal](28, 9),
'							[P03] [decimal](28, 9),
'							[P04] [decimal](28, 9),
'							[P05] [decimal](28, 9),
'							[P06] [decimal](28, 9),
'							[P07] [decimal](28, 9),
'							[P08] [decimal](28, 9),
'							[P09] [decimal](28, 9),
'							[P10] [decimal](28, 9),
'							[P11] [decimal](28, 9),
'							[P12] [decimal](28, 9),
'							[YearTotal] [decimal](28, 9),
'							CONSTRAINT [PK_XFW_NonWage_Register] PRIMARY KEY CLUSTERED 
'							(						
'								[UniqueID] ASC
'							)
'							)")
								
'							sql.AppendLine("ALTER TABLE [dbo].[XFW_NonWage_Register] DROP CONSTRAINT UNQ_XFW_NonWage_Register")
'							sql.AppendLine("ALTER TABLE [dbo].[XFW_NonWage_Register] ADD CONSTRAINT UNQ_XFW_NonWage_Register UNIQUE (WFScenarioName,WFTimeName,CostCenter,GL,LineItem);")
							
							
							
'							sql.AppendLine("DROP TABLE [dbo].[XFW_NonWage_Register_AuditLog] ")
'							sql.AppendLine("CREATE TABLE [XFW_NonWage_Register_AuditLog](
'								[UniqueID] [uniqueidentifier],
'								[WFProfileName] [nvarchar](100),
'								[WFScenarioName] [nvarchar](100),
'								[WFTimeName] [nvarchar](100),
'								[CostCenter] [nvarchar](100),
'								[GL] [nvarchar](100),
'								[LineItem] [nvarchar](100),
'								[TF_1] [nvarchar](500),
'								[TF_2] [nvarchar](500),
'								[TF_3] [nvarchar](500),
'								[TF_4] [nvarchar](500),
'								[TF_5] [nvarchar](500),
'								[TF_6] [nvarchar](500),
'								[TF_7] [nvarchar](500),
'								[TF_8] [nvarchar](500),
'								[TF_9] [nvarchar](500),
'								[TF_10] [nvarchar](500),
'								[TF_11] [nvarchar](500),
'								[TF_12] [nvarchar](500),
'								[TF_13] [nvarchar](500),
'								[TF_14] [nvarchar](500),
'								[TF_15] [nvarchar](500),
'								[TF_16] [nvarchar](500),
'								[TF_17] [nvarchar](500),
'								[TF_18] [nvarchar](500),
'								[NF_1] [decimal](28, 9),
'								[NF_2] [decimal](28, 9),
'								[NF_3] [decimal](28, 9),
'								[NF_4] [decimal](28, 9),
'								[NF_5] [decimal](28, 9),
'								[NF_6] [decimal](28, 9),
'								[NF_7] [decimal](28, 9),
'								[YearTotal] [decimal](28, 2),
'								[P01] [decimal](28, 2),
'								[P02] [decimal](28, 2),
'								[P03] [decimal](28, 2),
'								[P04] [decimal](28, 2),
'								[P05] [decimal](28, 2),
'								[P06] [decimal](28, 2),
'								[P07] [decimal](28, 2),
'								[P08] [decimal](28, 2),
'								[P09] [decimal](28, 2),
'								[P10] [decimal](28, 2),
'								[P11] [decimal](28, 2),
'								[P12] [decimal](28, 2),
'								[Action] [nvarchar](500),
'								[Location] [nvarchar](500),
'								[UserID] [nvarchar](500),
'								[Updated_On] [datetime])
'								")

'							sql.AppendLine("ALTER TABLE XFW_NonWage_TempRegister ALTER COLUMN UniqueID [varchar](36)")
'							sql.Appendline("DROP TABLE XFW_CorpAllocAdj_Input")
'							sql.AppendLine("CREATE TABLE [XFW_CorpAllocAdj_Input](
'							[UniqueID] [uniqueidentifier] Not Null PRIMARY KEY,
'							[WFProfileName] [nvarchar](100),
'							[WFScenarioName] [nvarchar](100),
'							[WFTimeName] [nvarchar](100),
'							[Label] [nvarchar](100),
'							[Alloc_Group][nvarchar](100),
'							[Description] [nvarchar](100),
'							[Src_Function] [nvarchar](100),
'							[Src_Cube] [nvarchar](100),
'							[Src_Cur] [nvarchar](100),
'							[Src_CC] [nvarchar](100),
'							[Src_Acc] [nvarchar](100),
'							[Src_CT] [nvarchar](100),
'							[Trg_Function] [nvarchar](100),
'							[Trg_Cube] [nvarchar](100),
'							[Trg_Cur] [nvarchar](100),
'							[Trg_CC] [nvarchar](100),
'							[Trg_Acc] [nvarchar](100),
'							[Trg_CT] [nvarchar](100),
'							[UserID] [nvarchar](100),
'							[Allow_Exclude] [nvarchar](100),
'							[TS] [datetime],
'							[M1] [decimal](28, 2),
'							[M2] [decimal](28, 2),
'							[M3] [decimal](28, 2),
'							[M4] [decimal](28, 2),
'							[M5] [decimal](28, 2),
'							[M6] [decimal](28, 2),
'							[M7] [decimal](28, 2),
'							[M8] [decimal](28, 2),
'							[M9] [decimal](28, 2),
'							[M10] [decimal](28, 2),
'							[M11] [decimal](28, 2),
'							[M12] [decimal](28, 2),
'							[YearTotal] [decimal](28, 2)
'							)")
'sql.Appendline("DROP TABLE XFW_CorpAllocAdj_calc")
'sql.AppendLine("CREATE TABLE [XFW_CorpAllocAdj_calc](
'							[UniqueID] [uniqueidentifier] Not Null PRIMARY KEY,
'							[JournalID] [nvarchar](100),
'							[WFProfileName] [nvarchar](100),
'							[WFScenarioName] [nvarchar](100),
'							[WFTimeName] [nvarchar](100),
'							[Label] [nvarchar](100),
'                            [Alloc_Group][nvarchar](100),
'							[Description] [nvarchar](100),
'							[Function_src_trg] [nvarchar](100),
'							[CubeName] [nvarchar](100),
'							[Currency] [nvarchar](100),
'							[CostCenter] [nvarchar](100),
'							[Account] [nvarchar](100),
'							[CenterType] [nvarchar](100),
'							[UserID] [nvarchar](100),
'							[Allow_Exclude] [nvarchar](100),
'							[TS] [datetime],
'							[M1] [decimal](28, 2),
'							[M2] [decimal](28, 2),
'							[M3] [decimal](28, 2),
'							[M4] [decimal](28, 2),
'							[M5] [decimal](28, 2),
'							[M6] [decimal](28, 2),
'							[M7] [decimal](28, 2),
'							[M8] [decimal](28, 2),
'							[M9] [decimal](28, 2),
'							[M10] [decimal](28, 2),
'							[M11] [decimal](28, 2),
'							[M12] [decimal](28, 2),			
'							[YearTotal] [decimal](28, 2),
'                            [TypeofConv][nvarchar](100),
'                            [TF_1] [nvarchar](100),
' 							[TF_2] [nvarchar](100),
'							[TF_3] [nvarchar](100),
'							[TF_4] [nvarchar](100),
'                            [TF_5] [nvarchar](100),
'                            [TF_6] [nvarchar](100),
'                            [TF_7] [nvarchar](100),                         
'							[TF_8] [nvarchar](100)
')")

'''							sql.Appendline("DROP TABLE XFW_S4_CT2CD_Mapping")
'''							sql.AppendLine("CREATE TABLE XFW_S4_CT2CD_Mapping (
'''								[UniqueID] [uniqueidentifier] Not Null PRIMARY KEY,
'''								[Src_CC] [nvarchar](100),
''								[Src_GL] [nvarchar](100),
''								[Src_CT] [nvarchar](100),
''								[Trg_CC] [nvarchar](100),
''								[Trg_GL] [nvarchar](100),
''								[Trg_CD] [nvarchar](100),							
''							)")

'                            sql.Appendline("DELETE FROM XFW_CorpAllocAdj_Input")
'							sql.Appendline("DELETE FROM XFW_CorpAllocAdj_Calc")
''							sql.Appendline("DROP TABLE currency")
'							sql.AppendLine("CREATE TABLE Currency (
'											Name VARCHAR(100),
'											Currency VARCHAR(100),
'											Symbol VARCHAR(100)
'											)")

'							sql.Appendline("INSERT Into Currency(Name,Currency,Symbol) VALUES ('Leke', 'ALL', 'Lek'),('Dollars', 'USD', '$'),('Afghanis', 'AFN', '؋'),('Pesos', 'ARS', '$'),('Guilders', 'AWG', 'ƒ'),('Dollars', 'AUD', '$'),('New Manats', 'AZN', 'ман'),('Dollars', 'BSD', '$'),('Dollars', 'BBD', '$'),('Rubles', 'BYR', 'p.'),('Euro', 'EUR', '€'),('Dollars', 'BZD', 'BZ$'),('Dollars', 'BMD', '$'),('Bolivianos', 'BOB', '$b'),('Convertible Marka', 'BAM', 'KM'),('Pula', 'BWP', 'P'),('Leva', 'BGN', 'лв'),('Reais', 'BRL', 'R$'),('Pounds', 'GBP', '£'),('Dollars', 'BND', '$'),('Riels', 'KHR', '៛'),('Dollars', 'CAD', '$'),('Dollars', 'KYD', '$'),('Pesos', 'CLP', '$'),('Yuan Renminbi', 'CNY', '¥'),('Pesos', 'COP', '$'),('Colón', 'CRC', '₡'),('Kuna', 'HRK', 'kn'),('Pesos', 'CUP', '₱'),('Koruny', 'CZK', 'Kč'),('Kroner', 'DKK', 'kr'),('Pesos', 'DOP ', 'RD$'),('Dollars', 'XCD', '$'),('Pounds', 'EGP', '£'),('Colones', 'SVC', '$'),('Pounds', 'FKP', '£'),('Dollars', 'FJD', '$'),('Cedis', 'GHC', '¢'),('Pounds', 'GIP', '£'),('Quetzales', 'GTQ', 'Q'),('Pounds', 'GGP', '£'),('Dollars', 'GYD', '$'),('Lempiras', 'HNL', 'L'),('Dollars', 'HKD', '$'),('Forint', 'HUF', 'Ft'),('Kronur', 'ISK', 'kr'),('Rupees', 'INR', 'Rp'),('Rupiahs', 'IDR', 'Rp'),('Rials', 'IRR', '﷼'),('Pounds', 'IMP', '£'),('New Shekels', 'ILS', '₪'),('Dollars', 'JMD', 'J$'),('Yen', 'JPY', '¥'),('Pounds', 'JEP', '£'),('Tenge', 'KZT', 'лв'),('Won', 'KPW', '₩'),('Won', 'KRW', '₩'),('Soms', 'KGS', 'лв'),('Kips', 'LAK', '₭'),('Lati', 'LVL', 'Ls'),('Pounds', 'LBP', '£'),('Dollars', 'LRD', '$'),('Switzerland Francs', 'CHF', 'CHF'),('Litai', 'LTL', 'Lt'),('Denars', 'MKD', 'ден'),('Ringgits', 'MYR', 'RM'),('Rupees', 'MUR', '₨'),('Pesos', 'MXN', '$'),('Tugriks', 'MNT', '₮'),('Meticais', 'MZN', 'MT'),('Dollars', 'NAD', '$'),('Rupees', 'NPR', '₨'),('Guilders', 'ANG', 'ƒ'),('Dollars', 'NZD', '$'),('Cordobas', 'NIO', 'C$'),('Nairas', 'NGN', '₦'),('Krone', 'NOK', 'kr'),('Rials', 'OMR', '﷼'),('Rupees', 'PKR', '₨'),('Balboa', 'PAB', 'B/.'),('Guarani', 'PYG', 'Gs'),('Nuevos Soles', 'PEN', 'S/.'),('Pesos', 'PHP', 'Php'),('Zlotych', 'PLN', 'zł'),('Rials', 'QAR', '﷼'),('New Lei', 'RON', 'lei'),('Rubles', 'RUB', 'руб'),('Pounds', 'SHP', '£'),('Riyals', 'SAR', '﷼'),('Dinars', 'RSD', 'Дин.'),('Rupees', 'SCR', '₨'),('Dollars', 'SGD', '$'),('Dollars', 'SBD', '$'),('Shillings', 'SOS', 'S'),('Rand', 'ZAR', 'R'),('Rupees', 'LKR', '₨'),('Kronor', 'SEK', 'kr'),('Dollars', 'SRD', '$'),('Pounds', 'SYP', '£'),('New Dollars', 'TWD', 'NT$'),('Baht', 'THB', '฿'),('Dollars', 'TTD', 'TT$'),('Lira', 'TRY', 'TL'),('Liras', 'TRL', '£'),('Dollars', 'TVD', '$'),('Hryvnia', 'UAH', '₴'),('Pesos', 'UYU', '$U'),('Sums', 'UZS', 'лв'),('Bolivares Fuertes', 'VEF', 'Bs'),('Dong', 'VND', '₫'),('Rials', 'YER', '﷼'),('Zimbabwe Dollars', 'ZWD', 'Z$')")

							
'							sql.AppendLine("DROP TABLE [dbo].[XFW_NonWage_TempRegister] ")
'							sql.AppendLine("CREATE TABLE [XFW_NonWage_TempRegister](
'								[WFProfileName] [nvarchar](256),
'								[WFScenarioName] [nvarchar](256),
'								[WFTimeName] [nvarchar](256),
'								[UserID] [nvarchar](256),
'								[UniqueID] [nvarchar](256),
'								[Error_Code] [nvarchar](256),
'								[Error_Message] [varchar](500),
'								[CostCenter] [nvarchar](256),
'								[GL] [nvarchar](256),
'								[TF_1] [nvarchar](256),
'								[TF_2] [nvarchar](256),
'								[TF_3] [nvarchar](256),
'								[TF_4] [nvarchar](256),
'								[TF_5] [nvarchar](256),
'								[TF_6] [nvarchar](256),
'								[TF_7] [nvarchar](256),
'								[TF_8] [nvarchar](256),
'								[TF_9] [nvarchar](256),
'								[TF_10] [nvarchar](256),
'								[TF_11] [nvarchar](256),
'								[TF_12] [nvarchar](256),
'								[TF_13] [nvarchar](256),
'								[TF_14] [nvarchar](256),
'								[TF_15] [nvarchar](256),
'								[TF_16] [nvarchar](256),
'								[TF_17] [nvarchar](256),
'								[TF_18] [nvarchar](256),
'								[NF_1] [decimal](28, 9),
'								[NF_2] [decimal](28, 9),
'								[NF_3] [decimal](28, 9),
'								[NF_4] [decimal](28, 9),
'								[NF_5] [decimal](28, 9),
'								[NF_6] [decimal](28, 9),
'								[NF_7] [decimal](28, 9),
'								[YearTotal] [decimal](28, 2),
'								[P01] [decimal](28, 2),
'								[P02] [decimal](28, 2),
'								[P03] [decimal](28, 2),
'								[P04] [decimal](28, 2),
'								[P05] [decimal](28, 2),
'								[P06] [decimal](28, 2),
'								[P07] [decimal](28, 2),
'								[P08] [decimal](28, 2),
'								[P09] [decimal](28, 2),
'								[P10] [decimal](28, 2),
'								[P11] [decimal](28, 2),
'								[P12] [decimal](28, 2)
'								CONSTRAINT [PK_XFW_NonWage_TempRegister] PRIMARY KEY CLUSTERED 
'								(
'									[WFProfileName] ASC,
'									[WFScenarioName] ASC,
'									[WFTimeName] ASC,
'									[UserID],
'									[UniqueID]
'								))")

'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register DROP CONSTRAINT PK_XFW_NonWage_Register")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ALTER COLUMN UniqueID nvarchar(256)")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register alter column UniqueID nvarchar(256) Not NULL")
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register ADD CONSTRAINT PK_XFW_NonWage_Register PRIMARY KEY (UniqueID)")
							
'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register_AuditLog ALTER COLUMN UniqueID nvarchar(256)")

'							sql.AppendLine("ALTER TABLE XFW_NonWage_Register_AuditLog ALTER COLUMN LineItem integer")
							
'							sql.AppendLine("ALTER TABLE XFW_ExpensePlanning_Queue DROP CONSTRAINT PK__XFW_Expe__A2A2BAAAF084DAD8")
'							sql.AppendLine("ALTER TABLE XFW_ExpensePlanning_Queue ALTER COLUMN UniqueID nvarchar(256)")
'							sql.AppendLine("ALTER TABLE XFW_ExpensePlanning_Queue ALTER column UniqueID nvarchar(256) Not NULL")
'							sql.AppendLine("ALTER TABLE XFW_ExpensePlanning_Queue ADD CONSTRAINT PK_XFW_ExpensePlanning_Queue PRIMARY KEY (UniqueID)")

							'sql.AppendLine("DROP TABLE [dbo].[XFW_EP_LOCK_WF] ")					
							sql.AppendLine("CREATE TABLE [dbo].[XFW_EP_LOCK_WF] ")
							sql.AppendLine("( ")  						 
							sql.AppendLine(" [WFScenario] [varchar](50),") 
							sql.AppendLine(" [WFYear] [varchar](50),") 
							sql.AppendLine(" [WfStep] [varchar](1000) ,")
							sql.AppendLine(" [ENABLED] [bit] NOT NULL, ")						
							sql.AppendLine(")")

							BRApi.Database.ExecuteActionQuery (dbConnApp, sql.ToString, False, False)
						End Using

						
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="NonWages_PopulateRACI">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Data.SqlClient
Imports System.Diagnostics

Namespace OneStream.BusinessRule.Extender.NonWages_PopulateRACI
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim DEBUG As Boolean = False
						Dim dt As DataTable = Nothing
						Dim dt2 As DataTable = Nothing
						Dim sql1 As String = "SELECT VBO_NAME FROM XFW_ExpensePlanning_SEGMENT_VBO "

'						Dim sql1 As String = "SELECT VBO_NAME FROM XFW_ExpensePlanning_SEGMENT_VBO WHERE VBO_NAME='WMTUS_Total_Operations_mgmt' OR VBO_NAME='WMTUS_Total_Supply_Chain_mgmt'"
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							dt = BRAPi.Database.ExecuteSql(dbConnApp,sql1,False)
						End Using
						
						Dim sql2 As String = String.Empty
						Dim accountlist As New List(Of String) ({"PK_Wages", "PK_NonWages", "PK_Accounting"})															
						Dim centertypelist As New List(Of String) ({"CT_Tot_wo_Fuel","CT_F"})
						Dim orgtypelist As New List(Of String) ({"Overheads","Other Operational","Store - Club","SupplyChain"})
						Dim dt_RACI As New DataTable 
						dt_RACI.Columns.Add("VBO")
						dt_RACI.Columns.Add("Org_Type")
						dt_RACI.Columns.Add("Center_Type")
						dt_RACI.Columns.Add("Country")
						dt_RACI.Columns.Add("Package_ID")
						dt_RACI.Columns.Add("SubPackage_ID")
						dt_RACI.Columns.Add("GL")
						dt_RACI.Columns.Add("MethodID")
						dt_RACI.Columns.Add("Anaplan_ECF")
					
						sql2 += "DELETE FROM XFW_RACI_Matrix "
						If dt.Rows.Count > 0
							For Each dr As DataRow In dt.Rows
								Dim vbo_name As String = String.Empty
'								If dr("VBO_NAME") = "WMTUS_Total_Operations_mgmt"
'									vbo_name = "WMTUS_Total_Operations_mgmt_wo_PR"
'								Else
									vbo_name = dr("VBO_NAME")
'								End If
								For Each orgtype In orgtypelist
									For Each center_type In centertypelist
										For Each account As String In accountlist
											Dim packagelistMemInfo As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "Detail_Account", "A#" & account & ".Children", True)
											For Each package In packagelistMemInfo
												Dim subpackagelistMemInfo As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "Detail_Account", "A#" & package.Member.Name & ".Children", True)															
												For Each subpackage As MemberInfo In subpackagelistMemInfo
													Dim gllistMemInfo As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "Detail_Account", "A#" & subpackage.Member.Name & ".Children", True)	
													For Each gl As MemberInfo In gllistMemInfo
													Dim dr2 As DataRow=dt_RACI.NewRow
'														For Each dr2 As DataRow In dt_RACI.Rows
															dr2("VBO")=vbo_name
															dr2("Org_Type")=orgtype
															dr2("Center_Type")=center_type
															If vbo_name.XFContainsIgnoreCase("WMTUS_Total_Operations_mgmt") 
																dr2("Country")="Puerto Rico - Cntry"
															Else
																dr2("Country")=String.Empty
															End If
															dr2("Package_ID")=package.Member.Name
															dr2("SubPackage_ID")=subpackage.Member.Name
															dr2("GL")=gl.Member.Name
															dr2("MethodID")=3
															
															If vbo_name.XFContainsIgnoreCase("SAMS_Other_VBO") Or vbo_name.XFContainsIgnoreCase("SAMS_ECOMMERCE_SUPPLY_CHAIN_INCL_ELIM") Or vbo_name.XFContainsIgnoreCase("SAMS_ECOMMERCE_WO_SUPPLY_CHAIN") Or vbo_name.XFContainsIgnoreCase("SAMS_TOTAL_ECOMMERCE_SERVICES_VBO")
																dr2("Anaplan_ECF")="Yes, Anaplan"
															Else If vbo_name.XFContainsIgnoreCase("WMTUS_Total_Ecommerce_Mgmt")
																dr2("Anaplan_ECF")="Yes, ECF"
															Else 
																dr2("Anaplan_ECF")=String.Empty
															End If
															
'                                                            Dim sql3 As String = "SELECT Planning_Methodology FROM XFW_ExpensePlanning_GLPlanner Where GL_Code='"&gl.Member.Name &"' "

'															Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'															dt2 = BRAPi.Database.ExecuteSql(dbConnApp,sql3,False)
'														    End Using
'															For Each dr3 As DataRow In dt2.Rows
'																If dr3("Planning_Methodology").Equals("Finalcial_Only")
'																	dr2("MethodID")=1
'																Else 
'																     dr2("MethodID")=3
'																End If
'															Next
														dt_RACI.Rows.Add(dr2)
														
'														Next
														
'														sql2 += "INSERT INTO XFW_RACI_Matrix VALUES ('" & vbo_name & "','" & orgtype & "','" & center_type & "','" & package.Member.Name & "','" & subpackage.Member.Name & "','" & gl.Member.Name & "',1)"
													Next
												Next
											Next
										Next
									Next	
								Next
							Next
						End If
						
'						BRApi.ErrorLog.LogMessage(si, "datable dt2", CSVBuilder(dt2).ToString)
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							BRAPi.Database.ExecuteActionQuery(dbConnApp,sql2,False,False)
						End Using
'	Using dbExtConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'						Using objSQLBulkCopy As New SqlBulkCopy(dbExtConn.ConnectionString)
'						objSQLBulkCopy.DestinationTableName = "XFW_RACI_Matrix"
'	                    objSQLBulkCopy.WriteToServer(dt_RACI)
'					 	End Using
'	End Using
'				BRApi.Database.SaveCustomDataTable(si, "Application", "XFW_RACI_Matrix", dt_RACI, True)

				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		Public Function CSVBuilder(dt As DataTable) As Text.StringBuilder
			Dim sCSV As New Text.StringBuilder
			If dt IsNot Nothing Then
				If dt.Rows.Count > 0 Then
					
					For Each dc As DataColumn In dt.Columns
						sCSV.Append(dc.ColumnName & ",")
					Next
					sCSV.Remove(sCSV.Length-1,1)
					sCSV.Append(Environment.NewLine)
					For Each dr As DataRow In dt.Rows
						For Each dc As DataColumn In dt.Columns
	     					sCSV.Append(dr(dc).ToString & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
					Next
				End If
			End If
			Return sCSV
    	End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="NonWages_Submit_Push">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EXP_ENT_WMTUS" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.NonWages_Submit_Push
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						Dim profileName As String = "Admin.Import"
						Dim scenarioName As String = "Plan_Working"
						Dim timeName As String = "2023"
						Dim valTransform As Boolean = True
						Dim valIntersect As Boolean = True
						Dim loadCube As Boolean = False
						Dim processCube As Boolean = False
						Dim confirm As Boolean = False
						Dim autoCertify As Boolean = False
						Dim logMessage As New Text.StringBuilder
						Dim successFlag As Boolean = False
						
						
						Dim wfClusterPk As WorkflowUnitClusterPk
						wfClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, profileName, scenarioName, timeName)
						Dim wfStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfClusterPk)
						
						Dim uniqueidlist As Text.StringBuilder = ReadWatcher(si)

					If Not String.IsNullOrEmpty(uniqueidlist.ToString) Then
						Dim ImportInfo As LoadTransformProcessInfo = BRApi.Import.Process.ExecuteParseAndTransform(si, wFClusterPk, "", Nothing, TransformLoadMethodTypes.Replace, SourceDataOriginTypes.FromDirectConnection, True)
						If ImportInfo.Status = WorkflowStatusTypes.Completed
							logMessage.AppendLine("Import completed successfully")
							Dim valTranProcessInfo As ValidationTransformationProcessInfo = BRApi.Import.Process.ValidateTransformation(si, wfClusterPk, True)
							If valTranProcessInfo.Status =  WorkflowStatusTypes.Completed
								logMessage.AppendLine("Validate Transfromation completed successfully")
								Dim valIntersectProcessInfo As ValidateIntersectionProcessInfo = BRApi.Import.Process.ValidateIntersections(si, wfClusterPk, True)
								If valIntersectProcessInfo.Status =  WorkflowStatusTypes.Completed
									logMessage.AppendLine("Validate Intersections completed successfully")
									Dim loadCubeInfo As LoadCubeProcessInfo = BRApi.Import.Process.LoadCube(si, wfClusterPk)
									If loadCubeInfo.Status = WorkflowStatusTypes.Completed Then
										logMessage.AppendLine("Lode Cube completed successfully")
										successFlag = True
									Else
										logMessage.AppendLine("Loading failed on the Load Cube step")
									End If
								Else
									logMessage.AppendLine("Loading failed on the Validate Intersections step")
								End If
							Else
								logMessage.AppendLine("Loading failed on the Validate Transformation step")
							End If
						 Else
							logMessage.AppendLine("Loading failed on the Import step")
						 End If
					  Else
						  logMessage.AppendLine("No modified cost centers to process")
					  End If
						
						UpdateWatcher(si,successFlag)
						BRApi.ErrorLog.LogMessage(si, "logMessage", logMessage.ToString)
						
				End Select
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Sub UpdateWatcher(ByVal si As SessionInfo, ByVal successFlag As Boolean)
			Try
					Dim uniqueidlist As Text.StringBuilder = ReadWatcher(si)
					If Not String.IsNullOrEmpty(uniqueidlist.ToString)
						Dim sql As String = String.Empty
						If successFlag Then
							sql = "UPDATE [dbo].[XFW_NonWage_UpdatedCClist] SET Processed_Flag=1 WHERE UniqueID IN (" & uniqueidlist.ToString & ")"
						Else
							sql = "UPDATE [dbo].[XFW_NonWage_UpdatedCClist] SET Processed_Flag=-1 WHERE UniqueID IN (" & uniqueidlist.ToString & ")"
						End If
						
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								BRAPi.Database.ExecuteActionQuery(dbConnApp,sql,False,False)
						End Using
					Else
						BRAPI.ErrorLog.LogMessage(si, "No modified cost centers to update watcher")
					End If
			
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		Public Function ReadWatcher(ByVal si As SessionInfo) As Text.StringBuilder
			Try
				Dim uniqueidlist As New Text.StringBuilder
				
				Dim dt_watcher As Datatable = Nothing
				Dim sql As String = "SELECT * FROM [dbo].[XFW_NonWage_UpdatedCClist] WHERE Processed_Flag=0 OR Processed_Flag =-1"
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_watcher = BRAPi.Database.ExecuteSql(dbConnApp,sql,False)
				End Using
				
				If dt_watcher IsNot Nothing
					If dt_watcher.Rows.Count > 0
						For Each dr_watcher As DataRow In dt_watcher.Rows
							uniqueidlist.Append("'" & dr_watcher("UniqueID").ToString & "',")
						Next
						uniqueidlist.Remove(uniqueidlist.Length-1,1)
					End If
				End If
				
			Return uniqueidlist
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="OMD_CreateTables">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.OMD_CreateTables
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				
				Dim sql As New Text.StringBuilder	
					'Me.dtToTable(si)
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'					sql.AppendLine("CREATE TABLE XFW_VERSION_CONTROL_TABLES")
'					sql.AppendLine("( ")
'					sql.AppendLine("[Table_Name] [nvarchar](200)")
'					sql.AppendLine(")")
'					sql.AppendLine("Drop table XFW_SCENARIO_TRACKER")
'					sql.AppendLine("CREATE TABLE [dbo].[XFW_SCENARIO_TRACKER]")
'					sql.AppendLine("(")
'					sql.AppendLine(" [ID] [INT] NOT NULL IDENTITY(1,1) PRIMARY KEY, ")
'					sql.AppendLine(" [Segment_Name] [varchar] (200),")
'					sql.AppendLine(" [Source_Table_Name] [varchar] (200),")
'					sql.AppendLine(" [Source_Scenario] [varchar] (100),")
'					sql.AppendLine(" [UserName] [varchar] (100),")
'					sql.AppendLine(" [Target_Table_Name] [varchar] (300),")
'					sql.AppendLine(" [Target_Scenario] [varchar] (100),")
'					sql.AppendLine(" [Year] [varchar] (10),")
'					sql.AppendLine(" [Created_TS] [DATETIME],")
'					sql.AppendLine(" [Status] [varchar] (100)")
'					sql.AppendLine(")")
'					sql.AppendLine("EXEC sp_rename 'dbo.XFW_OMD_HEALTHVIEW.Entity', 'src_entity', 'COLUMN'")
'					sql.AppendLine("Alter table XFW_OMD_HEALTHVIEW")
'					sql.AppendLine("Add [trg_entity] [varchar] (100) NOT NULL")
'					sql.AppendLine("Constraint trg_entity Default 'Walmart_Total_Company'")
					
'					sql.AppendLine("Alter table XFW_OMD_HEALTHVIEW")
'					sql.AppendLine("Add [Cons_Member] [varchar] (100) NOT NULL")
'					sql.AppendLine("Constraint Cons_Member Default 'Local'")
					
'					sql.AppendLine("Alter table XFW_OMD_HEALTHVIEW")
'					sql.AppendLine("Add [Year] [varchar] (10) NOT NULL")
'					sql.AppendLine("Constraint year Default '2023'")
					
'					sql.AppendLine("Alter table XFW_OMD_HEALTHVIEW")
'					sql.AppendLine("Add [Entity] [varchar] (500) NOT NULL")
'					sql.AppendLine("Constraint entity Default 'Walmart_Total_Company'"
					
'					sql.AppendLine("CREATE TABLE [dbo].[XFW_OMD_HV_EXECUTION] ")
'					sql.AppendLine("( ") 
'					sql.AppendLine(" [HV_ID] [varchar] (500) NOT NULL FOREIGN KEY REFERENCES [DBO].[XFW_OMD_HEALTHVIEW](ID),")
'					sql.AppendLine(" [HV_EXE_ID] [varchar] (500), ")
'					sql.AppendLine(" [STATUS] [varchar] (100), ")
'					sql.AppendLine(" [EXE_TS] [DATETIME] DEFAULT CURRENT_TIMESTAMP, ") 
'					sQL.AppendLine("PRIMARY KEY (HV_ID, HV_EXE_ID)")
'					sql.AppendLine(")")	
					
'					sql.AppendLine("CREATE TABLE [dbo].[XFW_OMD_HEALTHVIEW] ")
'					sql.AppendLine("( ") 
'					sql.AppendLine(" [ID] [varchar] (500) NOT NULL PRIMARY KEY, ") 
'					sql.AppendLine(" [SRC] [varchar] (100) , ") 								
'					sql.AppendLine(" [SRC_ADDTLINFO] [varchar] (100), ") 
'					sql.AppendLine(" [TRG] [varchar] (100), ")
'					sql.AppendLine(" [TRG_ADDTLINFO][varchar] (100), ")
'					sql.AppendLine(" [SRC_SCENARIO][varchar] (100), ")
'					sql.AppendLine(" [TRG_SCENARIO][varchar] (100), ")
'					sql.AppendLine(" [SRC_CUBEVIEW][varchar] (100), ")
'					sql.AppendLine(" [TRG_CUBEVIEW][varchar] (100), ")
'					Sql.AppendLine(" [IS_ENABLED][varchar] (10) ")
'					sql.AppendLine(")")

'					sql.AppendLine(" [INTERFACE_ID] [varchar] (1000),")
'					sql.AppendLine("Alter table XFW_OMD_EXECUTION ")
'					sql.AppendLine("Drop Column ") 								
'					sql.AppendLine("[IMP_ID], ") 								
'					sql.AppendLine(" [TRN_ID], ") 
'					sql.AppendLine("[VAL_ID], ") 
'					sql.AppendLine("[LOAD_ID] ,")
'					sql.AppendLine(" [CONS_ID] ")

'					sql.AppendLine("DROP TABLE [dbo].[XFW_OMD_HEALTH_VIEW_HELPER]")
'					sql.AppendLine("CREATE TABLE [dbo].[XFW_OMD_HEALTH_VIEW_HELPER]")
'					sql.AppendLine("(")
'					sql.AppendLine(" [UniqueID] [varchar] (1000), ")
'					sql.AppendLine(" [INTERFACE_ID] [varchar] (1000),")
'					sql.AppendLine(" [VIEW] [varchar] (1000),")
'					sql.AppendLine(" [ROW_MEMBER] [varchar] (1000),")
'					sql.AppendLine(" [ROW_DESCRIPTION] [varchar] (1000),")
'					sql.AppendLine(" [PARAMETERS] [varchar] (1000),")
'					sql.AppendLine(" [Year] [varchar] (10)")
'					sql.AppendLine(")")
					
					
'					sql.AppendLine("Alter table XFW_OMD_TASKACTIVITY ")
'					sql.AppendLine("Drop Column [TaskActivityType]")
'					sql.AppendLine("Add [TaskActivityType] [INT] NOT NULL")
'					sql.AppendLine("Constraint Task_abc Default '1000'")

'					sql.AppendLine("Alter table XFW_OMD_INTERFACE ")
'					sql.AppendLine("Add [TRG_SCENARIO] [varchar] (500) NOT NULL")
'					sql.AppendLine("Constraint Trg_abc Default 'PLAN WORKING'")
'					sql.AppendLine("Alter table [dbo].[XFW_OMD_INTERFACE] ")
'					sql.AppendLine("RENAME COLUMN [SCENARIO] TO [SRC_SCENARIO]")
					
'					sql.AppendLine("Alter table XFW_OMD_SUBTASK ")
'					sql.AppendLine("Add [ValidationStatus] [varchar] (100) NOT NULL")
'					sql.AppendLine("Constraint subtask_abc Default 'StatusOrangeBall'")

					'sql.AppendLine("EXEC sp_rename 'dbo.XFW_OMD_INTERFACE.SCENARIO', 'SRC_SCENARIO', 'COLUMN'")
					
'					sql.AppendLine("CREATE TABLE [dbo].[XFW_OMD_VALIDATION]")
'					sql.AppendLine("(")
'					sql.AppendLine(" [ID] [varchar] (1000) NOT NULL PRIMARY KEY,")
'					sql.AppendLine(" [JOB_ID] [varchar] (1000) NOT NULL FOREIGN KEY REFERENCES [DBO].[XFW_OMD_EXECUTION](JOB_ID),")
'					sql.AppendLine(" [sourceRecords] [varchar] (1000),")
'					sql.AppendLine(" [targetRecords] [varchar] (1000),")
'					sql.AppendLine(" [varianceCount] [varchar] (1000),")
'					sql.AppendLine(" [extraTargetRecord] [varchar] (1000),")
'					sql.AppendLine(" [extraSourceRecord] [varchar] (1000),")
'					sql.AppendLine(" [report_location] [varchar] (1000)")
'					sql.AppendLine(")")
'					sql.AppendLine("CREATE TABLE [dbo].[XFW_OMD_TASKACTIVITY]")
'					sql.AppendLine("(")
'					sql.AppendLine(" [UniqueID] [varchar] (1000),")
'					sql.AppendLine(" [Description] [varchar] (1000),")
'					sql.AppendLine(" [UserName] [varchar] (1000),")
'					sql.AppendLine(" [StartTime] [DATETIME],")
'					sql.AppendLine(" [EndTime] [DATETIME],")
'					sql.AppendLine(" [PercentageComplete] [varchar] (1000),")
'					sql.AppendLine(" [TaskActivityStatus] [INT]")
'					sql.AppendLine(" [TaskActivityType] [INT]")
'					sql.AppendLine(")")
'					sql.AppendLine("CREATE TABLE [dbo].[XFW_OMD_HEALTH_VIEW_REVIEW]")
'					sql.AppendLine("(")
'					sql.AppendLine(" [UniqueID] [varchar] (1000),")
'					sql.AppendLine(" [INTERFACE_ID] [varchar] (1000),")
'					sql.AppendLine(" [VIEW] [varchar] (1000),")
'					sql.AppendLine(" [ROW_MEMBER] [varchar] (1000),")
'					sql.AppendLine(" [ROW_DESCRIPTION] [varchar] (1000),")
'					sql.AppendLine(" [PARAMETERS] [varchar] (1000),")
'					sql.AppendLine(")")

'					sql.AppendLine("CREATE TABLE [dbo].[XFW_OMD_SUBSCRIBE] ")
'					sql.AppendLine("(")
'					sql.AppendLine("[ID] [INT] NOT NULL IDENTITY(1,1) PRIMARY KEY, ")
'					sql.AppendLine("[INT_ID] [varchar] (1000) NOT NULL FOREIGN KEY REFERENCES [DBO].[XFW_OMD_INTERFACE](ID), ")
'					sql.AppendLine("[SUCCESS_DL] [varchar] (5000), ")
'					sql.AppendLine("[FAILURE_DL] [varchar] (5000), ")
'					sql.AppendLine("[FILE_ATTACHMENT] [varchar] (1000) ")
'					sql.AppendLine(")")
				
'					sql.AppendLine("CREATE TABLE [dbo].[XFW_OMD_SUBTASK] ")
'					sql.AppendLine("( ") 
'					sql.AppendLine(" [JOB_ID] [varchar] (1000) NOT NULL FOREIGN KEY REFERENCES [DBO].[XFW_OMD_EXECUTION](JOB_ID),")
'					sql.AppendLine(" [SUB_TASK_ID] [varchar] (1000), ")
'					sql.AppendLine(" [STATUS] [varchar] (1000), ")
'					sQL.AppendLine("PRIMARY KEY (JOB_ID, SUB_TASK_ID)")
'					sql.AppendLine(")")	
					
'					sql.AppendLine("CREATE TABLE [dbo].[XFW_OMD_SUBTASK_Dummy] ")
'					sql.AppendLine("( ") 
'					sql.AppendLine(" [JOB_ID] [varchar] (1000),")
'					sql.AppendLine(" [SUB_TASK_ID] [varchar] (1000), ")
'					sql.AppendLine(" [STATUS] [varchar] (1000), ")
'					sQL.AppendLine("PRIMARY KEY (JOB_ID, SUB_TASK_ID)")
'					sql.AppendLine(")")	
					
'					sql.AppendLine("ALTER TABLE [dbo].[XFW_OMD_PROCESS] ALTER COLUMN [STATUS] ")
'					sql.AppendLine("SET DEFAULT 'StatusOrangeBall'")
'					BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)
'					BRApi.ErrorLog.LogMessage(si,"alter success")
'					sql.AppendLine("( ") 
'					sql.AppendLine(" [ID] [varchar] (1000) NOT NULL PRIMARY KEY, ") 
'					sql.AppendLine(" [DESCRIPTION] [varchar] (1000), ") 								
'					sql.AppendLine(" [SRC] [varchar] (1000) , ") 								
'					sql.AppendLine(" [SRC_ADDTLINFO] [varchar] (1000), ") 
'					sql.AppendLine(" [TRG] [varchar] (1000), ")
'					sql.AppendLine(" [TRG_ADDTLINFO][varchar] (1000), ")
'					sql.AppendLine(" [METHOD][varchar] (1000) ")
'					sql.AppendLine(")")	
'					
'					sql.AppendLine("CREATE TABLE [dbo].[XFW_OMD_INTERFACE] ")
'					sql.AppendLine("( ") 
'					sql.AppendLine(" [ID] [varchar] (1000) NOT NULL PRIMARY KEY, ") 
'					sql.AppendLine(" [DESCRIPTION] [varchar] (1000), ") 								
'					sql.AppendLine(" [SRC] [varchar] (1000) , ") 								
'					sql.AppendLine(" [SRC_ADDTLINFO] [varchar] (1000), ") 
'					sql.AppendLine(" [TRG] [varchar] (1000), ")
'					sql.AppendLine(" [TRG_ADDTLINFO][varchar] (1000), ")
'					sql.AppendLine(" [METHOD][varchar] (1000) ")
'					sql.AppendLine(")")		
					
					
'					sql = New Text.StringBuilder		
'					sql.AppendLine("CREATE TABLE [dbo].[XFW_OMD_EXECUTION] ")
'					sql.AppendLine("( ") 
'					sql.AppendLine(" [JOB_ID] [varchar] (1000) NOT NULL PRIMARY KEY,") 
'					sql.AppendLine(" [INT_ID] [varchar] (1000) NOT NULL, ") 								
'					sql.AppendLine(" [IMP_ID] [varchar] (1000) NOT NULL, ") 								
'					sql.AppendLine(" [TRN_ID] [varchar] (1000) NOT NULL, ") 
'					sql.AppendLine(" [VAL_ID] [varchar] (1000) NOT NULL, ") 
'					sql.AppendLine(" [LOAD_ID] [varchar] (1000) NOT NULL, ")
'					sql.AppendLine(" [CONS_ID] [varchar] (1000) NOT NULL, ") 
'					sql.AppendLine(" [UID] [varchar] (100) NOT NULL, ") 
'					sql.AppendLine(" [CREATED_TS] [DATETIME] DEFAULT CURRENT_TIMESTAMP ") 
'					sql.AppendLine(")")
				
'					sql = New Text.StringBuilder
				
'					sql.AppendLine("CREATE TABLE [dbo].[XFW_OMD_PROCESS] ")
'					sql.AppendLine("( ") 
'					sql.AppendLine(" [ID] [varchar] (1000) NOT NULL PRIMARY KEY,") 
'					sql.AppendLine(" [PRC_ID] [varchar] (1000) NOT NULL FOREIGN KEY REFERENCES [DBO].[XFW_OMD_EXECUTION](JOB_ID), ") 								
'					sql.AppendLine(" [STATUS] [varchar] (1000) DEFAULT 'StatusBlueBall', ") 								
'					sql.AppendLine(" [RCDS_IN] [varchar] (1000) DEFAULT NULL, ") 
'					sql.AppendLine(" [RCDS_OUT] [varchar] (1000) DEFAULT NULL, ") 
'					sql.AppendLine(" [ERR_CODE] [varchar] (1000) DEFAULT NULL, ")
'					sql.AppendLine(" [ERR_DESC] [varchar] (1000) DEFAULT NULL, ") 
'					sql.AppendLine(")")	
							
				
'					sql = New Text.StringBuilder
'					sql.AppendLine("DROP TABLE [dbo].[XFW_OMD_HEALTH_VIEW_HELPER]")
'					sql.AppendLine("Delete from [dbo].[XFW_OMD_TASKACTIVITY] where 1=1")
'					sql.AppendLine("DROP TABLE [dbo].[XFW_OMD_PROCESS]")
'					sql.AppendLine("Delete from [dbo].[XFW_OMD_SUBTASK] where 1=1")
'					sql.AppendLine("Delete from [dbo].[XFW_OMD_EXECUTION] where 1=1")

'					'For OMD CV Compare - Hiren
'					sql = New Text.StringBuilder
'					sql.AppendLine("DROP TABLE [dbo].[XFW_OMD_DATA_REVIEW]")
'					BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)	
'					sql = New Text.StringBuilder
'					sql.AppendLine("CREATE TABLE [dbo].[XFW_OMD_DATA_REVIEW] ")
'					sql.AppendLine("( ") 
'					sql.AppendLine(" [ID] INT NOT NULL IDENTITY(1,1) PRIMARY KEY,")
'					sql.AppendLine(" [INTERFACE_ID] [varchar] (1000) REFERENCES [dbo].[XFW_OMD_INTERFACE] ([ID]), ") 	
'					sql.AppendLine(" [VIEW] [varchar] (1000) NOT NULL, ") 																
'					sql.AppendLine(" [ROW_MEMBER] [varchar] (1000) DEFAULT NULL, ") 
'					sql.AppendLine(" [ROW_DESCRIPTION] [varchar] (1000) DEFAULT NULL, ") 
'					sql.AppendLine(" [PARAMETERS] [varchar] (1000) DEFAULT NULL, ")
'					sql.AppendLine(")")	
					BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)	
							
				End Using
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		Public Sub dtToTable(ByVal si As SessionInfo)
			Dim dt_join As New DataTable
			Dim activity_table As New DataTable
			Dim sqlQuery As String = "Select * from XFW_OMD_SUBTASK"
			Using dbConnApp As DBConnInfo = BRAPi.Database.CreateApplicationDbConnInfo(si)
				dt_join = BRApi.Database.ExecuteSql(dbConnApp, sqlQuery.ToString, True)
				' List of sub task ids
			End Using
			Dim job_list As String = ""
			
			If dt_join.Rows.Count() > 0 Then
				For i As Integer = 0 To dt_join.Rows.Count() -1
					If i = 0
						job_list = "'" + dt_join.Rows(i)("SUB_TASK_ID") + "'"
					Else
						job_list = "'" + dt_join.Rows(i)("SUB_TASK_ID") + "'," + job_list
					End If	
				Next
			
			End If
			
			Dim dml As String = String.Format( "SELECT UniqueID ,DEscription,UserName,startTime,EndTime,PercentComplete,TaskActivityStatus,TaskActivityType FROM TaskActivity where uniqueId in ({0}) Order by Starttime ",job_list)
			
			Using dbConnFW As DbConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
				activity_table = BRApi.Database.ExecuteSqlUsingReader(dbConnFW, dml.ToString, True)
			End Using
			
			Dim clonedDT As DataTable = activity_table.Clone()
       		clonedDT.Columns("UniqueID").DataType = GetType(String)
			clonedDT.Columns("PercentComplete").DataType = GetType(String)
          	clonedDT.Columns("TaskActivityStatus").DataType = GetType(Integer)
			clonedDT.Columns("TaskActivityType").DataType = GetType(Integer)
          	For Each row As DataRow In activity_table.Rows
             	clonedDT.ImportRow(row)
          	Next
			
			Using dbConnApp As DBConnInfo = BRAPi.Database.CreateApplicationDbConnInfo(si)
				For Each rows In clonedDT.Rows
					dml = String.Format("INSERT INTO XFW_OMD_TASKACTIVITY VALUES('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}')",rows(0),rows(1),rows(2),rows(3),rows(4),rows(5),rows(6),rows(7))
					dt_join = BRApi.Database.ExecuteSql(dbConnApp, dml.ToString, True)
				Next
			End Using
        
		End Sub
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="OMD_DataMgmt_CreateJob">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OMD_DataMgmt_Solution" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
'----------------------------------------------------- create job rule -------------------------------------------------------------------------------------
Namespace OneStream.BusinessRule.Extender.OMD_DataMgmt_CreateJob
	Public Class MainClass
		''' <summary>
		''' It is the main function which is used by Data Management Sequence - Sqnc_SubmitJob
		''' </summary>
		''' <param name="si">SessionInfo</param>
		''' <param name="globals">BRGlobals</param>
		''' <param name="api">Object</param>
		''' <param name="args">ExtenderArgs</param>
		''' <returns>Nothing</returns>
		#Region "main function"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						'------------- get the parameters from Data Management Sequence --------------------------------
						Dim JobId As String = args.NameValuePairs.XFGetValue("JobId")
						Dim Source As String = args.NameValuePairs.XFGetValue("Source")
						Dim SourceAddInfo As String = args.NameValuePairs.XFGetValue("SourceAddInfo")
						Dim SourceScenario As String = args.NameValuePairs.XFGetValue("SourceScenario")
					 	Dim Target As String = args.NameValuePairs.XFGetValue("Target")
						Dim TargetAddInfo As String = args.NameValuePairs.XFGetValue("TargetAddInfo")
						Dim TargetScenario As String = args.NameValuePairs.XFGetValue("TargetScenario")
						'-------------- generating description from the above parameters----------------------------------
						Dim JobDescription = String.Format("{0}:{1}->{2}:{3}", Source, SourceAddInfo,Target,TargetAddInfo)
						'-------------- call the create execction function to create a job in execution table ------------
						Me.CreateExecutionTable(si, JobDescription, JobId, SourceScenario, TargetScenario)
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		
		''' <summary>
		''' This function calls a createExecution function of Execution Class in OMD_DataMgmt_Solution BR to create a entry(JOB) in Execution table.
		''' </summary>
		''' <param name="si">SessionInfo</param>
		''' <param name="JobDescription">It contains source and target information of job</param>
		''' <param name="JobId">It is the unique job id</param>
		''' <param name="SourceScenario">It is source scenario e.g. - plan_working, plan_final</param>
		''' <param name="TargetScenario">It is target scenario e.g. - plan_working, plan_final</param>
		#Region "Create execution job"
		Public Sub CreateExecutionTable(ByVal si As SessionInfo, ByVal JobDescription As String, ByVal JobId As String, ByVal SourceScenario As String, ByVal TargetScenario As String) 
			Dim exe_obj As New  OneStream.BusinessRule.Extender.OMD_DataMgmt_Solution.Execution
			Dim user As String
			user=BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName).User.Description
			' ---------- calling create execution function from solution BR to create a job ---------
			exe_obj.createExecution(si, JobDescription, SourceScenario, TargetScenario, JobId, user)
		End Sub
		#End Region
	End Class
End Namespace]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="OMD_DataMgmt_CreateSubTask">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
'---------------------------------------------------------- create subtask rule -------------------------------------------------------------
Namespace OneStream.BusinessRule.Extender.OMD_DataMgmt_CreateSubTask
	Public Class MainClass
		''' <summary>
		''' It is the main function which is used by Data Management Sequence - Sqnc_Submit_SubTask
		''' </summary>
		''' <param name="si">SessionInfo</param>
		''' <param name="globals">BRGlobals</param>
		''' <param name="api">Object</param>
		''' <param name="args">ExtenderArgs</param>
		''' <returns>Nothing</returns>
		#Region "Main Function"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						'------------- get the parameters from Data Management Sequence --------------------------------
						Dim JobId As String = args.NameValuePairs.XFGetValue("JobId")
						Dim SubTaskId As String = args.NameValuePairs.XFGetValue("SubTaskId")
						Dim Status As String = args.NameValuePairs.XFGetValue("Status")
						'------------- calling create subtask function --------------------------------
						Me.createSubTask(si,JobId, SubTaskId, Status)

				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		
		''' <summary>
		''' This function inserts a subtask in SubTask Table with the subtask id , job id and status
		''' </summary>
		''' <param name="si">SessionInfo</param>
		''' <param name="JobId">It is JobId which we get from DM parameters in main function</param>
		''' <param name="SubTaskId">It is the subtask Id which we get from DM parameters in main function</param>
		''' <param name="Status">It ths Status which defines whether it is main task or not</param>
		#Region "Create SubTask"
		Public Sub createSubTask(ByVal si As SessionInfo, ByVal JobId As String, ByVal SubTaskId As String, ByVal Status As String)
			Dim sql As New Text.StringBuilder	
				' ---------- inserting a subtask to subtask table w.r.t. jobId ------------ 
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					sql.AppendLine("INSERT INTO [dbo].[XFW_OMD_SUBTASK] ([JOB_ID],[SUB_TASK_ID],[STATUS]) ")
					sql.AppendLine("VALUES ('" & JobId & "','" & SubTaskId & "','" & Status &"')")
					BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString(), True)
				End Using
		End Sub
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="OMD_DataMgmt_Solution">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
'-------------------------------------------------------- main helper rule for interface, job creation ---------------------------------------------
Namespace OneStream.BusinessRule.Extender.OMD_DataMgmt_Solution
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs)
			Try
				Dim selectionChangedTaskResult As New XFSelectionChangedTaskResult()
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.Unknown
				End Select
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
	#Region "OMD"
	
	#Region "Interface Class"
	' ------ interface class ----------------
	Public Class Interfaces
		Private ID As Guid
		' ----------------- function to create an interface -------------------------
		Public Sub createInterface(ByVal si As SessionInfo, ByVal des As String, ByVal src As String, ByVal src_addtlinfo As String, ByVal tar As String, ByVal tar_addtlinfo As String, ByVal method As String, ByVal src_scenario As String, ByVal trg_scenario As String)
			Try
				ID = Guid.NewGuid()
				Dim sql As New Text.StringBuilder	
				' ------------------ executing insert query ----------------------
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					sql.AppendLine("INSERT INTO [dbo].[XFW_OMD_INTERFACE] ")
					sql.AppendLine("VALUES ('" & ID.ToString & "','" & des & "','" & src & "','" & src_addtlinfo & "','" & tar & "','" & tar_addtlinfo & "','" & method & "','" & src_scenario & "','" & trg_scenario & "')")
					BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString(), True)	
				End Using
				' ---------------- creating the same interface id to subscribe table  --------------------------
				Dim subscribe_obj As New Subscribe
				subscribe_obj.addToSubscribe(si,ID.ToString)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
	End Class
	#End Region
	
	#Region "Subscribe Class"
	' ------- subscribe class -----------
	Public Class Subscribe
		Public Sub addToSubscribe(ByVal si As SessionInfo, ByVal int_id As String)
	'		' ---------  executing insert query in subscribe table -----------------
			Dim sql As New Text.StringBuilder
			Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				sql.AppendLine("INSERT INTO [dbo].[XFW_OMD_SUBSCRIBE] ([INT_ID]) ")
				sql.AppendLine("VALUES ('" & int_id & "')")
				BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString(), True)
			End Using
		End Sub
	End Class
	#End Region
	
	#Region "Execution Class"
	' ------- execution class ----------
	Public Class Execution
		' ------ declaring variables -------
		Private JOB_ID As String
		Private INT_ID As Guid
		Private IMP_ID As String
		Private TRN_ID As String
		Private VAL_ID As String
		Private LOAD_ID As String
		Private CONS_ID As String
		Private UID As String
		Private Created_TS As DateTime

		Public Sub createExecution(ByVal si As SessionInfo, ByVal desc As String, ByVal SrcScenario As String, ByVal TrgScenario As String, ByVal JobId As String, ByVal uid As String)
			Try
				'Get Interface Id from Interface Name
				Dim intNQ As String
				intNQ=String.Format("Select ID from XFW_OMD_INTERFACE where description='{0}' and src_scenario='{1}' and trg_scenario='{2}'" , desc, SrcScenario, TrgScenario)
				JOB_ID = JobId
				IMP_ID = "import"
				TRN_ID = "transformation"
				VAL_ID = "validate"
				LOAD_ID = "load"
				CONS_ID = "consolidate"
				Dim sql As New Text.StringBuilder
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					Dim dt As DataTable=BRAPi.Database.ExecuteSql(dbConnApp, intNQ.ToString(), True)
					If dt Is Nothing Or dt.Rows.Count < 1 Then
						Throw New System.Exception(String.Format("The Interface with respective description - {0} and scenarios - {1}  and {2} does not exists in Interface table",desc, SrcScenario, TrgScenario))
					End If
					sql.AppendLine("INSERT INTO [dbo].[XFW_OMD_EXECUTION] ([JOB_ID],[INT_ID],[UID]) ")
					sql.AppendLine("VALUES ('" & JOB_ID.ToString & "','" & dt.Rows(0)(0) & "','" &  uid & "')")
					'BRApi.ErrorLog.LogMessage(si,"sqlE",sql.ToString)
					BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString(), True)
				End Using
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
	End Class
	#End Region
	
	#End Region
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="OMD_Email_Handler">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OMD_HV_DataSetAssist" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports System.Xml
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports OneStream.BusinessRule.DashboardDataSet.OMD_HV_DataSetAssist

Namespace OneStream.BusinessRule.Extender.OMD_Email_Handler
	Public Class MainClass
		''' <summary>
		''' It is the main function which is used by Data Management Sequence - Sqnc_email
		''' </summary>
		''' <param name="si">SessionInfo</param>
		''' <param name="globals">BRGlobals</param>
		''' <param name="api">Object</param>
		''' <param name="args">ExtenderArgs</param>
		''' <returns>Nothing</returns>
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						'Me.sendExeFailedEmail(si,"abc","5324e078-59a6-455d-837f-3476bd6aca20")
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						'------------- get the parameters from Data Management Sequence --------------------------------
						Dim jobId As String = args.NameValuePairs.XFGetValue("JobId",String.Empty)
						Dim subtaskId As String = args.NameValuePairs.XFGetValue("SubTaskId",String.Empty)
						Dim functionName As String = args.NameValuePairs.XFGetValue("Function")
						'------------- calling send mail function -------------------------------
						If functionName.XFEqualsIgnoreCase("Error Mail") Then
							Me.sendExeFailedEmail(si,jobId,subtaskId)
						End If
						If functionName.XFEqualsIgnoreCase("HealthView Mail")
							Me.sentHealthViewMail(si)
						End If
					
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#Region "Send Email Function"
		Public Sub sendOMDEmail(ByVal si As SessionInfo, ByVal jobId As String)
			Try
				'----------------------- declaring variables for query and datatable
				Dim sqlquery As String	
				Dim dt_exec As DataTable
				Dim dt_subtsk As DataTable
				Dim dt_taskActivity As DataTable
				Dim dt_subscribe As DataTable
				
				'------------------------  executing sql queries
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					sqlquery = String.Format("SELECT JOB_ID, INT_ID, UID, CREATED_TS FROM XFW_OMD_EXECUTION WHERE JOB_ID='{0}'",jobId)
					dt_exec = BRAPi.Database.ExecuteSql(dbConnApp, sqlquery.ToString, False)
					
					sqlquery = String.Format("SELECT SUB_TASK_ID, STATUS FROM XFW_OMD_SUBTASK WHERE JOB_ID='{0}' AND STATUS='Yes'",jobId)
					dt_subtsk = BRApi.Database.ExecuteSql(dbConnApp, sqlquery.ToString, False)
					
					If dt_exec Is Nothing Or dt_exec.Rows.Count < 1 Then
						Throw New System.Exception(String.Format("The supplied JobId - {0} is not found in Execution Table",jobId))
					End If
					If dt_subtsk Is Nothing Or dt_subtsk.Rows.Count < 1 Then
						Throw New System.Exception(String.Format("The supplied JobId - {0} is not found in subtask Table",jobId))
					End If
					sqlquery = String.Format("SELECT * FROM XFW_OMD_SUBSCRIBE WHERE INT_ID='{0}'",dt_exec(0)("INT_ID"))
					dt_subscribe = BRApi.Database.ExecuteSql(dbConnApp, sqlquery.ToString,False)
				End Using
					If dt_subscribe Is Nothing Or dt_subscribe.Rows.Count < 1 Then
						Throw New System.Exception(String.Format("The IntId - {0} is not found in subscribe Table",dt_exec(0)("INT_ID")))
					End If
				Using dbConnFW As DbConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
					sqlquery = String.Format( "SELECT UniqueID ,Description,UserName,startTime,EndTime,PercentComplete,TaskActivityStatus FROM TaskActivity where uniqueId='{0}'", dt_subtsk(0)(0).ToString)
					dt_taskActivity = BRApi.Database.ExecuteSql(dbConnFW, sqlquery.ToString, False)
					'BRApi.ErrorLog.LogMessage(si,"sql",sqlquery.ToString)
				End Using
				If dt_taskActivity Is Nothing Or dt_taskActivity.Rows.Count < 1 Then
					Throw New System.Exception(String.Format("The SubTaskId - {0} is not found in TaskActivity Table",dt_subtsk(0)(0).ToString))
				End If
				'-----------------------------  getting email list from subscribe table
				Dim successEmailList As List(Of String)
				Dim failEmailList As List(Of String)
				Dim successDL() As String = dt_subscribe(0)("SUCCESS_DL").ToString.Split(",")
				successEmailList = successDL.ToList()
				Dim failDL() As String = dt_subscribe(0)("FAILURE_DL").ToString.Split(",")
				failEmailList = failDL.ToList()
				Dim subject As String=""
				Dim str As String=""
				Dim flag As Integer=1
				'-----------------------------  checking status of the job
				If dt_taskActivity(0)("TaskActivityStatus").ToString()="6000" Then
					subject =String.Format("Job {0} Successful",dt_taskActivity(0)("Description"))
					str="is successfully executed."
					flag=1
				Else If dt_taskActivity(0)("TaskActivityStatus").ToString()="5000" Then
					subject =String.Format("Job {0} Failed",dt_taskActivity(0)("Description"))
					str="is failed."
					flag=-1
				Else If dt_taskActivity(0)("TaskActivityStatus").ToString()="1000" Then
					subject =String.Format("Job {0} Running",dt_taskActivity(0)("Description"))
					str="is running."
					flag=0
				End If
				' defining body of the email
				Dim body As New Text.StringBuilder
				body.AppendLine("<p>")
				body.AppendLine("<p>Hi,</p>")
				body.AppendLine("<p>Job " & str & "</p>")
				
				body.AppendLine("<strong>Job Description: </strong>" & dt_taskActivity(0)("Description"))
				body.AppendLine("</br>")
				body.AppendLine("<strong>Job Initiated By: </strong>" & dt_exec(0)("UID"))
				body.AppendLine("</br>")
				body.AppendLine("<strong>Job Initiated At: </strong>" & dt_exec(0)("CREATED_TS"))
				body.AppendLine("</br>")
				body.AppendLine("<p>Regards,")
				body.AppendLine("</br>")
				body.AppendLine("OMD Admin</p>")
				body.AppendLine("</p>")
				Dim isbodyHtml As Boolean = True
				Dim attachmentFilePaths As New List(Of String)
				Dim emailConnectionName As String = "walmartSMTP"
				Dim fileName As String = BRApi.Utilities.GetFileShareFolder(si,FileShareFolderTypes.ApplicationRoot, Nothing) & "\WalmartDev\Groups\Everyone\a0r0fs1\abc.txt"
				'attachmentFilePaths.Add(fileName)
				If flag=1 Or flag=0 Then
					BRApi.Utilities.SendMail(si, emailConnectionName, successEmailList, subject, body.ToString, isBodyHtml, attachmentFilePaths)
				Else
					BRApi.Utilities.SendMail(si, emailConnectionName, failEmailList, subject, body.ToString, isBodyHtml, attachmentFilePaths)
				End If
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		#End Region
		
		#Region "Send Email Function For Execution Failed"
		Public Sub sendExeFailedEmail(ByVal si As SessionInfo, ByVal jobId As String, ByVal subTaskId As String)
			Try
				'----------------------- declaring variables for query and datatable
				Dim sqlquery As String	
				Dim dt_exec As New DataTable
				Dim dt_subtsk As New DataTable
				Dim dt_errLog As New DataTable
				Dim dt_subscribe As New DataTable
				
				'------------------------  executing sql queries ----------
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					sqlquery = String.Format("SELECT JOB_ID, INT_ID, UID, CREATED_TS FROM XFW_OMD_EXECUTION WHERE JOB_ID='{0}'",jobId)
					dt_exec = BRAPi.Database.ExecuteSql(dbConnApp, sqlquery.ToString, False)
					
					If dt_exec Is Nothing Or dt_exec.Rows.Count < 1 Then
						Throw New System.Exception(String.Format("The supplied JobId - {0} is not found in Execution Table",jobId))
					End If
					
					sqlquery = String.Format("SELECT * FROM XFW_OMD_SUBSCRIBE WHERE INT_ID='{0}'",dt_exec(0)("INT_ID"))
					dt_subscribe = BRApi.Database.ExecuteSql(dbConnApp, sqlquery.ToString,False)
				End Using
					If dt_subscribe Is Nothing Or dt_subscribe.Rows.Count < 1 Then
						Throw New System.Exception(String.Format("The IntId - {0} is not found in subscribe Table",dt_exec(0)("INT_ID")))
					End If
				Using dbConnFW As DbConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
					sqlquery = String.Format("Select e.UniqueID As log_id, e.xmldata, t.UniqueID As task_id, t.Description, t.UserName 
												From ErrorLog As e inner Join TaskActivity As t On
												t.ErrorlogID=e.UniqueId
												Where
												t.UniqueId = '{0}'",subTaskId )
					'sqlquery = String.Format( "SELECT UniqueID ,Description,UserName,startTime,EndTime,PercentComplete,TaskActivityStatus FROM TaskActivity where uniqueId='{0}'", dt_subtsk(0)(0).ToString)
					dt_errLog = BRApi.Database.ExecuteSql(dbConnFW, sqlquery.ToString, False)
					
				End Using
				If dt_errLog IsNot Nothing AndAlso dt_errLog.Rows.Count > 0 Then
					
					Dim xml_obj = XElement.Parse(dt_errlog(0)("xmldata"))
					Dim msglog As New Text.StringBuilder
					For Each msg In xml_obj...<Message> 			
						Dim msgStr As String = msg.Value
						If Not String.IsNullOrEmpty(msgStr) Then
							msglog.AppendLine(msgStr)
						End If
					Next
					'-----------------------------  getting email list from subscribe table
				
					Dim failEmailList As List(Of String)
					Dim failDL() As String = dt_subscribe(0)("FAILURE_DL").ToString.Split(",")
					failEmailList = failDL.ToList()
					Dim subject As String = dt_errLog(0)("Description") & " Failed"
					Dim str As String=""
					
					
					' defining body of the email
					Dim body As New Text.StringBuilder
					body.AppendLine("<p>")
					body.AppendLine("<p>Hi,</p>")
					body.AppendLine("<p>Job " & subject & "</p>")
					body.AppendLine("<p>")
					body.AppendLine("<strong>	Job Description: </strong>" &  dt_errLog(0)("Description"))
					body.AppendLine("</br>")
					body.AppendLine("<strong>	Job Initiated By: </strong>" & dt_exec(0)("UID"))
					body.AppendLine("</br>")
					body.AppendLine("<strong>	Job Initiated At: </strong>" & dt_exec(0)("CREATED_TS"))
					body.AppendLine("</br>")
					body.AppendLine("<strong>	Erro Message: </strong>" & msglog.ToString)
					body.AppendLine("<p>Regards,")
					body.AppendLine("</br>")
					body.AppendLine("OMD Admin</p>")
					body.AppendLine("</p>")
					Dim isbodyHtml As Boolean = True
					Dim attachmentFilePaths As New List(Of String)
					Dim emailConnectionName As String = "walmartSMTP"
					'Dim fileName As String = BRApi.Utilities.GetFileShareFolder(si,FileShareFolderTypes.ApplicationRoot, Nothing) & "\WalmartDev\Groups\Everyone\a0r0fs1\abc.txt"
					'attachmentFilePaths.Add(fileName)
					BRApi.Utilities.SendMail(si, emailConnectionName, failEmailList, subject, body.ToString, isBodyHtml, attachmentFilePaths)
				
					
				End If
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		#End Region
		
		#Region "Send health view mail"
		Public Function sentHealthViewMail(ByVal si As SessionInfo)
			Try
				Dim OMD_HV_DataSetAssist As New OneStream.BusinessRule.DashboardDataSet.OMD_HV_DataSetAssist.MainClass
				Dim OMD_dt As New DataTable
				Dim get_HTMLTable As String = String.Empty
				Dim getHealthQuery As String = "Select Distinct TRG from XFW_OMD_HEALTHVIEW Where IS_ENABLED = '1'"
				Dim healthtable As New DataTable
				Using dbConnApp As DBConnInfo = BRAPi.Database.CreateApplicationDbConnInfo(si)
					healthtable = BRApi.Database.ExecuteSql(dbConnApp, getHealthQuery.ToString, True)
				End Using
				
				Dim body As New Text.StringBuilder
				Dim AppName As String = ""
				body.AppendLine("<p>Hi User,</p>")
				body.AppendLine("<p>Report Form OMD Health View is shown below :</p>")
				
				For Each health_dr In healthtable.Rows
					AppName = health_dr(0)
					OMD_dt = OMD_HV_DataSetAssist.getHealthStatus(si, AppName)
					get_HTMLTable = getHTMLTable(si, AppName, OMD_dt)
					body.AppendLine(get_HTMLTable)
					body.AppendLine("</br>")
				Next
				body.AppendLine("<p>Regards,")
				body.AppendLine("</br>")
				body.AppendLine("OMD Admin</p>")
				
				Me.SendEmail(si, body.ToString)
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Function getHTMLTable(ByRef si As SessionInfo, ByVal AppName As String, ByVal OMD_dt As DataTable) As String
		Try
			Dim htmlTable As New Text.StringBuilder
			Dim CSball As String = String.Empty
			Dim LVSball As String = String.Empty
			htmlTable.AppendLine("
			<table id='cfr'>
				  <tr>
				    <th colspan='7' style='text-align:center; background-color: #3C7BEC;font-size: 16px;'>" & AppName & "</th>
				  </tr>
				  <tr>
				    <th style='font-size: 14px; text-align: center; width: 110px;'>Current Status</th>
					<th style='font-size: 14px; text-align: center; width: 110px;'>Consolidation Status</th>
				    <th style='font-size: 14px; text-align: center; width: 160px;'>Source</th>
				    <th style='font-size: 14px; text-align: center; width: 160px;'>Source_Type</th>
					<th style='font-size: 14px; text-align: center; width: 160px;'>Target_Type</th>
				    <th style='font-size: 14px; text-align: center; width: 160px;'>Source_Scenario</th>
					<th style='font-size: 14px; text-align: center; width: 160px;'>Target_Scenario</th>
				  </tr>"
			)
			
			For Each dr As DataRow In OMD_dt.Rows
				htmlTable.AppendLine("<tr>")
				
				If dr("Current Status").ToString.XFEqualsIgnoreCase("StatusRedBall") Then
					CSball = "background-color: #e04d46;'>NOT OK"
				ElseIf dr("Current Status").ToString.XFEqualsIgnoreCase("StatusGreenBall") Then
					CSball = "background-color: #2abf2a;'>OK"
				Else
					CSball = "background-color: #eb6d1e;'>NOT RUN"
				End If
				
				If dr("Consolidate Status").ToString.XFEqualsIgnoreCase("StatusRedBall") Then
					LVSball = "background-color: #e04d46;'>NOT OK"
				ElseIf dr("Consolidate Status").ToString.XFEqualsIgnoreCase("StatusGreenBall") Then
					LVSball = "background-color: #2abf2a;'>OK"
				Else
					LVSball = "graydot"	
					LVSball = "background-color: #eb6d1e;'>NOT RUN"
				End If
				htmlTable.AppendLine("<td  style='font-size: 12px; text-align: center;" & CSball & "</td>")
				htmlTable.AppendLine("<td  style='font-size: 12px; text-align: center;" & LVSball & "</td>")
				htmlTable.AppendLine("<td  style='font-size: 12px; text-align: center;'>" & dr("SRC") & "</td>")
				htmlTable.AppendLine("<td  style='font-size: 12px; text-align: center;'>" & dr("SRC_ADDTLINFO") & "</td>")
				htmlTable.AppendLine("<td  style='font-size: 12px; text-align: center;'>" & dr("TRG_ADDTLINFO") & "</td>")
				htmlTable.AppendLine("<td  style='font-size: 12px; text-align: center;'>" & dr("SRC_SCENARIO") & "</td>")
				htmlTable.AppendLine("<td  style='font-size: 12px; text-align: center;'>" & dr("TRG_SCENARIO") & "</td>")
				htmlTable.AppendLine("</tr>")
			Next
			
			htmlTable.AppendLine("</table>")			
		Return htmlTable.ToString
		Catch e As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try		
			
	End Function
	
	Public Sub SendEmail(ByRef si As SessionInfo, ByVal getHTMLTable As String)
		Try
			Dim emailConnectionName As String = "WalmartSMTP"
			Dim toEmail As New List(Of String)
			Dim datetime As String = System.DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss")
			Dim subject As String = "Report from OMD Health View at " + datetime
			Dim dtEmail As DataTable = Nothing
			Dim attachmentFilePaths As New List(Of String)
			Dim getEmailStyle As New Text.StringBuilder
			
			getEmailStyle.AppendLine(BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "prm_Email_Style_OMD"))
			getEmailStyle.AppendLine(getHTMLTable)
			Dim paramEmail As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "prm_HV_EmailNotification_OMD")
			toEmail = paramEmail.Split(",").ToList()
			
			BRApi.Utilities.SendMail(si, emailConnectionName, toEmail, subject, getEmailStyle.ToString, True, Nothing)
			
		Catch ex As Exception
			Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
		End Try
		
	End Sub
	#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="OMD_Email_Helper">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OMD_HV_DataSetAssist" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports OneStream.BusinessRule.DashboardDataSet.OMD_HV_DataSetAssist

Namespace OneStream.BusinessRule.Extender.OMD_Email_Helper
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Dim OMD_HV_DataSetAssist As New OneStream.BusinessRule.DashboardDataSet.OMD_HV_DataSetAssist.MainClass
				Dim OMD_dt As New DataTable
				Dim get_HTMLTable As String = String.Empty
				Dim getHealthQuery As String = "Select Distinct TRG from XFW_OMD_HEALTHVIEW Where IS_ENABLED = '1'"
				Dim healthtable As New DataTable
				Using dbConnApp As DBConnInfo = BRAPi.Database.CreateApplicationDbConnInfo(si)
					healthtable = BRApi.Database.ExecuteSql(dbConnApp, getHealthQuery.ToString, True)
				End Using
				
				Dim body As New Text.StringBuilder
				Dim AppName As String = ""
				body.AppendLine("<p>Hi User,</p>")
				body.AppendLine("<p>Report Form OMD Health View is shown below :</p>")
				
				For Each health_dr In healthtable.Rows
					AppName = health_dr(0)
					OMD_dt = OMD_HV_DataSetAssist.getHealthStatus(si, AppName)
					get_HTMLTable = getHTMLTable(si, AppName, OMD_dt)
					body.AppendLine(get_HTMLTable)
					body.AppendLine("</br>")
				Next
				body.AppendLine("<p>Regards,")
				body.AppendLine("</br>")
				body.AppendLine("OMD Admin</p>")
				
				Me.SendEmail(si, body.ToString)
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Function getHTMLTable(ByRef si As SessionInfo, ByVal AppName As String, ByVal OMD_dt As DataTable) As String
		Try
			Dim htmlTable As New Text.StringBuilder
			Dim CSball As String = String.Empty
			Dim LVSball As String = String.Empty
			htmlTable.AppendLine("
			<table id='cfr'>
				  <tr>
				    <th colspan='7' style='text-align:center; background-color: #3C7BEC;font-size: 16px;'>" & AppName & "</th>
				  </tr>
				  <tr>
				    <th style='font-size: 14px; text-align: center; width: 110px;'>Current Status</th>
					<th style='font-size: 14px; text-align: center; width: 110px;'>Consolidation Status</th>
				    <th style='font-size: 14px; text-align: center; width: 160px;'>Source</th>
				    <th style='font-size: 14px; text-align: center; width: 160px;'>Source_Type</th>
					<th style='font-size: 14px; text-align: center; width: 160px;'>Target_Type</th>
				    <th style='font-size: 14px; text-align: center; width: 160px;'>Source_Scenario</th>
					<th style='font-size: 14px; text-align: center; width: 160px;'>Target_Scenario</th>
				  </tr>"
			)
			
			For Each dr As DataRow In OMD_dt.Rows
				
				htmlTable.AppendLine("<tr>")
				
				If dr("Current Status").ToString.XFEqualsIgnoreCase("StatusRedBall") Then
					'CSball = "<span width=30px style='width: 60px;height: 60px;border-radius:50%;background-color: red;'>.</span>"
					CSball = "background-color: #e04d46;'>NOT OK"
					'CSball = "redcirle"
				ElseIf dr("Current Status").ToString.XFEqualsIgnoreCase("StatusGreenBall") Then
					'CSball = "<span style='height: 60px;border-radius:50%;background-color: green;font-size: 14px; text-align: center;'>.</span>"
					CSball = "background-color: #2abf2a;'>OK"
					'CSball = "greendot"
				Else
					'CSball = "graydot"
					CSball = "background-color: #eb6d1e;'>NOT RUN"
				End If
				If dr("Consolidate Status").ToString.XFEqualsIgnoreCase("StatusRedBall") Then
					'LVSball = "reddot"
					LVSball = "background-color: #e04d46;'>NOT OK"
				ElseIf dr("Consolidate Status").ToString.XFEqualsIgnoreCase("StatusGreenBall") Then
					'LVSball = "greendot"
					LVSball = "background-color: #2abf2a;'>OK"
				Else
					LVSball = "graydot"	
					LVSball = "background-color: #eb6d1e;'>NOT RUN"
				End If
				htmlTable.AppendLine("<td  style='font-size: 12px; text-align: center;" & CSball & "</td>")
				htmlTable.AppendLine("<td  style='font-size: 12px; text-align: center;" & LVSball & "</td>")
				'htmlTable.AppendLine("<td  style='font-size: 12px;'><span class='" & CSball & "'> </span></td>")
				'htmlTable.AppendLine("<td  style='font-size: 12px; text-align: center;'><span class='" & LVSball & "'> </span></td>")
				htmlTable.AppendLine("<td  style='font-size: 12px; text-align: center;'>" & dr("SRC") & "</td>")
				htmlTable.AppendLine("<td  style='font-size: 12px; text-align: center;'>" & dr("SRC_ADDTLINFO") & "</td>")
				htmlTable.AppendLine("<td  style='font-size: 12px; text-align: center;'>" & dr("TRG_ADDTLINFO") & "</td>")
				htmlTable.AppendLine("<td  style='font-size: 12px; text-align: center;'>" & dr("SRC_SCENARIO") & "</td>")
				htmlTable.AppendLine("<td  style='font-size: 12px; text-align: center;'>" & dr("TRG_SCENARIO") & "</td>")
				htmlTable.AppendLine("</tr>")
			Next
			
			htmlTable.AppendLine("</table>")			
		Return htmlTable.ToString
		Catch e As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try		
			
	End Function
	
	Public Sub SendEmail(ByRef si As SessionInfo, ByVal getHTMLTable As String)
		Try
	
				Dim emailConnectionName As String = "WalmartSMTP"
				Dim toEmail As New List(Of String)
				Dim datetime As String = System.DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss")
				Dim subject As String = "Report from OMD Health View at " + datetime
				Dim dtEmail As DataTable = Nothing
				Dim attachmentFilePaths As New List(Of String)
				Dim getEmailStyle As New Text.StringBuilder
				
				getEmailStyle.AppendLine(BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "prm_Email_Style_OMD"))
				getEmailStyle.AppendLine(getHTMLTable)
				Dim paramEmail As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "prm_HV_EmailNotification_OMD")
				toEmail = paramEmail.Split(",").ToList()
'				toEmail.Add("ashwani.kumar6@walmart.com")
'				toEmail.Add("aman.raj0@walmart.com")
'				toEmail.Add("vikram.aditya@walmart.com")
'				toEmail.Add("shivika.khare@walmart.com")
						
				
				BRApi.Utilities.SendMail(si, emailConnectionName, toEmail, subject, getEmailStyle.ToString, True, Nothing)
			
		Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
		End Try
		
		End Sub
	
		
		
		Private Sub PrintDT(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal Desc As String)
		Try
			 'Print Table
			 Dim dtprint As New Text.StringBuilder
				 For Each dc As DataColumn In dt.Columns
					dtprint.Append(dc.ColumnName & ",")
				 Next
				 dtprint.Remove(dtprint.Length - 1, 1)
				 dtprint.Append(Environment.NewLine)
				 For Each dr As DataRow In dt.Rows										
					For Each dc As DataColumn In dt.Columns
						dtprint.Append(dr(dc.ColumnName) & ",")
					Next
					dtprint.Remove(dtprint.Length - 1, 1)
					dtprint.Append(Environment.NewLine)
				 Next
				 BRApi.ErrorLog.LogMessage(si, Desc,dtprint.ToString)
		Catch ex As Exception                
	   		Throw ErrorHandler.LogWrite(si,New XFException(si,ex))
		End Try		 
		End Sub	
		
	End Class
End Namespace

'			htmlTable.AppendLine("<style>
			
'.donut {
'	 --donut-size: 300px;
'	 --donut-border-width: 20px;
'	 --donut-spacing: 0;
'	 --donut-spacing-color: 255, 255, 255;
'	 --donut-spacing-deg: calc(1deg * var(--donut-spacing));
'	 border-radius: 50%;
'	 height: var(--donut-size);
'	 margin: 40px;
'	 position: relative;
'	 width: var(--donut-size);
'}
' .donut__label {
'	 left: 50%;
'	 line-height: 1.25;
'	 position: absolute;
'	 text-align: center;
'	 top: 50%;
'	 transform: translate(-50%, -50%);
'	 width: 60%;
'}
' .donut__label__heading {
'	 font-size: 1.4em;
'	 font-weight: 600;
'	 line-height: 1;
'}
' .donut__label__sub {
'	 color: #666;
'	 font-size: 0.8em;
'	 letter-spacing: 0.05em;
'	 margin-top: 5px;
'}
' .donut__slice {
'	 height: 100%;
'	 position: absolute;
'	 width: 100%;
'}
' .donut__slice::before, .donut__slice::after {
'	 border: var(--donut-border-width) solid rgba(0, 0, 0, 0);
'	 border-radius: 50%;
'	 box-sizing: border-box;
'	 content: '';
'	 height: 100%;
'	 left: 0;
'	 position: absolute;
'	 top: 0;
'	 transform: rotate(45deg);
'	 width: 100%;
'}
' .donut__slice::before {
'	 border-width: calc(var(--donut-border-width) + 1px);
'	 box-shadow: 0 0 1px 0 rgba(var(--donut-spacing-color), calc(100 * var(--donut-spacing)));
'}
' .donut__slice__space_filler {
'	 clip-path: inset(0 50% 0 0);
'}
' .donut__slice__space_filler::before {
'	 border-top-color: rgba(var(--donut-spacing-color), calc(100 * var(--donut-spacing)));
'	 transform: rotate(calc(45deg - var(--donut-spacing-deg)));
'}
' .donut__slice__space_filler::after {
'	 border: none;
'}
  

'</style>
	
			
'		<h2>Simple Donut Chart with Legend</h2>
'<div class='card--chart'>
'    <div class='js-donut-chart-container donut-chart-container' style='height:450px; width:450px;'></div>
'    <div Class='js-legend-chart-container legend-chart-container'></div>	

'			")
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="OMD_HV_EXE_Main">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.OMD_HV_EXE_Main
	Public Class MainClass
		Dim hv_sequence As String = "HV_EXECUTION"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim dict  As New Dictionary(Of String, String)
						
						If Not CheckIfJobRunning(si, hv_sequence)
							Dim objTaskActivityItem As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(si, hv_sequence, dict)
							globals.SetObject("hv_exe_id",objTaskActivityItem.UniqueID.ToString)
							Me.insertToHVExecution(si,objTaskActivityItem.UniqueID.ToString)
							
							Dim objTaskActivityItem2 As TaskActivityItem = BRApi.TaskActivity.GetTaskActivityItem(si, objTaskActivityItem.UniqueID)
							If objTaskActivityItem2.TaskActivityStatus = TaskActivityStatus.Failed
								Me.updateHVExecution(si,objTaskActivityItem.UniqueID.ToString,"StatusRedBall")
							End If
						Else
							'BRApi.ErrorLog.LogMessage(si, hv_sequence & " is already running")
							Throw New System.Exception("This job is already running. Please run after sometime.")
						End If
					Case Is = ExtenderFunctionType.ExecuteExternalDimensionSource
						'Add External Members
						Dim externalMembers As New List(Of NameValuePair)
						externalMembers.Add(New NameValuePair("YourMember1Name","YourMember1Value"))
						externalMembers.Add(New NameValuePair("YourMember2Name","YourMember2Value"))
						Return externalMembers
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		Private Function insertToHVExecution(ByVal si As SessionInfo,ByVal hv_exe_id As String)
			Try
				Dim dt As New DataTable
				Dim sql As String = "Select ID from XFW_OMD_HEALTHVIEW Where IS_ENABLED ='1'"
				Using dbConnApp As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt = BRApi.Database.ExecuteSql(dbConnApp,sql,False)
				End Using
				If dt IsNot Nothing AndAlso dt.Rows.Count>0 
					dt.Columns("ID").ColumnName = "HV_ID"
					Dim hv_exe_id_clmn As New DataColumn("HV_EXE_ID")
					Dim status As New DataColumn("STATUS")
					Dim exe_ts As New DataColumn("EXE_TS")
					hv_exe_id_clmn.DefaultValue = hv_exe_id
					status.DefaultValue = "StatusOrangeBall"
					Dim timestamp As DateTime = DateTime.UtcNow
					exe_ts.DefaultValue = timestamp
					dt.Columns.Add(hv_exe_id_clmn)
					dt.Columns.Add(status)
					dt.Columns.Add(exe_ts)
					BRApi.Database.SaveCustomDataTable(si, "Application", "XFW_OMD_HV_EXECUTION", dt, True)
					
				Else
					Throw New System.Exception("no intersection is enabled in table.")
				End If
			Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function 
		
		Private	Function updateHVExecution(ByVal si As SessionInfo,ByVal hv_exe_id As String,ByVal Status As String)	
			Try
				Dim sql As String = String.Format("Update XFW_OMD_HV_EXECUTION Set STATUS='{0}' Where HV_EXE_ID ='{1}'",status,hv_exe_id)
				Using dbConnApp As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					BRApi.Database.ExecuteSql(dbConnApp,sql,False)
				End Using
				
			Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
						
		' -------------------------- check if trigger is already running -----------------------
		Private Function CheckIfJobRunning(ByVal si As SessionInfo, ByVal sqnc_name As String) As Boolean
			Try
				Dim job_status As Boolean = True
				Dim dt As DataTable = Nothing
				Dim sql As String = "SELECT TaskActivityStatus FROM TaskActivity WHERE Description = '" & sqnc_name & "' AND TaskActivityStatus = 1000"
				Using dbConnApp As DbConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
					dt = BRAPi.Database.ExecuteSql(dbConnApp,sql,False)
				End Using
				If dt IsNot Nothing AndAlso dt.Rows.Count < 1
					job_status = False
				End If
			Return job_status
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function 
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="OMD_HV_Validation">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OMD_Py_Executer" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq

Namespace OneStream.BusinessRule.Extender.OMD_HV_Validation
	Public Class MainClass
		Dim exe_id As String 
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						'Me.createJsonTemplate(si)
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						exe_id = globals.GetObject("hv_exe_id").ToString
						Me.updateHVExecution(si,exe_id,"StatusBlueBall")
						Dim trgFolder As String = Me.createJsonTemplate(si,exe_id)
						
						Me.createConsolidateFile(si,trgFolder)
						
						Dim pyExecuter As New OneStream.BusinessRule.Extender.OMD_Py_Executer.MainClass
						pyExecuter.validationExtraction(si, trgFolder, exe_id, "healthview")
						
						Me.checkHVStatus(si,exe_id,trgFolder)
					Case Is = ExtenderFunctionType.ExecuteExternalDimensionSource
						'Add External Members
						Dim externalMembers As New List(Of NameValuePair)
						externalMembers.Add(New NameValuePair("YourMember1Name","YourMember1Value"))
						externalMembers.Add(New NameValuePair("YourMember2Name","YourMember2Value"))
						Return externalMembers
				End Select

				Return Nothing
			Catch ex As Exception
				Me.updateHVExecution(si,exe_id,"StatusOrangeBall")
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		Private	Function updateHVExecution(ByVal si As SessionInfo,ByVal hv_exe_id As String,ByVal Status As String)	
			Try
				Dim sql As String = String.Format("Update XFW_OMD_HV_EXECUTION Set STATUS='{0}' Where HV_EXE_ID ='{1}'",status,hv_exe_id)
				Using dbConnApp As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					BRApi.Database.ExecuteSql(dbConnApp,sql,False)
				End Using
				
			Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		Private Function checkHVStatus(ByVal si As SessionInfo, ByVal hv_exe_id As String, ByVal trgFolder As String)
			Try
				Dim valFileName = "reportCard.json"
				Dim valStatus As String = "StatusGreenBall"
				If Not File.Exists(trgFolder & "\" & valFileName) Then
					valStatus = "StatusOrangeBall"
					Me.updateHVExecution(si,hv_exe_id,valStatus)
				Else
					' ------------ checking if the validation is failed or successful --------------------------
					Dim jsonFile = File.ReadAllText(trgFolder & "\" & valFileName)
					Dim jsonObj = JsonConvert.DeserializeObject(jsonFile)
					Dim dt_hv As New DataTable
					Dim sqlQuery As String
					
					sqlQuery = String.Format("Select HV_ID from [dbo].[XFW_OMD_HV_EXECUTION] where HV_EXE_ID='{0}'",hv_exe_id)
					Using dbConnApp As DBConnInfo = BRAPi.Database.CreateApplicationDbConnInfo(si)
						dt_hv = BRApi.Database.ExecuteSql(dbConnApp, sqlQuery.ToString, True)
					
						For Each dr As DataRow In dt_hv.Rows
							valStatus = jsonObj(dr("HV_ID").ToString)
							sqlQuery = String.Format("Update XFW_OMD_HV_EXECUTION Set STATUS='{0}' Where HV_EXE_ID ='{1}' and HV_ID = '{2}'",valStatus,hv_exe_id,dr("HV_ID").ToString)
							BRApi.Database.ExecuteSql(dbConnApp, sqlQuery.ToString, True)
						Next
					End Using
				End If
			Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		Public Function createJsonTemplate(ByVal si As SessionInfo,ByVal exe_id As String)
			Try
				Dim dt_hv As New DataTable
				Dim sqlQuery As String
				
				sqlQuery = String.Format("Select * from [dbo].[XFW_OMD_HEALTHVIEW] where IS_ENABLED='1'")
				Using dbConnApp As DBConnInfo = BRAPi.Database.CreateApplicationDbConnInfo(si)
					dt_hv = BRApi.Database.ExecuteSql(dbConnApp, sqlQuery.ToString, True)
				End Using
				
				Dim appDict As Dictionary(Of String, String) = New Dictionary(Of String, String) From {{"CAPEX","Corporate"},{"ENTERPRISE","Enterprise"},
				{"WORKFORCE","Workforce"},{"SAMS","Sams"},{"WMTUS","WMTUS"},{"INTLHQ","INTLHQ"}}
				
				For Each dr As DataRow In dt_hv.Rows
					dr("SRC") = appDict.Item(dr("SRC"))
					dr("TRG") = appDict.Item(dr("TRG"))
				Next
				Dim jAry As JArray = New JArray
				If dt_hv IsNot Nothing AndAlso dt_hv.Rows.Count> 0 Then
					jAry = JArray.FromObject(dt_hv, JsonSerializer.CreateDefault)
				End If
				'BRapi.ErrorLog.LogMessage(si,"health array",jAry.ToString)
				Dim dt_hv_exe As New DataTable
				sqlQuery = String.Format("Select EXE_TS From XFW_OMD_HV_EXECUTION where HV_EXE_ID ='{0}'",exe_id)
				Using dbConnApp As DBConnInfo = BRAPi.Database.CreateApplicationDbConnInfo(si)
					dt_hv_exe = BRApi.Database.ExecuteSql(dbConnApp, sqlQuery.ToString, True)
				End Using
				If dt_hv_exe Is Nothing Or dt_hv_exe.Columns.Count<1 Then
					Throw New System.Exception("no entry found in health view execution table with exe id - " & exe_id)
				End If
				Dim timeStamp As DateTime = dt_hv_exe(0)(0)
				Dim trgFolder = BRApi.Utilities.GetFileShareFolder(si,FileShareFolderTypes.FileShareRoot, Nothing) & "\System\Contents\Data_Integration\OMD\healthView\execution"
				Dim year = timeStamp.Year.ToString
				Dim month = "M" & timeStamp.Month.ToString
				Dim day = timeStamp.Day.ToString
				
				Dim fullTrgFolder = trgFolder & "\" & year & "\" & month & "\" & day & "\" & exe_id
				If Not Directory.Exists(fullTrgFolder) Then
					Directory.CreateDirectory(fullTrgFolder)
				End If
				Dim trgFileName = "hv_map.json"
				Dim jsonFile As String = jAry.ToString
				File.WriteAllText(fullTrgFolder & "\" & trgFileName, jsonFile)
				Return fullTrgFolder
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		Public Function mapCubeName(ByVal cube As String) As String
			Dim sourceCubeMappings As New Dictionary(Of String, String) From {
				{"CLUBOPS", "ClubOps_Planning"},
				{"CAPEX","TECH"},
				{"EP","ENT"}
			}
			
			If sourceCubeMappings.ContainsKey(cube.ToUpper()) Then
				Return sourceCubeMappings(cube.ToUpper())
			Else
				Return Cube
			End If
		End Function
		Public Function getConsStatus(ByRef si As SessionInfo,ByVal entityName As String, ByVal cubeName As String,ByVal consName As String, ByVal scenarioName As String,ByVal timeName As String) As Boolean
			
			Dim objCalcStatus As CalcStatus = BRApi.Finance.Data.GetCalcStatus(si, cubeName, entityName, "", consName, scenarioName, timeName)
			Dim calcStatus As String = objCalcStatus.Abbrev.ToString
			If calcStatus.XFContainsIgnoreCase("OK")Then
				Return True
			Else
				Return False
			End If
			Return Nothing
		End Function
		Public Function createConsolidateFile(ByVal si As SessionInfo, ByVal folder As String)
			Try
				Dim fileName As String ="hv_map.json"
				If File.Exists(folder & "\" & fileName) Then
					Dim jsonFile = File.ReadAllText(folder & "\" & fileName)
					Dim jsonObj = JsonConvert.DeserializeObject(jsonFile)
					Dim idName As String = ""
					Dim srcEntityName As String = ""
					Dim trgEntityName As String = ""
					Dim srcCubeName As String = ""
					Dim trgCubeName As String = ""
					Dim srcScenario As String = ""
					Dim trgScenario As String = ""
					Dim timeName As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "AOP_Year")
					Dim consName As String=""
					Dim srcConsStatus As Boolean = False
					Dim trgConsStatus As Boolean = False
					Dim src_si As SessionInfo
					Dim trg_si As SessionInfo
					Dim jObj As JObject = New Jobject
					For Each jsonItem In jsonObj
						idName = jsonItem("ID")
						srcEntityName = jsonItem("src_entity")
						trgEntityName = jsonItem("trg_entity")
						srcCubeName = Me.mapCubeName(jsonItem("SRC_ADDTLINFO"))
						trgCubeName = Me.mapCubeName(jsonItem("TRG_ADDTLINFO"))
						srcScenario = jsonItem("SRC_SCENARIO")
						trgScenario = jsonItem("TRG_SCENARIO")
						'timeName = jsonItem("Year")
						consName = jsonItem("Cons_Member")
						If jsonItem("SRC").ToString.XFEqualsIgnoreCase("Enterprise")
							src_si = si
						Else
							src_si=BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si,jsonItem("SRC"), openAppResult.Success)
						End If
						If jsonItem("SRC").ToString.XFEqualsIgnoreCase("WMTUS")
							srcConsStatus = Me.getConsStatus(src_si,srcEntityName,srcCubeName,"Aggregated",srcScenario,timeName)
						Else
							srcConsStatus = Me.getConsStatus(src_si,srcEntityName,srcCubeName,consName,srcScenario,timeName)
						End If
						
						
						If jsonItem("TRG").ToString.XFEqualsIgnoreCase("Enterprise")
							trg_si = si
						Else
							trg_si=BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si,jsonItem("TRG"), openAppResult.Success)
						End If
						
						trgConsStatus = Me.getConsStatus(trg_si,trgEntityName,trgCubeName,consName,trgScenario,timeName)
						
						
						If srcConsStatus = True AndAlso trgConsStatus = True Then
							jObj(idName) = "StatusGreenBall"
						ElseIf srcConsStatus = False Or trgConsStatus = False Then
							jObj(idName) = "StatusRedBall"
						Else
							jObj(idName) = "StatusOrangeBall"
						End If
					Next
					Dim jsonStr As String = JsonConvert.SerializeObject(jObj)
					File.WriteAllText(folder & "\consolidationCard.json", jsonStr)
				End If
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="OMD_Logger">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.OMD_Logger
	Public Class MainClass
		''' <summary>
		''' It is the main function which is used by Data Management Sequence - Sqnc_log_msg
		''' </summary>
		''' <param name="si">SessionInfo</param>
		''' <param name="globals">BRGlobals</param>
		''' <param name="api">Object</param>
		''' <param name="args">ExtenderArgs</param>
		''' <returns>Nothing</returns>
		#Region "Main Function"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						'------------- get the parameters from Data Management Sequence --------------------------------
						Dim jobId As String = args.NameValuePairs.XFGetValue("JobId")
						Dim file_name As String = args.NameValuePairs.XFGetValue("FileName")
						Dim messageStr As String = args.NameValuePairs.XFGetValue("Message")
						'------------- calling create logs function --------------------------------
						Me.createLogFile(si,jobId, file_name,messageStr)
					
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		
		''' <summary>
		''' This function crreate the log file in the respective job id folder
		''' </summary>
		''' <param name="si">SessionInfo</param>
		''' <param name="jobId">JobId</param>
		''' <param name="file_name">File name of log file </param>
		''' <param name="messageStr">Content of the log file </param>
		#Region "Create log file function"
		Public Sub createLogFile(ByVal si As SessionInfo, ByVal jobId As String, ByVal file_name As String, ByVal messageStr As String)
			Try
				' --------------------- Executing sql query  --------------------------
				Dim sqlquery As String
				sqlquery= String.Format("Select INT_ID,CREATED_TS from XFW_OMD_EXECUTION where JOB_ID='{0}'",jobId)
				Dim dt_exe As DataTable
				Using dbConnApp As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_exe = BRApi.Database.ExecuteSql(dbConnApp, sqlquery, False)
				End Using
				
				'------------------- checking if datatable is empty ----------------------
				If dt_exe Is Nothing Or dt_exe.Rows.Count < 1 Then
					Throw New System.Exception(String.Format("the supplied JobId - {0} is not found in Execution Table",jobId))
				End If
				' ------------------ getting the created time stamp of job  --------------
				Dim timeStamp As DateTime = dt_exe(0)(1)
				'  --------------------- defining execution folder location  --------------
				Dim trgFolder = BRApi.Utilities.GetFileShareFolder(si,FileShareFolderTypes.FileShareRoot, Nothing) & "\System\Contents\Data_Integration\OMD\execution"
				Dim year = timeStamp.Year.ToString
				Dim month = "M" & timeStamp.Month.ToString
				Dim day = timeStamp.Day.ToString
				
				'  ------------------ defining logs folder location with respective job id -----------
				Dim fullTrgFolder = trgFolder & "\" & year & "\" & month & "\" & day & "\" & jobId & "\logs"
				If Not Directory.Exists(fullTrgFolder) Then
					Directory.CreateDirectory(fullTrgFolder)
				End If
				'  ------------------ defining filename of log file and writing log message to log file ----------
				Dim trgFileName = file_name.ToString & ".log"
				File.AppendAllText(fullTrgFolder & "\" & trgFileName, vbcrlf & messageStr)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="OMD_Py_Executer">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq

Namespace OneStream.BusinessRule.Extender.OMD_Py_Executer
	Public Class MainClass
		Dim binaryPath As String
		Dim exitCode As String
		Dim sysOut As String
		Dim sysErr As String
		Dim log As New Text.StringBuilder
		
		''' <summary>
		''' This function creates the python file in a temp folder
		''' </summary>
		''' <param name="fileName">Python file name</param>
		''' <param name="fileContent">content of python file</param>
		''' <returns>returns the path of temp python file</returns>
		#Region "Create temp file in temp location"
		Public Function createTempFileWithContent(ByVal fileName As String, ByVal fileContent As String) As String
			Dim tempFolder As String = Path.GetTempPath()
			Dim tempFilePath As String = $"{tempFolder}{fileName}"
			
			Using sw As StreamWriter = File.CreateText(tempFilePath)
				sw.Write(fileContent)
			End Using
			Return tempFilePath
		End Function
		#End Region
		
		''' <summary>
		''' It gets the python file content from dashboard file and send this to createtempfilewithcontent function.
		''' </summary>
		''' <param name="si"SessionInfo></param>
		''' <param name="dashboardFileName">Python file name in OMD Dashboard</param>
		''' <param name="serverFileName">File name on the server</param>
		''' <returns>the call to createtempfilecontent function which return python file temp location</returns>
		#Region "Create Temp file  from dashboard file"
		Public Function createTempfileFromDashboardFile(ByRef si As SessionInfo, ByVal dashboardFileName As String, ByVal serverFileName As String) As String
			Try
				'Dashboard File to read
				Dim sourceFile As DashboardFileResource  = BRApi.Dashboards.FileResources.GetFileResource(si, False, Guid.Empty, dashboardFileName) 			   
				'Define string to hold text from file
				Dim script As New Text.StringBuilder(system.Text.Encoding.UTF8.GetString(sourceFile.FileBytes))
				Return Me.createTempFileWithContent(serverFileName, script.ToString)
			Catch e As Exception
				Me.appendLog($"Error while reading dashboardFile: " & e.ToString)
				Return String.Empty
			End Try
		End Function
		#End Region
		
		''' <summary>
		''' This function executes the python files
		''' </summary>
		''' <param name="binaryPath">Path of the python.exe</param>
		''' <param name="args">arguments to python file execution</param>
		#Region "Execute Binary function"
		Public Sub executeBinary(ByVal binaryPath As String, ByVal args As String)
			Dim binaryExitCode As String = String.Empty
			Dim binaryOutput As String = String.Empty
			Dim binaryStartInfo As ProcessStartInfo = New ProcessStartInfo(binaryPath)
			'binaryStartInfo.LoadUserProfile = True
	        binaryStartInfo.UseShellExecute = False
	        binaryStartInfo.RedirectStandardOutput = True
			binaryStartInfo.RedirectStandardError = True
			binaryStartInfo.CreateNoWindow = True
			'binaryStartInfo.UserName = System.Security.Principal.WindowsIdentity.GetCurrent().Name
			binaryStartInfo.Arguments = args
			
	        Dim binaryProcess As Process = New Process()
	        binaryProcess.StartInfo = binaryStartInfo
	        binaryProcess.Start()
	        
			Using binaryResponseStreamReader As StreamReader = binaryProcess.StandardOutput
		        Me.sysOut = binaryResponseStreamReader.ReadToEnd()
			End Using
			Using binaryResponseStreamReaderErr As StreamReader = binaryProcess.StandardError
				Me.sysErr = binaryResponseStreamReaderErr.ReadToEnd()
			End Using
		    
			binaryProcess.WaitForExit()
				
			Me.exitCode = binaryProcess.ExitCode
			
		    binaryProcess.Close()			
			'Return "ExitCode: " & binaryExitCode & Environment.NewLine & binaryOutput
		End Sub
		#End Region
		
		''' <summary>
		''' This function gets the map.json folder and job id from the OMD_validation function call.This function extracts the python file from the OMD dashboard files
		''' and calls the create temp file function and executes the python file by calling executeBinary function
		''' </summary>
		''' <param name="si">SessionInfo</param>
		''' <param name="targetPath">Path of map.json file</param>
		''' <param name="jobId">Job id of Job</param>
		#Region "Validation Extraction"
		Public Function validationExtraction(ByVal si As SessionInfo, ByVal targetPath As String, ByVal jobId As String,ByVal valType As String, Optional ByVal HV_ID_list As String = "")
			Try
				' --------- getting python file from dashboard ------------
				Dim DashboardFileName = "generic_validation.py"
				If valType.XFEqualsIgnoreCase("healthview")
					DashboardFileName = "HealthView.py"
				End If
				Dim sourceFile As DashboardFileResource  = BRApi.Dashboards.FileResources.GetFileResource(si, False, Guid.Empty, DashboardFileName)  '<-Enter file to read from dashboard
				   
				Dim pythonPath = "C:\Program Files\Python39\python.exe"
				' --------- calling create temp file function --------------
				Dim scriptPath = Me.createTempfileFromDashboardFile(si, DashboardFileName, DashboardFileName)
				' --------- defining map.json folder loaction --------------
				Dim folder_val As String = targetPath
				' --------- defining parameters for getting token ----------
				Dim payload As String = "grant_type=client_credentials&scope=openid&client_id=OneStreamWebAPIQA&access_token_manager_id=TkMgrJWTUPN"
				Dim authkey As String = "T25lU3RyZWFtV2ViQVBJUUE6MlN6VkZFYlFEY1lJRGozdVFhZ0JQMGVmVGpITE1uR3Q1S3dkVXpxUDE3Y1pEUDBmWVFsT1E2SmZra3JNY2pZMw=="
				Dim arguments = $"{scriptPath} --folder {folder_val} --file_path map.json --payload {payload} --authkey {authkey}"
				
				If valType.XFEqualsIgnoreCase("healthview")
					arguments = $"{scriptPath} --folder {folder_val} --file_path hv_map.json --payload {payload} --authkey {authkey}"
				End If
				Me.executeBinary(pythonPath, arguments)
				' ---------- Adding python logs ---------
				Me.appendLog("ServerName: " & Environment.MachineName)
				Me.appendLog("PythonPath: " & pythonPath)
				'Me.appendLog("Arguments: " & arguments)
				Me.appendLog("Python Exit Code: " & Me.exitCode)
				Me.appendLog("Python Output: " & Environment.Newline & Me.sysOut)
				Me.appendLog("Python Error: " & Environment.Newline & Me.sysErr)
				
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			Finally
				' --------- making logs of the python --------------
				If valType.XFEqualsIgnoreCase("detailview")
					Dim customSubstVars_log As New Dictionary(Of String, String)
					customSubstVars_log.Add("JobId", jobId)
					customSubstVars_log.Add("FileName", "Python_LOG")
					customSubstVars_log.Add("Message", log.ToString)

					BRApi.Utilities.StartDataMgmtSequence(si, "Sqnc_log_msg", customSubstVars_log)
				End If
			End Try
		End Function
		#End Region
		
		Public Sub appendLog(ByVal message As String)
			log.append(message & Environment.NewLine)
		End Sub
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
					Case Is = ExtenderFunctionType.ExecuteExternalDimensionSource
						'Add External Members
						Dim externalMembers As New List(Of NameValuePair)
						externalMembers.Add(New NameValuePair("YourMember1Name","YourMember1Value"))
						externalMembers.Add(New NameValuePair("YourMember2Name","YourMember2Value"))
						Return externalMembers
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="OMD_Truncate_Tables">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq

Namespace OneStream.BusinessRule.Extender.OMD_Truncate_Tables
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
'						Dim jobList As String = Me.getJobIdList(si)
'						Me.deleteTableData(si,"XFW_OMD_SUBTASK",jobList)
'						Me.deleteTableData(si,"XFW_OMD_EXECUTION",jobList)
'						Me.updateValidationStatus(si)
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim functionName As String =args.NameValuePairs.XFGetValue("functionName")
						If functionName.XFEqualsIgnoreCase("Backup_OMD_Tables")
							Dim jobListAll As List(Of String) = Me.getJobIdList(si)
							Dim job_list_chunked As New List(Of String) 
							job_list_chunked = Me.toChunks(si,jobListAll,20000)
							For Each job_list As String In job_list_chunked
								Me.TaskActivityBackup(si,"XFW_OMD_TASKACTIVITY",job_list)
								Me.saveToBackUpTable(si,"XFW_OMD_SUBTASK",job_list)
								Me.saveToBackUpTable(si,"XFW_OMD_EXECUTION",job_list)
								Me.deleteTableData(si,"XFW_OMD_SUBTASK",job_list)
								Me.deleteTableData(si,"XFW_OMD_EXECUTION",job_list)
							Next
						End If
					Case Is = ExtenderFunctionType.ExecuteExternalDimensionSource
						'Add External Members
						Dim externalMembers As New List(Of NameValuePair)
						externalMembers.Add(New NameValuePair("YourMember1Name","YourMember1Value"))
						externalMembers.Add(New NameValuePair("YourMember2Name","YourMember2Value"))
						Return externalMembers
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		Public Sub TaskActivityBackup(ByVal si As SessionInfo,ByVal tableName As String, ByVal jobList As String)
			Dim dt_subtask As New DataTable
			Dim dt_tsk As New DataTable
			Dim activity_table As New DataTable
			Dim sqlQuery As String = String.Format("Select SUB_TASK_ID from XFW_OMD_SUBTASK where JOB_ID in ({0})",jobList)
			Using dbConnApp As DBConnInfo = BRAPi.Database.CreateApplicationDbConnInfo(si)
				dt_subtask = BRApi.Database.ExecuteSql(dbConnApp, sqlQuery.ToString, True)
			End Using
			
			Dim job_list_all As New List(Of String)
			Dim job_list_chunked As New List(Of String)
			
			If dt_subtask.Rows.Count() > 0 Then
				For i As Integer = 0 To dt_subtask.Rows.Count() -1
					job_list_all.Add(dt_subtask(i)("SUB_TASK_ID"))
				Next
				job_list_chunked = Me.toChunks(si,job_list_all,20000)
				For Each job_list As String In job_list_chunked
					Dim dml As String = String.Format( "SELECT UniqueID ,DEscription,UserName,startTime,EndTime,TaskActivityStatus,TaskActivityType FROM TaskActivity where uniqueId in ({0}) Order by Starttime ",job_list)
					
					Using dbConnFW As DbConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
						Dim dt_act As DataTable = BRApi.Database.ExecuteSqlUsingReader(dbConnFW, dml, True)
					
					If dt_act IsNot Nothing And dt_act.Rows.Count >0 Then
						activity_table.Merge(dt_act)
					End If
					End Using
				Next
				Dim clonedDT As DataTable = activity_table.Clone()
	       		clonedDT.Columns("UniqueID").DataType = GetType(String)
				Dim c As Integer =0
	          	For Each row As DataRow In activity_table.Rows
					c+=1
	             	clonedDT.ImportRow(row)
	          	Next
				BRApi.ErrorLog.LogMessage(si,"count - " & c)
				BRApi.Database.SaveCustomDataTable(si, "Application", tableName & "_BACKUP", clonedDT, True)
        	End If
		End Sub
		Public Function getJobIdList(ByVal si As SessionInfo)
			Dim dt_exe As New DataTable
			Dim sqlQuery As String = "Select Job_Id from XFW_OMD_EXECUTION where CREATED_TS < DATEADD(day,-11,GETDATE())"
			Using dbConnApp As DBConnInfo = BRAPi.Database.CreateApplicationDbConnInfo(si)
				dt_exe = BRApi.Database.ExecuteSql(dbConnApp, sqlQuery.ToString, True)
			End Using
			Dim job_list As New List(Of String)
			If dt_exe.Rows.Count() > 0 Then
				For i As Integer = 0 To dt_exe.Rows.Count() -1
					job_list.Add(dt_exe.Rows(i)(0))
				Next
			End If
'			BRApi.ErrorLog.LogMessage(si,"job list -----  " & dt_exe.Rows.Count.ToString, job_list)
			Return job_list
		End Function
		Public Sub saveToBackUpTable(ByVal si As SessionInfo, ByVal tableName As String, ByVal jobList As String)
			Try
				Dim sqlQuery As String = String.Format("Select * from {0} Where JOB_ID in ({1})",tableName,jobList)
				Dim dt As New DataTable
				Using dbConnApp As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt = BRApi.Database.ExecuteSql(dbConnApp, sqlQuery, True)
				End Using
				BRApi.Database.SaveCustomDataTable(si, "Application", tableName & "_BACKUP", dt, True)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		Public Sub deleteTableData(ByVal si As SessionInfo, ByVal tableName As String, ByVal jobList As String)
			Dim sqlQuery As String = String.Format("Delete from {0} where JOB_ID in ({1})",tableName,jobList)
			Using dbConnApp As DBConnInfo = BRAPi.Database.CreateApplicationDbConnInfo(si)
				BRApi.Database.ExecuteSql(dbConnApp, sqlQuery.ToString, True)
			End Using
			
		End Sub
		'to chunks
		Private Function toChunks(ByVal si As SessionInfo, ByVal entitylist As List(Of String), ByVal chunk_size As Integer) As List(Of String)
			Try	
				Dim noOfChunk As Integer = 0
				Dim chunkList As New List(Of String)
				Dim templist As New Text.StringBuilder
				Dim temp As String = String.Empty
				Dim tchunk As Integer = chunk_size
				Dim x As Integer = 0
				noOfChunk = Math.Ceiling(entitylist.Count / chunk_size)
			
				For i = 0 To noOfChunk - 1
					Dim j As Integer = x
					While j < tchunk 
						If j < entitylist.Count Then
							templist.Append("'" & entitylist(j) & "',")
						End If	
						j += 1
					End While
					x += chunk_size 
					tchunk = tchunk + chunk_size
					temp = templist.ToString
					temp = temp.Remove(temp.Length - 1, 1)
					chunkList.Add(temp)
					templist.Clear
				Next
				Return chunkList			
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="OMD_Validation">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OMD_Py_Executer" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq


Namespace OneStream.BusinessRule.Extender.OMD_Validation
	Public Class MainClass
		''' <summary>
		''' It is the main function which is used by Data Management Sequence - Sqnc_run_validation
		''' </summary>
		''' <param name="si">SessionInfo</param>
		''' <param name="globals">BRGlobals</param>
		''' <param name="api">Object</param>
		''' <param name="args">ExtenderArgs</param>
		''' <returns>Nothing</returns>
		#Region "Main Function"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Dim jobId As String = ""
			Try
				
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
'						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						'------------- get the parameters from Data Management Sequence --------------------------------
						jobId = args.NameValuePairs.XFGetValue("JobId",String.Empty)
						Dim entityStr As String = args.NameValuePairs.XFGetValue("EntityList",String.Empty)
						Dim jsonFile As String = args.NameValuePairs.XFGetValue("JsonFile",String.Empty)
						Dim aopYear As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "AOP_Year")
						Dim year As String = args.NameValuePairs.XFGetValue("Year",aopYear)
						Dim month As String = args.NameValuePairs.XFGetValue("Month",String.Empty)
						
						' ------------ calling update validation status function ---------------------------------------
						Me.updateValidationStatus(si,jobId,"StatusBlueBall")
						
						' ------------  calling create map json function for creating map..json file -------------------
						Dim TargetFolder As String = Me.createMapJson(si,jobId,entityStr,jsonFile,year,month)
						
						' ------------  calling python script function -------------------------------------------------
						Dim pyExecuter As New OneStream.BusinessRule.Extender.OMD_Py_Executer.MainClass
						pyExecuter.validationExtraction(si, TargetFolder, jobId,"detailview")
						
						' ------------ calling check validation status function ----------------------------------------
						Me.checkValidationStatus(si,jobId,TargetFolder)
					
				End Select

				Return Nothing
			Catch ex As Exception
				' ------------ calling update validation status function ---------------------------------------
				Me.updateValidationStatus(si,jobId,"StatusOrangeBall")
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		
		''' <summary>
		''' This function updates the validation status of the Job
		''' </summary>
		''' <param name="si">SessionInfo</param>
		''' <param name="jobId">JobId of the job</param>
		''' <param name="status">Validation status of the job e.g. running as- StatusBlueBall</param>
		#Region "Update Validation Status Function"
		Public Sub updateValidationStatus(ByVal si As SessionInfo, ByVal jobId As String, ByVal status As String)
			Try
				'-------------------- updating the status of validation --------------------------------------
				Dim sqlquery As String
				sqlquery= String.Format("Update XFW_OMD_SUBTASK Set ValidationStatus='{0}' where JOB_ID='{1}' and STATUS='Yes'",status, jobId)
				Using dbConnApp As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					BRApi.Database.ExecuteSql(dbConnApp, sqlQuery, False)
				End Using
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		#End Region
		
		''' <summary>
		''' This function takes the json template from lib folder and populates it with entities , scenario and time and stores this file to respective Job Id folder
		''' </summary>
		''' <param name="si">SessionInfo</param>
		''' <param name="jobId">JobId received from DM Parameters</param>
		''' <param name="entityStr">List of entity received from DM parameters</param>
		''' <param name="jsonFileName">Name of the json template received from DMD parameters</param>
		''' <param name="yearName">Year received From FM parameters</param>
		''' <param name="monthName">Month received from DM paramerters(specially for sams)</param>
		#Region "Create Map Json Function"
		Public Function createMapJson(ByVal si As SessionInfo,ByVal jobId As String,ByVal entityStr As String,ByVal jsonFileName As String,ByVal yearName As String,ByVal monthName As String)
			Try
				' ----------------- getting entities list --------------------------------------
				Dim entityList As List(Of String) = entityStr.Split("-").ToList()
				' ----------------- declaring variables for query and datatable -----------------
				Dim sqlquery As String
				sqlquery= String.Format("Select INT_ID,CREATED_TS from XFW_OMD_EXECUTION where JOB_ID='{0}'",jobId)
				Dim dt_exe As DataTable
				Dim dt_int As DataTable
				' ----------------- executing sql queries ---------------------------------------
				Using dbConnApp As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_exe = BRApi.Database.ExecuteSql(dbConnApp, sqlquery, False)
					If dt_exe Is Nothing Or dt_exe.Rows.Count < 1 Then
						Throw New System.Exception(String.Format("the supplied JobId - {0} is not found in Execution Table",jobId))
					End If
					sqlquery = String.Format("SELECT [ID],[SRC],[SRC_ADDTLINFO],[TRG],[TRG_ADDTLINFO],[SRC_SCENARIO],[TRG_SCENARIO] FROM [dbo].[XFW_OMD_INTERFACE] Where [ID]='{0}'",dt_exe(0)(0))
					dt_int = BRApi.Database.ExecuteSql(dbConnApp, sqlquery, False)
				End Using
				'  ------------------- checking if interface table returns data ---------------------------
				If dt_int Is Nothing Or dt_int.Rows.Count <1 Then
					Throw New System.Exception(String.Format("No data found in Interface table with respect to given JobID - {0}",jobId))
				End If
				'  ------------------- defining variables for timestamp, scenarios, filename in lib folder------------------------------------------------
				Dim timeStamp As DateTime = dt_exe(0)(1)
				Dim srcScenario As String = dt_int(0)(5)
				Dim trgScenario As String = dt_int(0)(6)
				
				Dim libFolder = BRApi.Utilities.GetFileShareFolder(si,FileShareFolderTypes.FileShareRoot, Nothing) & "\System\Contents\Data_Integration\OMD\lib"
				
				Dim fileName As String = jsonFileName
				Dim fileContent As String = ""
				If File.Exists(libFolder & "\" & fileName) Then
					fileContent = File.ReadAllText(libFolder & "\" & fileName)
				Else
					Throw New System.Exception(String.Format("File {0} does not exist in lib",fileName))
				End If
				Dim jsonObj = JsonConvert.DeserializeObject(fileContent)
				
				' --------------- adding entities to the json file  -------------------------
				Dim subkey_src As String
				subkey_src = jsonObj("SourceLanding")("Entity").ToString
				Dim subkey_tgt As String
				subkey_tgt = jsonObj("TargetLanding")("Entity").ToString
				jsonObj("SourceVParams")(subkey_src).Add(entityList)
				jsonObj("TargetVParams")(subkey_tgt).Add(entityList)
				
				' --------------- adding scenario to json template  --------------------------
				jsonObj("SourceVParams")(jsonObj("SourceLanding")("Scenario").ToString).Add(srcScenario)
				jsonObj("TargetVParams")(jsonObj("TargetLanding")("Scenario").ToString).Add(trgScenario)
				
				' ---------------- adding time to json template -----------------------------
				jsonObj("SourceVParams")(jsonObj("SourceLanding")("Time").ToString).Add(yearName)
				jsonObj("TargetVParams")(jsonObj("TargetLanding")("Time").ToString).Add(yearName)
				
				' ---------------- adding month to json template if required -------------------
				If Not String.IsNullOrEmpty(monthName) Then
					jsonObj("SourceVParams")(jsonObj("SourceLanding")("Month").ToString).Add(monthName)
					jsonObj("TargetVParams")(jsonObj("TargetLanding")("Month").ToString).Add(monthName)
				End If
				'---------------- defining execution folder for json file -------------------------
				Dim trgFolder = BRApi.Utilities.GetFileShareFolder(si,FileShareFolderTypes.FileShareRoot, Nothing) & "\System\Contents\Data_Integration\OMD\execution"
				Dim year = timeStamp.Year.ToString
				Dim month = "M" & timeStamp.Month.ToString
				Dim day = timeStamp.Day.ToString
				
				Dim fullTrgFolder = trgFolder & "\" & year & "\" & month & "\" & day & "\" & jobId
				If Not Directory.Exists(fullTrgFolder) Then
					Directory.CreateDirectory(fullTrgFolder)
				End If
				Dim trgFileName = "map.json"
				' --------------- saving the json file to the target folder ---------------------------
				Dim jsonFile = JsonConvert.SerializeObject(jsonObj, Formatting.Indented)
				File.WriteAllText(fullTrgFolder & "\" & trgFileName, jsonFile)
				Return fullTrgFolder
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		
		''' <summary>
		''' This function checks if the validation if passed or failed andcalls the above update validation function
		''' </summary>
		''' <param name="si">SessionInfo</param>
		''' <param name="jobId">JobId</param>
		''' <param name="valFolder">Validation folder which is the Job id folder which contains different files like reportCard.json which is used for validation</param>
		#Region "Check Validation Status Function"
		Public Sub checkValidationStatus(ByVal si As SessionInfo, ByVal jobId As String, ByVal valFolder As String)
			Try
				' ------------  checking if reportCard.json file exists in respective jobId folder -------------
				Dim valFileName = "reportCard.json"
				Dim valStatus = "StatusGreenBall"
				If Not File.Exists(valFolder & "\" & valFileName) Then
					valStatus = "StatusOrangeBall"
				Else
					' ------------ checking if the validation is failed or successful --------------------------
					Dim jsonFile = File.ReadAllText(valFolder & "\" & valFileName)
					Dim jsonObj = JsonConvert.DeserializeObject(jsonFile)
					Dim cf = jsonObj("varianceCount")
					Dim extraTgt = jsonObj("extraTargetRecord")
					Dim extraSrc = jsonObj("extraSourceRecord")
					
					If cf>0 Or extraSrc>0 Or extraTgt>0 Then
						valStatus= "StatusRedBall"
					End If
				End If
				' ----------------  updating validation status by calling update validation status function --------
				Me.updateValidationStatus(si,jobId,valStatus)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="OPS_ShipPackageGroupUsingID">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OPS_SolutionHelper" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.OPS_ShipPackageGroupUsingID
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try				
				If args.FunctionType = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
					'Prepare parameters
					Dim ph As New OneStream.BusinessRule.DashboardExtender.OPS_SolutionHelper.MainClass						
					Dim packageGroupID As String = args.NameValuePairs.XFGetValue("PackageGroupID")
					Dim debugMode As Boolean = args.NameValuePairs.XFGetValue("DebugMode").XFConvertToBool()
					
					'Update the task activity description with the package group name
					Dim packageName As String = ph.GetFieldFromID(si, "XFW_OPS_PackageGroup", "PackageGroupID", packageGroupID, "PackageGroupName")
					Dim description As String = "Parcel Service Group Shipment (" & packageName & ")"
					Dim dml As String = "UPDATE TaskActivity Set Description = '" & description & "' Where (TaskActivityType = 1000) AND (Description = N'Parcel Service Group Shipment') AND (TaskActivityStatus = 1000) AND (AuthSessionID = '" & si.AuthToken.AuthSessionID.ToString & "')"
					Using dbConnFW As DbConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
						BRApi.Database.ExecuteActionQuery(dbConnFW, dml, False, False)
					End Using

					'Ship the package group
					ph.ShipPackageGroup(si, packageGroupID, debugMode)
					
				End If
				
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="OPS_ShipPackageGroupUsingName">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OPS_SolutionHelper" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.OPS_ShipPackageGroupUsingName
	Public Class MainClass
		'------------------------------------------------------------------------------------------------------------
		'Reference Code: 		OPS_ShipPackageUsingName 
		'
		'Description:			Parcel Service Data Management step helper used to execute the parcel service package]
		'						shipping routine as a background Data Management job (Package Referenced By Name).
		'
		'------------------------------------------------------------------------------------------------------------		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType											
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						'Prepare parameters
						Dim ph As New OneStream.BusinessRule.DashboardExtender.OPS_SolutionHelper.MainClass
						Dim packageGroupName As String = args.NameValuePairs.XFGetValue("PackageGroupName")
						Dim packageGroupID As String = ph.GetFieldFromID(si, "XFW_OPS_PackageGroup", "PackageGroupName", packageGroupName, "PackageGroupID")
						Dim debugMode As Boolean = args.NameValuePairs.XFGetValue("DebugMode").XFConvertToBool()

						'Update the task activity description with the package name
						Dim description As String = "Parcel Service Shipment (" & packageGroupName & ")"
						Dim dml As String = "UPDATE TaskActivity Set Description = '" & description & "' Where (TaskActivityType = 1000) AND (Description = N'Parcel Service Shipment') AND (TaskActivityStatus = 1000) AND (AuthSessionID = '" & si.AuthToken.AuthSessionID.ToString & "')"
						Using dbConnFW As DbConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
							BRApi.Database.ExecuteActionQuery(dbConnFW, dml, False, False)
						End Using
						
						'Ship the package
						ph.ShipPackageGroup(si, packageGroupID, debugMode)
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="OPS_ShipPackageUsingID">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Administrators</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OPS_SolutionHelper" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.OPS_ShipPackageUsingID
	Public Class MainClass
		'------------------------------------------------------------------------------------------------------------
		'Reference Code: 		OPS_ShipPackage 
		'
		'Description:			Parcel Service Data Management step helper used to execute the parcel service package]
		'						shipping routine as a background Data Management job (Package Referenced By ID).
		'
		'		
		'Created By:			Tom Shea
		'Date Created:			1-24-2015
		'------------------------------------------------------------------------------------------------------------		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType											
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						'Prepare parameters
						Dim ph As New OneStream.BusinessRule.DashboardExtender.OPS_SolutionHelper.MainClass						
						Dim packageID As String = args.NameValuePairs.XFGetValue("PackageID")
						Dim debugMode As Boolean = args.NameValuePairs.XFGetValue("DebugMode").XFConvertToBool()
						
						'Update the task activity description with the package name
						Dim packageName As String = ph.GetFieldFromID(si, "XFW_OPS_Package", "PackageID", packageID, "PackageName")
						Dim description As String = "Parcel Service Shipment (" & packageName & ")"
						Dim dml As String = "UPDATE TaskActivity Set Description = '" & description & "' Where (TaskActivityType = 1000) AND (Description = N'Parcel Service Shipment') AND (TaskActivityStatus = 1000) AND (AuthSessionID = '" & si.AuthToken.AuthSessionID.ToString & "')"
						Using dbConnFW As DbConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
							BRApi.Database.ExecuteActionQuery(dbConnFW, dml, False, False)
						End Using

						'Ship the package
						ph.ShipPackage(si, String.Empty, packageID, debugMode)

				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="OPS_ShipPackageUsingName">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Administrators</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OPS_SolutionHelper" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.OPS_ShipPackageUsingName
	Public Class MainClass
		'------------------------------------------------------------------------------------------------------------
		'Reference Code: 		OPS_ShipPackageUsingName 
		'
		'Description:			Parcel Service Data Management step helper used to execute the parcel service package]
		'						shipping routine as a background Data Management job (Package Referenced By Name).
		'
		'		
		'Created By:			Tom Shea
		'Date Created:			1-24-2015
		'------------------------------------------------------------------------------------------------------------		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType											
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						'Prepare parameters
						Dim ph As New OneStream.BusinessRule.DashboardExtender.OPS_SolutionHelper.MainClass
						Dim packageName As String = args.NameValuePairs.XFGetValue("PackageName")
						Dim packageID As String = ph.GetFieldFromID(si, "XFW_OPS_Package", "PackageName", packageName, "PackageID")
						Dim debugMode As Boolean = args.NameValuePairs.XFGetValue("DebugMode").XFConvertToBool()

						'Update the task activity description with the package name
						Dim description As String = "Parcel Service Shipment (" & packageName & ")"
						Dim dml As String = "UPDATE TaskActivity Set Description = '" & description & "' Where (TaskActivityType = 1000) AND (Description = N'Parcel Service Shipment') AND (TaskActivityStatus = 1000) AND (AuthSessionID = '" & si.AuthToken.AuthSessionID.ToString & "')"
						Using dbConnFW As DbConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
							BRApi.Database.ExecuteActionQuery(dbConnFW, dml, False, False)
						End Using
						
						'Ship the package
						ph.ShipPackage(si, String.Empty, packageID, debugMode)
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="OS_INTEGRATION_GATEWAY">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_VARIABLES" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports System.Security.Cryptography
Imports System.Text
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports System.Net
Imports System.Net.Http
Imports System.Threading.Tasks
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
'Test Rajesh 

Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_VARIABLES
Imports OneStream.BusinessRule.Extender.OS_Models

Namespace OneStream.BusinessRule.Extender.OS_INTEGRATION_GATEWAY
	Public Class IntegrationGateway(Of T As IntegrationParams)
		Implements IDisposable
		
	 	Private Const ENCRIPTION_KEY As String = "Man0maN"
		Private _integrationParams As T
		Private _paramProvider As IParamProvider
		Private _paramProviderFactory = New IntegrationParamProviderFactory()
		Private _moduleName As String
		Private m_Client As HttpClient
		
		Private CTDataSources = New List(Of String)({"FCP_ACTL_ECF_CHNL_DEPT","FCP_ACTUALS_HFM_ADJS_CORP","FCP_ACTUALS_HFM_ADJS_SAMS","FCP_ACTUALS_HFM_ADJS_WMTUS",
		"FCP_ACTUALS_METRICS","FCP_ACTUALS_SAPBI_CORP","FCP_ACTUALS_SAPBI_ROI","FCP_ACTUALS_SAPBI_SAMS","FCP_ACTUALS_SAPBI_WMTUS_BAL",
		"FCP_ACTUALS_SAPBI_WMTUS_OTHERS","FCP_ACTUALS_SAPBI_WMTUS_SALES","FCP_ACTUALS_SLEDG_ADJ","FCP_ANAPLAN_ACTL_CC_ACCT_CHNL",
		"FCP_ANAPLAN_FCST_CC_ACCT_CHNL","FCP_ANAPLAN_PLAN_CC_ACCT_CHNL","FCP_FCST_ECF_CHNL_DEPT","FCP_PLAN_ECF_CHNL_DEPT",
		"ONE_TIMER_ENTERPRISE_ADJ_OS","ONE_TIMER_EXTERNAL_ADJ_OS","ONE_TIMER_SEGMENT_ADJ_OS","FCP_SS_GSS_TECH_FORECAST","FCP_SAMS_ACTUAL_PBC",
		"FCP_SAMS_FCST_PBC","FCP_SAMS_PLAN_PBC","FCP_SS_TECH_GBLSRC_ACTL_RESTMT","FCP_ACTUALS_HFM_INTL_LCL","FCP_ACTUALS_HFM_INTL_USD"})

		Const defaultTimeout As Int16 = 30
		Const defaultMSVersion As String = "2018-03-28"
		Const defaultCacheControl As String = "no-cache"
		
		Public ReadOnly Property Params() As T
			Get
				Return _integrationParams
			End Get
		End Property
		
		Public Sub New(ByVal si As SessionInfo)
		End Sub	
		
		Public Sub New(ByVal si As SessionInfo, ByVal moduleName As String, ByVal moduleType As OSModuleType, Optional ByVal args As ExtenderArgs = Nothing)
			
			_paramProvider = _paramProviderFactory.GetProvider(si, moduleName, moduleType, args)
			_integrationParams = _paramProvider.Params
			_moduleName = moduleName
			
			m_Client = New HttpClient()
			
			m_Client.Timeout = TimeSpan.FromMinutes(defaultTimeout)
			m_Client.DefaultRequestHeaders.Clear()
			m_Client.DefaultRequestHeaders.ConnectionClose = False
			m_Client.DefaultRequestHeaders.Add("cache-control", defaultCacheControl)
			
			If IntegrationParamProviderFactory.FCPModules.Contains(moduleType) Then
				Dim fcpParams = DirectCast(DirectCast(_integrationParams, Object), FCPIntegrationParams)
				m_Client.DefaultRequestHeaders.Add("WM_CONSUMER.ID", Me.Decrypt(fcpParams.ConsumerId, ENCRIPTION_KEY))
				m_Client.DefaultRequestHeaders.Add("WM_SVC.ENV", fcpParams.SvcEnv)
				m_Client.DefaultRequestHeaders.Add("WM_SVC.NAME", fcpParams.SvcName)
				m_Client.DefaultRequestHeaders.Add("x-ms-version", defaultMSVersion)
			End If
						
		End Sub	
		
		Public Async Function GetData(ByVal si As SessionInfo, ByVal params As Dictionary(Of String, String), Optional ByVal isData As Boolean = True, Optional ByVal action As OSActionType = OSActionType.Get) As Task(Of OSJsonResponse)
			Dim result As OSJsonResponse = New OSJsonResponse()
			Dim endPoint As String = String.Empty
			Try
				
				If CTDataSources.Contains(_moduleName) Then
					endPoint = $"{_integrationParams.EndPoint(action.ToString)(0)}/{IF(isData, "getData", "getMeta")}/{_moduleName}_CT"
				Else
					endPoint = $"{_integrationParams.EndPoint(action.ToString)(0)}/{IF(isData, "getData", "getMeta")}/{_moduleName}"
				End If
				
				If(params.Count > 0)
					endPoint = $"{endPoint}?" & String.Join("&", params.Select(Function(kv) $"{kv.Key}={kv.Value}"))
				End If
				'BRApi.ErrorLog.LogMessage(si, endPoint)
				Dim response As HttpResponseMessage = Await m_Client.GetAsync(New Uri(endPoint))
				
				result.Success = response.IsSuccessStatusCode
				result.StatusCode = response.StatusCode
				result.ReasonPhrase = response.ReasonPhrase				
				result.JsonData = response.Content.ReadAsStringAsync().Result
				
			Catch ex As HttpRequestException
				result.Success = False
				result.JsonData = "{}"
				If ex.InnerException IsNot Nothing And ex.InnerException.GetType Is GetType(WebException) Then
					Dim wex = DirectCast(ex.InnerException, WebException)
					result.StatusCode = wex.Status
					result.ReasonPhrase = $"{wex.Message}, {endPoint}"
				Else
					result.StatusCode = "000"
					result.ReasonPhrase = $"{ex.Message}, {endPoint}"
				End If
			Catch ex As Exception	
				result.Success = False
				result.StatusCode = "000"
				result.ReasonPhrase = $"{ex.Message}, {endPoint}"
				result.JsonData = "{}"
			Finally
				result.Url = endPoint
			End Try
			'BRApi.ErrorLog.LogMessage(si, $"{JsonConvert.SerializeObject(result)}")
			'BRApi.ErrorLog.LogMessage(si, $"Rajesh Mirsala Test ")
			Return result
		End Function
		
		Public Async Function PutData(ByVal si As SessionInfo, ByVal jsonData As String, ByVal isSuccessTrigger As Boolean, Optional ByVal action As OSActionType = OSActionType.Put, Optional ByVal seqNum As Integer = 0) As Task (Of OSJsonResponse)
			Dim result As OSJsonResponse = New OSJsonResponse()
			Dim endPoint As String = String.Empty
				
			Try		
				endPoint = _integrationParams.EndPoint(action.ToString)(seqNum)
				If isSuccessTrigger Then
					If endPoint.Contains("/loadDataPivot") Then
						endPoint = endPoint.Replace("/loadDataPivot", "/loadDataTrigger")
					Else If endPoint.Contains("/loadDataRpt") Then
						endPoint = endPoint.Replace("/loadDataRpt", "/loadDataTriggerRpt")
					Else If endPoint.Contains("/loadData") Then
						endPoint = endPoint.Replace("/loadData", "/loadDataTrigger")
					End If
				End If
				
				Dim content = New Http.StringContent(jsonData, System.Text.Encoding.UTF8, "application/json")
				Dim response As HttpResponseMessage = Await m_Client.PostAsync(endPoint, content, New System.Threading.CancellationToken(False))
				
				result.Success = response.IsSuccessStatusCode
				result.StatusCode = response.StatusCode
				result.ReasonPhrase = response.ReasonPhrase				
				result.JsonData = response.Content.ReadAsStringAsync().Result
			Catch ex As HttpRequestException
				result.Success = False
				result.JsonData = "{}"
				If ex.InnerException IsNot Nothing And ex.InnerException.GetType Is GetType(WebException) Then
					Dim wex = DirectCast(ex.InnerException, WebException)
					result.StatusCode = wex.Status
					result.ReasonPhrase = $"{wex.Message}, {endPoint}"
				Else
					result.StatusCode = "000"
					result.ReasonPhrase = $"{ex.Message}, {endPoint}"
				End If
			Catch ex As Exception
				result.Success = False
				result.StatusCode = "000"
				result.ReasonPhrase = $"{ex.Message}, {endPoint}"
				result.JsonData = "{}"
			Finally
				result.Url = endPoint
				'BRApi.ErrorLog.LogMessage(si, $"{JsonConvert.SerializeObject(result)}")
			End Try
			
			Return result		
		End Function
		
		Public Async Function PutData(ByVal si As SessionInfo, ByVal jsonData As String, Optional ByVal action As OSActionType = OSActionType.Put, Optional ByVal seqNum As Integer = 0) As Task (Of OSJsonResponse)
			Dim result As OSJsonResponse = New OSJsonResponse()
			Dim endPoint As String = String.Empty
				
			Try		
				endPoint = _integrationParams.EndPoint(action.ToString)(seqNum)
				'brapi.ErrorLog.LogMessage(si,$"endPoint : {endPoint}")

				Dim content = New Http.StringContent(jsonData, System.Text.Encoding.UTF8, "application/json")
				Dim response As HttpResponseMessage = Await m_Client.PutAsync(endPoint, content, New System.Threading.CancellationToken(False))
				
				result.Success = response.IsSuccessStatusCode
				result.StatusCode = response.StatusCode
				result.ReasonPhrase = response.ReasonPhrase				
				result.JsonData = response.Content.ReadAsStringAsync().Result
			Catch ex As HttpRequestException
				result.Success = False
				result.JsonData = "{}"
				If ex.InnerException IsNot Nothing And ex.InnerException.GetType Is GetType(WebException) Then
					Dim wex = DirectCast(ex.InnerException, WebException)
					result.StatusCode = wex.Status
					result.ReasonPhrase = $"{wex.Message}, {endPoint}"
				Else
					result.StatusCode = "000"
					result.ReasonPhrase = $"{ex.Message}, {endPoint}"
				End If
			Catch ex As Exception
				result.Success = False
				result.StatusCode = "000"
				result.ReasonPhrase = $"{ex.Message}, {endPoint}"
				result.JsonData = "{}"
			Finally
				result.Url = endPoint
				BRApi.ErrorLog.LogMessage(si, $"{JsonConvert.SerializeObject(result)}")
			End Try
			
			Return result		
		End Function
		Public Async Function GetBatchStatus(ByVal si As SessionInfo, ByVal batchId As String) As Task(Of OSJsonResponse)
			Dim result As OSJsonResponse = New OSJsonResponse()
			Dim endPoint As String = String.Empty
			Try
				endPoint = $"{_integrationParams.EndPoint(OSActionType.Status.ToString)(0)}{batchId}"
				
				'BRApi.ErrorLog.LogMessage(si, endPoint)
				Dim response As HttpResponseMessage = Await m_Client.GetAsync(New Uri(endPoint))
				
				result.Success = response.IsSuccessStatusCode
				result.StatusCode = response.StatusCode
				result.ReasonPhrase = response.ReasonPhrase				
				result.JsonData = response.Content.ReadAsStringAsync().Result
				
			Catch ex As HttpRequestException
				result.Success = False
				result.JsonData = "{}"
				If ex.InnerException IsNot Nothing And ex.InnerException.GetType Is GetType(WebException) Then
					Dim wex = DirectCast(ex.InnerException, WebException)
					result.StatusCode = wex.Status
					result.ReasonPhrase = $"{wex.Message}, {endPoint}"
				Else
					result.StatusCode = "000"
					result.ReasonPhrase = $"{ex.Message}, {endPoint}"
				End If
			Catch ex As Exception	
				result.Success = False
				result.StatusCode = "000"
				result.ReasonPhrase = $"{ex.Message}, {endPoint}"
				result.JsonData = "{}"
			Finally
				result.Url = endPoint
			End Try
			'BRApi.ErrorLog.LogMessage(si, $"{JsonConvert.SerializeObject(result)}")
			Return result
		End Function
		
		Public Function Encrypt(clearText As String, encriptionKey As String) As String
		    Dim clearBytes As Byte() = Encoding.Unicode.GetBytes(clearText)
		    Using encryptor As Aes = Aes.Create()
		        Dim pdb As New Rfc2898DeriveBytes(encriptionKey, New Byte() {&H49, &H76, &H61, &H6E, &H20, &H4D, _
		         &H65, &H64, &H76, &H65, &H64, &H65, &H76})
		        encryptor.Key = pdb.GetBytes(32)
		        encryptor.IV = pdb.GetBytes(16)
		        Using ms As New MemoryStream()
		            Using cs As New CryptoStream(ms, encryptor.CreateEncryptor(), CryptoStreamMode.Write)
		                cs.Write(clearBytes, 0, clearBytes.Length)
		                cs.Close()
		            End Using
		            clearText = Convert.ToBase64String(ms.ToArray())
		        End Using
		    End Using
		    Return clearText
		End Function
	
		Public Function Decrypt(cipherText As String, encriptionKey As String) As String
			Dim cipherBytes As Byte() = Convert.FromBase64String(cipherText)
		    Using encryptor As Aes = Aes.Create()
		        Dim pdb As New Rfc2898DeriveBytes(encriptionKey, New Byte() {&H49, &H76, &H61, &H6E, &H20, &H4D, _
		         &H65, &H64, &H76, &H65, &H64, &H65, _
		         &H76})
		        encryptor.Key = pdb.GetBytes(32)
		        encryptor.IV = pdb.GetBytes(16)
		        Using ms As New MemoryStream()
		            Using cs As New CryptoStream(ms, encryptor.CreateDecryptor(), CryptoStreamMode.Write)
		                cs.Write(cipherBytes, 0, cipherBytes.Length)
		                cs.Close()
		            End Using
		            cipherText = Encoding.Unicode.GetString(ms.ToArray())
		        End Using
		    End Using
	    	Return cipherText
		End Function
		
		Public Sub Dispose() Implements IDisposable.Dispose
			If(m_Client IsNot Nothing) Then
				m_Client.Dispose
			End If
		End Sub
	
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="OS_INTEGRATION_UTILITY">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_VARIABLES" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_GATEWAY" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="Email_Helper" />
            </referencedAssemblies>
            <sourceCode><![CDATA['-------------------------------------------------------------------------------------------------
'	Version History ==> Date  / Changed By / What Was Changed
'	19th NOV,2021 - vn50tv8 - Added Current user to email Distribution list 
'--------------------------------------------------------------------------------------------------'
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports System.Timers 
Imports System.Net
Imports System.Net.Http
Imports System.Threading
Imports System.Threading.Tasks
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq

Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_VARIABLES
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_GATEWAY
Imports OneStream.BusinessRule.Extender.OS_Models

Namespace OneStream.BusinessRule.Extender.OS_INTEGRATION_UTILITY
	Public Class CommonUtility
		
		#Region "Miscellinaneous"
		Public Shared Function GetAppAndEnvName(ByVal si As sessioninfo) As String
			Return $"{si.AppName} - {GetEnvName()}"
		End Function
		
		Public Shared Function GetCurrentUser(ByVal si As sessioninfo) As String
			Dim fullName = BRApi.Security.Admin.GetUser(si, si.UserName).User.Description
			Return $"{si.UserName} - {fullName}"
		End Function
		
		Public Shared Function GetEnvName() As String
			Dim xEnv As New XFEnvironment
			Dim xEnvSet As XFEnvironmentSettings = xEnv.GetAppServerConfigEnvironmentSettings()
			Return xEnvSet.EnvironmentName
		End Function
		#End Region
		
		#Region "Trigger file creation process"
		Public Shared Function CreateOSTriggerFiles(ByVal si As SessionInfo, ByVal fcpGateWay As IntegrationGateway(Of FCPPutIntegrationParams)) As List(Of WorkflowBatchFileCollection)
			Dim result = New List(Of WorkflowBatchFileCollection)
			For triggerIndex As Integer = 0 To fcpGateWay.Params.wfTop.Count - 1
				Dim batchInfo As WorkflowBatchFileCollection = TriggerFileProcess(si, fcpGateWay, fcpGateWay.Params.WFTop(triggerIndex), fcpGateWay.Params.WFItem(triggerIndex))
				
				If Not batchInfo Is Nothing Then
					result.Add(batchInfo)
					' push info to the log
					Dim objTimeAppInfo As TimeDimAppInfoEx = BRApi.Finance.Time.GetTimeDimAppInfo(si)
					Dim batchStatusMsg As String = batchInfo.GetCompleteBatchStatusMessage(si,objTimeAppInfo, True, True)					
					
					If fcpGateWay.Params.Debugger Then
						BRapi.ErrorLog.LogMessage(si, $"Process: {fcpGateWay.Params.ModuleName} - GenerateTriggerFiles - wftop: {fcpGateWay.Params.wfTop(triggerIndex)}, wfItem: {fcpGateWay.Params.wfItem(triggerIndex)}, The batchStatusMsg: {batchStatusMsg}")
					End If 
				Else
					Throw New Exception($"Process: {fcpGateWay.Params.ModuleName} - GenerateTriggerFiles - wftop: {fcpGateWay.Params.wfTop(triggerIndex)}, wfItem: {fcpGateWay.Params.wfItem(triggerIndex)}, Status: Failed, Msg: Could not load data into OneStream as a result of trigger file failure.")
				End If
			Next
			Return result
		End Function
		
		Private Shared Function TriggerFileProcess(ByVal si As SessionInfo, ByVal fcpGateWay As IntegrationGateway(Of FCPPutIntegrationParams), wfTop As String, wfItem As String) As WorkflowBatchFileCollection
			If fcpGateWay.Params.Debugger Then
				BRApi.ErrorLog.LogMessage(si,$"Process: {fcpGateWay.Params.ModuleName} - TriggerFileProcess - wfTop: {wfTop} , wfItem: {wfItem},  wfScenario: {fcpGateWay.Params.wfScen} , wfTime: {fcpGateWay.Params.wfTime}")
			End If
			
			Dim valTransform As Boolean = True
			Dim valIntersect As Boolean = True
			Dim loadCube As Boolean = True
			Dim processCube As Boolean = True
			Dim confirm As Boolean = False
			Dim autoCertify As Boolean = False
			Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
			
			'Set Processing Switches	
			'Get the profile info
			Dim wfProfileInfo As WorkflowProfileInfo = BRApi.Workflow.Metadata.GetProfile(si, wfTop)
			Dim wfClusterPk As WorkflowUnitClusterPk
			Dim wfClusterPk2 As WorkflowUnitClusterPk
			
			wfClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, wfTop, fcpGateWay.Params.WFScen, fcpGateWay.Params.WFTime)
			
			wfClusterPk2 = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, $"{wfTop}.{wfItem}", fcpGateWay.Params.WFScen, fcpGateWay.Params.WFTime)
			
			If fcpGateWay.Params.ClearStage Then
			'Clear Stage
				Dim objLoadTransformProcessInfo As LoadTransformProcessInfo = BRApi.Import.Process.ClearStageData(si, wfClusterPk2, Nothing)
			End If
			
			'Check the lock status
			Dim wfStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfClusterPk)	
			If Not wfStatus.Locked Then
				Dim harvestPath As String = FileShareFolderHelper.GetBatchHarvestFolderForApp(si, True, configSettings.FileShareRootFolder, configSettings.FileShareBatchHarvestRootFolder, si.AppToken.AppName)
				'Loop through Json is required for Bi Blend Batch File creation.--Rajesh Mirsala.
				If fcpGateWay.Params.ModuleName = "BiBlend" Then 
					CreateBiBlendBatchFileTrigger(si, fcpGateWay, harvestPath, $"{wfTop}",$"{wfItem}")
				Else 
					CreateBatchFileTrigger(si, fcpGateWay, harvestPath, $"{wfTop}.{wfItem}")
				End If
			End If
			
			Dim batchInfo As WorkflowBatchFileCollection = BRApi.Utilities.ExecuteFileHarvestBatch(si, fcpGateWay.Params.wfScen, fcpGateWay.Params.wfTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, False)
			
			If fcpGateWay.Params.Debugger Then
				BRApi.ErrorLog.LogMessage(si,$"Process: {fcpGateWay.Params.ModuleName} - TriggerFileProcess - batchInfo: BatchName:  {batchInfo.GetBatchName}, batchTitleMsg: {batchInfo.GetBatchTitleMessage}")					 			
				 
				'Dim objTimeDimAppInfoEx As TimeDimAppInfoEx = BRApi.Finance.Time.GetTimeDimAppInfo(si)
				'Dim batchStatusMsg As String = batchInfo.GetCompleteBatchStatusMessage(si, objTimeDimAppInfoEx, True, True)
				'BRAPi.ErrorLog.LogMessage(si, "batchStatusMsg:" & batchStatusMsg)
			End If
		
			Return batchInfo
		End Function
		
		Private Shared Sub CreateBatchFileTrigger(ByVal si As SessionInfo, ByVal fcpGateWay As IntegrationGateway(Of FCPPutIntegrationParams), ByVal harvestPath As String, ByVal wfName As String, ByVal Optional Testing As Boolean = False)
			Dim Path As String = String.Empty

			If Not Testing Then				
				path = harvestPath & "\autoBatchfile-" & wfName & "-" & fcpGateWay.Params.wfScen &  "-" & fcpGateWay.Params.wfTime & "-RB.txt"
			Else
				Dim testingFolderPath As String = BRApi.FileSystem.GetFileShareFolder(si, Filesharefoldertypes.Batch, Nothing) & "\_Testing"
				If Not Directory.Exists(testingFolderPath) Then 
					directory.CreateDirectory(testingFolderPath) 				
				
				End If
				path = testingFolderPath & "\autoBatchfile-" & wfName & "-" & fcpGateWay.Params.wfScen &  "-" & fcpGateWay.Params.wfTime & "-RB.txt"
			End If
				
			If Not File.Exists(path) Or Testing = True Then
				' Create a file to write to. 
				Using sw As StreamWriter = File.CreateText(path)
					sw.WriteLine("Batch File Trigger")
				End Using
			End If
		End Sub
		
		'Looping Month wise and Creating Batch Files to load Data for Months which sent to FCP using JSON. --Rajesh Mirsala.
		Private Shared Sub CreateBiBlendBatchFileTrigger(ByVal si As SessionInfo, ByVal fcpGateWay As IntegrationGateway(Of FCPPutIntegrationParams), ByVal harvestPath As String, ByVal WfProfileName As String,ByVal wfItemName As String, ByVal Optional Testing As Boolean = False)
			Dim Path As String = String.Empty
			Dim wfName As String
			Dim FPKey As JObject = JObject.parse(fcpGateWay.Params.FiscalPeriod)
			Dim dtArray As JArray = FPKey("data")
			Dim FPKeys = dtArray.Select(Function(y) y("Fiscal Period Key")).ToArray()
			
			For Each Key As String In FPKeys
				Dim Yr  = Key.substring(0,4)
				Dim Mth  = Key.substring(4)
				If fcpGateWay.Params.DirectLoad = True Then
					wfName = WfProfileName & "_Per" & Mth & "." & WfItemName & "_Direct"
				Else 	
					wfName = WfProfileName & "_Per" & Mth & "." & WfItemName
				End If
				If Not Testing Then
					If fcpGateWay.Params.WFScen ="Actual" Then
						path = harvestPath & "\autoBatchfile-" & wfName & "-" & fcpGateWay.Params.WFScen &  "-" & Yr &"M"& Mth & "-RB.txt"
					Else
						path = harvestPath & "\autoBatchfile-" & wfName & "-" & fcpGateWay.Params.WFScen &  "-" & fcpGateWay.Params.WFTime & "-RB.txt"
					End If 
				Else
					Dim testingFolderPath As String = BRApi.FileSystem.GetFileShareFolder(si, Filesharefoldertypes.Batch, Nothing) & "\_Testing"
						If Not Directory.Exists(testingFolderPath) Then 
							directory.CreateDirectory(testingFolderPath) 				
						End If
							path = testingFolderPath & "\autoBatchfile-" & wfName & "-" & fcpGateWay.Params.WFScen &  "-" & Yr &"M"& Mth & "-RB.txt"
				End If
			Next
							
			If Not File.Exists(path) Or Testing = True Then
				' Create a file to write to. 
				Using sw As StreamWriter = File.CreateText(path)
					sw.WriteLine("Batch File Trigger")
				End Using
			End If
		End Sub
		
		#End Region
		
		#Region "Send Email"
		
		Public Shared Sub SendMail(ByVal si As sessioninfo, ByVal subject As String, ByVal body As String, ByVal moduleName As String, ByVal moduleParams As IntegrationParams)
			Try
				Dim paramEmailServer As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "prm_WMT_EmailNotification_Server")			
				subject = $"{GetAppAndEnvName(si)} - {si.UserName} - " & subject
				AddCurrentUserToEmailDistributionList(si,moduleParams)'29th nov/2021/vn50tv8
				brapi.Utilities.SendMail(si, paramEmailServer, moduleParams.EmailDistribution.Split(",").ToList, subject, body, Nothing)					
				If moduleParams.Debugger Then
					BRApi.ErrorLog.LogMessage(si,$"Process: {moduleName} - sendmail - Subject: {subject} , Body: {body},  EmailTo: {moduleParams.EmailDistribution}")
				End If
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End	Sub

		Public Shared Sub SendMail(ByVal si As sessioninfo, ByVal subject As String, ByVal body As String, 
								   ByVal emailList As List(Of String), ByVal SubjectDMJobName As String, 
								   Optional batchInfo As WorkflowBatchFileCollection = Nothing)
			
			Try
		        Dim paramEmailServer As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "prm_WMT_EmailNotification_Server")
				
				subject = $"{GetAppAndEnvName(si)} - {si.UserName} " & subject
				AddCurrentUserToEmailDistributionList(si,emailList)'DPA-35062/31dec/2021/vn50tv8
				If Not batchInfo Is Nothing
					Dim emailHelper As New OneStream.BusinessRule.Extender.Email_Helper.MainClass
					emailHelper.GetBatchDetailsAndSendEmail(si, batchInfo, emailList, subject, body, paramEmailServer, SubjectDMJobName)
				Else
					brapi.Utilities.SendMail(si, paramEmailServer, emailList, subject, body, Nothing)	
				End If
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End	Sub
		
		Public Shared Sub SendMail(ByVal si As sessioninfo, ByVal subject As String, ByVal body As String, ByVal moduleParams As FCPPutIntegrationParams, ByVal Optional batchResults As List(Of WorkflowBatchFileCollection) = Nothing)
			Try
				Dim paramEmailServer As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "prm_WMT_EmailNotification_Server")
				
				subject = $"{GetAppAndEnvName(si)} - {si.UserName} " & subject
				Dim emailList As List(Of String) = moduleParams.EmailDistribution.Split(",").ToList()
				AddCurrentUserToEmailDistributionList(si,emailList)'DPA-35062/31dec/2021/vn50tv8
				If Not batchResults Is Nothing
					Dim emailHelper As New OneStream.BusinessRule.Extender.Email_Helper.MainClass
					For Each batchInfo In batchResults
						emailHelper.GetBatchDetailsAndSendEmail(si, batchInfo,  emailList, subject, body, paramEmailServer, moduleParams.ModuleName)
					Next
				Else
					brapi.Utilities.SendMail(si, paramEmailServer, emailList, subject, body, Nothing)	
				End If
			
				If moduleParams.Debugger Then
					BRApi.ErrorLog.LogMessage(si,$"Process: {moduleParams.ModuleName} - sendmail - Subject: {subject} , Body: {body},  EmailTo: {moduleParams.EmailDistribution}")
				End If
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End	Sub
		
		Public Shared Sub SendMail(ByVal si As SessionInfo, ByVal requests As DataTable, ByVal fileAttachmentPaths As List(Of String),
								  ByVal subject As String, ByVal body As String, ByVal appName As String, ByVal paramEmailServer As String, 
								  ByVal distributionList As List(Of String), Optional ByVal err As List(Of String) = Nothing,
								  Optional ByVal wrn As List(Of String) = Nothing, Optional ByVal autoCommit As Boolean = False)
			Try				
				subject = $"{GetAppAndEnvName(si)} - {si.UserName} " & subject
				AddCurrentUserToEmailDistributionList(si,distributionList)'DPA-35062/31dec/2021/vn50tv8
				Dim emailHelper As New OneStream.BusinessRule.Extender.Email_Helper.MainClass
				emailHelper.SendRequestsInitiatedEmail(si, requests, fileAttachmentPaths, subject, body, appName, paramEmailServer, distributionList, err, wrn, autoCommit)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		'DPA-29476/vn50tv8/29thdec -App2App Notifications
		Public Shared Sub SendMail(ByVal si As SessionInfo,ByVal statevalue As String,ByVal moduleParams As IntegrationParams,ByVal moduleName As String,ByVal dictWorkflowInfo As  Dictionary(Of String, String))
			Try
				Dim subject As String = $"{GetAppAndEnvName(si)} - {si.UserName} " 				
				Dim paramEmailServer As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "prm_WMT_EmailNotification_Server")				
				Dim emailList As List(Of String) = moduleParams.EmailDistribution.Split(",").ToList()
				AddCurrentUserToEmailDistributionList(si,emailList)'DPA-35062/31dec/2021/vn50tv8
				Dim emailHelper As New OneStream.BusinessRule.Extender.Email_Helper.MainClass
				emailHelper.GetApp2AppDetailsAndSendEmail(si,statevalue, moduleParams.EmailDistribution.Split(",").ToList,subject,dictWorkflowInfo,paramEmailServer) 
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub 
		'19thNov2021 vn50tv8
		Public Shared Sub AddCurrentUserToEmailDistributionList(ByVal si As SessionInfo,ByVal moduleParams As  IntegrationParams)
				' Split string based on comma
				Dim strEmailDistribution As String = moduleParams.EmailDistribution
    			Dim userList As String() = strEmailDistribution.Split(New Char() {","c})
				Dim currentUserEmail = BRApi.Security.Admin.GetUser(si, si.UserName).User.Email
				If Not String.IsNullOrEmpty(currentUserEmail) And Not userList.Contains(currentUserEmail,StringComparer.OrdinalIgnoreCase) Then					 					
					moduleParams.EmailDistribution = strEmailDistribution &","& currentUserEmail	
				End If
		End Sub
		'DPA-35062/31dec/2021/vn50tv8
		Public Shared Sub AddCurrentUserToEmailDistributionList(ByVal si As SessionInfo,ByRef emailDistributionList As List(Of String))
				Dim currentUserEmail = BRApi.Security.Admin.GetUser(si, si.UserName).User.Email
'				brapi.ErrorLog.LogMessage(si,"Count" &emailDistributionList.Count)					
				If Not String.IsNullOrEmpty(currentUserEmail) And Not emailDistributionList.Contains(currentUserEmail,StringComparer.OrdinalIgnoreCase) Then					 					
				   emailDistributionList.Add(currentUserEmail)
				End If
		End Sub
		#End Region
		
		#Region "Process Put with paging"
		
		Public Shared Function QueryForJSON(ByVal si As SessionInfo, ByRef sqlStr As String, Optional RemoveOuterArray As Boolean = True) As String
			Dim rtnStr As String = " "
			
			Try
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					Using dt As DataTable = BRAPi.Database.ExecuteSql(dbConnApp, sqlStr, True)
		
						If Not dt Is Nothing Then	
							For Each dr As DataRow In dt.Rows
								rtnStr += dr.Item(0)	
							Next dr
							
							If RemoveOuterArray Then
								rtnStr = rtnStr.Replace(""":[{""r", """:{""r")
								rtnStr = rtnStr.Replace("}]}]", "}]}")
							End If
							Return rtnStr
						Else
							BRAPi.ErrorLog.LogMessage(si, $"QueryForJSON - No dt object returned after ExecuteSQL")	
						End If
					End Using
				End Using
			Catch ex As Exception
				BRApi.ErrorLog.LogMessage(si, $"Exception in QueryForJSON : {ex}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
			Return String.Empty
		End Function
		
		Public Shared Function ProcessPutRequest(ByVal si As sessioninfo, ByVal fcpGateWay As IntegrationGateway(Of FCPPutIntegrationParams), ByVal compiledSql As String, ByVal endPointIndex As Integer, ByVal pageSize As Integer) As Boolean
			Dim success As Boolean = True
			Dim totalPages As Integer? = Nothing
			Dim pageNumber As Integer = 1
			Dim rowOffset As Integer = 0
			Try
				Do
				  	Dim sql = compiledSql.Replace("[ROWOFFSET]", rowOffset).Replace("[PAGENO]", pageNumber)		
					
					If fcpGateWay.Params.Debugger Then
						BRApi.ErrorLog.LogMessage(si, $"Process: {fcpGateWay.Params.ModuleName} - PageNo: {pageNumber}, SQL: {sql}")		
					End If					
					
					Dim jsonStr As String = QueryForJSON(si, sql)
					If totalPages Is Nothing
						Dim jsonResult As Dictionary(Of String, Object) = JsonConvert.DeserializeObject(Of Dictionary(Of String, Object))(jsonStr)
						totalPages = If(jsonResult.ContainsKey("total_pages"), Convert.ToInt32(jsonResult("total_pages")), 1)
						fcpGateWay.Params.FiscalPeriod = If(jsonResult.ContainsKey("API_Fiscal_Period"),jsonResult("API_Fiscal_Period").ToString, String.Empty)
					End If
					
					If fcpGateWay.Params.Debugger Then
						BRApi.ErrorLog.LogMessage(si, $"Process: {fcpGateWay.Params.ModuleName} - FCP PUT Request for Page: {pageNumber} of {totalPages}")		
					End If	
							
					rowOffset = pageNumber * pageSize
					pageNumber += 1

					Dim response As Task(Of OSJsonResponse) = fcpGateWay.PutData(si, jsonStr, False, OSActionType.Put, endPointIndex)
					Dim result = JsonConvert.DeserializeObject(Of Dictionary(Of String, String))(response.result.JsonData)
					If result("Status").ToLower() <> "success"
						Return False
					End If
				Loop While pageNumber <= totalPages
			Catch ex As Exception
				success = False
				BRapi.ErrorLog.LogMessage(si, $"Process: {fcpGateWay.Params.ModuleName} - The ProcessPutRequest call exception: {ex}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
			Return success
		End Function		
		
		#End Region
		
		#Region "Batch Status"
		Public Shared Function GetBatchStatus(ByVal si As SessionInfo, ByVal fcpGateWay As IntegrationGateway(Of FCPPutIntegrationParams), ByVal batchId As String,  Optional timeoutIntervalMin As Integer = 2, Optional timeoutTotalMin As Integer = 60) As BatchStatus
			'Set to 2 for 2 min, 1 for debug
			Dim tim As New System.Timers.Timer()		

			Dim intervalTime = 60000 * timeoutIntervalMin 

			Dim status As String = String.Empty
						
			AddHandler tim.Elapsed,  New ElapsedEventHandler(
							Sub (ByVal source As Object, ByVal e As ElapsedEventArgs)
							   	Try
									Dim bsResponse As Task(Of OSJsonResponse) = fcpGateWay.GetBatchStatus(si, batchId)
									If fcpGateWay.Params.Debugger Then
										BRApi.ErrorLog.LogMessage(si, $"Process: {fcpGateWay.Params.ModuleName} - OnTimer: {bsResponse.Result.JsonData}")
									End If
									
									Dim result = JsonConvert.DeserializeObject(Of Dictionary(Of String, String))(bsResponse.result.JsonData)
									status = result("Status").ToString
									If status.ToLower = "finished" OrElse status.ToLower = "failed" Then
									'timer is stopped in the callback because the main-thread and the timer-thread will be racing for the m_status
										tim.Stop()
									End If
									
								Catch ex As Exception
									BRapi.ErrorLog.LogMessage(si, $"Process: {fcpGateWay.Params.ModuleName} - The OnTimer call exception: {ex}")
									Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
								End Try
						   End Sub)
			tim.Interval = intervalTime
			tim.AutoReset = True
			tim.Enabled = True
			tim.Start()
			
			Dim tryCnt = 0
			While  status.ToLower <> "failed" And (status.ToLower <> "finished" And tryCnt < (timeoutTotalMin / timeoutIntervalMin)) 
				Thread.Sleep(intervalTime)
				tryCnt += 1
			End While
			
			'Stop the timer after the timeout
			If tryCnt >= (timeoutTotalMin / timeoutIntervalMin) Then
				tim.Stop()
			End If
			
			tim.Dispose()
			
			Dim bsr As BatchStatus =  BatchStatus.Timeout
			Select  status.ToLower 
				Case "finished" 
					bsr = BatchStatus.Finished
				Case "failed"
					bsr = BatchStatus.Failed
			End Select
			
			Return bsr
		End Function
		#End Region
			
	End Class

End Namespace

]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="OS_INTEGRATION_VARIABLES">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports NewtonSoft.Json

Imports OneStream.BusinessRule.Extender.OS_Models

Namespace OneStream.BusinessRule.Extender.OS_INTEGRATION_VARIABLES
	
	Public Class IntegrationParamProviderFactory
		
		Public Shared FCPModules As List(Of OSModuleType) = New List(Of OSModuleType) ({ OSModuleType.FCP, OSModuleType.DIMENSION, OSModuleType.FX, OSModuleType.FCPPut })
		
		Public Function GetProvider(ByVal si As SessionInfo, ByVal moduleName As String, ByVal moduleType As OSModuleType, Optional ByVal args As ExtenderArgs = Nothing) As IParamProvider
			Select moduleType
				Case OSModuleType.FCP
					Return New FCPIntegrationParamProvider(si, moduleName)
				Case OSModuleType.CC
					Return New CCParamProvider(si, moduleName)
				Case OSModuleType.FX
					Return New FXRatesParamProvider(si, moduleName)
				Case OSModuleType.DIMENSION
					Return New FCPDimensionParamProvider(si, moduleName)
				Case OSModuleType.FCPPut
					Return New FCPPutParamProvider(si, args)
				Case Else
					Return New IntegrationParamProvider()
			End Select
		End Function
		
	End Class
	
	#Region "IParamProvider"
	Public Interface IParamProvider
		ReadOnly Property Params() As IntegrationParams
		Function GetParmValue(ByVal si As SessionInfo, ByVal moduleName As String,ByVal action As String,ByVal paramName As String) As String
	End Interface 
	#End Region
	
	#Region "Parameter Provider Definitions"
	
	#Region "IntegrationParamProvider"
	
	Public Class IntegrationParamProvider
		Implements IParamProvider
		
		Private _integrationParams As IntegrationParams
		Public Overridable ReadOnly Property Params() As IntegrationParams Implements IParamProvider.Params
			Get
				Return _integrationParams
			End Get
		End Property
		
		 Public Function GetParmValue(ByVal si As SessionInfo, ByVal moduleName As String, ByVal action As String,ByVal paramName As String) As String Implements IParamProvider.GetParmValue
		 	Dim result As String
			Try 
				Dim sqlStr As String = "Select * FROM XFT_Global_Parameters Where Module = '" & moduleName &"' AND AppName = '"  & si.AppName & "' AND Action = '"  & action & "' AND ParmName = '"  & paramName & "' ORDER BY ParmName, Action, SeqNum"
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					Using dt As DataTable = BRAPi.Database.ExecuteSql(dbConnApp, sqlStr, True)
						result = dt.AsEnumerable().FirstOrDefault()("ParmValue")
					End Using
				End Using
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
			Return result
	    End Function
		
	End Class
	
	#End Region
	
	#Region "FCPIntegrationParamProvider"
	
	Public Class FCPIntegrationParamProvider
		Inherits IntegrationParamProvider
		
		Private _integrationParams As FCPIntegrationParams
		
		Public Sub New(ByVal si As SessionInfo, ByVal moduleName As String)
			Try
				' connect to the database 
				' read all of the parameters from for the arg ModuleName
				
				#Region "DB Params"

				Dim sqlStr As String = "Select * FROM XFT_Global_Parameters Where Module = '" & moduleName &"' AND AppName = '"  & si.AppName & "' ORDER BY ParmName, Action, SeqNum"
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					Using dt As DataTable = BRAPi.Database.ExecuteSql(dbConnApp, sqlStr, True)
						_integrationParams = dt.AsEnumerable() _
												.GroupBy(Function(dr) dr("Module")) _
												.Select(Function(grp) New With { _
													.Params = (From item In grp
															  Let l_endPoint = grp.Where(Function(gdr) gdr("ParmName").Equals("JSONEndPoint"))
															  Let l_emailDist = grp.Where(Function(gdr) gdr("ParmName").Equals("EmailDist")).FirstOrDefault()
															  Let l_consumerId = grp.Where(Function(gdr) gdr("ParmName").Equals("ConsumerID")).FirstOrDefault()
															  Let l_svcName = grp.Where(Function(gdr) gdr("ParmName").Equals("SvcName")).FirstOrDefault()
															  Let l_svcEnv = grp.Where(Function(gdr) gdr("ParmName").Equals("SvcEnv")).FirstOrDefault()
															  Select New FCPIntegrationParams With _ 
															  { 
																 .EndPoint = If(l_endPoint Is Nothing, New Dictionary(Of String, Dictionary(Of Integer, String))(), l_endPoint.GroupBy(Function(dr) dr("Action")).ToDictionary(Function(k) k.Key.ToString, Function(v) v.ToDictionary(Function(vk) Convert.ToInt32(vk("SeqNum")), Function(vv) vv("ParmValue").ToString))),
																 .EmailDistribution = If(l_emailDist Is Nothing, "", l_emailDist("ParmValue")),
																 .ConsumerId = If(l_consumerId Is Nothing, "", l_consumerId("ParmValue")),
																 .SvcName = If(l_svcName Is Nothing, "", l_svcName("ParmValue")),
																 .SvcEnv = If(l_svcEnv Is Nothing, "", l_svcEnv("ParmValue"))
															  }).FirstOrDefault()
												}).First().Params
												
					End Using
				End Using
				
				#End Region
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		Public Overrides ReadOnly Property  Params() As IntegrationParams
			Get
				Return _integrationParams
			End Get
		End Property
	End Class
		
	#End Region
	
	#Region "CCParamProvider"
	
	Public Class CCParamProvider
		Inherits IntegrationParamProvider
		
		Private _ccParams As CCParams

	    Public Sub New(ByVal si As SessionInfo, ByVal moduleName As String)
			Try
				#Region "Database Params"
				' connect to the database 
				' read all of the parameters from for the arg ModuleName
				Dim sqlStr As String = "Select * FROM XFT_Global_Parameters Where Module IN ('CommandCenter', '" & moduleName &"') AND AppName = '"  & si.AppName & "' ORDER BY ParmName, Action, SeqNum"
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					Using dt As DataTable = BRAPi.Database.ExecuteSql(dbConnApp, sqlStr, True)
						_ccParams = dt.AsEnumerable() _
												.GroupBy(Function(dr) dr("Module").ToString.Split(New Char() {"_"c})(0)) _
												.Select(Function(grp) New With { _
													.Module = grp.Key, 
													.Params = (From item In grp
															  Let l_endPoint = grp.Where(Function(gdr) gdr("ParmName").Equals("JSONEndPoint"))
															  Let l_emailDist = grp.Where(Function(gdr) gdr("ParmName").Equals("EmailDist")).FirstOrDefault()
															  Let l_debugger = grp.Where(Function(gdr) gdr("ParmName").Equals("Debugger")).FirstOrDefault()
															  Let l_retry = grp.Where(Function(gdr) gdr("ParmName").Equals("RetryCount")).FirstOrDefault()
															  Let l_dmuNames = grp.Where(Function(gdr) gdr("ParmName").Equals("DMUNames")).FirstOrDefault()
															  Select New CCParams With _ 
															  { 
																 .EndPoint = If(l_endPoint Is Nothing, New Dictionary(Of String, Dictionary(Of Integer, String))(), l_endPoint.GroupBy(Function(dr) dr("Action")).ToDictionary(Function(k) k.Key.ToString, Function(v) v.ToDictionary(Function(vk) Convert.ToInt32(vk("SeqNum")), Function(vv) vv("ParmValue").ToString))),
																 .EmailDistribution = If(l_emailDist Is Nothing, "", l_emailDist("ParmValue")),
																 .Debugger = If(l_debugger Is Nothing, False, Convert.ToBoolean(l_debugger("ParmValue"))),
																 .RetryCount = If(l_retry Is Nothing, 3, Convert.ToInt32(l_retry("ParmValue"))),
																 .DMUNames = If(l_dmuNames Is Nothing, "", l_dmuNames("ParmValue"))
															  }).FirstOrDefault()
												}).First().Params
												
					End Using
				End Using
				#End Region
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try

	    End Sub
		
		Public Overrides ReadOnly Property Params() As IntegrationParams
			Get
				Return _ccParams
			End Get
		End Property
 
	End Class	
		
	#End Region
	
	#Region "FXRatesParamProvider"
	
	Public Class FXRatesParamProvider
		Inherits IntegrationParamProvider
		
		Private _fxParams As FXRatesParams

	    Public Sub New(ByVal si As SessionInfo, ByVal moduleName As String)
			Try
				#Region "Database Params"
				' connect to the database 
				' read all of the parameters from for the arg ModuleName
				Dim sqlStr As String = "Select * FROM XFT_Global_Parameters Where Module IN ('CommandCenter', '" & moduleName &"') AND AppName = '"  & si.AppName & "' ORDER BY ParmName, Action, SeqNum"
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					Using dt As DataTable = BRAPi.Database.ExecuteSql(dbConnApp, sqlStr, True)
						_fxParams = dt.AsEnumerable() _
												.GroupBy(Function(dr) dr("Module").ToString.Split(New Char() {"_"c})(0)) _
												.Select(Function(grp) New With { _
													.Module = grp.Key, 
													.Params = (From item In grp
															  Let l_endPoint = grp.Where(Function(gdr) gdr("ParmName").Equals("JSONEndPoint"))
															  Let l_emailDist = grp.Where(Function(gdr) gdr("ParmName").Equals("EmailDist")).FirstOrDefault()
															  Let l_debugger = grp.Where(Function(gdr) gdr("ParmName").Equals("Debugger")).FirstOrDefault()
															  Let l_retry = grp.Where(Function(gdr) gdr("ParmName").Equals("RetryCount")).FirstOrDefault()
															  Let l_osRatePeriod = grp.Where(Function(gdr) gdr("ParmName").Equals("OsRatePeriod")).FirstOrDefault()
															  Let l_ruleGroupName = grp.Where(Function(gdr) gdr("ParmName").Equals("RuleGroupName")).FirstOrDefault()
															  Select New FXRatesParams With _ 
															  { 
																 .EndPoint = If(l_endPoint Is Nothing, New Dictionary(Of String, Dictionary(Of Integer, String))(), l_endPoint.GroupBy(Function(dr) dr("Action")).ToDictionary(Function(k) k.Key.ToString, Function(v) v.ToDictionary(Function(vk) Convert.ToInt32(vk("SeqNum")), Function(vv) vv("ParmValue").ToString))),
																 .EmailDistribution = If(l_emailDist Is Nothing, "", l_emailDist("ParmValue")),
																 .Debugger = If(l_debugger Is Nothing, False, Convert.ToBoolean(l_debugger("ParmValue"))),
																 .RetryCount = If(l_retry Is Nothing, 3, Convert.ToInt32(l_retry("ParmValue"))),
																 .OsRatePeriod = If(l_osRatePeriod Is Nothing, "", l_osRatePeriod("ParmValue")),
																 .RuleGroupName = If(l_ruleGroupName Is Nothing, "", l_ruleGroupName("ParmValue"))
															  }).FirstOrDefault()
												}).First().Params
												
					End Using
				End Using
				#End Region
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try

	    End Sub
		
		Public Overrides ReadOnly Property Params() As IntegrationParams
			Get
				Return _fxParams
			End Get
		End Property
 
	End Class
		
	#End Region
	
	#Region "FCPDimensionParamProvider"
	
	Public Class FCPDimensionParamProvider
		Inherits IntegrationParamProvider
		
		Private _dimensionParams As FCPDimensionParams
			
		Public Sub New(ByVal si As SessionInfo, ByVal moduleName As String)
			Try
				' connect to the database 
				' read all of the parameters from for the arg ModuleName
				Dim sqlStr As String = "Select * FROM XFT_Global_Parameters Where Module = '" & moduleName &"' AND AppName = '"  & si.AppName & "' ORDER BY ParmName, Action, SeqNum"
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					Using dt As DataTable = BRAPi.Database.ExecuteSql(dbConnApp, sqlStr, True)

						_dimensionParams = dt.AsEnumerable() _
												.GroupBy(Function(dr) dr("Module")) _
												.Select(Function(grp) New With { _
													.Params = (From item In grp
															  Let l_endPoint = grp.Where(Function(gdr) gdr("ParmName").Equals("JSONEndPoint"))
															  Let l_emailDist = grp.Where(Function(gdr) gdr("ParmName").Equals("EmailDist")).FirstOrDefault()
															  Let l_consumerId = grp.Where(Function(gdr) gdr("ParmName").Equals("ConsumerID")).FirstOrDefault()
															  Let l_svcName = grp.Where(Function(gdr) gdr("ParmName").Equals("SvcName")).FirstOrDefault()
															  Let l_svcEnv = grp.Where(Function(gdr) gdr("ParmName").Equals("SvcEnv")).FirstOrDefault()
															  Let l_dimension = grp.Where(Function(gdr) gdr("ParmName").Equals("Names")).FirstOrDefault()
															  Let l_AppNames = grp.Where(Function(gdr) gdr("ParmName").Equals("AppNames")).FirstOrDefault()
															  Select New FCPDimensionParams With _ 
															  { 
																 .EndPoint = If(l_endPoint Is Nothing, New Dictionary(Of String, Dictionary(Of Integer, String))(), l_endPoint.GroupBy(Function(dr) dr("Action")).ToDictionary(Function(k) k.Key.ToString, Function(v) v.ToDictionary(Function(vk) Convert.ToInt32(vk("SeqNum")), Function(vv) vv("ParmValue").ToString))),
																 .EmailDistribution = If(l_emailDist Is Nothing, "", l_emailDist("ParmValue")),
																 .ConsumerId = If(l_consumerId Is Nothing, "", l_consumerId("ParmValue")),
																 .SvcName = If(l_svcName Is Nothing, "", l_svcName("ParmValue")),
																 .SvcEnv = If(l_svcEnv Is Nothing, "", l_svcEnv("ParmValue")),
																 .Dimension= If(l_dimension Is Nothing, "", l_dimension("ParmValue")),
																 .AppNames = If(l_AppNames Is Nothing, "", l_AppNames("ParmValue"))
															  }).FirstOrDefault()
												}).First().Params
												
					End Using
				End Using
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub

		Public Overrides ReadOnly Property Params() As IntegrationParams
			Get
				Return _dimensionParams
			End Get
		End Property

	End Class
		
	#End Region
	
	#Region "FCPPutParamProvider"
	
	Public Class FCPPutParamProvider
		Inherits IntegrationParamProvider
		
		Private _integrationParams As FCPPutIntegrationParams
		
		Public Sub New(ByVal si As SessionInfo, ByVal args As ExtenderArgs)
			Try
				Dim argParams = New FCPPutIntegrationParams()
			
				#Region "Args Params"
				' *** get the argument info ***
				If Not args.NameValuePairs.ContainsKey("ModuleName") Then
					Throw ErrorHandler.LogWrite(si, New XFException(si, "DMJOb parameter ModuleName is Required", ""))
				End If
				argParams.ModuleName = args.NameValuePairs("ModuleName")
				
				If Not args.NameValuePairs.ContainsKey("WFScen") Then
					Throw ErrorHandler.LogWrite(si, New XFException(si, "DMJOb parameter WFScen is Required", ""))
				End If
				argParams.WFScen = args.NameValuePairs("WFScen")
				
				If Not args.NameValuePairs.ContainsKey("WFTime") Then
					Throw ErrorHandler.LogWrite(si, New XFException(si, "DMJOb parameter WFTime is Required", ""))
				End If
				argParams.WFTime = args.NameValuePairs("WFTime")
				
				If args.NameValuePairs.ContainsKey("Debug") Then
					argParams.Debugger = CBool(args.NameValuePairs("Debug"))
					Else
						argParams.Debugger = False
				End If
				
				If args.NameValuePairs.ContainsKey("AppEnv") Then
						argParams.AppEnv = args.NameValuePairs("AppEnv")
					Else
						argParams.AppEnv = si.AppName
				End If
				'Workflow Name set to Direct Load instead of Import,Validate and Load
				If args.NameValuePairs.ContainsKey("DirectLoad") Then
					argParams.DirectLoad = CBool(args.NameValuePairs("DirectLoad"))
					Else
						argParams.DirectLoad = False
				End If
								
				If args.NameValuePairs.ContainsKey("ClearStage") Then
					argParams.ClearStage = CBool(args.NameValuePairs("ClearStage"))
				Else
					argParams.ClearStage = False
				End If
				
				If args.NameValuePairs.ContainsKey("SupplyMethod") Then
					argParams.SupplyMethod = args.NameValuePairs("SupplyMethod")
					Else
						argParams.SupplyMethod = ""
				End If
								
				If args.NameValuePairs.ContainsKey("SupplyAcct") Then
					argParams.SupplyAcct = args.NameValuePairs("SupplyAcct")
				Else
					argParams.SupplyAcct = ""
				End If
				
				#End Region	
				
				#Region "DB Params"

				Dim sqlStr As String = "Select * FROM XFT_Global_Parameters Where Module = '" & argParams.ModuleName &"' AND AppName = '"  & argParams.AppEnv & "' ORDER BY ParmName, Action, SeqNum"
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					Using dt As DataTable = BRAPi.Database.ExecuteSql(dbConnApp, sqlStr, True)
						_integrationParams = dt.AsEnumerable() _
												.GroupBy(Function(dr) dr("Module")) _
												.Select(Function(grp) New With { _
													.Params = (From item In grp
															  Let l_endPoint = grp.Where(Function(gdr) gdr("ParmName").Equals("JSONEndPoint"))
															  Let l_jsonSql = grp.Where(Function(gdr) gdr("ParmName").Equals("JSONSql"))
															  Let l_wfTop = grp.Where(Function(gdr) gdr("ParmName").Equals("WFTop"))
															  Let l_wfItem = grp.Where(Function(gdr) gdr("ParmName").Equals("WFItem"))
															  Let l_emailDist = grp.Where(Function(gdr) gdr("ParmName").Equals("EmailDist")).FirstOrDefault()
															  Let l_consumerId = grp.Where(Function(gdr) gdr("ParmName").Equals("ConsumerID")).FirstOrDefault()
															  Let l_svcName = grp.Where(Function(gdr) gdr("ParmName").Equals("SvcName")).FirstOrDefault()
															  Let l_svcEnv = grp.Where(Function(gdr) gdr("ParmName").Equals("SvcEnv")).FirstOrDefault()
															  Select New FCPPutIntegrationParams With _ 
															  { 
																 .EndPoint = If(l_endPoint Is Nothing, New Dictionary(Of String, Dictionary(Of Integer, String))(), l_endPoint.GroupBy(Function(dr) dr("Action")).ToDictionary(Function(k) k.Key.ToString, Function(v) v.ToDictionary(Function(vk) Convert.ToInt32(vk("SeqNum")), Function(vv) vv("ParmValue").ToString))),
																 .JsonSql =If(l_jsonSql Is Nothing, New  Dictionary(Of Integer, String), l_jsonSql.ToDictionary(Function(k) Convert.ToInt32(k("SeqNum")), Function(v) v("ParmValue").ToString)),
																 .WFTop =If(l_wfTop Is Nothing, New  Dictionary(Of Integer, String), l_wfTop.ToDictionary(Function(k) Convert.ToInt32(k("SeqNum")), Function(v) v("ParmValue").ToString)),
																 .WFItem =If(l_wfItem Is Nothing, New  Dictionary(Of Integer, String), l_wfItem.ToDictionary(Function(k) Convert.ToInt32(k("SeqNum")), Function(v) v("ParmValue").ToString)),
																 .EmailDistribution = If(l_emailDist Is Nothing, "", l_emailDist("ParmValue")),
																 .ConsumerId = If(l_consumerId Is Nothing, "", l_consumerId("ParmValue")),
																 .SvcName = If(l_svcName Is Nothing, "", l_svcName("ParmValue")),
																 .SvcEnv = If(l_svcEnv Is Nothing, "", l_svcEnv("ParmValue"))
															  }).FirstOrDefault()
												}).First().Params
												
					End Using
				End Using
				
				#End Region
				
				#Region "Consolidate Params"
				_integrationParams.ModuleName = argParams.ModuleName
				_integrationParams.WFScen = argParams.WFScen	
				_integrationParams.WFTime = argParams.WFTime
				_integrationParams.Debugger = argParams.Debugger
				_integrationParams.DirectLoad = argParams.DirectLoad 
				_integrationParams.AppEnv = argParams.AppEnv
				_integrationParams.ClearStage = argParams.ClearStage
				#End Region
								
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		Public Overrides ReadOnly Property  Params() As IntegrationParams
			Get
				Return _integrationParams
			End Get
		End Property
	End Class
		
	#End Region
	
	#End Region
	
	#Region "Parameter Model Definitions"
	
	#Region "IntegrationParams"
	Public Class IntegrationParams

		Private m_endPoint As Dictionary(Of String, Dictionary(Of Integer, String))

		Private m_emailDist As String
		Private m_debugger As Boolean 
		Private m_retryCount As Integer

		Public Property EndPoint() As Dictionary(Of String, Dictionary(Of Integer, String))
			Get
				Return m_endPoint
			End Get
			Set
				m_endPoint = value
			End Set
		End Property
		
		Public Property EmailDistribution() As String
			Get
				Return m_emailDist
			End Get
			Set
				m_emailDist = value
			End Set
		End Property
		
				
		Public Property Debugger() As Boolean
			Get
				Return m_debugger
			End Get
			Set
				m_debugger = value
			End Set
		End Property
		
		Public Property RetryCount() As Integer
			Get
				Return m_retryCount
			End Get
			Set
				m_retryCount = value
			End Set
		End Property
	End Class

	#End Region
	
	#Region "FCPIntegrationParams"
	
	Public Class FCPIntegrationParams 
		Inherits IntegrationParams
		
		Private m_ConsumerId As String 
		Private m_SvcName As String
		Private m_SvcEnv As String
		
		Public Property ConsumerId() As String
			Get
				Return m_ConsumerId
			End Get
			Set
				m_ConsumerId = value
			End Set
		End Property
		
		Public Property SvcName() As String
			Get
				Return m_SvcName
			End Get
			Set
				m_SvcName = value
			End Set
		End Property
		
		Public Property SvcEnv() As String
			Get
				Return m_SvcEnv
			End Get
			Set
				m_SvcEnv = value
			End Set
		End Property
	End Class
	
	#End Region
	
	#Region "CommandCenterParams"
	Public Class CCParams
		Inherits IntegrationParams

		Private m_dmuNames As String
		
		Public Property DMUNames() As String
			Get
				Return m_dmuNames
			End Get
			Set
				m_dmuNames = value
			End Set
		End Property
	End Class
	#End Region
	
	#Region "FXRatesParams"
	Public Class FXRatesParams
		Inherits FCPIntegrationParams

		Private m_OsRatePeriod As String
		Private m_RuleGroupName As String

		Public Property OsRatePeriod() As String
			Get
				Return m_OsRatePeriod
			End Get
			Set
				m_OsRatePeriod = value
			End Set
		End Property
		
		Public Property RuleGroupName() As String
			Get
				Return m_RuleGroupName
			End Get
			Set
				m_RuleGroupName = value
			End Set
		End Property
	End Class
	#End Region
	
	#Region "FCPDimensionParams"
	
	Public Class FCPDimensionParams 
		Inherits FCPIntegrationParams	
		
		Private m_Dimension As String
		Private m_AppNames As String 
		
		Public Property Dimension() As String
			Get
				Return m_Dimension
			End Get
			Set
				m_Dimension = value
			End Set
		End Property
		
		Public Property AppNames() As String
			Get
				Return m_AppNames
			End Get
			Set
				m_AppNames = value
			End Set
		End Property	
	End Class
	
	#End Region
	
	#Region "PutIntegrationParams"
	Public Class FCPPutIntegrationParams
		Inherits FCPIntegrationParams
		
		Private m_moduleName As String
		Public Property ModuleName As String
			Get
				Return m_moduleName
			End Get
			Set
				m_moduleName = value
			End Set
		End Property
		
		Private m_wfScen As String
		Public Property WFScen As String
			Get
				Return m_wfScen
			End Get
			Set
				m_wfScen = value
			End Set
		End Property
		
		Private m_wfTime As String
		Public Property WFTime As String
			Get
				Return m_wfTime
			End Get
			Set
				m_wfTime = value
			End Set
		End Property
		
		Private m_appEnv As String
		Public Property AppEnv As String
			Get
				Return m_appEnv
			End Get
			Set
				m_appEnv = value
			End Set
		End Property
		
		Private m_clearStage As Boolean
		Public Property ClearStage As Boolean
			Get
				Return m_clearStage
			End Get
			Set
				m_clearStage = value
			End Set
		End Property
		
		Private m_directLoad As Boolean
		Public Property DirectLoad As Boolean
			Get
				Return m_directLoad
			End Get
			Set
				m_directLoad = value
			End Set
		End Property
		
		Private m_WFTop As Dictionary(Of Integer, String)  
		Public Property WFTop() As Dictionary(Of Integer, String)
			Get
				Return m_WFTop
			End Get
			Set
				m_WFTop = value
			End Set
		End Property
		
		Private m_JsonSql As Dictionary(Of Integer, String)  
		Public Property JsonSql() As Dictionary(Of Integer, String)
			Get
				Return m_JsonSql
			End Get
			Set
				m_JsonSql = value
			End Set
		End Property
		
		Private m_WFItem As Dictionary(Of Integer, String)  
		Public Property WFItem() As Dictionary(Of Integer, String)
			Get
				Return m_WFItem
			End Get
			Set
				m_WFItem = value
			End Set
		End Property
		
		Private m_supplyMethod As String
		Public Property SupplyMethod As String
			Get
				Return m_supplyMethod
			End Get
			Set
				m_supplyMethod = value
			End Set
		End Property
		
		Private m_supplyAcct As String
		Public Property SupplyAcct As String
			Get
				Return m_supplyAcct
			End Get
			Set
				m_supplyAcct = value
			End Set
		End Property
		
		Private m_FiscalPeriod As String
		Public Property FiscalPeriod As String
			Get
				Return m_FiscalPeriod
			End Get
			Set
				m_FiscalPeriod = value
			End Set
		End Property
	End Class
	#End Region
	
	#End Region
	
End Namespace]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="OS_Models">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.OS_Models
	
	#Region "ResponseStatus"
	<Serializable> _
	Public Class ResponseStatus 		
		Private m_Success As Boolean
		Private m_StatusCode As String
		Private m_ReasonPhrase As String
		Private m_FcpRecordCount As Integer
		Private m_OsRecordCount As Integer
		Private m_Url As String
		
		Public Sub New()
			m_Success = True
		End Sub
		
		Public Sub New(success As Boolean, status As Integer, reason As String, Optional fcpRecordCount As Integer = 0, Optional osRecordCount As Integer = 0)
			m_Success = success
			m_StatusCode = status
			m_ReasonPhrase = reason
			m_FcpRecordCount = fcpRecordCount
			m_OsRecordCount = osRecordCount
		End Sub

		Public Property Success() As Boolean
			Get
				Return m_Success
			End Get
			Set
				m_Success = value
			End Set
		End Property

		Public Property StatusCode() As String
			Get
				Return m_StatusCode
			End Get
			Set
				m_StatusCode = value
			End Set
		End Property
		
		Public Property ReasonPhrase() As String
			Get
				Return m_ReasonPhrase
			End Get
			Set
				m_ReasonPhrase = value
			End Set
		End Property
		
		Public Property FcpRecordCount() As Integer
			Get
				Return m_FcpRecordCount
			End Get
			Set
				m_FcpRecordCount = value
			End Set
		End Property
		
		Public Property OsRecordCount() As Integer
			Get
				Return m_OsRecordCount
			End Get
			Set
				m_OsRecordCount = value
			End Set
		End Property
		
		Public Property Url() As String
			Get
				Return m_Url
			End Get
			Set
				m_Url = value
			End Set
		End Property
	End Class
	#End Region	
	
	#Region "ActualsData"
	Public Class ActualsData
		Inherits ResponseStatus

		Private m_DataTable As DataTable 
		
		Public Property Data() As DataTable
			Get
				FcpRecordCount = If(m_DataTable Is Nothing, 0, m_DataTable.Rows.Count)
				Return m_DataTable
			End Get
			Set
				m_DataTable = value
			End Set
		End Property
	End Class
	#End Region
	
	#Region "ActualsJsonData"
	Public Class ActualsJsonData
		Inherits ResponseStatus

		Private m_JsonData As String
		
		Public Property JsonData() As String
			Get
				Return m_JsonData
			End Get
			Set
				m_JsonData = value
			End Set
		End Property
		
	End Class
	
	#End Region
	
	#Region "OSJsonResponse"
	Public Class OSJsonResponse
		Inherits ResponseStatus
		
		Private m_JsonData As String
		
		Public Property JsonData() As String
			Get
				Return m_JsonData
			End Get
			Set
				m_JsonData = value
			End Set
		End Property
	End Class
	
	#End Region
	
	#Region "Enum OSActionType"
	Public Enum OSActionType
		[Get]
		Put
		Guid
		Status
		Trigger	
	End Enum
	#End Region
	
	#Region "Enum OSModuleType"
	Public Enum OSModuleType
		FCP
		CC
		DIMENSION
		FX
		ACM
		FCPPut
	End Enum
	#End Region
	
	#Region "Enum BatchStatus"
		Public Enum BatchStatus
			Timeout
			Finished
			Failed
		End Enum
	#End Region
	
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="OS_Utility">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_VARIABLES" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_GATEWAY" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_UTILITY" />
            </referencedAssemblies>
            <sourceCode><![CDATA['-------------------------------------------------------------------------------------------------
'	Version History ==> Date  / Changed By / What Was Changed
'	8th NOV,2021 - chandrakala keravelli - Added email notification code on successful completion or failure of DM jobs 
'--------------------------------------------------------------------------------------------------'
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_VARIABLES
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_UTILITY
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_GATEWAY
Imports OneStream.BusinessRule.Extender.OS_Models

Namespace OneStream.BusinessRule.Extender.OS_Utility
	Public Class MainClass	
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			
			
			If (args.NameValuePairs.XFGetValue("Function").Trim.ToString ="Trigger_Actuals_SAMS_App2App")
				Trigger_Actuals_SAMS_App2App(si, args)
			End If
			If (args.NameValuePairs.XFGetValue("Function").Trim.ToString ="Set_OneTimer_Literal_ParameterValue")
				Set_OneTimer_Literal_ParameterValue(si)
			End If
			Return Nothing	
		End Function
		
		Public Sub Trigger_Actuals_SAMS_App2App(ByVal si As SessionInfo, ByVal args As ExtenderArgs)
		
			Dim Year As String = String.Empty 
			Dim Period As String = String.Empty
			
			#Region "Parameters for Year, Period"			
			If args.NameValuePairs.ContainsKey("Year") Then
				Year = args.NameValuePairs.XFGetValue("Year").Trim.ToString
				
				If String.IsNullOrWhiteSpace(Year) Then
					brapi.ErrorLog.LogMessage(si, "Parameter Validations failed. Year can not be blank or null.")					
				End If			
			End If
			If args.NameValuePairs.ContainsKey("Period") Then
				Period = args.NameValuePairs.XFGetValue("Period").Trim.ToString
				
				If String.IsNullOrWhiteSpace(Period) Then
					brapi.ErrorLog.LogMessage(si, "Parameter Validations failed. Period can not be blank or null.")					
				End If
			End If
			#End Region
			
			Dim sourceAppName As String = "SAMS"
			Dim dataMgmtSeq As String = "Execute_Actuals_App2App" 
			
			Try	
				Dim newSeshInfo As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si, sourceAppName, openAppResult.Success)						
				'Dim globalTime = args.NameValuePairs.XFGetValue("globTime").ToString
			    Dim params As New Dictionary(Of String, String)'								
				params.Add("WFYear", Year)
				params.Add("ActualPeriod", "M" + Period)								
	            BRApi.Utilities.StartDataMgmtSequence(newSeshInfo, dataMgmtSeq, params)
			Catch ex As Exception
				
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub 
		Public  Sub Set_OneTimer_Literal_ParameterValue(ByVal si As SessionInfo)
			Try
				Dim currentMonth = DateTime.Today.Month
				Dim currentdate As Date = Now
				Dim year As Integer = currentdate.Year +1
				Dim DaysInMonth As Integer = Date.DaysInMonth(currentDate.Year, currentDate.Month)       
				Dim LastDayInMonthDate As Date = New Date(currentDate.Year, currentDate.Month, DaysInMonth)
				If currentMonth = 1 Then
					'comparing the current date with last day in month if both are same then currentMonth=12 else 11
					currentMonth = IIf(currentDate.ToShortDateString() = LastDayInMonthDate.ToShortDateString(), 12, 11)
					year = currentdate.Year
				  BRApi.ErrorLog.LogMessage(si,"currentMonth" &currentMonth)
					
				End If
				BRapi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"ENTCurrentMonth",year & "M" & currentMonth)				
				BRapi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"ENTCurrentYear",year)
				Dim ENTCurrentMonth As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "ENTCurrentMonth")
				Dim ENTCurrentYear As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "ENTCurrentYear")
				BRApi.ErrorLog.LogMessage(si,"ENTCurrentMonth" &ENTCurrentMonth)
				BRApi.ErrorLog.LogMessage(si,"ENTCurrentYear" &ENTCurrentYear)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
	    End Sub
		Public Shared Sub AutomationProcessNotifications(ByVal si As SessionInfo,ByVal activityItem As TaskActivityItem,ByVal moduleName As String,ByVal subject As String)
				Dim taskActivityItem As TaskActivityItem = BRApi.TaskActivity.GetTaskActivityItem(si, activityItem.UniqueID)
				Dim status As String = taskActivityItem.TaskActivityStatus.ToString()	
				subject = subject & " - " & status
				Dim errorInfo As System.Text.StringBuilder = Nothing
				If status.ToLower() ="failed" Then	
					errorInfo = GetError(si, taskActivityItem.ErrorLogID)
				End If
				Dim ccGateway = New IntegrationGateWay(Of IntegrationParams)(si, moduleName, Nothing)	
				CommonUtility.SendMail(si,subject,Convert.ToString(errorInfo),moduleName,ccGateway.params)				
		End Sub		
		Private Shared Function GetError(ByVal si As SessionInfo, ByVal errorId As Guid) As System.Text.StringBuilder
			Dim errorMsg As New System.Text.StringBuilder
			
			Try
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si) 
					Dim strerrorId As String = errorId.ToString()
					Dim sqlStr = "SELECT XmlData FROM ErrorLog WHERE UniqueId = '" & strerrorId & "'"
					Using dt As DataTable = BRAPi.Database.ExecuteSql(dbConnApp, sqlStr, True)
						If dt.Rows.Count > 0 Then
							Dim xmlErrorData = dt.Rows(0)(0).ToString()
							Dim doc As New xml.XmlDocument
							doc.LoadXml(xmlErrorData)
							Dim nodeList As System.Xml.XmlNodeList =doc.DocumentElement.SelectNodes("/XFErrorLogItemDetail/XFFault/FaultItems/FaultItem")
							Dim node As System.Xml.XmlNode
							For Each node  In nodeList 
								Dim message As String=  node.SelectSingleNode("Message").InnerText
								If Not String.IsNullOrEmpty(message) Then
									errorMsg.AppendLine("-------------------------------------------------------------------------------------------------------------------")
									errorMsg.AppendLine($"Time:{vbTab}{vbTab}{Date.Now.ToString}")
									errorMsg.AppendLine($"Message:{vbTab}{message}")
									errorMsg.AppendLine("-------------------------------------------------------------------------------------------------------------------")
									errorMsg.AppendLine(String.Empty)
								End If
							Next							
						Else
							errorMsg .Append("Error occured in DataManagement Job")
						End If
					End Using
				End Using
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
			
			Return errorMsg
		End Function
		'DPA-29476/vn50tv8/DEC 29th 2021		
		#Region "SetSessionStateValue"
		''' <summary>
		''' Create a new Key/Value pair in the Session State collection
		''' </summary>
		''' <param name="si"></param>
		''' <param name="stateKey"></param>
		''' <param name="stateValue"></param>
		Public Shared Sub SetSessionStateValue(ByVal si As SessionInfo, ByVal stateKey As String, ByVal stateValue As String)
			Try
				BRApi.State.SetSessionState(si, False, ClientModuleType.External, String.Empty, String.Empty, stateKey, String.Empty, stateValue, Nothing)				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, "Unhandled Exception in SetSessionStateValue() function.", ex.Message, ex.InnerException))
			End Try
		End Sub
		#End Region
		#Region "GetSessionStateValue"
		''' <summary>
		''' Retrieves the Session State value of the key passed in
		''' </summary>
		''' <param name="si"></param>
		''' <param name="stateKey"></param>
		''' <param name="defaultValue"></param>
		''' <returns></returns>
		Public Shared Function GetSessionStateValue(ByVal si As SessionInfo, ByVal stateKey As String, ByVal defaultValue As String) As String
			Try
				'Set the default value
				Dim stateValue As String = String.Empty
				If Not String.IsNullOrWhiteSpace(defaultValue) Then
					stateValue = defaultValue
				End If

				'Get the state value
				Dim userState As XFUserState = BRApi.State.GetSessionState(si, False, ClientModuleType.External,String.Empty, String.Empty, stateKey, String.Empty)
				If  userState IsNot Nothing Then
					stateValue = userState.TextValue
				End If
				Return stateValue

			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, "Unhandled Exception in GetSessionStateValue() function.", ex.Message, ex.InnerException))
			End Try
		End Function
		#End Region
		#Region "GetAppToAppModuleNameAndAppName"
		Public Shared Function GetAppToAppModuleNameAndAppName(ByVal si As SessionInfo,ByVal wfName As String,ByRef sourceAppName As String)
			Dim moduleName As String = String.Empty
				Select wfName.ToUpper
					Case "SAMS_OPS_APP2APP_IMPORT"
						moduleName = "Process_EmailNotification_App2App_SAMS_OPS_APP2APP_IMPORT"
						sourceAppName = "SAMS"
					Case "INTLTOES_APP2APP_IMPORT"
						moduleName = "Process_EmailNotification_App2App_INTLTOES_APP2APP_IMPORT"
						sourceAppName = "INTL"
					Case "INTL"
						moduleName = "Process_EmailNotification_App2App_INTL"
						sourceAppName = "INTL"
					Case "INTL SEGMENT PLANNER"
						moduleName = "Process_EmailNotification_App2App_INTL SEGMENT PLANNER"
						sourceAppName = "INTL"
					Case "SAMS_FRESH_APP2APP_IMPORT"
						moduleName = "Process_EmailNotification_App2App_SAMS_FRESH_APP2APP_IMPORT"
						sourceAppName = "SAMS"
					Case "SAMS_FRESH_APP2APP_IMPORT_PLAN"
						moduleName = "Process_EmailNotification_App2App_SAMS_FRESH_APP2APP_IMPORT_PLAN"
						sourceAppName = "SAMS"						
					Case "SAMS_MERCH_APP2APP_IMPORT"
						moduleName = "Process_EmailNotification_App2App_SAMS_MERCH_APP2APP_IMPORT"
						sourceAppName = "SAMS"
					Case "WMTUS_OPS_APP2APP_IMPORT"
						moduleName = "Process_EmailNotification_App2App_WMTUS_OPS_APP2APP_IMPORT"
						sourceAppName = "WMTUS"
					Case "WMT_US_MERCH_APP2APP_IMPORT"
						moduleName = "Process_EmailNotification_App2App_WMT_US_MERCH_APP2APP_IMPORT"
						sourceAppName = "WMTUS"
					Case "WMTUS_OMNI_APP2APP_IMPORT"
						moduleName = "Process_EmailNotification_App2App_WMTUS_OMNI_APP2APP_IMPORT"
						sourceAppName = "WMTUS"
					Case "WMTUS_OPSDETAIL_APP2APP_IMPORT"
						moduleName = "Process_EmailNotification_App2App_WMTUS_OPSDETAIL_APP2APP_IMPORT"
						sourceAppName = "WMTUS"
				End Select
			
		 	Return moduleName 
		End Function
		#End Region    		
		'end DPA-29476/vn50tv8/DEC 29th 2021
	End Class
End Namespace




]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="OSD_ApplicationSnapshot">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OSD_SolutionHelper" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.OSD_ApplicationSnapshot
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						'OSD Helper in order to call functions from the OSD_SolutionHelper Business Rule
						Dim osdHelper As New OneStream.BusinessRule.DashboardExtender.OSD_SolutionHelper.MainClass

						Dim validDataVolDetail As Boolean = False
						Dim validDataVolYear As Boolean = False
						Dim manualSnapshot As String = args.NameValuePairs.XFGetValue("snapshotType", String.Empty)
						Dim snapshotName As String = args.NameValuePairs.XFGetValue("snapshotname", String.Empty)
						Dim dataVolumeDetail As Integer = args.NameValuePairs.XFGetValue("datavolumedetail", SharedConstants.Unknown).XFConvertToInt(CultureInfo.InvariantCulture, SharedConstants.Unknown, validDataVolDetail)
						Dim dataVolumeYear As Integer = args.NameValuePairs.XFGetValue("DataVolumeYear", SharedConstants.Unknown).XFConvertToInt(CultureInfo.InvariantCulture, SharedConstants.Unknown, validDataVolYear)
						
						If manualSnapshot.XFEqualsIgnoreCase("Manual") Then
							If validDataVolDetail AndAlso validDataVolYear Then
								Dim appId As String = args.NameValuePairs.XFGetValue("AppID", String.Empty)
								osdHelper.CreateAppHealthSnapshot(si, globals, args, snapshotName, dataVolumeYear, dataVolumeDetail, False, appId)
							End If
						Else 		
							' This is a scheduled snapshot
							Dim year As Integer = args.NameValuePairs.XFGetValue("year", SharedConstants.Unknown).XFConvertToInt(SharedConstants.Unknown)
							Dim dataVolume As Integer = args.NameValuePairs.XFGetValue("DataVolume", SharedConstants.Unknown).XFConvertToInt(CultureInfo.InvariantCulture, SharedConstants.Unknown, validDataVolDetail)
							snapshotName = "Scheduled Snapshot"
							dataVolumeYear = If (year >1, year, Date.Now.Year)
							dataVolumeDetail = If (validDataVolDetail, dataVolume, 10)
							'Take Environment Snapshot
							osdHelper.CreateEnvironmentSnapshot(si, snapshotName)
							'Take Application Snapshot
							osdHelper.CreateAppHealthSnapshot(si, globals, args, snapshotName, dataVolumeYear, datavolumedetail, True, String.Empty)
						End If
				End Select
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="OSD_LiveMonitoring">
            <accessGroup>Administrators</accessGroup>
            <maintenanceGroup>Administrators</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OSD_SolutionHelper" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.OSD_LiveMonitoring
	Public Class MainClass

		Private ReadOnly m_osdHelper As New OneStream.BusinessRule.DashboardExtender.OSD_SolutionHelper.MainClass

#Region "Main"
		'------------------------------------------------------------------------------------------------------------
		'Reference Code: 		OSD_LiveMonitoring 
		'
		'Description:			Application Server Resource Monitoring and Management
		'
		'Usage:					This business rule is intended to be called from a Data Management Step	
		'------------------------------------------------------------------------------------------------------------									
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep

						Dim monitorType As String = args.NameValuePairs.XFGetValue("MonitorType", SharedStringConstants.Unknown)

						Select Case True
							Case monitorType.XFEqualsIgnoreCase(OneStream.BusinessRule.DashboardExtender.OSD_SolutionHelper.MainClass.LiveMonitoringTypes.TaskHealth.ToString())
								'Task Health Monitoring
								m_osdHelper.MonitorTaskHealth(si, globals, api, args)
							Case monitorType.XFEqualsIgnoreCase(OneStream.BusinessRule.DashboardExtender.OSD_SolutionHelper.MainClass.LiveMonitoringTypes.EnvHealth.ToString())
								'Environment Health Monitoring
								m_osdHelper.MonitorEnvHealth(si, globals, api, args)
							Case monitorType.XFEqualsIgnoreCase(OneStream.BusinessRule.DashboardExtender.OSD_SolutionHelper.MainClass.LiveMonitoringTypes.RecycleAllSmart.ToString())
								'Recycle All Smart
								Dim serverType As String = ConvertHelper.ToInt32(args.NameValuePairs.XFGetValue("ServerType", "0"))
								Dim envSnapShotId As Guid = m_osdHelper.GetLastSnapshotID(si)
								m_osdHelper.RecycleAppServers(si, envSnapShotId, False, SharedStringConstants.Unknown, serverType)
							Case monitorType.XFEqualsIgnoreCase(OneStream.BusinessRule.DashboardExtender.OSD_SolutionHelper.MainClass.LiveMonitoringTypes.RecycleAllForce.ToString())
								'Recycle All Force
								Dim serverType As String = ConvertHelper.ToInt32(args.NameValuePairs.XFGetValue("ServerType", "0"))
								Dim envSnapShotId As Guid = m_osdHelper.GetLastSnapshotID(si)
								m_osdHelper.RecycleAppServers(si, envSnapShotId, True, SharedStringConstants.Unknown, serverType)
							Case Else
								'Invalid Monitor Type
								Throw New XFUserMsgException(si, "Invalid Monitor Type", Nothing, monitorType)
						End Select

				End Select

				Return Nothing

			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
#End Region

	End Class
End Namespace]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="playground_fcp">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_GATEWAY" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_VARIABLES" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_UTILITY" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics
Imports System.Net
Imports System.Net.Http
Imports System.Reflection
Imports System.Threading.Tasks
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq

Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_GATEWAY
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_VARIABLES
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_UTILITY
Imports OneStream.BusinessRule.Extender.OS_Models

Namespace OneStream.BusinessRule.Extender.playground_fcp
	Public Class MainClass
		Const m_Timeout As Short = 10
		Private m_Base_URL As String
		Private m_Client As HttpClient
		Private m_FCPGateWay As IntegrationGateway(Of FCPIntegrationParams) = Nothing
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						'Create new instance of FCPIntegrationGateway
						m_FCPGateWay = New IntegrationGateway(Of FCPIntegrationParams)(si, "FCP_SS_TECH_EXPENSE", OSModuleType.FCP)
						Dim jsonResult As Object = Nothing
						Dim batchId As String =""
						Dim jObj As JObject = New Jobject
						jObj("Type") = "EXPENSE_REGISTER"
						Dim tresult As Task (Of OSJsonResponse) = Me.PutDataToFcpAsync(si, "fetchBatchID" , jObj.ToString)
						BRApi.ErrorLog.LogMessage(si,"status",tresult.Result.Success.ToString) 
						BRApi.ErrorLog.LogMessage(si,"statuscode",tresult.Result.StatusCode.ToString) 
						BRApi.ErrorLog.LogMessage(si,"statusreason",tresult.Result.ReasonPhrase.ToString)  				
						BRApi.ErrorLog.LogMessage(si,"statusjson",tresult.Result.JsonData.ToString)  	
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
					Case Is = ExtenderFunctionType.ExecuteExternalDimensionSource
						'Add External Members
						Dim externalMembers As New List(Of NameValuePair)
						externalMembers.Add(New NameValuePair("YourMember1Name","YourMember1Value"))
						externalMembers.Add(New NameValuePair("YourMember2Name","YourMember2Value"))
						Return externalMembers
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		Public Async Function PutDataToFcpAsync(ByVal si As SessionInfo, ByVal api As String, ByVal json As String) As Task (Of OSJsonResponse)
			Dim result As New OSJsonResponse
			Try
				result = Await m_FCPGateWay.PutData(si, json, False,OSActionType.Guid)
				Return result
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="POC_FDX_Extender">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.POC_FDX_Extender
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Dim dt As New DataTable
				dt = GetCubeDataFromOsFdxQuery(si)
				Dim sourceApp_si As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si, "S4_Enterprise", openAppResult.Success)
						
				globals.SetObject("FDX_Data", dt)
				If dt IsNot Nothing AndAlso dt.Rows.Count>0
					Me.PrintDT(si,dt," fdxxxxxx   ")
				Else
					BRapi.ErrorLog.LogMessage(si," No data Found")
				End If
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Function GetCubeDataFromOsFdxQuery(ByVal si As SessionInfo) As DataTable
			Try
				Dim timPvot As Boolean = True
				
					Dim dt As DataTable = Nothing
					Dim FDX_CubeName As String = "ENT"
					Dim FDX_EntityMemFilter As String = "E#US06585"
					Dim FDX_ConsName As String = "Local"
					Dim FDX_ScenarioTypeId As Integer = ScenarioType.GetItem("Plan_Working").Id
					Dim FDX_ScenarioMemFilter As String = "S#Plan_Working"
					Dim FDX_TimeMemFilter As String = "T#2023.Base"
					Dim FDX_ViewName As String = "Periodic"
					Dim FDX_SupressNoData As Boolean = True
					Dim FDX_UseGenericTimeColNames As Boolean = True
					Dim FDX_Filter As String = String.Empty
					Dim FDX_ParallelQueryCount As Integer = 8
					Dim FDX_LogStatistics  As Boolean = False
					
					
					Try
						
						If timPvot Then
							dt = BRApi.Import.Data.FdxExecuteDataUnitTimePivot(si, 
								FDX_CubeName, 
								FDX_EntityMemFilter, 
								FDX_ConsName, 
								FDX_ScenarioTypeId, 
								FDX_ScenarioMemFilter, 
								FDX_TimeMemFilter, 
								FDX_ViewName, 
								FDX_SupressNoData, 
								FDX_UseGenericTimeColNames,
								FDX_Filter, 
								FDX_ParallelQueryCount, 
								FDX_LogStatistics)
						Else							
							dt = BRApi.Import.Data.FdxExecuteDataUnit(si, 
								FDX_CubeName, 
								FDX_EntityMemFilter, 
								FDX_ConsName, 
								FDX_ScenarioTypeId, 
								FDX_ScenarioMemFilter, 
								FDX_TimeMemFilter, 
								FDX_ViewName, 
								FDX_SupressNoData,
								FDX_Filter, 
								FDX_ParallelQueryCount, 
								FDX_LogStatistics)
						End If
						
					Catch exFdx As Exception
						Return Nothing
					End Try
					
					Return dt
				
				
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#Region "PrintDT"		
		Private Sub PrintDT(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal Desc As String)
		Try
			 'Print Table
			 Dim dtprint As New Text.StringBuilder
				 For Each dc As DataColumn In dt.Columns
					dtprint.Append(dc.ColumnName & ",")
				 Next
				 dtprint.Remove(dtprint.Length - 1, 1)
				 dtprint.Append(Environment.NewLine)
				 For Each dr As DataRow In dt.Rows										
					For Each dc As DataColumn In dt.Columns
						dtprint.Append(dr(dc.ColumnName) & ",")
					Next
					dtprint.Remove(dtprint.Length - 1, 1)
					dtprint.Append(Environment.NewLine)
				 Next
				 BRApi.ErrorLog.LogMessage(si, Desc,dtprint.ToString)
		Catch ex As Exception                
	   		Throw ErrorHandler.LogWrite(si,New XFException(si,ex))
		End Try		 
		End Sub	
#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="RACI_Synch_Up">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.RACI_Synch_Up
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
						
					Case Is = ExtenderFunctionType.Unknown
						
						'get gl from raci table
						Dim dt As DataTable = Nothing
						Dim sql As String ="SELECT DISTINCT GL FROM [dbo].[XFW_RACI_Matrix]"
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							dt = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, sql, True)
						End Using
						
						'get gl from hierarchy
						Dim accountlist_meminfo As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "Detail_Account", "A#PK_Total.Base", True)
						Dim accountlist As New List(Of String)
						For Each account In accountlist_meminfo
							accountlist.Add(account.Member.Name)
						Next
						
						'compare for addition
						Dim accountlist_add As String = String.Empty
						For Each account In accountlist
							Dim foundflag As Boolean = False
							If dt IsNot Nothing AndAlso dt.Rows.Count>0 Then
								For Each dr In dt.Rows
									If account = dr("GL")
										foundflag = True
										Exit For
									End If	
								Next	
							End If
							If foundflag = False
								accountlist_add += "'" & account & "',"
							End If
						Next	
						
						'compare for deletion
						Dim accountlist_del As String = String.Empty
						If dt IsNot Nothing AndAlso dt.Rows.Count>0
							For Each dr As DataRow In dt.Rows
								If Not accountlist.Contains(dr("GL"))
									accountlist_del += "'" & dr("GL") & "',"
								End If	
							Next	
						End If	
						
						If accountlist_add.Length > 0
							accountlist_add = accountlist_add.Remove(accountlist_add.Length - 1,1)
						End If
						If accountlist_del.Length > 0
							accountlist_del = accountlist_del.Remove(accountlist_del.Length - 1,1)
						End If
						
						BRApi.ErrorLog.LogMessage(si, "accountlist_add",accountlist_add)
						BRApi.ErrorLog.LogMessage(si, "accountlist_del",accountlist_del)
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="RCM_DataMgmtAllAuditPackages">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Administrators</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OFC_SharedHelper" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OFC_DataMgmtHelper" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="RCM_SolutionHelper" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports OneStream.BusinessRule.DashboardExtender.OFC_SharedHelper
Imports OneStream.BusinessRule.DashboardExtender.OFC_DataMgmtHelper
Imports OneStream.BusinessRule.DashboardExtender.RCM_SolutionHelper

Namespace OneStream.BusinessRule.Extender.RCM_DataMgmtAllAuditPackages

	Public Class MainClass
		'------------------------------------------------------------------------------------------------------------
		'Reference Code: 		RCM_DataMgmtAllAuditPackaged
		'
		'Description:			Reconciliation Manager Data Management Business Rule Step Code (CREATE ALL AUDIT PACKAGES).
		'
		'Usage:					This business rule is intended to be called from a Data Management Step
		'------------------------------------------------------------------------------------------------------------
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep

						'Prepare Parameters
						Dim wfProfileKey As Guid = ConvertHelper.ToGuid(args.NameValuePairs.XFGetValue("WFProfileKey", Guid.Empty.ToString))
						Dim rScenarioId As Integer = ConvertHelper.ToInt32(args.NameValuePairs.XFGetValue("ReconScenarioId", SharedConstants.Unknown))
						Dim timeId As Integer = ConvertHelper.ToInt32(args.NameValuePairs.XFGetValue("WFTimeId", SharedConstants.Unknown))
						Dim statusFilter As String = args.NameValuePairs.XFGetValue("StatusFilter", String.Empty)
						Dim dynamicFilter As String = args.NameValuePairs.XFGetValue("DynamicFilter", String.Empty)
						Dim currencyLevel As String = args.NameValuePairs.XFGetValue("CurrencyLevel", String.Empty)

						'Set Task Description
						Dim wfDesc As String = BRApi.Workflow.General.GetWorkflowUnitClusterPkDescription(si, si.WorkflowClusterPk)
						Dim description As String = $"{OFC_SharedConsts.DataMgmtTaskPrefixReconAuditPkg} ({wfDesc})"
						DataMgmtHelpers.SetTaskDescription(si, args.TaskActivityID, description)

						'Execute Audit Package Creation Process
						Dim rcmHelper As New DashboardExtender.RCM_SolutionHelper.MainClass
						rcmHelper.CreateAllReconZipAuditPackages(si, globals, wfProfileKey, rScenarioId, timeId, statusFilter, dynamicFilter, currencyLevel)

				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function

	End Class

End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="RCM_DataMgmtDiscover">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Administrators</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OFC_SharedHelper" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OFC_DataMgmtHelper" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="RCM_SolutionHelper" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports OneStream.BusinessRule.DashboardExtender.OFC_SharedHelper
Imports OneStream.BusinessRule.DashboardExtender.OFC_DataMgmtHelper
Imports OneStream.BusinessRule.DashboardExtender.RCM_SolutionHelper

Namespace OneStream.BusinessRule.Extender.RCM_DataMgmtDiscover

	Public Class MainClass
		'------------------------------------------------------------------------------------------------------------
		'Reference Code: 		RCM_DataMgmtDiscover
		'
		'Description:			Reconciliation Manager Data Management Business Rule Step Code (DISCOVER RECONS).
		'
		'Usage:					This business rule is intended to be called from a Data Management Step
		'------------------------------------------------------------------------------------------------------------
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep

						'Prepare Parameters
						Dim wfProfileKey As Guid = ConvertHelper.ToGuid(args.NameValuePairs.XFGetValue("ProfileKey", Guid.Empty.ToString))
						Dim sScenarioId As Integer = ConvertHelper.ToInt32(args.NameValuePairs.XFGetValue("SourceScenarioId", SharedConstants.Unknown))
						Dim rScenarioId As Integer = ConvertHelper.ToInt32(args.NameValuePairs.XFGetValue("ReconScenarioId", SharedConstants.Unknown))
						Dim wfTimeKey As Integer = ConvertHelper.ToInt32(args.NameValuePairs.XFGetValue("TimeKey", SharedConstants.Unknown))

						'Set Task Description
						Dim wfClusterPk As New WorkflowUnitClusterPk(wfProfileKey, rScenarioId, wfTimeKey)
						Dim wfDesc As String = BRApi.Workflow.General.GetWorkflowUnitClusterPkDescription(si, wfClusterPk)
						Dim taskInformation As String = $"{wfDesc} - {OFC_SharedConsts.DataMgmtTaskPrefixReconDiscover}."
						DataMgmtHelpers.SetTaskDescription(si, args.TaskActivityID, taskInformation)

						'Execute Discover Recon Process
						Dim errorMessage As String = String.Empty
						Dim discoverHelper As New DiscoverReconsHelper(si, args.TaskActivityID, sScenarioId, wfClusterPk)
						Dim newReconCount As Integer = discoverHelper.ExecuteDiscoverRecons(errorMessage)

						'Update Task Information Based On Results
						If String.IsNullOrEmpty(errorMessage) Then
							If newReconCount <> SharedConstants.Unknown Then taskInformation = $"{taskInformation} New ({newReconCount})"
							DataMgmtHelpers.SetTaskDescription(si, args.TaskActivityID, taskInformation)
						Else
							taskInformation &= errorMessage
							DataMgmtHelpers.SetTaskDescription(si, args.TaskActivityID, taskInformation, True)
						End If

				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function

	End Class

End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="RCM_DataMgmtMassActions">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OFC_SharedHelper" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OFC_DataMgmtHelper" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="RCM_SolutionHelper" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Collections.Specialized
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports OneStream.BusinessRule.DashboardExtender.OFC_SharedHelper
Imports OneStream.BusinessRule.DashboardExtender.OFC_DataMgmtHelper
Imports OneStream.BusinessRule.DashboardExtender.RCM_SolutionHelper

Namespace OneStream.BusinessRule.Extender.RCM_DataMgmtMassActions

	Public Class MainClass
		Inherits DashboardExtender.RCM_SolutionHelper.RCM_Enums

		'------------------------------------------------------------------------------------------------------------
		'Reference Code: 		RCM_DataMgmtMassActions
		'
		'Description:			Reconciliation Manager Data Management Business Rule Step Code (MASS ACTIONS).
		'
		'Usage:					This business rule is intended to be called from a Data Management Step
		'------------------------------------------------------------------------------------------------------------
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					Case ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim rcmHelper As New DashboardExtender.RCM_SolutionHelper.MainClass
						Dim reconIDs As String = args.NameValuePairs.XFGetValue("ReconIDs", Guid.Empty.ToString)
						Dim reconIDsList As List(Of Guid) = GeneralHelpers.GetSelectedIDsList(si, reconIDs)
						Dim status As ReconStatusTypes = [Enum].Parse(GetType(ReconStatusTypes), args.NameValuePairs.XFGetValue("Status", ReconStatusTypes.Unknown.ToString))
						Dim approval As ReconApprovalTypes = [Enum].Parse(GetType(ReconApprovalTypes), args.NameValuePairs.XFGetValue("Approval", ReconApprovalTypes.Unknown.ToString))
						Dim reasonCode As String = args.NameValuePairs.XFGetValue("ReasonCode", String.Empty)
						Dim reasonText As String = args.NameValuePairs.XFGetValue("ReasonText", String.Empty)
						Dim reason As TwoStrings = rcmHelper.GetReason(si, reasonCode, reasonText)
						Dim errorMessage As String = String.Empty

						'Set Initial Task Description
						Dim wfDesc As String = BRApi.Workflow.General.GetWorkflowUnitClusterPkDescription(si, si.WorkflowClusterPk)
						Dim fields As List(Of String) = StringHelper.SplitString(wfDesc, ":", StageConstants.ParserDefaults.DefaultQuoteCharacter)
						Dim wfName As String = If(fields.Count >= 1, fields(0), "WP#Missing")
						Dim scenarioName As String = ScenarioDimHelper.GetNameFromId(si, si.WorkflowClusterPk.ScenarioKey)
						Dim timeName As String = BRApi.Finance.Time.GetNameFromId(si, si.WorkflowClusterPk.TimeKey)
						Dim taskInformation As String = $"{wfName}:S#{scenarioName}:T#{timeName} - {OFC_SharedConsts.DataMgmtTaskPrefixReconMassActions}"
						DataMgmtHelpers.SetTaskDescription(si, args.TaskActivityID, taskInformation)

						'Execute Stats/Approval Actions
						Dim actionHelper As New ReconActionHelper(si, reconIDsList)
						Dim actionResults As New Dictionary(Of Guid, BoolAndTwoStrings)
						Dim actionText As String = String.Empty
						If (Not status.Equals(ReconStatusTypes.Unknown)) AndAlso approval.Equals(ReconApprovalTypes.Unknown) Then
							actionResults = actionHelper.SetReconStatus(status, reason)
							actionText = status.ToString
						ElseIf (Not approval.Equals(ReconStatusTypes.Unknown)) AndAlso status.Equals(ReconStatusTypes.Unknown) Then
							actionResults = actionHelper.SetReconApproval(approval, reason)
							actionText = approval.ToString
						End If

						'Set Result Message Into Session So We Can Return It In A Message Box In The SolutionHelper
						Dim resultKey As String = $"RCM_MassActions_{args.TaskActivityID}"
						Dim resultMsg As String = Me.BuildResultsMessage(si, reconIDsList, actionResults, actionText)
						BRApi.State.SetSessionState(si, False, si.ClientModuleType, Nothing, Nothing, resultKey, String.Empty, resultMsg, Nothing)

					Case Else
						Exit Select
				End Select

				Return Nothing

			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function

		Private Function BuildResultsMessage(ByVal si As SessionInfo, ByVal reconIDsList As List(Of Guid), ByVal results As Dictionary(Of Guid, BoolAndTwoStrings), ByVal actionText As String) As String
			Try
				Dim msg As New Text.StringBuilder
				If (results IsNot Nothing) AndAlso (results.Count > 0) Then
					Dim sucessCount As Integer = 0
					Dim resultTypes As New Dictionary(Of String, Integer)(StringComparer.InvariantCultureIgnoreCase)
					For Each kvp As KeyValuePair(Of Guid, BoolAndTwoStrings) In results
						If kvp.Value.Bool1 Then
							sucessCount += 1
						Else
							Dim failType As String = kvp.Value.String1
							If failType.XFContainsIgnoreCase("Exceeds The Unexplained Limit") Then
								failType = "Reconciliation cannot be completed because the Unexplained Balance exceeds the Unexplained Limit."
							End If
							If resultTypes.ContainsKey(failType) Then
								resultTypes(failType) += 1
							Else
								resultTypes.Add(failType, 1)
							End If
						End If
					Next
					If actionText.Equals(ReconStatusTypes.Inprocess.ToString) Then actionText = "Recalled"
					msg.AppendLine($"{sucessCount} of {reconIDsList.Count} - Successfully {actionText}")
					msg.AppendLine()

					For Each kvp As KeyValuePair(Of String, Integer) In resultTypes
						msg.AppendLine($"{kvp.Value} - {kvp.Key}")
					Next
				End If

				Return msg.ToString

			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function

	End Class

End Namespace

]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="RCM_DataMgmtProcess">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OFC_SharedHelper" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OFC_DataMgmtHelper" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="RCM_SolutionHelper" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports OneStream.BusinessRule.DashboardExtender.OFC_SharedHelper
Imports OneStream.BusinessRule.DashboardExtender.OFC_DataMgmtHelper
Imports OneStream.BusinessRule.DashboardExtender.RCM_SolutionHelper

Namespace OneStream.BusinessRule.Extender.RCM_DataMgmtProcess

	Public Class MainClass
		'------------------------------------------------------------------------------------------------------------
		'Reference Code: 		RCM_DataMgmtProcess
		'
		'Description:			Reconciliation Manager Data Management Business Rule Step Code (PROCESS RECONS).
		'
		'Usage:					This business rule is intended to be called from a Data Management Step
		'------------------------------------------------------------------------------------------------------------
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						'Prepare Parameters
						Dim wfProfileKey As Guid = ConvertHelper.ToGuid(args.NameValuePairs.XFGetValue("ProfileKey", Guid.Empty.ToString))
						Dim sScenarioId As Integer = ConvertHelper.ToInt32(args.NameValuePairs.XFGetValue("SourceScenarioId", SharedConstants.Unknown))
						Dim rScenarioId As Integer = ConvertHelper.ToInt32(args.NameValuePairs.XFGetValue("ReconScenarioId", SharedConstants.Unknown))
						Dim timeId As Integer = ConvertHelper.ToInt32(args.NameValuePairs.XFGetValue("TimeId", SharedConstants.Unknown))

						'Set Task Description
						Dim wfDesc As String = BRApi.Workflow.General.GetWorkflowUnitClusterPkDescription(si, si.WorkflowClusterPk)
						Dim fields As List(Of String) = StringHelper.SplitString(wfDesc, ":", StageConstants.ParserDefaults.DefaultQuoteCharacter)
						Dim wfName As String = If(fields.Count >= 1, fields(0), "WP#Missing")
						Dim taskInformation As String = $"{wfName}:S#{ScenarioDimHelper.GetNameFromId(si, rScenarioId)}:T#{BRApi.Finance.Time.GetNameFromId(si, timeId)} - {OFC_SharedConsts.DataMgmtTaskPrefixReconProcess}."
						DataMgmtHelpers.SetTaskDescription(si, args.TaskActivityID, taskInformation)

						'Execute Recon Discovery Process
						Dim errorMessage As String = String.Empty
						Dim processHelper As New ProcessReconsHelper(si, wfProfileKey, sScenarioId, rScenarioId, timeId, args.TaskActivityID)
						processHelper.ExecuteProcessRecons(errorMessage)

						'Update Task Information Based On Results
						If Not String.IsNullOrEmpty(errorMessage) Then
							taskInformation &= errorMessage
							DataMgmtHelpers.SetTaskDescription(si, args.TaskActivityID, taskInformation, True)
						End If


				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function

	End Class

End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="read_file">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.read_file
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
'						Dim folderType As FileShareFolderTypes = "FileShareRoot"
						Dim wfProfileInfo As New WorkflowProfileInfo()
						Dim sValue As String = BRApi.FileSystem.GetFileShareFolder(si, FileShareFolderTypes.FileShareRoot, wfProfileInfo)
						Dim sourceFile As String = String.Format("{0}\System\Contents\Data_Integration\map.json", sValue)
						
						'Define string to hold text from file
						Dim textContent As String = System.IO.File.ReadAllText(sourceFile).ToString
						brapi.ErrorLog.LogMessage(si, "file read from file share", textContent)
												
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
					Case Is = ExtenderFunctionType.ExecuteExternalDimensionSource
						'Add External Members
						Dim externalMembers As New List(Of NameValuePair)
						externalMembers.Add(New NameValuePair("YourMember1Name","YourMember1Value"))
						externalMembers.Add(New NameValuePair("YourMember2Name","YourMember2Value"))
						Return externalMembers
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Run_Batch_MgrAdj">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.Run_Batch_MgrAdj
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
		        Dim scenario As String = "Actual"
				Dim importMethod As String = "RB" 
				Dim parallelBatchCount As Integer = 18
				Dim currentMonth = DateTime.Today.Month
				Dim currentdate As Date = Now
				Dim DaysInMonth As Integer = Date.DaysInMonth(currentDate.Year, currentDate.Month)       
				Dim LastDayInMonthDate As Date = New Date(currentDate.Year, currentDate.Month, DaysInMonth)
				Dim priorPeriodsCnt As Integer
				Dim year As Integer
				
				Select Case currentMonth
				Case 2
					priorPeriodsCnt = 1
					year = currentdate.Year	+1
				Case 1
					priorPeriodsCnt = IIf(currentDate.ToShortDateString() = LastDayInMonthDate.ToShortDateString(), 12, 11)
					year = currentdate.Year
				Case Else
					priorPeriodsCnt = IIf(currentDate.ToShortDateString() = LastDayInMonthDate.ToShortDateString(), currentMonth-1, currentMonth-2)
					year = currentdate.Year	+1				
				End Select

				'Workflows 
				Dim wfPovNames As New List(Of String)
				Dim timePer As String =String.Empty				 	
				
			'For i As Integer = 1 To priorPeriodsCnt
					'timePer = year &"M"&i.ToString()
					timePer = year &"M"&priorPeriodsCnt.ToString()
					'wfPovNames.Add($"1-Actuals_SCAT_ADJ;Import-{scenario}-{timePer}-{importMethod}")
					'wfPovNames.Add($"1-ACTUALS_WMTSEG_ADJ;Import-{scenario}-{timePer}-{importMethod}")
					wfPovNames.Add($"1-ACTUALS_SLEDG_ADJ;Import-{scenario}-{timePer}-{importMethod}")
					'wfPovNames.Add($"1-ACTUALS_SS_LCL_ADJ;Import-{scenario}-{timePer}-{importMethod}")
					wfPovNames.Add($"1-ACTUALS_HFM_ADJS_CORP;Import-{scenario}-{timePer}-{importMethod}")
					wfPovNames.Add($"1-ACTUALS_HFM_ADJS_SAMS;Import-{scenario}-{timePer}-{importMethod}")
					wfPovNames.Add($"1-ACTUALS_HFM_ADJS_WMTUS;Import-{scenario}-{timePer}-{importMethod}")
				'Next
							
										
				Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
				Dim batchHarvest As String = FileShareFolderHelper.GetBatchHarvestFolderForApp(si, True, configSettings.FileShareRootFolder, configSettings.FileShareBatchHarvestRootFolder,si.AppToken.AppName)
				
				For Each wfItem As String In wfPovNames					
					Using sw As StreamWriter = File.CreateText($"{batchHarvest}\{wfItem}.txt")
						sw.WriteLine("Batch File Trigger")
					End Using
					
				Next
				
				'Set Processing Switches 
				Dim valTransform As Boolean = True
				Dim valIntersect As Boolean = True
				Dim loadCube As Boolean = True
				Dim processCube As Boolean = False
				Dim confirm As Boolean = False
				Dim autoCertify As Boolean = False			
'                timePer  = currentDate.Year+1 &"M"
				Dim wfBatchFileCollection As WorkflowBatchFileCollection = BRApi.Utilities.ExecuteFileHarvestBatchParallel(si, scenario, timePer, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, parallelBatchCount)				
				
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
















]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Run_Batch_MgrAdj2">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.Run_Batch_MgrAdj2
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
		        Dim scenario As String = "Actual"
				Dim importMethod As String = "RB" 
				Dim parallelBatchCount As Integer = 18
				Dim currentMonth = DateTime.Today.Month
				Dim currentdate As Date = Now
				Dim DaysInMonth As Integer = Date.DaysInMonth(currentDate.Year, currentDate.Month)       
				Dim LastDayInMonthDate As Date = New Date(currentDate.Year, currentDate.Month, DaysInMonth)
				'Dim priorPeriodsCnt As Integer
				Dim year As Integer
				Dim Mth As Integer
				
				Select Case currentMonth
				Case 2
					'priorPeriodsCnt = 1
					Mth = 1
					year = currentdate.Year	+1
				Case 1
					'priorPeriodsCnt = IIf(currentDate.ToShortDateString() = LastDayInMonthDate.ToShortDateString(), 12, 11)
					Mth = 12
					year = currentdate.Year
				Case Else
					'priorPeriodsCnt = IIf(currentDate.ToShortDateString() = LastDayInMonthDate.ToShortDateString(), currentMonth-1, currentMonth-2)
					Mth = currentMonth-1
					year = currentdate.Year	+1				
				End Select

				'Workflows 
				Dim wfPovNames As New List(Of String)
				Dim timePer As String =String.Empty				 	
				
			'For i As Integer = 1 To priorPeriodsCnt
			'For i As Integer = priorPeriodsCnt	
					'timePer = year &"M"&i.ToString()
					timePer = year &"M"&Mth.ToString()
					'timePer = currentMonth-1
					'wfPovNames.Add($"1-Actuals_SCAT_ADJ;Import-{scenario}-{timePer}-{importMethod}")
					'wfPovNames.Add($"1-ACTUALS_WMTSEG_ADJ;Import-{scenario}-{timePer}-{importMethod}")
					wfPovNames.Add($"1-ACTUALS_SLEDG_ADJ;Import-{scenario}-{timePer}-{importMethod}")
					'wfPovNames.Add($"1-ACTUALS_SS_LCL_ADJ;Import-{scenario}-{timePer}-{importMethod}")
					wfPovNames.Add($"1-ACTUALS_HFM_ADJS_CORP;Import-{scenario}-{timePer}-{importMethod}")
					wfPovNames.Add($"1-ACTUALS_HFM_ADJS_SAMS;Import-{scenario}-{timePer}-{importMethod}")
					wfPovNames.Add($"1-ACTUALS_HFM_ADJS_WMTUS;Import-{scenario}-{timePer}-{importMethod}")
				'Next
							
										
				Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
				Dim batchHarvest As String = FileShareFolderHelper.GetBatchHarvestFolderForApp(si, True, configSettings.FileShareRootFolder, configSettings.FileShareBatchHarvestRootFolder,si.AppToken.AppName)
				
				For Each wfItem As String In wfPovNames					
					Using sw As StreamWriter = File.CreateText($"{batchHarvest}\{wfItem}.txt")
						sw.WriteLine("Batch File Trigger")
					End Using
					
				Next
				
				'Set Processing Switches 
				Dim valTransform As Boolean = True
				Dim valIntersect As Boolean = True
				Dim loadCube As Boolean = True
				Dim processCube As Boolean = False
				Dim confirm As Boolean = False
				Dim autoCertify As Boolean = False			
'                timePer  = currentDate.Year+1 &"M"
				Dim wfBatchFileCollection As WorkflowBatchFileCollection = BRApi.Utilities.ExecuteFileHarvestBatchParallel(si, scenario, timePer, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, parallelBatchCount)				
				
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="S4_DataRestatement_POC">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.S4_DataRestatement_POC
	Public Class MainClass
		
		'declarations
		Const chunk_size As Integer = 100
		Const sourceApp As String = "Enterprise"
		Const cubeName As String = "ENT"
		Const dimensionName As String = "ENT"
		Const entityMemFilter As String = "SAMS_CLUB_OPERATIONS_VBO"
		Const consName As String = "Local"
		Const scenarioMemFilter As String = "Plan_Working"
		Const timeMemFilter As String = "2023"
		Const viewName As String = "Periodic"
		
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
						
						'get source app session info
						Dim sourceApp_si As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si, sourceApp, openAppResult.Success)
						'get complete entity list from source app
						Dim cclist_all As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(sourceApp_si, dimensionName, "E#" & entityMemFilter & ".Base", False)
					
						'loop through the entity list in batches and perform extract, transform and load
						If cclist_all.Count > chunk_size
							Dim cclist_chunk As List(Of String) = Me.toChunks(si, cclist_all, chunk_size)
							Dim counter As Integer = 1
							For Each cclistitr As String In cclist_chunk
								Dim source_dt As New DataTable
								Dim transformed_dt As New DataTable
								source_dt = Me.extractData(si, globals, sourceApp_si, cclistitr)
'								PrintDT(si, "sams source_dt" & counter.ToString, source_dt)
								transformed_dt = Me.transformData(si, globals, sourceApp_si, source_dt)
								If transformed_dt IsNot Nothing And transformed_dt.Rows.Count>1
									globals.SetObject("transformed_dt", transformed_dt)
								End If
'								PrintDT(si, "sams transformed_dt" & counter.ToString, transformed_dt)
								Me.loadData(si, globals, sourceApp_si)
								
								counter += 1
							Next
						Else
							Dim source_dt As New DataTable
							Dim transformed_dt As New DataTable
							source_dt = Me.extractData(si, globals, sourceApp_si, String.Join(",", cclist_all))
							transformed_dt = Me.transformData(si, globals, sourceApp_si, source_dt)
						End If
						
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Private Function toChunks(ByVal si As SessionInfo, ByVal cclist_all As List(Of MemberInfo), ByVal chunk_size As Integer) As List(Of String)
			Try
				
				Dim noOfChunk As Integer = 0
				Dim chunkList As New List(Of String)
				Dim templist As New Text.StringBuilder
				Dim temp As String = String.Empty
				Dim tchunk As Integer = chunk_size
				Dim x As Integer = 0
				
				
				noOfChunk = Math.Ceiling(cclist_all.Count / chunk_size)
			
				For i = 0 To noOfChunk - 1
					Dim j As Integer = x
					While j < tchunk 
						If j < cclist_all.Count Then
							templist.Append(cclist_all(j).Member.Name & ",")
						End If	
						j += 1
					End While
					x += chunk_size 
					tchunk = tchunk + chunk_size
					temp = templist.ToString
					temp = temp.Remove(temp.Length - 1, 1)
					chunkList.Add(temp)
					
					templist.Clear
				Next
				
				Return 	chunkList			
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function	
		
		Private Function extractData(ByVal si As SessionInfo, ByRef globals As BRGLobals, ByVal sourceApp_si As SessionInfo, ByVal cclist As String) As DataTable
			
			Try
				Dim dt As New DataTable
				
				If cclist.Length > 0 Then
					
					cclist = String.Join(",", cclist.Split(",").[Select](Function(x) "E#" & x))
					
					dt = BRApi.Import.Data.FdxExecuteDataUnitTimePivot(si, cubeName, cclist, consName, ScenarioType.Budget.Id, "S#" & scenarioMemFilter,"T#" & timeMemFilter & ".Base", viewName, True, False, String.Empty, 100, False)
					
				End If	
				Return dt
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		Return Nothing
		End Function
		
		Private Function transformData(ByVal si As SessionInfo, ByRef globals As BRGLobals, ByVal sourceApp_si As SessionInfo, ByVal dt As DataTable) As DataTable
			
			Try
				Dim ctMapping As New DataTable
				Dim sqlStatement As String = "SELECT * FROM XFW_S4_CT2CD_Mapping"
				Using dbconnapp As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si) 
					ctMapping = BRApi.Database.ExecuteSql(dbconnapp, sqlStatement, False)
				End Using 
				
				If dt IsNot Nothing AndAlso dt.Rows.Count > 0 Then
					For Each dr As DataRow In dt.Rows
						Dim srows As DataRow() = ctMapping.Select("Src_CC = '" & dr("Entity") & "' AND Src_GL='" & dr("Account") & "' AND Src_CT='" & dr("UD2") & "'")
						Dim map_dt As New DataTable
						If srows.Length=1 Then
							map_dt = srows.CopyToDataTable()
							dr("Entity") = map_dt.Rows(0)("Trg_CC")
							dr("Account") = map_dt.Rows(0)("Trg_GL")
							dr("UD2") = map_dt.Rows(0)("Trg_CD")
						End If
					Next
				End If	
				
				Return dt
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		Return Nothing
		End Function
		
		Private Sub loadData(ByVal si As SessionInfo, ByRef globals As BRGLobals, ByVal sourceApp_si As SessionInfo)
			Try
				Dim sqnc_load As String = ""
				Dim dict As New Dictionary(Of String, String)
				Dim objTaskActivityItem As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(si, sqnc_load, dict)
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
			
		End Sub
		
		Private Sub PrintDT(ByVal si As SessionInfo, ByVal desc As String, ByVal dt As DataTable)
			Dim sCSV As New Text.StringBuilder
			If dt IsNot Nothing Then
				If dt.Rows.Count > 0 Then
					For Each dc As DataColumn In dt.Columns
						sCSV.Append(dc.ColumnName & ",")
					Next
					sCSV.Remove(sCSV.Length-1,1)
					sCSV.Append(Environment.NewLine)
					For Each dr As DataRow In dt.Rows
						For Each dc As DataColumn In dt.Columns
	     					sCSV.Append(dr(dc).ToString & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
					Next
					BRApi.ErrorLog.LogMessage(si, desc, sCSV.ToString)
				End If
			End If
    	End Sub
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Sam_Test1">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.Sam_Test1
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				
'				Dim scenariotypeID = ScenarioType.GetItem("Plan").Id
'				brapi.ErrorLog.LogMessage(si, "ID : " & scenariotypeID )
				Dim dt = BRApi.Import.Data.FdxExecuteDataUnitTimePivot(si, "SAMS", "E#SAMS_Ops_(incl_Merch_Adjust).Base", "C#USD", 0 , "Actual", "T#2022M1", "Periodic", True, True, "A#Income_Statement", 8, True)
				

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="sample_test_CB">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.sample_test_CB
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						Dim AdjMonthParam = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "ENTPeriodSelection")
						Dim counter As Integer  = AdjMonthParam.split(",").Count
						Dim listperiods   = AdjMonthParam.split(",").ToArray
						Dim itr As Integer = 0
						'api.Data.Calculate("S#Actual:V#Periodic = S#Forecast_Working:V#Periodic")
						brapi.ErrorLog.LogMessage(si,listperiods(0) & listperiods(1) & counter) 	
						Do While itr < counter
							brapi.ErrorLog.LogMessage(si,"itr" & itr & " - " & listperiods(itr)) 		
							itr = itr+1
						Loop			
					
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Sample123">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.Sample123
	Public Class MainClass
		
#Region "Main Function"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As DashboardExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					

					Case Is = DashboardExtenderFunctionType.ComponentSelectionChanged
						If (args.FunctionName.XFEqualsIgnoreCase("WorkflowComplete"))
							Return Me.WorkflowCompleteOneOrAllMain(si, globals, api, args)							
							
						Else If (args.FunctionName.XFEqualsIgnoreCase("WorkflowRevert"))
							Return Me.WorkflowRevertOneOrAllMain(si, globals, api, args)	
						
						End If
					
					Case Is = DashboardExtenderFunctionType.SqlTableEditorSaveData
						If args.FunctionName.XFEqualsIgnoreCase("TestFunction") Then
							'Not used
						End If
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function

#End Region

#Region "Public Functions"

		Public Function WorkflowCompleteOneOrAllMain(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As DashboardExtenderArgs) As XFSelectionChangedTaskResult
			Try
				'Initialize method level variables
				Dim selectionChangedTaskResult As New XFSelectionChangedTaskResult()
				Dim noUpdateMsg As New Text.StringBuilder
				Dim noUpdateCount As Integer = 0

				'Check the Workflow status of the parent (We can't calculate plan if the parent is certified)
				Dim wfRegParent As WorkflowProfileInfo = BRApi.Workflow.Metadata.GetParent(si, si.WorkflowClusterPk)
				Dim wfRegParentPk As New WorkflowUnitClusterPk(wfRegParent.ProfileKey, si.WorkflowClusterPk.ScenarioKey, si.WorkflowClusterPk.TimeKey)
				Dim wfRegParentStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfRegParentPk, False)												
				If Not wfRegParentStatus.AllTasksCompleted Then															

					Dim curProfile As WorkflowProfileInfo = BRApi.Workflow.Metadata.GetProfile(si, si.WorkflowClusterPk.ProfileKey)
						
					'Update workflow to COMPLETED
					Dim wfClusterDesc As String = BRApi.Workflow.General.GetWorkflowUnitClusterPkDescription(si, si.WorkflowClusterPk)
					BRApi.Workflow.Status.SetWorkflowStatus(si, si.WorkflowClusterPk, StepClassificationTypes.Workspace, WorkflowStatusTypes.Completed, StringHelper.FormatMessage(Me.m_MsgWorkflowCompleted, wfClusterDesc), "", Me.m_MsgWorkflowCompletedReasonButton, Guid.Empty)					
					selectionChangedTaskResult.WorkflowWasChangedByBusinessRule = True
					selectionChangedTaskResult.IsOK = True							
					selectionChangedTaskResult.ShowMessageBox = False						

				Else
					'Parent Certified, cannot update workflow
					selectionChangedTaskResult.WorkflowWasChangedByBusinessRule = False
					selectionChangedTaskResult.IsOK = True							
					selectionChangedTaskResult.ShowMessageBox = True
					selectionChangedTaskResult.Message = Me.m_MsgCannotCompleteWorkflow												
				End If	
				
				Return selectionChangedTaskResult
							
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try				
		End Function
		
		Public Function WorkflowRevertOneOrAllMain(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As DashboardExtenderArgs) As XFSelectionChangedTaskResult
			Try
				'Initialize method level variables
				Dim selectionChangedTaskResult As New XFSelectionChangedTaskResult()
				Dim noUpdateMsg As New Text.StringBuilder
				Dim noUpdateCount As Integer = 0

				'Check the Workflow status of the parent (We can't calculate plan if the parent is certified)
				Dim wfRegParent As WorkflowProfileInfo = BRApi.Workflow.Metadata.GetParent(si, si.WorkflowClusterPk)
				Dim wfRegParentPk As New WorkflowUnitClusterPk(wfRegParent.ProfileKey, si.WorkflowClusterPk.ScenarioKey, si.WorkflowClusterPk.TimeKey)
				Dim wfRegParentStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfRegParentPk, False)												
				If (Not wfRegParentStatus.AllTasksCompleted) Then															
					'Update the workspace workflow to INPROCESS
					Dim wfClusterDesc As String = BRApi.Workflow.General.GetWorkflowUnitClusterPkDescription(si, si.WorkflowClusterPk)
					BRApi.Workflow.Status.SetWorkflowStatus(si, si.WorkflowClusterPk, StepClassificationTypes.Workspace, WorkflowStatusTypes.InProcess, StringHelper.FormatMessage(Me.m_MsgWorkflowReverted, wfClusterDesc), "", Me.m_MsgWorkflowRevertedReasonButton, Guid.Empty)
					selectionChangedTaskResult.WorkflowWasChangedByBusinessRule = True
					selectionChangedTaskResult.IsOK = True							
					selectionChangedTaskResult.ShowMessageBox = False
					
				Else
					'Parent Certified, cannot update workflow
					selectionChangedTaskResult.WorkflowWasChangedByBusinessRule = False
					selectionChangedTaskResult.IsOK = True							
					selectionChangedTaskResult.ShowMessageBox = True
					selectionChangedTaskResult.Message = Me.m_MsgCannotRevertWorkflow												
				End If	

				
				Return selectionChangedTaskResult								
							
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try				
		End Function		

#End Region
		
#Region "Constants and Enumerations"

		'Parallel Options
		Dim m_ParallelThreadsNoSQL As Integer = 16		
		Dim m_ParallelThreadsWithSQL As Integer = 8 	'Do not increase beyond 8 Threads, may cause deadlocks on insert
		
		'String Constants
		Public m_PlanTemplate As String = "PlanTemplate"
		Public m_PlanGlobal As String = "PlanGlobal"
		Public m_ScenarioTypeAll As String = "All"
		
		Public m_StatusAll As String = "All"
		Public m_StatusIdled As String = "Idle"		
		
		'String Messages				
		Private m_MsgWorkflowPOVNotInitialized As String = "Error: Workflow POV has not been intialized."
		Private m_MsgSettingsSaved As String = "Settings Saved"
		Private m_MsgSettingsNotSaved As String = "Settings Saved with warning: Review message and make corrections."
		Private m_MsgSettingsEndPlanPerGTStartPlanPer As String = "End Plan Period must be GREATER than Start Plan Period."
		Private m_MsgFileLoaded As String = "File [{0}] Loaded"
		Private m_MsgFileNotLoaded As String = "File could NOT be loaded, Workflows have been COMPLETED based on existing register/activity data."
		Private m_MsgCalculatePlanCompleted As String = "Plan Calculation Completed"
		Private m_MsgCalculatePlanStarted As String = "Plan Calculation Started" & VBCrLF & "[Check Task Activity To Monitor Progress]"
		Private m_MsgCalculatePlanErr As String = "Plan Calculation Error"		
		Private m_MsgCannotCalculatePlan As String = "Cannot Calculate Plan, Parent Workflow has been Completed."
		Private m_MsgDeletePlanCompleted As String = "Delete Plan Completed"
		Private m_MsgCannotDeletePlan As String = "Cannot Delete Plan, Parent Workflow has been Completed."
		Private m_MsgCannotDeleteRegister As String = "Cannot Delete Register, Workflow has been Completed."
		Private m_MsgWorkflowCompleted As String = "Plan Workflow Completed: {0}"
		Private m_MsgCannotCompleteWorkflow As String = "Workflow NOT Completed: Parent Workflow has been Completed."
		Private m_MsgCannotCompleteWorkflowValErr As String = "Workflow NOT Completed: Check Validation Errors."
		Private m_MsgCannotCompleteMultipleWorkflows As String = "Workflow NOT FULLY Completed: ({0}) planning workflow(s) are implicity locked because Parent Workflow has been Completed." & vbcrlf & "  Items Listed Below:"
		Private m_MsgWorkflowCompletedReasonButton As String = "User clicked [Complete Workflow]"
		Private m_MsgCannotRevertWorkflow As String = "Workflow NOT Reverted: Parent Workflow has been Completed."
		Private m_MsgCannotRevertMultipleWorkflows As String = "Workflow NOT FULLY Reverted: ({0}) planning workflow(s) are implicity locked because Parent Workflow has been Completed." & vbcrlf & "  Items Listed Below:"
		Private m_MsgWorkflowReverted As String = "Capital Plan Workflow Reverted: {0}"
		Private m_MsgWorkflowRevertedReasonButton As String = "User clicked [Revert Workflow]"
		Private m_MsgWorkflowRevertedReasonCalc As String = "Calculate Plan Executed [Revert Workflow]"
		Private m_MsgAutoLoadWFProfileDoesNotExist As String = "Autoload Workflow Profile Does Not Exist: {0}, {1}, {2}"
		
			
#End Region		

#Region "Private Functions"

'	Private Function GetRegisterWFClusterPks(ByVal si As SessionInfo, ByVal scenarioName As String, ByVal timeName As String) As List(Of WorkflowUnitClusterPk)
'		Try
'			Dim wfClusterPks As New List(Of WorkflowUnitClusterPk)
			
'			'Define the SQL Statement
'			Dim sql As New Text.StringBuilder					
'			sql.Append("Select Distinct WFProfileName ")

'			sql.Append("From ")           
'			sql.Append("XFW_CPP_Register ")
		
'			sql.Append("Where (")
'			sql.Append("WFScenarioName = '" & scenarioName & "' ")
'			sql.Append("And WFTimeName = '" &  timeName  & "'")
'			sql.Append(")")

'			sql.Append("Order By ")
'			sql.Append("WFProfileName ")
							
'			'Create the list of WorkflowUnitClusterPks
'			Using dbConnApp As DBConnInfo = BRAPi.Database.CreateApplicationDbConnInfo(si)
'				Using dt As DataTable = BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, False)	
'					For Each dr As DataRow In dt.rows
'						Dim wfClusterPk As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, dr("WFProfileName"), scenarioName, timeName)
'						If Not wfClusterPk Is Nothing Then
'							wfClusterPks.Add(wfClusterPk)
'						End If
'					Next	
'				End Using
'			End Using
			
'			Return wfClusterPks
			
'		Catch ex As Exception
'			Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'		End Try		
'	End Function
	
#End Region

#Region "Workflow Helpers"

	Public Function ValidateGuid(ByVal si As SessionInfo, ByVal guidString As String) As String
		Try
			Dim testGuid As Guid
			If Guid.TryParse(guidString, testGuid) Then
				Return guidString
			Else
				Return Guid.Empty.ToString	
			End If				
			
		Catch ex As Exception
			Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
		End Try
	End Function

	Public Function ValidateWorkflowPOVInitialization(ByVal si As SessionInfo, ByVal Optional throwError As Boolean = False) As Boolean
		Try
			Dim isInitialized As Boolean = True
			
			'Make sure that the user has initialize the workflow cluster, otherwise all other calls will fail
			If (si.WorkflowClusterPk.ProfileKey = Guid.Empty) Or (si.WorkflowClusterPk.ScenarioKey = SharedConstants.Unknown) Or (si.WorkflowClusterPk.TimeKey = SharedConstants.Unknown) Then
				isInitialized = False
				If throwError Then Throw New XFException(Me.m_MsgWorkflowPOVNotInitialized, Nothing)
			End If	
			
			Return isInitialized 
			
		Catch ex As Exception
			Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
		End Try
	End Function
	
	Public Function IsCentralRegisterWFProfile(ByVal si As SessionInfo) As Boolean
		Try
			'Compare the Central loading workflow profile to the current workflow profile
			Dim centralLoadingWFProfile As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "StoredPlanRegisterProfile_CPPT")			
			Dim currentProfileInfo As WorkflowProfileInfo = BRApi.Workflow.Metadata.GetProfile(si, si.WorkflowClusterPk.ProfileKey)
			If Not currentProfileInfo Is Nothing Then
				Return currentProfileInfo.Name.XFEqualsIgnoreCase(centralLoadingWFProfile)
			Else
				Return False	
			End If	
				
		Catch ex As Exception
			Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
		End Try
	End Function

	Public Function IsWorkspaceWFParentCertified(ByVal si As SessionInfo, ByVal wfClusterPk As WorkflowUnitClusterPk) As Boolean
		Try
			Dim IsCertified As Boolean = False
			
			'Check the certification status of the workflow parent
			Dim wfParent As WorkflowProfileInfo = BRApi.Workflow.Metadata.GetParent(si, wfClusterPk)
			If Not wfParent Is Nothing Then
				Dim wfParentPk As New WorkflowUnitClusterPk(wfParent.ProfileKey, wfClusterPk.ScenarioKey, wfClusterPk.TimeKey)				
				Dim wfParentStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfParentPk, False)	
				If Not wfParentStatus Is Nothing Then
					If wfParentStatus.IsCertified Then
						IsCertified = True
					End If
				End If
			End If	
			
			Return IsCertified
			
		Catch ex As Exception
			Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
		End Try
	End Function
	
	Public Sub SetWorkspaceWFToInprocess(ByVal si As SessionInfo, ByVal wfClusterPk As WorkflowUnitClusterPk)
		Try				
			'Get the workflow Info object, retrieve and the Workspace Workflow task and set its status ti INPROCESS	
			Dim wfStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfClusterPk, True)
			Dim wfTask As TaskInfo =  wfStatus.GetTask(New Guid(SharedConstants.WorkflowKeys.Tasks.Workspace))
			If Not wfTask Is Nothing Then
				If wfTask.Status = WorkflowStatusTypes.Completed Then
					'Update the workspace workflow to INPROCESS
					Dim wfRegClusterDesc As String = BRApi.Workflow.General.GetWorkflowUnitClusterPkDescription(si, wfClusterPk)
					BRApi.Workflow.Status.SetWorkflowStatus(si, wfClusterPk, StepClassificationTypes.Workspace, WorkflowStatusTypes.InProcess, StringHelper.FormatMessage(Me.m_MsgWorkflowReverted, wfRegClusterDesc), "", Me.m_MsgWorkflowRevertedReasonCalc, Guid.Empty)							
				End If
			End If
					
		Catch ex As Exception
			Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
		End Try			
	End Sub

	Public Function AutoCompleteLoadAndProcessWF(ByVal si As SessionInfo, ByVal wfPlanClusterPk As WorkflowUnitClusterPk, ByVal wfImportChildSuffix As String) As Boolean
		Try		
			Dim completed As Boolean = False
			
			'If a suffix was not provided, just exit sub
			If Not String.IsNullOrWhiteSpace(wfImportChildSuffix) Then 							
				'Get the workflow unit PK and process the workflow	
				Dim wfProfile As WorkflowProfileInfo = BRApi.Workflow.Metadata.GetProfile(si, wfPlanClusterPk.ProfileKey)
				Dim wfProfileParent As WorkflowProfileInfo = BRApi.Workflow.Metadata.GetProfile(si, wfProfile.ParentProfileKey)
				Dim wfImportChildName As String = wfProfileParent.Name & "." & wfImportChildSuffix
				Dim scenarioName As String = ScenarioDimHelper.GetNameFromId(si, wfPlanClusterPk.ScenarioKey)
				Dim timeName As String =  TimeDimHelper.GetNameFromId(wfPlanClusterPk.TimeKey)											
				Dim wfChildClusterPk As WorkflowUnitClusterPk = BRAPi.Workflow.General.GetWorkflowUnitClusterPk(si, wfImportChildName, scenarioName, timeName)
			
				'Execute IMPORT-VALIDATE-LOAD-PROCESS workflow
				If Not wfChildClusterPk Is Nothing Then
					Dim impProcessInfo As LoadTransformProcessInfo = BRApi.Import.Process.ExecuteParseAndTransform(si, wfChildClusterPk, "", Nothing, TransformLoadMethodTypes.Replace, SourceDataOriginTypes.FromDirectConnection, True)
					If impProcessInfo.Status = WorkflowStatusTypes.Completed Then
						'Validate Transformation (Mapping)
						Dim valTranProcessInfo As ValidationTransformationProcessInfo = BRApi.Import.Process.ValidateTransformation(si, wfChildClusterPk, True)
						If valTranProcessInfo.Status = WorkflowStatusTypes.Completed Then
							'Validate Intersections
							Dim valIntersectProcessInfo = BRApi.Import.Process.ValidateIntersections(si, wfChildClusterPk, True)
							If valTranProcessInfo.Status = WorkflowStatusTypes.Completed Then
								'Load the cube
								Dim lcProcessInfo = BRApi.Import.Process.LoadCube(si, wfChildClusterPk)
								If lcProcessInfo.Status = WorkflowStatusTypes.Completed Then
									BRApi.DataQuality.Process.ExecuteProcessCube(si, wfChildClusterPk, StepClassificationTypes.ProcessCube, False)
									completed = True
								End If	
							End If
						End If									
					End If	
				Else
					BRApi.ErrorLog.LogMessage(si, StringHelper.FormatMessage(Me.m_MsgAutoLoadWFProfileDoesNotExist, wfImportChildName, scenarioName, timeName))		
				End If			
			End If
			
			Return completed
			
		Catch ex As Exception
			Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
		End Try			
	End Function
	
	Public Function AutoRevertLoadAndProcessWF(ByVal si As SessionInfo, ByVal wfPlanClusterPk As WorkflowUnitClusterPk, ByVal wfImportChildSuffix As String) As Boolean
		Try		
			Dim completed As Boolean = False
			
			'If a suffix was not provided, just exit sub
			If Not String.IsNullOrWhiteSpace(wfImportChildSuffix) Then 							
				'Get the workflow unit PK and process the workflow	
				Dim wfProfile As WorkflowProfileInfo = BRApi.Workflow.Metadata.GetProfile(si, wfPlanClusterPk.ProfileKey)
				Dim wfProfileParent As WorkflowProfileInfo = BRApi.Workflow.Metadata.GetProfile(si, wfProfile.ParentProfileKey)
				Dim wfImportChildName As String = wfProfileParent.Name & "." & wfImportChildSuffix
				Dim scenarioName As String = ScenarioDimHelper.GetNameFromId(si, wfPlanClusterPk.ScenarioKey)
				Dim timeName As String =  TimeDimHelper.GetNameFromId(wfPlanClusterPk.TimeKey)											
				Dim wfChildClusterPk As WorkflowUnitClusterPk = BRAPi.Workflow.General.GetWorkflowUnitClusterPk(si, wfImportChildName, scenarioName, timeName)
			
				'Execute IMPORT-VALIDATE-LOAD-PROCESS workflow
				If Not wfChildClusterPk Is Nothing Then
					Dim impProcessInfo As LoadTransformProcessInfo = BRApi.Import.Process.ExecuteParseAndTransform(si, wfChildClusterPk, "", Nothing, TransformLoadMethodTypes.Replace, SourceDataOriginTypes.FromDirectConnection, True)
					If impProcessInfo.Status = WorkflowStatusTypes.Completed Then
						'Set the AutoLoad workflow back to INPROCESS for the Import Step
						Dim wfChildClusterDesc As String = BRApi.Workflow.General.GetWorkflowUnitClusterPkDescription(si, wfChildClusterPk)
						BRApi.Workflow.Status.SetWorkflowStatus(si, wfChildClusterPk, StepClassificationTypes.DataLoadTransform, WorkflowStatusTypes.InProcess, StringHelper.FormatMessage(Me.m_MsgWorkflowReverted, wfChildClusterDesc), "", Me.m_MsgWorkflowRevertedReasonButton, Guid.Empty)						
					End If	
					completed = True
				Else
					BRApi.ErrorLog.LogMessage(si, StringHelper.FormatMessage(Me.m_MsgAutoLoadWFProfileDoesNotExist, wfImportChildName, scenarioName, timeName))			
				End If			
			End If
			
			Return completed
			
		Catch ex As Exception
			Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
		End Try			
	End Function
	
	Public Function ValidateWFStatusBeforeRegisterImport(ByVal si As SessionInfo) As Boolean
		Try
			'Check the workflow status before allowing a register file upload
			Dim canLoadFile As Boolean = True	

			'Get Workflow Cluster Information
			Dim scenarioName As String = ScenarioDimHelper.GetNameFromID(si, si.WorkflowClusterPk.ScenarioKey)
			Dim timeName As String = TimeDimHelper.GetNameFromId(si.WorkflowClusterPk.TimeKey)

			'CHECK WORKFLOW STATUS OF WORKFLOWS
			'----------------------------------------------------------
			If canLoadFile Then
				Dim wfStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, si.WorkflowClusterPk, False)												
				If (wfStatus.AllTasksCompleted) Then
					canLoadFile = False
				End If	
			End If
		
			Return canLoadFile	
			
		Catch ex As Exception
			Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
		End Try
	End Function
	
#End Region	
	
End Class
	
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Select_Time">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.Select_Time
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					
						
					'Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
					Case Is = ExtenderFunctionType.Unknown	
					Dim dimensionName As String = "Tm"
					Dim ParamPeriod As String = args.NameValuePairs.XFGetValue("Period")
					Dim Persplit As String() = ParamPeriod.Split("-")
					Dim ClosedPeriod As String = Persplit(0)
					Dim closedPerID As Integer = TimeDimHelper.GetIdFromName(ClosedPeriod)
					'Dim wfUnitPKToClear As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, "Corporate.Corp_Fcst_Functional Adj", "Forecast_Working", "2022")
					Dim wfProfileID As Guid = si.WorkflowClusterPk.ProfileKey
					
					Dim wfScenarioId As Integer = si.WorkflowClusterPk.ScenarioKey
					Dim wfStartTimeId As Integer = TimeDimHelper.GetIdFromName("2022M4")
					Dim wfEndTimeId As Integer = TimeDimHelper.GetIdFromName("2022M5")
					Dim wfYear As String = globals.GetStringValue("Corp_Forecast")
					
					Brapi.ErrorLog.LogMessage(si,"YEar" & " - " & wfYear)
					Dim noDistinct As Boolean = True
					Dim wfProfileID1 As Guid = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, "Corporate.Corp_Fcst_Functional Adj","Forecast_Working", "2022").ProfileKey
					Brapi.ErrorLog.LogMessage(si,"Same - " & wfProfileID1.ToString & " - " & closedPerID.ToString)
					Brapi.ErrorLog.LogMessage(si,wfProfileID.ToString & "-" & wfScenarioId.ToString & " - " & wfStartTimeId.ToString)
					Using dbConnApp As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
						
							Dim dt As DataTable = Nothing
							If noDistinct Then
								'Simple Query
								dt = StageUnmappedForDimension(si,dbConnApp, dimensionName, wfProfileID1, wfScenarioId, closedPerID, wfEndTimeId)								
								Dim strQuery As String = "Select " & dimensionName & " As " & StageTableFields.DerivedColumns.InvalidMemberName & " "
                				strQuery = strQuery & "From " & StageViewNames.Views.StageSourceAndTargetData & " "
                				strQuery = strQuery & "Where (" & StageSourceDataColNames.DimWorkflowProfileKey & " = '" & wfProfileID1.ToString & "') "
                				strQuery = strQuery & "And (" & StageSourceDataColNames.DimWorkflowScenarioKey & " = " & wfScenarioId.ToString(CultureInfo.InvariantCulture) & ") "
                				'strQuery = strQuery & "And (" & StageSourceDataColNames.DimWorkflowTimeKey & " >= " & wfStartTimeId.ToString(CultureInfo.InvariantCulture) & ") "
								strQuery = strQuery & "And (" & StageSourceDataColNames.DimWorkflowTimeKey & " >= " & closedPerID.ToString(CultureInfo.InvariantCulture) & ") "
                				strQuery = strQuery & "And (" & StageSourceDataColNames.DimWorkflowTimeKey & " <= " & wfEndTimeId.ToString(CultureInfo.InvariantCulture) & ") "
                				'strQuery = strQuery & "And (" & StageSourceDataColNames.DimRowType & " < " & CInt(SourceRowTypes.DerivedNoValidateOrExport).ToString(CultureInfo.InvariantCulture) & ") "
                				'strQuery = strQuery & "And ((" & dimensionName & StageConstants.DimensionSuffixes.Target & " = '" & StageConstants.TransformationGeneral.DimUnmapped & "') "
                				'strQuery = strQuery & "OR (" & dimensionName & StageConstants.DimensionSuffixes.Target & " = '" & String.Empty & "')) "
								Brapi.ErrorLog.LogMessage(si,strQuery)
							End If	
								
							If Not dt Is Nothing Then
								BrApi.ErrorLog.LogMessage(si, "Validate Rows Test: " & dt.Rows.Count.ToString)								
								'BrApi.ErrorLog.LogMessage(si, dt.d
								'BrApi.ErrorLog.LogMessage(si, "Validate Rows: " & dt.Rows.)
							End If	
'							BrApi.ErrorLog.LogMessage(si, "Validate Rows Test: " & dt.Rows.Count.ToString)
					End Using
					
					'If Not dt Is Nothing Then
								'BrApi.ErrorLog.LogMessage(si, "Validate Rows Test: " & dt.Rows.Count.ToString)
					'End If	
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		Public Function StageUnmappedForDimension(ByVal si As SessionInfo,ByVal dbCon As DbConnInfo, ByVal dimensionName As String, ByVal WorkflowProfileKey As Guid, ByVal WorkflowScenarioKey As Integer, ByVal cubeStartTimeId As Integer, ByVal cubeEndTimeId As Integer) As DataTable
            Try
                'Initialize the statement
                Dim strQuery As String = "Select " & dimensionName & " As " & StageTableFields.DerivedColumns.InvalidMemberName & " "
                strQuery = strQuery & "From " & StageViewNames.Views.StageSourceAndTargetData & " "
                strQuery = strQuery & "Where (" & StageSourceDataColNames.DimWorkflowProfileKey & " = '" & WorkflowProfileKey.ToString & "') "
                strQuery = strQuery & "And (" & StageSourceDataColNames.DimWorkflowScenarioKey & " = " & WorkflowScenarioKey.ToString(CultureInfo.InvariantCulture) & ") "
                strQuery = strQuery & "And (" & StageSourceDataColNames.DimWorkflowTimeKey & " >= " & cubeStartTimeId.ToString(CultureInfo.InvariantCulture) & ") "
                strQuery = strQuery & "And (" & StageSourceDataColNames.DimWorkflowTimeKey & " <= " & cubeEndTimeId.ToString(CultureInfo.InvariantCulture) & ") "
                'strQuery = strQuery & "And (" & StageSourceDataColNames.DimRowType & " < " & CInt(SourceRowTypes.DerivedNoValidateOrExport).ToString(CultureInfo.InvariantCulture) & ") "
                'strQuery = strQuery & "And ((" & dimensionName & StageConstants.DimensionSuffixes.Target & " = '" & StageConstants.TransformationGeneral.DimUnmapped & "') "
                'strQuery = strQuery & "OR (" & dimensionName & StageConstants.DimensionSuffixes.Target & " = '" & String.Empty & "')) "
				'Brapi.ErrorLog.LogMessage(si,strQuery)
                'Set the return value
                Dim dt As DataTable = DbSql.GetDataTableUsingReader(dbCon, strQuery, Nothing, True)
				Dim ddl As New Text.StringBuilder				
				ddl.Append("Alter VIEW [vSourceCorpview] ")
				ddl.Append("As ")
				ddl.Append(strQuery)
				Using dbConnApp As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					BRApi.Database.ExecuteActionQuery(dbCon, ddl.ToString, False, True)
				End Using		
                dt.TableName = dimensionName
				Return dt
				
            Catch ex As Exception
                Throw ErrorHandler.LogWrite(dbCon.SI, dbCon.RetryManager, New XFException(dbCon.SI, ex))
            End Try
        End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="SM_Create_Table">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.SM_Create_Table
Public Class MainClass
	Private ID As Guid
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Dim globalParameterTableName As String = "XFW_OMD_INTERFACE"
				Dim desc As String = "ENTERPRISE:ENT->INTL:INTL"
				Dim src As String = "ENTERPRISE"
				Dim src_addtlinfo As String = "ENT"
				Dim tar As String = "INTL"
				Dim tar_addtlinfo As String = "INTL"
				Dim method As String = "APPTOAPP"
				Dim src_scenario As String = "Actual"
				Dim trg_scenario As String = "Actual"
				Dim sql As New Text.StringBuilder
				ID = Guid.NewGuid()
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
						BRAPi.Database.ExecuteSql(dbConnApp, "Drop Table [dbo].[ActivityLog_Plan_WFStatus];", True)
						sql.AppendLine("CREATE TABLE [dbo].[ActivityLog_Plan_WFStatus]")
						sql.AppendLine("( ") 
						sql.AppendLine(" [Workflow_Step] [varchar] (200), ") 
'						sql.AppendLine(" [Start_Time] [DATETIME] DEFAULT GETDATE(), ")
						sql.AppendLine(" [Scenario] [varchar] (200), ")
						sql.AppendLine(" [Year] [varchar] (200) , ")
						sql.AppendLine(" [Cube] [varchar] (200), ") 						
						sql.AppendLine(" [Status] [varchar] (200) , ")
						sql.AppendLine(" [Last_Step] [varchar] (200), ")
'						sql.AppendLine(" [Import] [varchar] (200), ")
'						sql.AppendLine(" [Transformation] [varchar] (200), ")
'						sql.AppendLine(" [Validation] [varchar] (200), ")
'						sql.AppendLine(" [Load_Cube] [varchar] (200), ")
'						sql.AppendLine(" [Process_Cube] [varchar] (200), ")
'						sql.AppendLine(" [Executed_By][varchar] (200), ")					
						sql.AppendLine(" [Last_Time] [DATETIME] DEFAULT GETDATE(), ")				
'						sql.AppendLine(" [Details] [varchar] (2000) ")
						sql.AppendLine(")")
						
'					sql.AppendLine("(")
'					sql.AppendLine(" [ID] [INT] NOT NULL IDENTITY(1,1) PRIMARY KEY, ")
'					sql.AppendLine(" [SRC_TABLE] [varchar] (500),")
'					sql.AppendLine(" [SRC_SCENARIO] [varchar] (500),")
'					sql.AppendLine(" [UserName] [varchar] (500),")
'					sql.AppendLine(" [TRG_TABLE] [varchar] (500),")
'					sql.AppendLine(" [TRG_SCENARIO] [varchar] (500),")
'					sql.AppendLine(" [RECORDS_COUNT] [INT],")
'					sql.AppendLine(" [CREATED_TS] [DATETIME] DEFAULT CURRENT_TIMESTAMP")
'					sql.AppendLine(")")
'						sql.AppendLine("DROP COLUMN [Scenario] ") 
'						sql.AppendLine("VALUES ('{ID}.ToString','{desc}','{src}','{src_addtlinfo}','{tar}','{tar_addtlinfo}','{method}','{src_scenario}','{trg_scenario}') ") 
'						sql.AppendLine(" [JobID] [INT] NOT NULL IDENTITY(1,1), ")
'						sql.AppendLine(" [Start_Time] [DATETIME],")
'						sql.AppendLine(" [Source_Scenario] [varchar] (200), ")
'						sql.AppendLine(" [Source_Year] [varchar] (200), ")
'						sql.AppendLine(" [Target_Scenario] [varchar] (200), ")
'						sql.AppendLine(" [Target_Year] [varchar] (200), ")

'						sql.AppendLine(" [End_Time] [DATETIME],")
'						sql.AppendLine(" [StartMonth] [varchar] (200), ")
'						sql.AppendLine(" [EndMonth] [varchar] (200), ")	
'						sql.AppendLine(" [UpdateTime] [DATETIME] DEFAULT CURRENT_TIMESTAMP, ")
'						sql.AppendLine(" [UpdateBy][varchar] (200),")
'						sql.AppendLine(" [Status][varchar] (200),")
'						sql.AppendLine(" PRIMARY KEY ([Scenario],[Year],[Status])")
'						sql.AppendLine(")")	
						BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)
				End Using

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Table_Export">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.Table_Export
	Public Class MainClass
		Public Function ExportToExcel(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As DashboardExtenderArgs) As XFSelectionChangedTaskResult
			Dim selectionChangedTaskResult As New XFSelectionChangedTaskResult()
			
			Dim FileName As String = args.NameValuePairs.XFGetValue("FileName")'&DateTime.Now.ToString("yyyy-MM-dd-HH-mm-ss")
			Dim TableName As String = args.NameValuePairs.XFGetValue("Table")
			Dim FieldListParam As String = args.NameValuePairs.XFGetValue("FieldList")
			
			Dim FieldListArray As String() = FieldListParam.Split(";")
			
			FieldListArray(1) = "TF_3"
			FieldListArray(2) = "TF_2"
			FieldListArray(3) = "GL"
			FieldListArray(4) = "LineItem"
			FieldListArray(5) = "TF_1"
			
			Dim FieldList As List(Of String) = FieldListArray.ToList
			
			For Each item In FieldList
				BRApi.ErrorLog.LogMessage(si, "list:"&item)
			Next
			
			Dim DEBUG As Boolean = True
			Dim statusReport As New Text.StringBuilder
			statusReport.AppendLine("Business Rule: ExportToExcel")
			If DEBUG Then 
				statusReport.AppendLine("FileName:" & FileName)
'				statusReport.AppendLine("Arg2: FieldList(0):" & FieldList(0).ToString)
'				statusReport.AppendLine("Arg3: TableName:" & TableName)
			End If		
			Try											
				'Export the records of table to CSV file
				Dim profileKey As Guid = si.WorkflowClusterPk.ProfileKey
				Dim profileName As String = BRApi.Workflow.Metadata.GetProfile(si, si.WorkflowClusterPk.ProfileKey).Name
				Dim parentWFProfileInfo As WorkflowProfileInfo = BRApi.Workflow.Metadata.GetParent(si, profileName)
				
				Dim scenarioName As String = ScenarioDimHelper.GetNameFromID(si, si.WorkflowClusterPk.ScenarioKey)
				Dim timeName As String = BRApi.Finance.Time.GetNameFromId(si, si.WorkflowClusterPk.TimeKey)
				
				Dim wfClusterPk As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si,parentWFProfileInfo.Name,scenarioName,timeName)
				Dim wfSibLingList As List(Of WorkFlowProfileInfo) = BRApi.Workflow.Metadata.GetRelatives(si, wfClusterPk, WorkflowProfileRelativeTypes.Siblings, WorkflowProfileTypes.AllProfiles)
				Dim childWFProfiles As New Text.StringBuilder
				Dim objXFUserState As New XFUserState 
				
				Dim getCustomTableExpression As String =  FieldList(1).ToString & " = '" & profileName & "' AND " & FieldList(2).ToString & " = '" & scenarioName & "' AND " & FieldList(3).ToString & " = '" & timeName & "'"
				Dim profileNameArray As String() = profileName.Split(".")
				Dim package As String = profileNameArray(1).ToString.Substring(0,2)
				BRAPi.ErrorLog.LogMessage(si, "package" & package & profileNameArray(1).ToString )
				
				
'				Public Shared fincols_selectquery As String
'				Public Shared fincolsheader As String
				    Dim Pk12_subpackage As String =String.Empty
					Dim sub_pkg_arr As String() 
					Dim sub_pkg_code As String =String.Empty 
				If package.XFEqualsIgnoreCase("12")
					objXFUserState = BRApi.State.GetSessionState(si, False, clientModuleType.Windows, String.Empty, String.Empty, "PK12_SelectedSubPackage", String.Empty)	
					
					Pk12_subpackage  = objXFUserState.TextValue
					BRAPi.ErrorLog.LogMessage(si, "packagesub" & Pk12_subpackage)
					sub_pkg_arr  = Pk12_subpackage.Split("_")
					BRAPi.ErrorLog.LogMessage(si, "package02" & sub_pkg_arr(4) )
					sub_pkg_code  = sub_pkg_arr(4) 
				End If
				If package.XFEqualsIgnoreCase("09")
					 fincols_selectquery = "CostCenter,TF_3,TF_2,GL,LineItem,TF_1,TF_9,TF_10,YearTotal,P01,P02,P03,P04,P05,P06,P07,P08,P09,P10,P11,P12,UserID"
				     fincolsheader = "CostCenter,Cost Center Currency,Center Type,GL,Line Id,Line Item Description,Office_Supply_Type,Vendor,YearTotal,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Input User"

				ElseIf package.XFEqualsIgnoreCase("11")
					fincols_selectquery = "CostCenter,TF_3,TF_2,GL,LineItem,TF_1,YearTotal,P01,P02,P03,P04,P05,P06,P07,P08,P09,P10,P11,P12,UserID"
                	fincolsheader = "CostCenter,Cost Center Currency,Center Type,GL,Line Id,Line Item Description,YearTotal,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Input User"

				ElseIf package.XFEqualsIgnoreCase("12")
					If Pk12_subpackage.Contains("0_frame_ExpensePlanning_PK12_03") Then
					    fincols_selectquery = "CostCenter,TF_3,TF_2,GL,LineItem,TF_1,TF_7,YearTotal,P01,P02,P03,P04,P05,P06,P07,P08,P09,P10,P11,P12,UserID"
						fincolsheader  = "CostCenter,Cost Center Currency,Center Type,GL,Line Id,Line Item Description,Casualty Insurance or Fee Type,YearTotal,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Input User"

				    ElseIf Pk12_subpackage.Contains("0_frame_ExpensePlanning_PK12_04") Then  
					    fincols_selectquery = "CostCenter,TF_3,TF_2,GL,LineItem,TF_1,TF_8,YearTotal,P01,P02,P03,P04,P05,P06,P07,P08,P09,P10,P11,P12,UserID"
                        fincolsheader  = "CostCenter,Cost Center Currency,Center Type,GL,Line Id,Line Item Description,Property Insurance Expense Type,YearTotal,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Input User"
					End If
				ElseIf package.XFEqualsIgnoreCase("16")
					 fincols_selectquery = "CostCenter,TF_3,TF_2,GL,LineItem,TF_1,TF_4,TF_5,TF_6,YearTotal,P01,P02,P03,P04,P05,P06,P07,P08,P09,P10,P11,P12,UserID"
					  fincolsheader  = "CostCenter,Cost Center Currency,Center Type,GL,Line Id,Line Item Description,Project_Description_Scope,Professional_Services_Type,Professional_Services_Vendor,YearTotal,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Input User"

				ElseIf profileNameArray(1).XFEqualsIgnoreCase("Financial_Only")
					fincols_selectquery  = "CostCenter,TF_3,TF_2,GL,LineItem,TF_1,YearTotal,P01,P02,P03,P04,P05,P06,P07,P08,P09,P10,P11,P12,UserID"
					fincolsheader = "CostCenter,Cost Center Currency,Center Type,GL,Line Id,Line Item Description,YearTotal,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Input User"
		        End If					
				
'				Dim dt As DataTable = BRApi.Database.GetCustomDataTable(si, "Application", TableName, getCustomTableExpression)	
				
				Dim dt As DataTable = Nothing
				Dim sql As New Text.StringBuilder
				
				If profileNameArray(0).Contains("Total_Company_ALL")
					
						Dim AllVBOList As New Text.StringBuilder
						Dim VBOCC_Mappings_dt As New DataTable
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							VBOCC_Mappings_dt = BRAPi.Database.ExecuteSql(dbConnApp,"SELECT DISTINCT WORKFLOW_PROFILE_VBO FROM [dbo].[XFW_ExpensePlanning_VBO_CC_Mappings]", False)   
						End Using
						If VBOCC_Mappings_dt IsNot Nothing
							If VBOCC_Mappings_dt.Rows.Count > 0
								For Each dr As DataRow In VBOCC_Mappings_dt.Rows
									AllVBOList.Append("'" & dr("WORKFLOW_PROFILE_VBO") & "." & profileNameArray(1) & "',")
								Next
							End If
						End If
						AllVBOList.Remove(AllVBOList.Length-1,1)
					
						
						If package.XFEqualsIgnoreCase("12")
							Dim sqlstring As String="SELECT GL_Code FROM [dbo].[XFW_ExpensePlanning_GLPlanner] WHERE Planning_Methodology='Itemized_Standard' AND LEFT(Package,2)='" & package & "' AND SUBSTRING(Sub_Package,4,2) ='" & sub_pkg_code & "'"
						    sql.Append("SELECT " & fincols_selectquery & " FROM [dbo].[XFW_NonWage_Register] WHERE WFScenarioName='" & scenarioName & "'AND WFTimeName='" & timeName & "' AND GL in ("& sqlstring &")")
	'                         BRAPi.ErrorLog.LogMessage(si, "inside query export"&sql.ToString)
						Else       
								
							sql.Append("Select " & fincols_selectquery & " From [dbo].[XFW_NonWage_Register] Where WFScenarioName='" & scenarioName & "'AND WFTimeName='" & timeName & "'")
						         
						End If
						
				
				ElseIf profileNameArray(0).Contains("ALL")
					
					For Each wfSibLing As WorkFlowProfileInfo In wfSibLingList
						childWFProfiles.Append("'" & wfSibLing.Name & "." & profileNameArray(1) & "',")
					Next
					childWFProfiles.Remove(childWFProfiles.Length - 1, 1)
					
					If package.XFEqualsIgnoreCase("12")
						
					        Dim sqlstring As String="SELECT GL_Code FROM [dbo].[XFW_ExpensePlanning_GLPlanner] WHERE Planning_Methodology='Itemized_Standard' AND LEFT(Package,2)='" & package & "' AND SUBSTRING(Sub_Package,4,2) ='" & sub_pkg_code & "'"
						    sql.Append("SELECT " & fincols_selectquery & " FROM [dbo].[XFW_NonWage_Register] WHERE WFScenarioName='" & scenarioName & "'AND WFTimeName='" & timeName & "' AND GL in ("& sqlstring &")")
	'                         BRAPi.ErrorLog.LogMessage(si, "inside query export"&sql.ToString)
					Else       
							
						sql.Append("Select " & fincols_selectquery & " From [dbo].[XFW_NonWage_Register] Where  WFScenarioName='" & scenarioName & "'AND WFTimeName='" & timeName & "'")
					         
					End If
				Else
					
	                If package.XFEqualsIgnoreCase("12")
						
					        Dim sqlstring As String="SELECT GL_Code FROM [dbo].[XFW_ExpensePlanning_GLPlanner] WHERE Planning_Methodology='Itemized_Standard' AND LEFT(Package,2)='" & package & "' AND SUBSTRING(Sub_Package,4,2) ='" & sub_pkg_code & "'"
						    sql.Append("SELECT " & fincols_selectquery & " FROM [dbo].[XFW_NonWage_Register] WHERE WFScenarioName='" & scenarioName & "'AND WFTimeName='" & timeName & "' AND GL in ("& sqlstring &")")
	'                         BRAPi.ErrorLog.LogMessage(si, "inside query export"&sql.ToString)
					Else       
							
						sql.Append("Select " & fincols_selectquery & " From [dbo].[XFW_NonWage_Register] Where WFScenarioName='" & scenarioName & "'AND WFTimeName='" & timeName & "'")
					         
					End If
				End If
				BRAPi.ErrorLog.LogMessage(si, "query export"&sql.ToString)
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt = BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, False) 
					BRAPi.ErrorLog.LogMessage(si, "query export"&sql.ToString)
				End Using
				
				
					
				If dt Is Nothing Then
					If DEBUG Then statusReport.AppendLine("No DataTable")
				Else
					If DEBUG Then statusReport.AppendLine("Rowcount In data table: " & dt.Rows.Count) 								
					Try					
						statusReport.AppendLine("Rowcount in data table: " & dt.Rows.Count)
						If dt.Rows.Count <> 0 Then
							Dim delimiter As String = ";"
							
							Dim sSubFolder As String = "\Groups\Everyone\"
							Dim AdminRespFolderPath As String = BRAPi.Utilities.GetFileShareFolder(si, FileShareFolderTypes.ApplicationIncoming, Nothing).Replace("\Incoming","") & sSubFolder
							
							Dim sTargetFileSW As StreamWriter =  New StreamWriter(AdminRespFolderPath & FileName)
							
							If DEBUG Then statusReport.AppendLine("targetfile=" & AdminRespFolderPath & FileName)
							
							
							'Add field header to output								
'							sTargetFileSW.WriteLine(FieldListParam.Replace(";", delimiter))

													
								sTargetFileSW.WriteLine(fincolsheader.Replace(",",";"))
							
							
							For Each oRow As DataRow In  dt.Rows
								For Each oColumn As DataColumn In dt.Columns
'								Dim fieldCounter As Integer = 1
'								For Each sField As String  In FieldList
									
									
									sTargetFileSW.Write(oRow(oColumn.ColumnName) & ";")
'									If fieldCounter < FieldList.Count Then							
'										sTargetFileSW.Write(delimiter)
'										fieldCounter = fieldCounter + 1              
'									Else							
'										sTargetFileSW.WriteLine("")
'									End If
'								Next    
								Next
								sTargetFileSW.WriteLine("")
								
							Next oRow          

							sTargetFileSW.Close
						Else
							If DEBUG Then statusReport.AppendLine("No rows returned in data table")
						End If				
						selectionChangedTaskResult.IsOK = True
					Catch ex As Exception
						Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
						selectionChangedTaskResult.IsOK = False
						statusReport.AppendLine("Exception:" & ex.Message)
					End Try
				End If
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
				selectionChangedTaskResult.IsOK = False
				statusReport.AppendLine("GetCustomDataTable Exception:" & ex.Message)
			End Try				
				
			selectionChangedTaskResult.ShowMessageBox = True
			selectionChangedTaskResult.Message = statusReport.ToString
			Return selectionChangedTaskResult
		End Function		
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="test_a0k05v0">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq


Namespace OneStream.BusinessRule.Extender.test_a0k05v0
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						Dim timeStamp As DateTime = DateTime.Now
						Dim trgFolder = BRApi.Utilities.GetFileShareFolder(si,FileShareFolderTypes.FileShareRoot, Nothing) & "\System\Contents\Data_Integration\OMD\execution"
						Dim year = timeStamp.Year
						Dim month = "M" & timeStamp.Month.ToString
						Dim day = "17"
						Dim jobId = "cf4a8f29-c4cc-4bb2-baa0-62c32bc4c3f6"
						Dim fullTrgFolder = trgFolder & "\" & year.ToString & "\" & month & "\" & day & "\" & jobId
						
						Dim trgFileName = "reportCard.json"
'						BRApi.ErrorLog.LogMessage(si,"path",fullTrgFolder & "\" & trgFileName)
						Dim content = File.ReadAllText(fullTrgFolder & "\" & trgFileName)
						Dim jsonObj = JsonConvert.DeserializeObject(content)
						Dim costCenterList As New List(Of String)
						Dim userId As String = BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName).User.Description
						Dim dt_queue As New DataTable 
							
						dt_queue.Columns.Add(New DataColumn("CostCenter", GetType(String)))
						dt_queue.Columns.Add(New DataColumn("UniqueID", GetType(Guid)))
						dt_queue.Columns.Add(New DataColumn("PlanYear", GetType(Integer)))
						dt_queue.Columns.Add(New DataColumn("UserID", GetType(String)))
						dt_queue.Columns.Add(New DataColumn("Submitted_On", GetType(Date)))
						If jsonObj.ContainsKey("CostCenter") Then
							For Each cc In jsonObj("CostCenter")
								costCenterList.Add(cc)
								Dim dr_watcher As DataRow = dt_queue.NewRow
								
								dr_watcher("CostCenter") = cc.ToString.ToUpper
								dr_watcher("UniqueID") = Guid.NewGuid
								dr_watcher("PlanYear") = year
								dr_watcher("UserID") = userId
								dr_watcher("Submitted_On") = timeStamp
								
								dt_queue.rows.Add(dr_watcher)
							Next
						End If
						Dim target_si As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si, "Workforce", openAppResult.Success)
						
'						BRApi.ErrorLog.LogMessage(si,"file", String.Join(",",costCenterList))
						If dt_queue IsNot Nothing AndAlso dt_queue.Rows.Count > 0 Then
							BRApi.Database.SaveCustomDataTable(target_si, "Application", "XFW_PLP_WMT_Queue", dt_queue, False)
						End If	
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
					Case Is = ExtenderFunctionType.ExecuteExternalDimensionSource
						'Add External Members
						Dim externalMembers As New List(Of NameValuePair)
						externalMembers.Add(New NameValuePair("YourMember1Name","YourMember1Value"))
						externalMembers.Add(New NameValuePair("YourMember2Name","YourMember2Value"))
						Return externalMembers
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Test_AVMK">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq

Namespace OneStream.BusinessRule.Extender.Test_AVMK
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Dim dashMaintName As String = "FCP_PUT_Parameters_INTL_ES_Actual"
				Dim lstChildren As List(Of NameValuePair) = Me.GetDashboardParam_ComboBoxItemsForBoundList(si, $"{dashMaintName}_MemberFilter_Entity")
				
				BRApi.ErrorLog.LogMessage(si, JsonConvert.SerializeObject(lstChildren))

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Function GetDashboardParam_ComboBoxItemsForBoundList(ByVal si As SessionInfo, ByVal paramName As String) As List(Of NameValuePair)
			Try		
				Dim objDashboardParamDisplayInfo As DashboardParamDisplayInfo = BRApi.Dashboards.Parameters.GetParameterDisplayInfo(si, False, Nothing, paramName)
				If objDashboardParamDisplayInfo IsNot Nothing Then
					If objDashboardParamDisplayInfo.ComboBoxItemsForBoundList.Count > 0 Then
						Return objDashboardParamDisplayInfo.ComboBoxItemsForBoundList
					Else
						'Me.AddLogMessage(si, $"Invalid Filter Param (GetDashboardParam_ComboBoxItemsForBoundList). Dashboard Parameter {paramName} must return at least one member.")
					End If
				Else
					'Me.AddLogMessage(si, $"Invalid Filter Param: Couldn't find Dashboard Parameter {paramName}")
				End If
				
				Return Nothing
			Catch ex As Exception
				'Me.AddLogMessage(si, $"Exception during GetDashboardParam_ComboBoxItemsForBoundList: {ex.Message}.")
				Return Nothing
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="test_ent_attributes">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.test_ent_attributes
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						Dim dt As New DataTable
						dt.Columns.Add("Child")
						dt.Columns.Add("Parent")
						dt.Columns.Add("Text1")
						dt.Columns.Add("Text2")
						dt.Columns.Add("Text3")
						dt.Columns.Add("Text4")
						dt.Columns.Add("Text5")
						dt.Columns.Add("Text6")
						Dim entityList As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "ENT", "E#Walmart_Total_Company.Base", True)														
				 		For Each entity In entityList
							Dim row As DataRow = dt.NewRow
							row("Child") = entity.Member.Name
							Dim entityId As Integer = BRApi.Finance.Members.GetMemberId(si, DimTypeID.Entity, entity.Member.Name)
							Dim objDimPk As DimPk = BRApi.Finance.Dim.GetDimPk(si, "ENT")
							Dim parentlist = BRApi.Finance.Members.GetParents(si, objDimPk, entityId, False)
							row("Parent") = parentlist(0)
							Dim timeid As Integer = BRApi.Finance.Members.GetMemberId(si, DimTypeID.Time, "2023")
							row("Text1") = BRApi.Finance.Entity.Text(si, entityId, 1, ScenarioTypeId.Budget, timeid)
							row("Text2") = BRApi.Finance.Entity.Text(si, entityId, 2, ScenarioTypeId.Budget, timeid)
							row("Text3") = BRApi.Finance.Entity.Text(si, entityId, 3, ScenarioTypeId.Budget, timeid)
							row("Text4") = BRApi.Finance.Entity.Text(si, entityId, 4, ScenarioTypeId.Budget, timeid)
							row("Text5") = BRApi.Finance.Entity.Text(si, entityId, 5, ScenarioTypeId.Budget, timeid)
							row("Text6") = BRApi.Finance.Entity.Text(si, entityId, 5, ScenarioTypeId.Budget, timeid)
							dt.Rows.Add(row)
						Next
					
						Dim sCSV As Text.StringBuilder = CSVBuilder(dt)
						Dim filename As String = "Entity_Attribute_Mappings.csv"
						Dim folder As String = BRApi.Utilities.GetFileShareFolder(si,FileShareFolderTypes.ApplicationIncoming, Nothing).Replace("Incoming",String.Empty) & "\Groups\Everyone"
						Dim filepath As String = folder & "\"  & filename
						Using writer As System.IO.StreamWriter = New StreamWriter(filepath)
							writer.WriteLine(sCSV.ToString)
						End Using
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Function CSVBuilder(dt As DataTable) As Text.StringBuilder
			Dim sCSV As New Text.StringBuilder
			If dt IsNot Nothing Then
				If dt.Rows.Count > 0 Then
					
					For Each dc As DataColumn In dt.Columns
						sCSV.Append(dc.ColumnName & ",")
					Next
					sCSV.Remove(sCSV.Length-1,1)
					sCSV.Append(Environment.NewLine)
					For Each dr As DataRow In dt.Rows
						For Each dc As DataColumn In dt.Columns
	     					sCSV.Append(dr(dc).ToString & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
					Next
				End If
			End If
			Return sCSV
    	End Function
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="test_ER">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.test_ER
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						'Dim paval As String=BRApi.Dashboards.Parameters.GetLiteralParameterValue(si,False,"Param_Entity_Corp")	
						'Dim val As String = args.NameValuePairs.XFGetValue("Param_Entity_Corp")
						Dim val As String = args.NameValuePairs.XFGetValue("Period")
						'Dim ScenarioTime As List(Of String) = Me.getListScenarioTime(si,api)
						BRapi.ErrorLog.LogMessage(si,val)
						Dim strsplit As String() = val.Split("-")
						Dim perval As String = strsplit(0)
						Dim vScenario As String= "Forecast_Working"
						Dim curScenarioID As Integer = si.WorkflowClusterPk.TimeKey
						Dim curScenario As String = TimeDimHelper.GetNameFromId(curScenarioID)
						Dim curPeriod As String = si.WorkflowClusterPk.TimeKey
						BRapi.ErrorLog.LogMessage(si,"WF Details" & curPeriod & "-" & perVal & "," & curScenario)
						'Dim wfUnitPKToClear As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, "Admin_corp.Corp_Admin_Adj", "Actual", "2021M12")
						Dim wfUnitPKToClear As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, "Corporate.Corp_Fcst_Functional Adj", "Forecast_Working", "2022")
						'brapi.Import.Process.ClearStageData(si, wfUnitPKToClear, Nothing)
						'brapi.Import.Process.ExecuteRetransform(si, wfUnitPKToClear)
						Dim dimensionName As String = "Tm"
						'Dim strQuery As String = "Select Distinct " & dimensionName & " As " & StageTableFields.StageRuleProfiles
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Test_h0p029b">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.Test_h0p029b
	Public Class MainClass
		Dim log As New Text.StringBuilder
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Dim log As New Text.StringBuilder
				Dim objList = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "Detail_Account", "A#PK_Total.Base", True, Nothing, Nothing)
				For Each m In objList
					
					Dim objList2 = BRApi.Finance.Members.GetParents(si, BRApi.Finance.Dim.GetDimPk(si, "Detail_Account"), m.Member.MemberId, False, Nothing)
					If objList2 IsNot Nothing AndAlso objlist2.Count > 0 Then
						For Each c In objList2
							If c.Name.XFContainsIgnoreCase("PK") Then
							log.Append($"{m.Member.Name},{c.Name},")
							End If
						Next
					Else 
						log.Append($"{m.Member.Name}")
					End If
					log.Append(Environment.NewLine)
				Next 
				BRApi.ErrorLog.LogMessage(si, "Mappings", log.toString)
				Return Nothing
				Dim sql As New Text.StringBuilder
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					BRAPi.Database.ExecuteSql(dbConnApp, "Drop Table [dbo].[XFT_ANR_Comments]", True)
					sql.AppendLine("CREATE TABLE [dbo].[XFT_ANR_Comments] ")
					sql.AppendLine("( ") 
					sql.AppendLine(" [ID] int NOT NULL IDENTITY(101, 1) PRIMARY KEY,") 
					sql.AppendLine(" [TimeStamp] DATETIME DEFAULT CURRENT_TIMESTAMP, ")
					sql.AppendLine(" [User] [varchar] (100), ") 
					sql.AppendLine(" [Report] [varchar] (200) , ") 								
					sql.AppendLine(" [Period] [varchar] (20), ") 
					sql.AppendLine(" [Account] [varchar] (100), ")
					sql.AppendLine(" [Comment][varchar] (Max) ")
					sql.AppendLine(")")
					BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)
					
					BRAPi.Database.ExecuteSql(dbConnApp, "Drop Table [dbo].[XFT_ANR_CommentsReactions]", True)
					sql = New Text.StringBuilder
					sql.AppendLine("CREATE TABLE [dbo].[XFT_ANR_Reactions] ")
					sql.AppendLine("( ") 
					sql.AppendLine(" [ID] int NOT NULL IDENTITY(101, 1) PRIMARY KEY,") 
					sql.AppendLine(" [TimeStamp] DATETIME DEFAULT CURRENT_TIMESTAMP, ")
					sql.AppendLine(" [User] [varchar] (100), ") 
					sql.AppendLine(" [Report] [varchar] (200) , ") 								
					sql.AppendLine(" [Period] [varchar] (20), ") 
					sql.AppendLine(" [Account] [varchar] (100), ")
					sql.AppendLine(" [Reaction][int] ")
					sql.AppendLine(")")
					BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)
					
				End Using
				
				Return Nothing
				Dim CVDT =  BRApi.Import.Data.FdxExecuteCubeView(si, "ANR_001_Sub_Packages", String.Empty, String.Empty, String.Empty, String.Empty, String.Empty, Nothing, False, True, Nothing, 8, False)
				Dim CVView = New DataView(CVDT)
				CVView.Sort = "VvsFcst Desc"
				Dim CVSortedDT = CVView.ToTable
				
				CVSortedDT.Columns.Add("CF", GetType(Decimal))
				Dim totalVariance As Decimal = 0
				For i = 0 To CVSortedDT.Rows.Count - 1
					totalVariance = totalVariance + CVSortedDT.Rows(i)("VvsFcst")
					CVSortedDT.Rows(i)("CF") = totalVariance
				Next
				
				CVSortedDT.Columns.Add("CF_Percentage", GetType(Decimal))
				For i = 0 To CVSortedDT.Rows.Count - 1
					CVSortedDT.Rows(i)("CF_Percentage") = Math.Round(CVSortedDT.Rows(i)("CF") / totalVariance, 5) * 100
				Next
				
				Me.printDT(CVSortedDT, 1000, True)
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			Finally
				brapi.ErrorLog.LogMessage(si, "h0p029b-Trace", Me.log.toString)
			End Try
		End Function
		
		Public Sub appendLog(ByVal Message As String)
			Me.log.append($"{Message}{Environment.NewLine}")
		End Sub
		
		Public Sub printDT(ByRef dt As DataTable, ByRef maxRows As Integer, ByVal containsHeader As Boolean)
			If (dt Is Nothing OrElse dt.Rows.Count = 0) OrElse maxRows < 1 Then
				Exit Sub
			End If
			Dim currentRow As Integer = 0
			Dim logLines As StringBuilder = New StringBuilder
			logLines.Append(Environment.NewLine)
			If containsHeader Then
				For Each Col As DataColumn In Dt.Columns
					logLines.Append($"{col.ColumnName},")
				Next	
			End If
			'Remove extra trailing comma from header row
			logLines.Length = logLines.Length - 1
			logLines.Append(Environment.NewLine)
			For Each row As DataRow In dt.Rows	
				If currentRow < maxRows Then					
					logLines.Append(String.Join(",", row.ItemArray))
					logLines.Append(Environment.NewLine)
					currentRow = currentRow + 1
				Else
					Exit For
				End If
			Next
			Me.appendLog(logLines.ToString)
		End Sub
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Test_Jaimie">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="ACM_Custom_Connector" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="Email_Helper" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

'Imports System.IO
Imports System.IO.Compression

Namespace OneStream.BusinessRule.Extender.Test_Jaimie
	Public Class MainClass
		Dim failSafe As Integer = 0
		Dim myLog As String = "testlog"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				
				
				'Dim targetWorkflowUnitClusterPk As New WorkflowUnitClusterPk(New Guid("7aa68126-4a18-4122-a663-0c9e2a4f9b5e"),"1048584","2024000000")
				'Dim targetWorkflowUnitClusterPk As New WorkflowUnitClusterPk(New Guid("00000000-0000-0000-0000-000000000000"),"-1","-1")
				Dim targetWorkflowUnitClusterPk As New WorkflowUnitClusterPk()
				
				
				
				Dim configSettings1 As AppServerConfigSettings = AppServerConfig.GetSettings(si)
				Dim folderPath1 As String = FileShareFolderHelper.GetDataManagementExportUsernameFolderForApp(si, True, configSettings1.FileShareRootFolder, si.AppToken.AppName) & "\" & DateTime.UtcNow.ToString("yyyyMMdd") & "\StageArchives" 
				'Dim folderPath As String = FileShareFolderHelper.GetGroupsFolderForApp(si,True,configSettings.FileShareRootFolder,si.AppToken.AppName) & "\Administrators"
				
				
				BRApi.Import.Data.ExportStageArchives(si, targetWorkflowUnitClusterPk, folderPath1, False)
				brapi.ErrorLog.LogMessage(si,folderPath1)
				
				Return Nothing
''				'delete existing files
''				Dim configSettings0 As AppServerConfigSettings = AppServerConfig.GetSettings(si)
''				Dim tempDeletePath As String = FileShareFolderHelper.GetDataManagementExportUsernameFolderForApp(si, True, configSettings0.FileShareRootFolder, si.AppToken.AppName) & "\" & DateTime.UtcNow.ToString("yyyyMMdd") & "\StageArchives\Forecast\TEST"
''				'Dim folderPath As String = FileShareFolderHelper.GetGroupsFolderForApp(si,True,configSettings.FileShareRootFolder,si.AppToken.AppName) & "\Administrators"
				
''				For Each f As String In Directory.GetFiles(tempDeletePath & "\FCST_eCF_Adj.Import")
''					File.Delete(f)
''				Next
''				Directory.Delete(tempDeletePath & "\FCST_eCF_Adj.Import")
''				Directory.Delete(tempDeletePath)
''				Return Nothing
				
				
'				Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				
'					Dim sql As String = "SELECT sa.*
'					  FROM [StageArchivesInformation] sa
'					  INNER JOIN [WorkflowProfileHierarchy] ph on sa.Wfk = ph.ProfileKey
'					  WHERE ph.ProfileName = 'FCST_eCF_Adj.Import'"
'					Dim dtResults As DataTable = BRApi.Database.ExecuteSql(dbConn,sql,False)
'					If dtResults IsNot Nothing And dtResults.Rows.Count > 0 Then
					
'						'Dim decoded = System.Text.Encoding.UTF8.GetString(Decompress(dt.Rows(0)("SourceFileBytes")))
'						Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
'						'Dim folderPath As String = FileShareFolderHelper.GetDataManagementExportUsernameFolderForApp(si, True, configSettings.FileShareRootFolder, si.AppToken.AppName) & "\" & DateTime.UtcNow.ToString("yyyyMMdd") & "\StageArchives\" & scenarioName & "\" & timeName
'						Dim folderPath As String = FileShareFolderHelper.GetGroupsFolderForApp(si,True,configSettings.FileShareRootFolder,si.AppToken.AppName) & "\Administrators"
'						Dim _path1 As String = path.Combine(folderPath,"testExportFile_8_18_1.txt")
'						Dim _path2 As String = path.Combine(folderPath,"testExportFile_8_18_2.csv")
'						brapi.ErrorLog.LogMessage(si,"path2 " & _path2)
						
'						Dim rawByteArray As Byte() = dtResults(0)("SourceFileBytes")
'						brapi.ErrorLog.LogMessage(si,"here1")
						
'						'Using originalFileStream As FileStream = rawByteArray

'						'Dim memStream As New MemoryStream(rawByteArray)
'						'XFZip.Unzip(rawByteArray,_path2)
						
						
'						'XFZip.Unzip()
'						'File.WriteAllBytes(_path1, rawByteArray)
'						brapi.ErrorLog.LogMessage(si,"here2")
'						'Dim reformattedBytes As Byte() = System.Text.Encoding.UTF8.GetBytes()
'						'Dim unzippedByteArray As Byte() = Decompress(rawByteArray)
						
'						'Dim formattedText As String = System.Text.Encoding.UTF8.GetString(rawByteArray)
'						'Dim formattedText As String = System.Text.Encoding.ASCII.GetString(rawByteArray)
'						'Dim formattedText As String = System.Text.Encoding.UTF7.GetString(rawByteArray)
'						'Dim formattedText As String = System.Text.Encoding.BigEndianUnicode.GetString(rawByteArray)
'						'Dim formattedText As String = System.Text.Encoding.Default.GetString(rawByteArray)
'						'Dim formattedText As String = System.Text.Encoding.Unicode.GetString(rawByteArray)
'						Dim formattedText As String = System.Text.Encoding.UTF32.GetString(rawByteArray)
						
'						'Dim formattedText As String = System.Text.Encoding.UTF8.GetString(unzippedByteArray)
'						brapi.ErrorLog.LogMessage(si,"here3")
'						File.WriteAllText(_path2, formattedText)
'						'brapi.ErrorLog.LogMessage(si,"here4")
'					Else
'						brapi.ErrorLog.LogMessage(si,"No data found")
'					End If
'				End Using
				
				
				
				'Define the workflow cluster used as the starting point to extract from
				Dim wfClusterPk As New WorkflowUnitClusterPk
				Dim wfProfileName As String = String.Empty
				Dim scenarioName As String = String.Empty
				'Dim timeName As String = String.Empty
				
				Select Case args.FunctionType					
					Case Is = ExtenderFunctionType.Unknown
						'Set the parent workflow unit to extract input profiles for							
						wfProfileName = "FCST_eCF_Adj"'"Houston"
						scenarioName = "Forecast"
						'timeName = "TEST"
						'wfClusterPk = BRAPi.Workflow.General.GetWorkflowUnitClusterPk(si, wfProfileName, scenarioName, timeName)								
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						'Since this is being called from a DataManagement job, get the wfCluster from the parameters defined in the DataMgmt sequence
						wfProfileName = args.NameValuePairs("WfProfileName")
						scenarioName = args.NameValuePairs("ScenarioName")
						'timeName = args.NameValuePairs("TimeName")							
				End Select
				
				wfClusterPk = BRAPi.Workflow.General.GetWorkflowUnitClusterPk(si, wfProfileName, scenarioName, Nothing)
				'brapi.ErrorLog.LogMessage(si,"ScenarioKey: " & wfClusterPk.ScenarioKey & vbnewline & "TimeKey: " & wfClusterPk.TimeKey)
				
				'Prepare File path
				Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
				Dim folderPath As String = FileShareFolderHelper.GetDataManagementExportUsernameFolderForApp(si, True, configSettings.FileShareRootFolder, si.AppToken.AppName) & "\" & DateTime.UtcNow.ToString("yyyyMMdd") & "\StageArchives\" & scenarioName
				'Dim folderPath As String = FileShareFolderHelper.GetGroupsFolderForApp(si,True,configSettings.FileShareRootFolder,si.AppToken.AppName) & "\Administrators"
				
				
				
				
				'If Not Directory.Exists(folderPath) Then Directory.CreateDirectory(folderPath)
				brapi.ErrorLog.LogMessage(si,$"folderPath : {folderPath}")				
				'Export data for each descendant workflow profile
				Dim profileInfos As List(Of WorkflowProfileInfo) = BRAPi.Workflow.Metadata.GetRelatives(si, wfClusterPk, WorkflowProfileRelativeTypes.Descendants, WorkflowProfileTypes.InputImportChild)
				If Not profileInfos Is Nothing Then
					For Each profileInfo As WorkflowProfileInfo In profileInfos		
						brapi.ErrorLog.LogMessage(si,profileInfo.Name & " | " & profileInfo.ProfileKey.ToString)
						'Dim wfClusterPkChild As New WorkflowUnitClusterPk(profileInfo.ProfileKey, wfClusterPk.ScenarioKey, wfClusterPk.TimeKey)
						'Dim wfClusterPkChild As New WorkflowUnitClusterPk(profileInfo.ProfileKey, wfClusterPk.ScenarioKey, -1)
						Dim wfClusterPkChild As New WorkflowUnitClusterPk(profileInfo.ProfileKey, -1, -1)
						'brapi.ErrorLog.LogMessage(si,$"Profile: {profileInfo.ProfileKey}{vbnewline}ScenarioKey: {wfClusterPk.ScenarioKey}")
						If wfClusterPkChild Is Nothing Then
							brapi.ErrorLog.LogMessage(si,"No child cluster primary key found to match scenario and time")
						Else
							brapi.ErrorLog.LogMessage(si,"exporting files...")
							'Dim testPk As WorkflowUnitClusterPk
							BRAPi.Import.Data.ExportStageArchives(si, wfClusterPkChild, folderPath, False)
						End If
					Next
				End If

				Return Nothing
			Catch ex As Exception
				brapi.ErrorLog.LogMessage(si,"Final Log: " & mylog)
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Function Decompress(ByVal toDecompress As Byte()) As Byte()
		    ' Get the stream of the source file.
		    Using inputStream As MemoryStream = New MemoryStream(toDecompress)

		        ' Create the decompressed stream.
		        Using outputStream As MemoryStream = New MemoryStream()
		            Using decompressionStream As DeflateStream =
		                New DeflateStream(inputStream, CompressionMode.Decompress)

		                ' Copy the decompression stream
		                ' into the output file.
		                decompressionStream.CopyTo(outputStream)

		            End Using

		            Decompress = outputStream.ToArray

		        End Using
		    End Using
		End Function	

	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Test_K">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.Test_K
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				
				Dim targetmbr As String = String.Empty
				Dim Ud3mbr As String = "Physical"'args.GetSource("U3#")	
				
				Dim Ud3mbrId As Integer = BRApi.Finance.Members.GetMemberId(si, DimType.UD3.Id, Ud3mbr)
				
				
				Dim SAMS_UD3DimPk As DimPk = BRApi.Finance.Dim.GetDimPk(si, "Channel_SAMS")
			Dim SAMSUD3basembrs As List(Of Member) = BRApi.Finance.Members.GetBaseMembers(si, SAMS_UD3DimPk, Ud3mbrId)
			If SAMSUD3basembrs.Count <> 0 Then
			   	targetmbr = SAMSUD3basembrs(0).Name.ToString
			Else
				targetmbr = Ud3mbr 
			End If
			BRApi.ErrorLog.LogMessage(si,targetmbr)
				
'				Dim Ud1mbr As String = "Tobacco"'args.GetSource("U1#")
''				Dim Entmbr As String = args.GetTarget("E#")
'				Dim targetmbr As String = String.Empty
'				Dim Ud1mbrId As Integer = BRApi.Finance.Members.GetMemberId(si, DimType.UD1.Id, Ud1mbr)
'				Dim SAMS_UD1DimPk As DimPk = BRApi.Finance.Dim.GetDimPk(si, "Merch_SAMS_Detail")
'						Dim SAMSUD1basembrs As List(Of Member) = BRApi.Finance.Members.GetBaseMembers(si, SAMS_UD1DimPk, Ud1mbrId)
'						If SAMSUD1basembrs.Count <> 0 Then
'							targetmbr = SAMSUD1basembrs(0).Name.ToString
'						Else
'							targetmbr = Ud1mbr
'						End If
'			 BRApi.ErrorLog.LogMessage(si,targetmbr)
'				Select Case args.FunctionType
					
'					Case Is = ExtenderFunctionType.Unknown
						
'					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
'					Case Is = ExtenderFunctionType.ExecuteExternalDimensionSource
'						'Add External Members
'						Dim externalMembers As New List(Of NameValuePair)
'						externalMembers.Add(New NameValuePair("YourMember1Name","YourMember1Value"))
'						externalMembers.Add(New NameValuePair("YourMember2Name","YourMember2Value"))
'						Return externalMembers
'				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Test_Member">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.Test_Member
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
					Case Is = ExtenderFunctionType.ExecuteExternalDimensionSource
						'Add External Members
						Dim externalMembers As New List(Of NameValuePair)
						externalMembers.Add(New NameValuePair("YourMember1Name","YourMember1Value"))
						externalMembers.Add(New NameValuePair("YourMember2Name","YourMember2Value"))
						Return externalMembers
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Test_s0s0acj">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.Test_s0s0acj
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
'				Select Case args.FunctionType
						
'					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Me.certify(si, globals, api, args)
						
'				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Function certify(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs)
			Try
				
'				Dim CurrentCV As String = args.NameValuePairs.XFGetValue("CurrentCV",String.Empty)
'				Dim CurrentScenario As String = args.NameValuePairs.XFGetValue("CurrentScenario",String.Empty)
'				Dim CurrentYear As String = args.NameValuePairs.XFGetValue("CurrentYear",String.Empty)
				
				Dim CurrentCV As String = "Enterprise View"
				Dim CurrentScenario As String = "Plan_Working"
				Dim CurrentYear As String = "2021"
				
				
				
				
				Dim cfrflowlist As List(Of String) = New List(Of String)({"RPT_USD", "RPT_Peg"})
				Dim cfrud4list As List(Of String) = New List(Of String)({"Ext_Reported", "Ext_Adjusted"})
				
				Dim cvParams As New Dictionary(Of String, String)
				cvParams.Add("cfrScenario", CurrentScenario)
				cvParams.Add("cfrTime", CurrentYear)
				cvParams.Add("cfrflow", "Total_Flow")
				cvParams.Add("cfrud4", "Ext_Adjusted")
				
				Dim dt As new DataTable
				Dim dtt As DataTable = CVRender(si, CurrentCV , cvParams)
'				Dim JobID As Integer = CertifyCheck(si, CurrentCV, CurrentScenario, CurrentYear, True)
				Dim JobID As Integer = 333 
				
				If dtt IsNot Nothing AndAlso dtt.Rows.Count > 0  Then
				
					dt = dtt.Clone()
					For Each cfrflow In cfrflowlist
						For Each cfrud4 In cfrud4list
							For M = 1 To 1 Step 1 
								Dim cvParamsLoop As New Dictionary(Of String, String)
								cvParamsLoop.Add("cfrScenario", CurrentScenario)
								cvParamsLoop.Add("cfrTime", CurrentYear)
								cvParamsLoop.Add("cfrflow", cfrflow)
								cvParamsLoop.Add("cfrud4", cfrud4)
								Dim dtTemp As DataTable = CVRender(si, CurrentCV , cvParamsLoop )
								If dtTemp IsNot Nothing Then
									dt.Merge(dtTemp)
								End If
							Next
						Next
					Next
					
					
					If dt IsNot Nothing AndAlso dt.Rows.Count > 0 Then
						dt.Columns.Remove("RowHdr0ParentName")
						dt.Columns.Add(New DataColumn("Amount", System.Type.GetType("System.Decimal")))
						dt.AcceptChanges()
						Dim maxRows As Integer = dt.Rows.Count
						For rowIndex As Integer = 0 To maxRows - 1
							Dim row As DataRow = dt.Rows(rowIndex)
							
							row("Time") = CurrentYear & "M1"
							row("Amount") = row("V" & CurrentYear & "M1")
						
							
							For M = 2 To 12 Step 1
								Dim newRow As Datarow = dt.NewRow()
								newRow.ItemArray = dt.Rows(rowIndex).ItemArray
								If Math.Abs(newRow("V" & CurrentYear & "M" & M)) <> Decimal.Zero Then
									newRow("Time") = CurrentYear & "M" & M
									newRow("Amount") = newRow("V" & CurrentYear & "M" & M)
									dt.Rows.Add(newRow)
								End If	
							Next
							
						Next
						
						For M = 1 To 12 Step 1
							dt.Columns.Remove("V" & CurrentYear & "M" & M)
						Next
						
'						dt = dt.Rows.Cast(Of DataRow)().Where(Function(row) Not row.ItemArray.All(Function(field) TypeOf field Is System.DBNull Or String.Compare(TryCast(field, String).Trim(), String.Empty) = 0)).CopyToDataTable()
						
						dt.AcceptChanges
						
						
						Me.PrintDT(si, dt, "PRINT DT12:" & dt.Rows.Count.XFToString)
						
						
						
						'Save DataTable 
'						Me.SaveDataTable(si, "XFT_CFR_Current_Data", dt, JobID)
					End If	
				End If
				
			Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function		
		
		Public Function CVRender(ByRef si As SessionInfo, ByVal cubeViewName As String, ByVal vParams As Dictionary(Of String, String)) As DataTable
			Dim value As New NameValueFormatBuilder 
			Dim instance As New XFIfActionExpr("CVFilter", value)
			value = instance.NameValueFormatBuilder
			value.ApplyNameValuePairsFromDictionary(vParams)
			Dim entityDimensionName As String = ""
			Dim entityMemFilter As String = ""
			Dim scenarioDimName As String = ""
			Dim scenarioMemFilter As String = ""
			Dim timeMemFilter As String = ""
			Dim includeCellTextCols As Boolean = False
			Dim useStandardFactTableFields As Boolean = True
			Dim useGenericTimeColNames As Boolean = True
			Dim parallelQueryCount As Integer = 8
			Dim logStatistics As Boolean = False
			Dim dt As DataTable = Nothing
			Try
				dt = BRApi.Import.Data.FdxExecuteCubeView(si, cubeViewName, entityDimensionName, entityMemFilter, scenarioDimName, scenarioMemFilter, timeMemFilter, value, includeCellTextCols, useStandardFactTableFields, Nothing, parallelQueryCount, logStatistics)
				If dt IsNot Nothing Then					
					Return dt
				Else
					Return Nothing
				End If
			Catch e As Exception
				Brapi.ErrorLog.LogMessage(si,$"getCV({cubeviewName}, {string.Join(":", vParams)}) failed with error - {e}")
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try
		End Function
		
		
		
		Public Function CertifyCheck(ByRef si As SessionInfo, ByVal CurrentCV As String, ByVal CurrentScenario As String, ByVal CurrentYear As String, ByVal ReturnID As Boolean) As Integer
			Try
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					Dim dt As DataTable = BRApi.Database.ExecuteSql(dbConnApp, "SELECT * FROM [dbo].[XFT_CFR_Control_Table] Where ViewName='" & $"{CurrentCV}' AND Scenario='" & $"{CurrentScenario}' AND Year='" & $"{CurrentYear}' AND Status='Certified' ", True)
					If dt IsNot Nothing Then
						If ReturnID Then
							Return CType(dt.Rows(0)("ID"),Integer)
						Else
							Return dt.Rows.Count
						End If	
					Else 
						Return 0
					End If
				End Using
			Catch e As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try		
			
		End Function
		
		
		Public Function SaveDataTable(ByVal si As SessionInfo, ByVal tableName As String, ByVal dt As DataTable ,ByVal JobID As String)
			Try
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
						Dim sql As New Text.StringBuilder
						If tableName = "XFT_CFR_Current_Data" Then
							sql.AppendLine("TRUNCATE TABLE [dbo].[XFT_CFR_Current_Data]")
							BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)
						End If	
				End Using
				
				Dim newColumn As New DataColumn("ID", GetType(Decimal))     
				newColumn.DefaultValue = JobID.XFConvertToDecimal
				dt.Columns.Add(newColumn)
'				dt.Columns("VPeriodic").ColumnName = "Amount"
					
				BRApi.Database.SaveCustomDataTable(si, "App", tableName, dt, True)
				
			Return Nothing
			Catch ex As Exception
			Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
		End Try
		End Function
		
		
		
		Public Function PrintDT(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal Desc As String)
		Try
			 'Print Table
			 Dim dtprint As New Text.StringBuilder
				 For Each dc As DataColumn In dt.Columns
					dtprint.Append(dc.ColumnName & ",")
				 Next
				 dtprint.Remove(dtprint.Length - 1, 1)
				 dtprint.Append(Environment.NewLine)
				 For Each dr As DataRow In dt.Rows										
					For Each dc As DataColumn In dt.Columns
						dtprint.Append(dr(dc.ColumnName) & ",")
					Next
					dtprint.Remove(dtprint.Length - 1, 1)
					dtprint.Append(Environment.NewLine)
				 Next
				 BRApi.ErrorLog.LogMessage(si, Desc,dtprint.ToString)
		Return Nothing		 
		Catch ex As Exception                
	   		Throw ErrorHandler.LogWrite(si,New XFException(si,ex))
		End Try		 
		End Function
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="test_wmtus">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics
Namespace OneStream.BusinessRule.Extender.test_wmtus
	Public Class MainClass
		
		
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
'				Select Case args.FunctionType
					
'					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim sp As New Stopwatch()
			            sp.Start()
						Dim ActivityID As String=String.Empty
						Dim Target As String=String.Empty
						Dim TargetRule As String=String.Empty
						ActivityID = args.NameValuePairs.XFGetValue("ActivityID")
						Target = args.NameValuePairs.XFGetValue("Target")
						TargetRule = args.NameValuePairs.XFGetValue("TargetRule")
						Dim AppID As String = args.NameValuePairs.XFGetValue("AppID")
						Dim uniquecclist = Me.GetCCFromWatcher(si,ActivityID)
						Me.UpdateWatcher(si,globals,2, uniquecclist,ActivityID)
						Dim dt_watcher As DataTable=Nothing
						Dim DMparams As New Dictionary(Of String, String)
						Dim newSeshInfo As New SessionInfo
						Dim Task As New TaskActivityItem
'						DMparams.Add("ActivityID","TRG2")
						If Target.XFEqualsIgnoreCase("ENT")
							Task = BRApi.Utilities.ExecuteDataMgmtSequence(si, TargetRule, DMparams)
						Else
							newSeshInfo = GetOtherAppConnectionString(si,Target,AppID)
							Task = BRApi.Utilities.ExecuteDataMgmtSequence(newSeshInfo, TargetRule, DMparams)
						End If
						
						Dim AuthSessionID As String = task.AuthSessionID.ToString
						Dim UniqueID As Guid = task.UniqueID
						Dim Description As String = task.Description.ToString
						Dim UserName As String= task.UserName.ToString
'						Dim TaskActivityStatus As String = task.TaskActivityStatus.ToString
'						Dim TaskActivityStatus As String = task.TaskActivityStatusStr
						
'						BRAPi.ErrorLog.LogMessage(si, "TaskActivityStatus:" & TaskActivityStatus )
'						BRAPi.ErrorLog.LogMessage(si, "TaskActivityStatus2:" & TaskActivityStatus )
'						BRAPi.ErrorLog.LogMessage(si, "UniqueID:" & UniqueID.ToString )
'						BRAPi.ErrorLog.LogMessage(si, "AuthSessionID:" & AuthSessionID )
'						BRAPi.ErrorLog.LogMessage(si, "Description:" & Description )
'						BRAPi.ErrorLog.LogMessage(si, "TaskActivityStatus:" & TaskActivityStatus )
'						While TaskActivityStatus ="Completed"
'							   Task= BRAPI.TaskActivity.GetTaskActivityItem(newSeshInfo,UniqueID)
'						       TaskActivityStatus = task.TaskActivityStatusStr
'							   BRAPi.ErrorLog.LogMessage(si, "TaskActivityStatus:" & TaskActivityStatus )
'						End While
'						If TaskActivityStatus ="Completed"
'							UpdateWatcher(si, globals, 1)
'						Else If TaskActivityStatus ="Failed"
'							UpdateWatcher(si, globals, 3)
'						End If
						
					Dim sql As String = "SELECT TaskActivityStatus FROM TaskActivity WHERE UniqueID = '" & UniqueID.ToString & "'"
				    BRAPI.ErrorLog.LogMessage(si,"sql",sql.ToString)
'					Using dbConnFW As DbConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
'					dt = BRApi.Database.ExecuteSql(dbConnFW, sql, False)
'				End Using
'					    Dim sql As String = "SELECT TaskActivityStatus FROM TaskActivity WHERE AuthSessionID='"& AuthSessionID &"' AND UniqueID='"& UniqueID.ToString &"'AND UserName='" & UserName & "' and Description ='Step_EXP_to_WMTUS'"
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
							dt_watcher = BRAPi.Database.ExecuteSql(dbConnApp,sql,False)
						End Using
						If dt_watcher.Rows(0)("TaskActivityStatus") = CInt(TaskActivityStatus.Completed)
							UpdateWatcher(si, globals, 1, uniquecclist,ActivityID)
						Else If dt_watcher.Rows(0)("TaskActivityStatus") = CInt(TaskActivityStatus.Failed)
							UpdateWatcher(si, globals, 3, uniquecclist,ActivityID)
						End If
'						BRAPi.ErrorLog.LogMessage(si, "FINTABLE:",PrintDT(dt_watcher).ToString)
						sp.Stop()
						BRApi.ErrorLog.LogMessage(si ,"wmtustime" ,sp.ElapsedMilliseconds.ToString)	
''				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Private Function GetOtherAppConnectionString(ByVal si As SessionInfo,ByVal Target As String,ByVal AppID As String) As Object
			Try	
'				Dim AppID As String =String.Empty
'				If Target = "SAMS_Dev"
'					AppID= "94c97ba1-08f0-4ceb-870a-96f4d920c8e5"
'				Else If Target = "WMTUS_Dev"
'					AppID= "1076a653-b7db-4caa-8570-4fc92c3a0aa6"
'				End If
				Dim appUniqueID As Guid = ConvertHelper.ToGuid(AppID)
				Dim varAppToken As New ApplicationToken(si.AppToken.SHA1HashCode, Target, appUniqueID)
				Dim newSeshInfoOtherApp As New SessionInfo(ClientModuleType.Silverlight, si.WebServerUrlUsedByClient, si.AuthToken, varAppToken, si.Culture)
					
				Return newSeshInfoOtherApp

			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Private Function GetCCFromWatcher(ByVal si As SessionInfo,ByVal ActivityID As String) As Text.StringBuilder
			Try
				Dim uniquecclist As New Text.StringBuilder
				Dim dt_watcher As Datatable = Nothing
				Dim sql As String = "SELECT CostCenter FROM XFW_ExpensePlanning_Watcher WHERE (Run_Flag=0 OR Run_Flag =-1) AND ActivityID='"& ActivityID &"'"
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_watcher = BRAPi.Database.ExecuteSql(dbConnApp,sql,False)
				End Using
				
				If dt_watcher IsNot Nothing
					If dt_watcher.Rows.Count > 0
						For Each dr_watcher As DataRow In dt_watcher.Rows
							If Not uniquecclist.ToString.Contains(dr_watcher("CostCenter"))
								uniquecclist.Append("'" & dr_watcher("CostCenter") & "',")
							End If
						Next
						If uniquecclist.Length > 0 Then
							uniquecclist.Remove(uniquecclist.Length-1,1)
						End If
					End If
				End If
			Return uniquecclist
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Sub UpdateWatcher(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal successFlag As Integer, ByVal uniquecclist As Text.StringBuilder,ByVal ActivityID As String)
			Try		
					If Not String.IsNullOrEmpty(uniquecclist.ToString)
'					Dim uniqueidlist = DirectCast(globals.GetObject("EXP_Register_UniqueID"), Text.StringBuilder)
'					If Not String.IsNullOrEmpty(uniqueidlist.ToString)
						
						Dim sql As New Text.StringBuilder
						If successFlag =1 Then
						   
'							sql.Append("UPDATE XFW_ExpensePlanning_Watcher SET Wait_Flag=0,Processed_On='"& DateTime.Now &"',Requested_On='"& starttime &"' WHERE ActivityID='TRG2'  AND CostCenter In (" & uniqueidlist.ToString & ") ")
                           sql.Append("UPDATE XFW_ExpensePlanning_Watcher SET Run_Flag=1,Processed_On='"& DateTime.Now & "' WHERE Wait_Flag=0 AND ActivityID='"& ActivityID &"' AND CostCenter In (" & uniquecclist.ToString & ") ")
                           sql.Append("UPDATE XFW_ExpensePlanning_Watcher SET Run_Flag=0,Wait_flag=0,Processed_On='"& DateTime.Now & "' WHERE Wait_Flag=1 AND ActivityID='"& ActivityID &"' AND CostCenter In (" & uniquecclist.ToString & ") ")
						   
					   Else If successFlag = 3
							sql.Append("UPDATE XFW_ExpensePlanning_Watcher SET Run_Flag=-1,Processed_On='"& DateTime.Now &"' WHERE  ActivityID='"& ActivityID &"' AND CostCenter In (" & uniquecclist.ToString & ") ")
'						    sql = "UPDATE XFW_ExpensePlanning_Watcher SET Run_Flag=1,Wait_Flag=0,Processed_On='"& DateTime.Now &"',Requested_On='"& starttime &"' WHERE ActivityID='TRG2' AND Wait_Flag=1 AND Run_Flag=1  AND CostCenter In (" & uniquecclist.ToString & ") "
						Else If successFlag = 2
							sql.Append("UPDATE XFW_ExpensePlanning_Watcher SET Run_Flag=2,Processed_On=null,Requested_On='"& DateTime.Now &"'  WHERE  ActivityID='"& ActivityID &"' AND CostCenter In (" & uniquecclist.ToString & ") ")
						End If
'						BRAPI.ErrorLog.LogMessage(si,"sql update watcher",sql.ToString)
						If sql.Length>0
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
								BRAPi.Database.ExecuteActionQuery(dbConnApp,sql.ToString,False,False)
						End Using
					    End If
					Else
						BRAPI.ErrorLog.LogMessage(si, "No modified cost centers to update watcher")
					End If
'				End If
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		Private Function PrintDT(dt As DataTable) As Text.StringBuilder
			Dim sCSV As New Text.StringBuilder
			If dt IsNot Nothing Then
				If dt.Rows.Count > 0 Then
					
					For Each dc As DataColumn In dt.Columns
						sCSV.Append(dc.ColumnName & ",")
					Next
					sCSV.Remove(sCSV.Length-1,1)
					sCSV.Append(Environment.NewLine)
					For Each dr As DataRow In dt.Rows
						For Each dc As DataColumn In dt.Columns
	     					sCSV.Append(dr(dc).ToString & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
					Next
				End If
			End If
			Return sCSV
    	End Function
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="test3">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.test3
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
					
						Dim dt1 As DataTable = Nothing
						Dim sql1 As String = "SELECT * FROM XFW_S4_CT2CD_Mapping"
						Using dbConnApp As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							dt1 = BRApi.Database.ExecuteSql(dbConnApp, sql1, False)
						End Using
						
						
						Dim dt2 As DataTable = Nothing
						Dim sql2 As String = "SELECT * FROM XFW_S4_CT2CD_Mapping"
						Using dbConnApp As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							dt2 = BRApi.Database.ExecuteSql(dbConnApp, sql2, False)
						End Using

						
						PrintDT(si, "dt1", dt1)
						PrintDT(si, "dt2", dt2)
						
						dt1.PrimaryKey = Nothing
						dt2.PrimaryKey = Nothing
						
						dt2.Merge(dt1)
						
						PrintDT(si, "merged dt", dt2)
						
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Sub PrintDT(ByVal si As SessionInfo, ByVal desc As String, ByVal dt As DataTable)
			Dim sCSV As New Text.StringBuilder
			If dt IsNot Nothing Then
				If dt.Rows.Count > 0 Then
					For Each dc As DataColumn In dt.Columns
						sCSV.Append(dc.ColumnName & ",")
					Next
					sCSV.Remove(sCSV.Length-1,1)
					sCSV.Append(Environment.NewLine)
					For Each dr As DataRow In dt.Rows
						For Each dc As DataColumn In dt.Columns
	     					sCSV.Append(dr(dc).ToString & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
					Next
					BRApi.ErrorLog.LogMessage(si, desc, sCSV.ToString)
				End If
			End If
    	End Sub
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="TestBackLeveling">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_UTILITY" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports System.Net
Imports System.Net.Http
Imports System.Threading.Tasks
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq

Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_UTILITY
Namespace OneStream.BusinessRule.Extender.TestBackLeveling
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
'				Select Case args.FunctionType
					
'					Case Is = ExtenderFunctionType.Unknown
						
'					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
'					Case Is = ExtenderFunctionType.ExecuteExternalDimensionSource
'						'Add External Members
'						Dim externalMembers As New List(Of NameValuePair)
'						externalMembers.Add(New NameValuePair("YourMember1Name","YourMember1Value"))
'						externalMembers.Add(New NameValuePair("YourMember2Name","YourMember2Value"))
'						Return externalMembers
'				End Select


				'define the unique ID of the app you want to connect to - figure this out by logging the unique ID in the app you are pulling data from: "brapi.ErrorLog.LogMessage(si, "App UniqueID: " & si.AppUniqueID.ToString)"
				Dim appUniqueID As Guid = ConvertHelper.ToGuid("3151fcb7-dead-4b79-905c-75134361dd2a")				
				'pass in the app name and app unique id of the app you want to pull data from
				Dim varAppToken As New ApplicationToken(si.AppToken.SHA1HashCode, "Enterprise", appUniqueID)
				'create a new session in the app you want to pull data from
				Dim newSeshInfoOtherApp As New SessionInfo(ClientModuleType.Silverlight, si.WebServerUrlUsedByClient, si.AuthToken, varAppToken, si.Culture)
				If newSeshInfoOtherApp IsNot Nothing Then
					brapi.ErrorLog.LogMessage(si,"newSeshInfoOtherApp")
					Dim sqlStr As String = "Select * from [dbo].[XFT_Global_Parameters]"
					Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(newSeshInfoOtherApp)
									Using dt As DataTable = BRAPi.Database.ExecuteSql(dbConnApp, sqlStr, True)
										brapi.ErrorLog.LogMessage(si,"DT" & dt.Rows.Count)
										brapi.ErrorLog.LogMessage(newSeshInfoOtherApp,"DT" & dt.Rows.Count)
								End Using
							End Using
				End If
					Return Nothing
				
'				Dim destinationAppName As String = "Enterprise"
'				Dim newSeshInfoOtherApp As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si, destinationAppName, openAppResult.Success)




'				Dim consumerKey As String = "OneStreamWebAPIQA"
'        Dim consumerSecret As String = "2SzVFEbQDcYIDj3uQagBP0efTjHLMnGt5KwdUzqP17cZDP0fYQlOQ6JfkkrMcjY3"
'		Dim accessToken As String
'        Dim byte1 As Byte() = Encoding.ASCII.GetBytes("grant_type=client_credentials")
'        Dim bearerReq As HttpWebRequest = TryCast(WebRequest.Create("https://pfedprod.wal-mart.com/as/token.oauth2"), HttpWebRequest)
'        bearerReq.Accept = "application/json"
'        bearerReq.Method = "POST"
'        bearerReq.ContentType = "application/x-www-form-urlencoded"
'        bearerReq.ContentLength = byte1.Length
'        bearerReq.KeepAlive = False
'        bearerReq.Headers.Add("Authorization", "Basic " & Convert.ToBase64String(Encoding.[Default].GetBytes(consumerKey & ":" & consumerSecret)))
'        Dim newStream As Stream = bearerReq.GetRequestStream()
'		newStream.Write(byte1, 0, byte1.Length)
'		Dim bearerResp As WebResponse = bearerReq.GetResponse()
'        Using reader = New StreamReader(bearerResp.GetResponseStream(), Encoding.UTF8)
'            Dim response = reader.ReadToEnd()
'              'accessToken = Convert.ToString(JsonConvert.DeserializeObject(response))
'            'accessToken = bearer.access_token
'			   Dim bearer As Bearer = JsonConvert.DeserializeObject(Of Bearer)(response)
'            	accessToken = bearer.access_token
'        End Using
'		brapi.ErrorLog.LogMessage(si,accessToken)
''		Dim sourceAppName As String = "INTLHQ"
''		Dim newSI As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si, sourceAppName, openAppResult.Success)

'		Dim request = System.Net.HttpWebRequest.Create("http://onestreamqa.walmart.com/onestreamapi/")
'        request.Method = "GET"
'        request.Headers.Add("Authorization", "Bearer " & accessToken)
'        Using response As System.Net.WebResponse = request.GetResponse()
'            Using streamReader As System.IO.StreamReader = New System.IO.StreamReader(response.GetResponseStream())
'                Dim jsonResponseText = streamReader.ReadToEnd()
                
'				brapi.ErrorLog.LogMessage(si,$"{Convert.ToString(JsonConvert.DeserializeObject(jsonResponseText))}")
'            End Using
'        End Using
		'Return Convert.ToString(JsonConvert.DeserializeObject(jsonResponseText))
		

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="testcuriso">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.testcuriso
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				
					
				
				Return GetSymbol(si,"EUR")
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		Public Function GetSymbol(ByVal si As sessioninfo,ByVal code As String) As String
		    Dim dict As New Dictionary(Of String,String)
			 Dim symbol As String = String.Empty
		    Dim cultures As CultureInfo() = CultureInfo.GetCultures(CultureTypes.SpecificCultures)
		    Dim Result As ArrayList = New ArrayList()
		    For Each ci As CultureInfo In cultures
		        Dim ri As RegionInfo = New RegionInfo(ci.LCID)
'				dict.Add(ri.ISOCurrencySymbol,ri.CurrencySymbol)
		        If ri.ISOCurrencySymbol = code Then
		            symbol = ri.CurrencySymbol
					BRAPI.ErrorLog.LogMessage(si,"symbol",symbol)
		            Return symbol
		        End If
		    Next
		    Return symbol
		End Function
	End Class
	

End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="TestFlowClear">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics
Namespace OneStream.BusinessRule.Extender.TestFlowClear
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As FinanceRulesApi, ByVal args As FinanceRulesArgs) As Object
			Try
				Dim destination As ExpressionDestinationInfo = api.Data.GetExpressionDestinationInfo("")
				'retrieve the data buffer to clear, loop through the cells, and set the cell amounts to zero and the cell status to NoData
				Dim sourceBufferToClear As DataBuffer = api.Data.GetDataBufferUsingFormula("FilterMembers(C#CORP:F#Input_PEG:E#US08004:A#A4101010:S#Actual:T#2022M6)",DataApiScriptMethodType.Calculate,False,destination)
																
				If (Not sourceBufferToClear Is Nothing) Then
					Dim resultBufferToClear As New DataBuffer()
					'Loop through cells in databuffer
						For Each sourceCell As DataBufferCell In sourceBufferToClear.DataBufferCells.Values
							Dim resultCell As New DataBufferCell(sourceCell)
							resultCell.CellAmount = 0
							resultCell.CellStatus = DataCellStatus.CreateDataCellStatus(False, False)
							resultBufferToClear.SetCell(si, resultCell)
						Next
						'clear Out the cells
						api.Data.SetDataBuffer(resultBufferToClear, destination)
				End If
						

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Testing_File">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Diagnostics

Namespace OneStream.BusinessRule.Extender.Testing_File
	Public Class MainClass
		Dim binaryPath As String
		Dim exitCode As String
		Dim sysOut As String
		Dim sysErr As String
		Dim log As New Text.StringBuilder
		
		
		Public Function createTempFileWithContent(ByVal fileName As String, ByVal fileContent As String,ByVal si As SessionInfo) As String
			Dim tempFolder As String = Path.GetTempPath()
			brapi.ErrorLog.LogMessage(si,"tempFolder:" &tempFolder)
			Dim tempFilePath As String = $"{tempFolder}{fileName}"
			
			Using sw As StreamWriter = File.CreateText(tempFilePath)
				sw.Write(fileContent)
			End Using
			brapi.ErrorLog.LogMessage(si,"tempFilePath:" &tempFilePath)
			Return tempFilePath
		End Function
		
		Public Function createTempfileFromDashboardFile(ByRef si As SessionInfo, ByVal dashboardFileName As String, ByVal serverFileName As String) As String
			Try
				brapi.ErrorLog.LogMessage(si,"createTempfileFromDashboardFile")
				'Dashboard File to read
				Dim sourceFile As DashboardFileResource  = BRApi.Dashboards.FileResources.GetFileResource(si, False, Guid.Empty, dashboardFileName) 			   
				If Not sourceFile Is Nothing Then
				brapi.ErrorLog.LogMessage(si,"DashboardFileResource")	
				End If
				'Define string to hold text from file
''				Dim script As New Text.StringBuilder(system.Text.Encoding.UTF8.GetString(sourceFile.FileBytes))
'				brapi.ErrorLog.LogMessage(si,"script:" &script.ToString)
				
				
				Using dbConnApp As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				brapi.ErrorLog.LogMessage(si, "dbConnApp")
'					Dim scriptPath = Me.createTempfileFromDashboardFile(si, DashboardFileName, "Python_Script")
'				Dim script As New Text.StringBuilder(system.Text.Encoding.UTF8.GetString(sourceFile.FileBytes))
Dim sqlScript As String = Encoding.UTF8.GetString(sourceFile.FileBytes)
				brapi.ErrorLog.LogMessage(si,"script:" &sqlScript)
				
'				brapi.ErrorLog.LogMessage(si,"Before ExecuteActionQuery: " & script)
				BRApi.Database.ExecuteActionQuery(dbConnApp, sqlScript , False, True)
				brapi.ErrorLog.LogMessage(si,"ExecuteActionQuery: " )
			    End Using
				
				Return Nothing 
'				Return Me.createTempFileWithContent(serverFileName, script.ToString,si)
			Catch e As Exception
				Me.appendLog($"Error while reading dashboardFile: " & e.ToString)
				Return String.Empty
			End Try
		End Function
		
		Public Sub executeBinary(ByVal binaryPath As String, ByVal args As String)
			Dim binaryExitCode As String = String.Empty
			Dim binaryOutput As String = String.Empty
			Dim binaryStartInfo As ProcessStartInfo = New ProcessStartInfo(binaryPath)
			'binaryStartInfo.LoadUserProfile = True
	        binaryStartInfo.UseShellExecute = False
	        binaryStartInfo.RedirectStandardOutput = True
			binaryStartInfo.RedirectStandardError = True
			binaryStartInfo.CreateNoWindow = True
			'binaryStartInfo.UserName = System.Security.Principal.WindowsIdentity.GetCurrent().Name
			binaryStartInfo.Arguments = args
			
	        Dim binaryProcess As Process = New Process()
	        binaryProcess.StartInfo = binaryStartInfo
	        binaryProcess.Start()
	        
			Using binaryResponseStreamReader As StreamReader = binaryProcess.StandardOutput
		        Me.sysOut = binaryResponseStreamReader.ReadToEnd()
			End Using
			Using binaryResponseStreamReaderErr As StreamReader = binaryProcess.StandardError
				Me.sysErr = binaryResponseStreamReaderErr.ReadToEnd()
			End Using
		    
			binaryProcess.WaitForExit()
				
			Me.exitCode = binaryProcess.ExitCode
			
		    binaryProcess.Close()			
			'Return "ExitCode: " & binaryExitCode & Environment.NewLine & binaryOutput
		End Sub
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Dim DashboardFileName = "DashBoardTesting.xlsx"
				Dim sourceFile As DashboardFileResource  = BRApi.Dashboards.FileResources.GetFileResource(si, False, Guid.Empty, DashboardFileName)  '<-Enter file to read from dashboard
				Dim scriptPath = Me.createTempfileFromDashboardFile(si, DashboardFileName, "Python_Script")
'				   ImportCSVFile(si,"‪C:\DashBoardTesting.xlsx","XFT_UserGroups")
'				Dim pythonPath = "C:\Program Files\Python39\python.exe"
'				brapi.ErrorLog.LogMessage(si,"CreateApplicationDbConnInfo")
'				Using dbConnApp As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'				brapi.ErrorLog.LogMessage(si, "dbConnApp")
'					Dim scriptPath = Me.createTempfileFromDashboardFile(si, DashboardFileName, "Python_Script")
'				brapi.ErrorLog.LogMessage(si,"Before ExecuteActionQuery: " & scriptPath)
'				BRApi.Database.ExecuteActionQuery(dbConnApp, scriptPath, False, True)
'				brapi.ErrorLog.LogMessage(si,"ExecuteActionQuery: " & scriptPath)
'			    End Using
				
'				Dim arguments = $"{scriptPath}"
'				Me.executeBinary(pythonPath, arguments)
				
'				Me.appendLog("ServerName: " & Environment.MachineName)
'				brapi.ErrorLog.LogMessage(si,"ServerName:" &Environment.MachineName)
'				Me.appendLog("PythonPath: " & pythonPath)
'				brapi.ErrorLog.LogMessage(si,"pythonPath:" &pythonPath)
''				Me.appendLog("Arguments: " & arguments)
''				brapi.ErrorLog.LogMessage(si,"script:" &script.ToString)
'				Me.appendLog("Python Exit Code: " & Me.exitCode)
'				brapi.ErrorLog.LogMessage(si,"Me.exitCode:" &Me.exitCode)
'				Me.appendLog("Python Output: " & Environment.Newline & Me.sysOut)
'				brapi.ErrorLog.LogMessage(si,"Me.sysOut:" &Me.sysOut)
'				Me.appendLog("Python Error: " & Environment.Newline & Me.sysErr)
'				brapi.ErrorLog.LogMessage(si,"Me.sysErr:" &Me.sysErr)
				
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			Finally
				brapi.ErrorLog.LogMessage(si, "|-->Binary Executor<--|", log.ToString)
			End Try
		End Function
		
		Public Sub appendLog(ByVal message As String)
			log.append(message & Environment.NewLine)
		End Sub
		
		Private Function ImportCSVFile(ByVal si As SessionInfo, ByVal filePath As String, ByVal tableName As String) As List(Of TableRangeContent)
			Try
				Dim DEBUG As Boolean = True
				If DEBUG Then BRAPI.ErrorLog.LogMessage(si, "Function: ImportCSVFile, filePath parm " & filePath &", tableName parm " & tableName)
				
				Dim delimitedFileNameOrFileSharePath As String = filePath
				Dim delimiter As String = ";"
				Dim dbLocation As String = "Application"
				Dim loadMethod As String = "Replace"
				Dim skipHeaderRow As Boolean = True
				'For each table we need a list of fieldTokens. These are the tokens that are in the XFT spreadshet
				
				Dim fieldTokens As New List(Of String) 
				Select Case tableName
					Case Is = "XFT_UserGroups"
						'Module;ParmName;AppName;ParmValue
						fieldTokens.Add("xfText#:[Name]")
						fieldTokens.Add("xfText#:[Description]")												
					Case Else
						If DEBUG Then BRAPI.ErrorLog.LogMessage(si, "Unmanaged table " & tableName & ". Cannot run ImportCSVFile.")
						Return Nothing
				End Select
				 BRAPI.ErrorLog.LogMessage(si,"After XFT_UserGroups")
				'Get the upload "TEMP" file from the database file system
				Dim fileInfo As XFFileEx = BRApi.FileSystem.GetFile(si, FileSystemLocation.ApplicationDatabase, filePath, True, False, False, SharedConstants.Unknown, Nothing, True)
				If DEBUG Then
					BRAPI.ErrorLog.LogMessage(si, "fileInfo " & fileInfo.ToString)
					BRAPI.ErrorLog.LogMessage(si, "fileInfo.XFFile.FileInfo.FolderFullName " & fileInfo.XFFile.FileInfo.FolderFullName)
					BRAPI.ErrorLog.LogMessage(si, "fileInfo.XFFile.FileInfo.FileSystemLocation " & fileInfo.XFFile.FileInfo.FileSystemLocation)
					BRAPI.ErrorLog.LogMessage(si, "fileInfo.XFFile.FileInfo " & fileInfo.XFFile.FileInfo.ToString)				
				End If	
 				
				Dim loadResults As TableRangeContent = BRApi.Utilities.LoadCustomTableUsingDelimitedFile(si, SourceDataOriginTypes.FromFileUpload, filePath, fileInfo.XFFile.ContentFileBytes, delimiter, dbLocation, tableName, loadMethod, fieldTokens, skipHeaderRow)
				
				If DEBUG Then
					BRAPI.ErrorLog.LogMessage(si, "loadResults FieldTokens " & loadResults.FieldTokens.ToString)
					BRAPI.ErrorLog.LogMessage(si, "loadResults GetErrorMessage " & loadResults.GetErrorMessage.ToString)
					BRAPI.ErrorLog.LogMessage(si, "loadResults HasInvalidDataRows " & loadResults.HasInvalidDataRows)
					BRAPI.ErrorLog.LogMessage(si, "loadResults HasInvalidFieldNames " & loadResults.HasInvalidFieldNames)
					BRAPI.ErrorLog.LogMessage(si, "loadResults InvalidDataRows " & loadResults.InvalidDataRows.ToString)
					BRAPI.ErrorLog.LogMessage(si, "loadResults InvalidFieldNames" & loadResults.InvalidFieldNames.ToString)
					BRAPI.ErrorLog.LogMessage(si, "loadResults LoadMethod " & loadResults.LoadMethod)
					BRAPI.ErrorLog.LogMessage(si, "loadResults TableName " & loadResults.TableName)
				End If
				
'				'Delete the temp file
'				BRApi.FileSystem.DeleteFile(si, FileSystemLocation.ApplicationDatabase, filePath)
				Return Nothing 'loadResults
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			Finally
				Try
					'Delete the temp file
					BRApi.FileSystem.DeleteFile(si, FileSystemLocation.ApplicationDatabase, filePath)
				Catch
				End Try
			End Try
		End Function
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Tetimport">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.Tetimport
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
'						Dim Local_Folder As String="\\dwshome-c.homeoffice.wal-mart.com\dwsuserdata$\d0p05u7\Downloads\xft"'"C:\Users\d0p05u7\AppData\Local\Temp\OneStream"
'					    Dim directoryName As String= BRApi.Utilities.GetFileShareFolder(si,FileShareFolderTypes.ApplicationIncoming, Nothing).Replace("Incoming",String.Empty) & "\Groups\Everyone" '& StringHelper.RemoveInvalidNameCharacters(si.UserName,False,False)
'						For Each deleteFile In Directory.GetFiles(directoryName ,"*.*",SearchOption.TopDirectoryOnly)
'							    File.Delete(deleteFile)
'						Next

						Dim sql As New Text.StringBuilder
						Dim datetime As DateTime=DateTime.Now.ToString
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							sql.AppendLine("DROP TABLE [dbo].[Test_MainReg_ & datetime]")
'							sql.AppendLine("SELECT * INTO [Test_MainReg_ & datetime ] FROM [XFW_NonWage_Register]")
							BRApi.Database.ExecuteActionQuery (dbConnApp, sql.ToString, False, False)
						End Using

				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="TransformationEventHandler" name="TransformationEventHandler">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports NewtonSoft.Json

Namespace OneStream.BusinessRule.TransformationEventHandler.TransformationEventHandler
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As TransformationEventHandlerArgs) As Object
			Try
				Dim returnValue As Object = args.DefaultReturnValue
				args.UseReturnValueFromBusinessRule = False
				args.Cancel = False
				
				Select Case args.OperationName
					Case Is = BREventOperationType.Transformation.ParseAndTrans.ParseSourceData 'EndParseAndTransform
'						If Not args.IsBeforeEvent Then
'							Dim objTransformer As Transformer = DirectCast(args.Inputs(0), Transformer)
							
'							If Not String.IsNullOrEmpty(args.Inputs(1)) Then
'								Dim wfName As String = objTransformer.Parser.Transformer.WorkflowProfile.Name.Replace(".", "_").ToUpper
'								Dim wfScen As String = BRApi.Finance.Members.GetMember(si, DimType.Scenario.Id, objTransformer.Parser.Transformer.WorkflowUnitPk.ScenarioKey).Name
'								Dim wfTime As String = BRApi.Finance.Members.GetMember(si, DimType.Time.Id, objTransformer.Parser.Transformer.WorkflowUnitPk.TimeKey).Name
								
'								Dim fileNameAppender = $"{wfScen}_{wfTime}_{si.UserName}_{DateTime.Now.ToString("ddMMyyyyHHmmss")}"
								
'								Dim logFolderPath As String = BRApi.Utilities.GetFileShareFolder(si, FileShareFolderTypes.ApplicationIncoming, Nothing).Replace("\Incoming","")  & "\Groups\Everyone\Datafeed_File_Archive\"
'								If Not Directory.Exists(logFolderPath & wfName) Then
'									Directory.CreateDirectory(logFolderPath & wfName) 
'								Else
'									Dim dirInfo = New DirectoryInfo(logFolderPath & wfName)
'									Dim filesInfo = dirInfo.GetFiles()
'									For Each fileInfo In filesInfo
'										If DateTime.Today.Subtract(fileInfo.LastWriteTime).Days > 30 Then
'											fileInfo.Delete
'										End If
'									Next 
'								End If
'								logFolderPath &= wfName & "\"
'								Dim destfilePath As String = $"{logFolderPath}{Path.GetFileNameWithoutExtension(Path.GetFileNameWithoutExtension(args.Inputs(1)))}_{fileNameAppender}{Path.GetExtension(args.Inputs(1))}"
'								File.Copy(args.Inputs(1), destfilePath)
'						    End If
'						End If 
					End Select
				Return returnValue
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="TRG_CORPtoENT">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
#End Region
#Region "Rule Change Mgmt"
'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 - - Integration Functions
	'Mods:		
'--------------------------------------------------------------------------------------------------------------------------------------------
#End Region
Namespace OneStream.BusinessRule.Extender.TRG_CORPtoENT
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Dim jobId As String = String.Empty
			
			Try
				Dim DEBUG As Boolean = False
				Dim CORPtoENT_Process_log As New Text.StringBuilder
				globals.SetObject("CORPtoENT_PROCESS_LOG", CORPtoENT_Process_log)
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						jobid = args.NameValuePairs.XFGetValue("JobId")
					
						
						Dim sequenceName_extractSourceData As String = "CORPtoENT_extractSourceData"
						Dim customSubstVars_extractSourceData As New Dictionary(Of String, String)
						customSubstVars_extractSourceData.Add("Function", "extractSourceData")
						Dim TaskActivityItem_extractSourceData_obj1 As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_extractSourceData, customSubstVars_extractSourceData)
							
						'submit subtask id
						CreateSubTask(si,jobid.ToString,TaskActivityItem_extractSourceData_obj1.UniqueID.ToString,"Sqnc_Submit_SubTask")
							
						Dim TaskActivityItem_extractSourceData_obj2 As TaskActivityItem = BRApi.TaskActivity.GetTaskActivityItem(si, TaskActivityItem_extractSourceData_obj1.UniqueID)
						If TaskActivityItem_extractSourceData_obj2.TaskActivityStatus = TaskActivityStatus.Failed Then
							processlog(si, globals, "extractSourceData Failed")
							Throw New System.Exception("extractSourceData Failed")
						ElseIf TaskActivityItem_extractSourceData_obj2.TaskActivityStatus = TaskActivityStatus.Completed
							If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "extractSourceData Completed")
							processlog(si, globals, "extractSourceData Completed")
							
							'call load sqnc
							Dim sequenceName_load As String = "CORPtoENT_load"
							Dim customSubstVars_load As New Dictionary(Of String, String)
							Dim TaskActivityItem_load_obj1 As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_load, customSubstVars_load)
							
							'submit subtask id
							CreateSubTask(si,jobid.ToString,TaskActivityItem_load_obj1.UniqueID.ToString,"Sqnc_Submit_SubTask")
							
							Dim TaskActivityItem_load_obj2 As TaskActivityItem = BRApi.TaskActivity.GetTaskActivityItem(si, TaskActivityItem_load_obj1.UniqueID)
							If TaskActivityItem_load_obj2.TaskActivityStatus = TaskActivityStatus.Failed Then
								processlog(si, globals, "load Failed")
								Throw New System.Exception("load Failed")
							ElseIf TaskActivityItem_extractSourceData_obj2.TaskActivityStatus = TaskActivityStatus.Completed
								If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "load Completed")
								processlog(si, globals, "load Completed")
'										
								processlog(si, globals, "Starting Validation")
								Dim ccList As String = globals.GetObject("cclist").ToString
								Dim cclist_omd As String = String.Empty
								cclist_omd = String.Join("-", cclist.Split(","))
								Dim validation_params As New Dictionary(Of String, String)		
								validation_params.Add("JobId", jobid.ToString)
								validation_params.Add("EntityList", cclist_omd)
								validation_params.Add("JsonFile", "CORP_ent.json")
								Dim validationTAI As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(si, "Sqnc_run_validation", validation_params)
								CreateSubTask(si,jobid.ToString,validationTAI.UniqueID.ToString,"Sqnc_Submit_SubTask")
								processlog(si, globals, "Validation execution successful")
								
							End If
						End If
					
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			Finally
				CreateLogTask(si, globals, jobid.ToString)
			End Try
		End Function
		#End Region
		#Region "Helper Functions"
		
		'create sub task entry in OMD
		Private Sub CreateSubTask(ByVal si As SessionInfo,  ByVal taskid As String, ByVal subtaskid As String, ByVal sequenceName_subtask As String)
			Try
				Dim subtask_dict As New Dictionary(Of String, String)
				subtask_dict.Add("JobId", taskid)
				subtask_dict.Add("SubTaskId", subtaskid)
				subtask_dict.Add("Status", String.Empty)
				BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_subtask, subtask_dict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub
		
		'error log
		Private Sub processlog(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal logmessage As String)
			Try
				globals.GetObject("CORPtoENT_PROCESS_LOG").AppendLine(Environment.NewLine & "[" & DateTime.Now.ToString & "] - " & logmessage)
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		
		End Sub
		
		'submit log to omd
		Private Sub CreateLogTask(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal jobid As String)
			Try
				Dim logdict As New Dictionary(Of String, String)
				logdict("jobId") = jobid.ToString
				logdict("FileName") = "CORPtoENT_PROCESS_LOG"
				logdict("Message") = globals.GetObject("CORPtoENT_PROCESS_LOG").ToString
				BRApi.Utilities.ExecuteDataMgmtSequence(si,"Sqnc_log_msg",logdict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		'print dt
		Private Function PrintDT(dt As DataTable) As Text.StringBuilder
			Dim sCSV As New Text.StringBuilder
			If dt IsNot Nothing Then
				If dt.Rows.Count > 0 Then
					
					For Each dc As DataColumn In dt.Columns
						sCSV.Append(dc.ColumnName & ",")
					Next
					sCSV.Remove(sCSV.Length-1,1)
					sCSV.Append(Environment.NewLine)
					For Each dr As DataRow In dt.Rows
						For Each dc As DataColumn In dt.Columns
	     					sCSV.Append(dr(dc).ToString & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
					Next
				End If
			End If
			Return sCSV
    	End Function
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="TRG_CORPtoOtherCubes">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_SharedConstants" />
            </referencedAssemblies>
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
#End Region
#Region "Rule Change Mgmt"
'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 - - Integration Functions
	'Mods:		
'--------------------------------------------------------------------------------------------------------------------------------------------
#End Region
Namespace OneStream.BusinessRule.Extender.TRG_CORPtoOtherCubes
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim wmtus_si As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si,"WMTUS",openAppResult.Success)
						Dim sams_si As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si,"SAMS",openAppResult.Success)
						Dim intl_si As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si,"INTLHQ",openAppResult.Success)

						
						Dim sql As New Text.StringBuilder
						Dim jobid_ENT As Guid = Guid.NewGuid
						Dim customSubstVars As New Dictionary(Of String, String)
						customSubstVars.Add("JobId", jobid_ENT.ToString)
						customSubstVars.Add("Source","ENTERPRISE")
						customSubstVars.Add("Target","ENTERPRISE")
						customSubstVars.Add("SourceAddInfo","Corp_Register")
						customSubstVars.Add("TargetAddInfo","ENT")
						customSubstVars.Add("SourceScenario","Plan_Working")
						customSubstVars.Add("TargetScenario","Plan_Working")
						BRApi.Utilities.ExecuteDataMgmtSequence(si, "Sqnc_Submit_Job", customSubstVars)
						Dim jobid_WMTUS As Guid = Guid.NewGuid
						Dim customSubstVars_WMTUS As New Dictionary(Of String, String)
						customSubstVars_WMTUS.Add("JobId", jobid_WMTUS.ToString)
						customSubstVars_WMTUS.Add("Source","ENTERPRISE")
						customSubstVars_WMTUS.Add("Target","WMTUS")
						customSubstVars_WMTUS.Add("SourceAddInfo","Corp_Register")
						customSubstVars_WMTUS.Add("TargetAddInfo","WMTOps")
						customSubstVars_WMTUS.Add("SourceScenario","Plan_Working")
						customSubstVars_WMTUS.Add("TargetScenario","Plan_Working")
						BRApi.Utilities.ExecuteDataMgmtSequence(si, "Sqnc_Submit_Job", customSubstVars_WMTUS)

						Dim jobid_SAMS As Guid = Guid.NewGuid
						Dim customSubstVars_SAMS As New Dictionary(Of String, String)
						customSubstVars_SAMS.Add("JobId", jobid_SAMS.ToString)
						customSubstVars_SAMS.Add("Source","ENTERPRISE")
						customSubstVars_SAMS.Add("Target","SAMS")
						customSubstVars_SAMS.Add("SourceAddInfo","Corp_Register")
						customSubstVars_SAMS.Add("TargetAddInfo","CLUBOPS")
						customSubstVars_SAMS.Add("SourceScenario","Plan_Working")
						customSubstVars_SAMS.Add("TargetScenario","Plan_Working")
						BRApi.Utilities.ExecuteDataMgmtSequence(si, "Sqnc_Submit_Job", customSubstVars_SAMS)

						Dim jobid_INTLHQ As Guid = Guid.NewGuid
						Dim customSubstVars_INTLHQ As New Dictionary(Of String, String)
						customSubstVars_INTLHQ.Add("JobId", jobid_INTLHQ.ToString)
						customSubstVars_INTLHQ.Add("Source","ENTERPRISE")
						customSubstVars_INTLHQ.Add("Target","INTLHQ")
						customSubstVars_INTLHQ.Add("SourceAddInfo","Corp_Register")
						customSubstVars_INTLHQ.Add("TargetAddInfo","INTL")
						customSubstVars_INTLHQ.Add("SourceScenario","Plan_Working")
						customSubstVars_INTLHQ.Add("TargetScenario","Plan_Working")
						BRApi.Utilities.ExecuteDataMgmtSequence(si, "Sqnc_Submit_Job", customSubstVars_INTLHQ)

						Dim sqnc_trigger As String = "TRG_CORPtoENT"
						
						'check if job already running, if yes skip, if no initiate the
						If Not CheckIfJobRunning(si, sqnc_trigger)
							Dim objTaskActivityItem As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(si, sqnc_trigger, customSubstVars)
	 						CreateSubTask(si, jobid_ENT.ToString, objTaskActivityItem.UniqueID.ToString, "Sqnc_Submit_SubTask")
							
						Else
							BRApi.ErrorLog.LogMessage(si, sqnc_trigger & " is already running")
							
						End If

						
'						dict.Add("JobId", jobid.ToString)
'						dict.Add("source_app", "CORP")
'						dict.Add("target_app", "WMTUS")
'						dict.Add("vboccmapping", VBOCCdict)
						Dim objTaskActivityItem2 As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(wmtus_si, "TRG_CORP_WMTUS", customSubstVars_WMTUS)
						CreateSubTask(si, jobid_WMTUS.ToString, objTaskActivityItem2.UniqueID.ToString, "Sqnc_Submit_SubTask")

						Dim objTaskActivityItem3 As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(sams_si, "TRG_CORPtoSAMS", customSubstVars_SAMS)
						CreateSubTask(si, jobid_SAMS.ToString, objTaskActivityItem3.UniqueID.ToString, "Sqnc_Submit_SubTask")

						Dim objTaskActivityItem4 As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(intl_si, "TRG_CORPtoINTL", customSubstVars_INTLHQ)
						CreateSubTask(si, jobid_INTLHQ.ToString, objTaskActivityItem4.UniqueID.ToString, "Sqnc_Submit_SubTask")


				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		

		'check if trigger is already running
		Private Function CheckIfJobRunning(ByVal si As SessionInfo, ByVal sqnc_name As String) As Boolean
			Try
				Dim job_status As Boolean = True
				Dim dt As DataTable = Nothing
				Dim sql As String = "SELECT TaskActivityStatus FROM TaskActivity WHERE Description = '" & sqnc_name & "' AND TaskActivityStatus = 1000"
				Using dbConnApp As DbConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
					dt = BRAPi.Database.ExecuteSql(dbConnApp,sql,False)
				End Using
				If dt IsNot Nothing AndAlso dt.Rows.Count < 1
					job_status = False
				End If
			Return job_status
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function 
		
		
		Private Sub CreateSubTask(ByVal si As SessionInfo, ByVal taskid As String, ByVal subtaskid As String, ByVal sequenceName_subtask As String)
			Try
				Dim subtask_dict As New Dictionary(Of String, String)
				subtask_dict.Add("JobId", taskid)
				subtask_dict.Add("SubTaskId", subtaskid)
				subtask_dict.Add("Status", "Yes")
				BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_subtask, subtask_dict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub
		
		
		
		Private Sub processlog(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal logmessage As String)
			Try
				globals.GetObject("CORPtoENT_PROCESS_LOG").AppendLine(Environment.NewLine & "[" & DateTime.Now.ToString & "] - " & logmessage)
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		
		End Sub
		
		'submit log to omd
		Private Sub CreateLogTask(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal jobid As String)
			Try
				Dim logdict As New Dictionary(Of String, String)
				logdict("jobId") = jobid.ToString
				logdict("FileName") = "CORPtoENT_PROCESS_LOG"
				logdict("Message") = globals.GetObject("CORPtoENT_PROCESS_LOG").ToString
				BRApi.Utilities.ExecuteDataMgmtSequence(si,"Sqnc_log_msg",logdict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="TRG_CORPtoWMTUS_MAIN">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_SharedConstants" />
            </referencedAssemblies>
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
#End Region
#Region "Rule Change Mgmt"
'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 - - Integration Functions
	'Mods:		
'--------------------------------------------------------------------------------------------------------------------------------------------
#End Region
Namespace OneStream.BusinessRule.Extender.TRG_CORPtoWMTUS_MAIN
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim wmtus_si As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si,"WMTUS",openAppResult.Success)
						Dim jobid As Guid = Guid.NewGuid
						Dim sql As New Text.StringBuilder
'						sql.Append("SELECT COST_CENTER,VBO_NAME FROM  XFW_ExpensePlanning_VBO_CC_Mappings ")
								
'						Dim VBOCCdt As DataTable = Nothing
'						Dim VBOCCdict As New Dictionary(Of String, String)
'						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
'									VBOCCdt = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, sql.ToString, True)
'						End Using
								
'						If VBOCCdt.Rows.Count > 0
'									For Each VBOCCdr As DataRow In VBOCCdt.Rows
'										If Not VBOCCdict.ContainsKey(VBOCCdr("COST_CENTER"))
'											VBOCCdict.Add(VBOCCdr("COST_CENTER"),VBOCCdr("VBO_NAME"))
'										End If
'									Next
'						End If
						Dim dict  As New Dictionary(Of String, String)
						
'						dict.Add("JobId", jobid.ToString)
'						dict.Add("source_app", "CORP")
'						dict.Add("target_app", "WMTUS")
'						dict.Add("vboccmapping", VBOCCdict)
                        Dim objTaskActivityItem1 As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(si, "CORPtoENT_LOAD",dict)
						Dim objTaskActivityItem2 As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(wmtus_si, "sqnc_CORPtoWMTUS_LOAD", dict)
						Dim objTaskActivityItem3 As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(wmtus_si, "sqnc_CORPtoSAMS_LOAD", dict)

						

				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		

		
		
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="TRG_ENT_CORP_VC_Main">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.TRG_ENT_CORP_VC_Main
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
							Dim uniqueid As String =  args.NameValuePairs.XFGetValue("uniqueid")
							Dim srcYear As String = args.NameValuePairs.XFGetValue("CORP_VC_srcYear")
							Dim trgYear As String = args.NameValuePairs.XFGetValue("CORP_VC_trgYear")
							Dim srcScenario As String = args.NameValuePairs.XFGetValue("CORP_VC_srcScenario")
							Dim trgScenario As String = args.NameValuePairs.XFGetValue("CORP_VC_trgScenario")
							Dim entity As String = args.NameValuePairs.XFGetValue("CORP_VC_entity")
							
							Dim paramDict As New Dictionary(Of String, String)
							paramDict.Add("CORP_VC_srcYear",srcYear)
							paramDict.Add("CORP_VC_trgYear",trgYear)
							paramDict.Add("CORP_VC_srcScenario",srcScenario)
							paramDict.Add("CORP_VC_trgScenario",trgScenario)
							paramDict.Add("CORP_VC_entity",entity)
						
							Dim taskActivityObj1 As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(si, "TRG_ENT_CORP_VC",paramDict)
							Dim taskActivityObj2 As TaskActivityItem = BRApi.TaskActivity.GetTaskActivityItem(si, taskActivityObj1.UniqueID)
							If taskActivityObj2.TaskActivityStatus = TaskActivityStatus.Failed Then
								updateLog(si, globals, api, args, uniqueid, "StatusRedBall")
							ElseIf taskActivityObj2.TaskActivityStatus = TaskActivityStatus.Completed
								updateLog(si, globals, api, args, uniqueid, "StatusGreenBall")
							Else
								updateLog(si, globals, api, args, uniqueid,"StatusOrangeBall")
							End If
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Function updateLog(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs, ByVal uniqueid As String, ByVal status As String)
		Try
			Dim ts As DateTime = DateTime.Now
			Dim sql As String = "UPDATE XFW_CORP_VERSIONCOPY_TRACKER SET status = '" & status & "', End_Time = '" & ts.ToString & "' WHERE id = '" & uniqueid & "'"
			Using dbconnApp As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				BRApi.Database.ExecuteActionQuery(dbconnApp, sql, False, False)
			End Using
			Return Nothing
		Catch ex As Exception
			Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
		End Try	
		End Function
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="TRG_ENT_to_OtherApps">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.TRG_ENT_to_OtherApps
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
				
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
					
						Dim dt As DataTable = Nothing
						Dim str_interface As String = args.NameValuePairs.XFGetValue("interface")
						Dim source_app As String = args.NameValuePairs.XFGetValue("source_app")
						Dim target_app As String = args.NameValuePairs.XFGetValue("target_app")
						Dim target_app_si As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si,target_app,openAppResult.Success)
						Dim source_scenario As String = args.NameValuePairs.XFGetValue("source_scenario")
						Dim source_year As String = args.NameValuePairs.XFGetValue("source_year")
						Dim source_audittrail As String = args.NameValuePairs.XFGetValue("source_audittrail")
						Dim chunk_size As String = args.NameValuePairs.XFGetValue("chunk_size")
						Dim target_scenario As String = String.Empty
						Dim target_year As String = String.Empty
						Dim target_audit_trail As String = String.Empty
						
						Dim sql As String = "SELECT * FROM XFW_EP_Data_Movement_Mappings WHERE Interface LIKE '%" & str_interface & "%'"
						Using dbConnApp As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							dt = BRAPi.Database.ExecuteSql(dbConnApp,sql,False)
						End Using
						
						If dt IsNot Nothing And dt.Rows.Count>0
							For Each dr As DataRow In dt.Rows
								If dr("Parameter").ToString.XFEqualsIgnoreCase("Scenario")
									target_scenario = dr("Target")
								End If
								If dr("Parameter").ToString.XFEqualsIgnoreCase("Year")
									target_year = dr("Target")
								End If
								If dr("Parameter").ToString.XFEqualsIgnoreCase("AuditTrail")
									target_audit_trail = dr("Target")
								End If
							Next
						End If	
					
						Dim sqnc_trigger As String = "TRG_" & source_app & "_" & target_app
						Dim customSubstVars As New Dictionary(Of String, String)
						customSubstVars.Add("source_app", source_app)
						customSubstVars.Add("scenario", target_scenario)
						customSubstVars.Add("year", target_year)
						customSubstVars.Add("audit_trail", target_audit_trail)
						customSubstVars.Add("chunk_size", chunk_size)
						Dim objTaskActivityItem As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(target_app_si, sqnc_trigger, customSubstVars)
					
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Sub PrintDT(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal Desc As String)
		Try
			 'Print Table
			 Dim dtprint As New Text.StringBuilder
				 For Each dc As DataColumn In dt.Columns
					dtprint.Append(dc.ColumnName & ",")
				 Next
				 dtprint.Remove(dtprint.Length - 1, 1)
				 dtprint.Append(Environment.NewLine)
				 For Each dr As DataRow In dt.Rows										
					For Each dc As DataColumn In dt.Columns
						dtprint.Append(dr(dc.ColumnName).ToString & ",")
					Next
					dtprint.Remove(dtprint.Length - 1, 1)
					dtprint.Append(Environment.NewLine)
				 Next
				 BRApi.ErrorLog.LogMessage(si, Desc,dtprint.ToString)
		
		Catch ex As Exception                
	   		Throw ErrorHandler.LogWrite(si,New XFException(si,ex))
		End Try		 
		End Sub
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="TRG_ENTtoSAMS_DP_MAIN">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
#End Region
#Region "Rule Change Mgmt"
'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 - - Integration Functions
	'Mods:		
'--------------------------------------------------------------------------------------------------------------------------------------------
#End Region
Namespace OneStream.BusinessRule.Extender.TRG_ENTtoSAMS_DP_MAIN
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim source_app As String = args.NameValuePairs.XFGetValue("source_app")
						Dim target_app As String = args.NameValuePairs.XFGetValue("target_app")
						Dim getcclist_flag As String = args.NameValuePairs.XFGetValue("getcclist_flag")
						
'						Dim EPtoWMTUS_Process_log As New Text.StringBuilder
'						globals.SetObject("EPtoSAMS_PROCESS_LOG", EPtoWMTUS_Process_log)
						
						
'						Dim Target = args.NameValuePairs.XFGetValue("Target")
'						Dim AppID As String = args.NameValuePairs.XFGetValue("AppID")
						Dim sams_si As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si,source_app,openAppResult.Success)
						Dim jobid As Guid = Guid.NewGuid
						Dim customSubstVars As New Dictionary(Of String, String)
						customSubstVars.Add("JobId", jobid.ToString)
						'customSubstVars.Add("Description","ENTERPRISE:REGISTER->SAMS:CLUBOPS")
						customSubstVars.Add("Source","ENTERPRISE")
						customSubstVars.Add("Target","SAMS")
						customSubstVars.Add("SourceAddInfo","ENTERPRISE")
						customSubstVars.Add("TargetAddInfo","CLUBOPS")
						customSubstVars.Add("SourceScenario","Plan_Working")
						customSubstVars.Add("TargetScenario","Plan_Working")
						BRApi.Utilities.ExecuteDataMgmtSequence(si, "Sqnc_Submit_Job", customSubstVars)
						Dim dict  As New Dictionary(Of String, String)
						dict.Add("JobId", jobid.ToString)
						dict.Add("getcclist_flag", getcclist_flag)
						dict.Add("source_app", source_app)
						dict.Add("target_app", target_app)
						Dim objTaskActivityItem As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(sams_si, "ENTtoSAMS_DP", dict)
						
''						BRApi.Utilities.ExecuteDataMgmtSequence(si, "Sqnc_Submit_Job", customSubstVars)
						CreateSubTask(si, jobid.ToString, objTaskActivityItem.UniqueID.ToString, "Sqnc_Submit_SubTask")
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
'		Private Function GetOtherAppConnectionString(ByVal si As SessionInfo,ByVal Target As String,ByVal AppID As String) As Object
'			Try	
'				Dim appUniqueID As Guid = ConvertHelper.ToGuid(AppID)
'				Dim varAppToken As New ApplicationToken(si.AppToken.SHA1HashCode, Target, appUniqueID)
'				Dim newSeshInfoOtherApp As New SessionInfo(ClientModuleType.Silverlight, si.WebServerUrlUsedByClient, si.AuthToken, varAppToken, si.Culture)
					
'				Return newSeshInfoOtherApp

'			Catch ex As Exception
'				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'			End Try
'		End Function
		
		Private Sub CreateSubTask(ByVal si As SessionInfo, ByVal taskid As String, ByVal subtaskid As String, ByVal sequenceName_subtask As String)
			Try
				Dim subtask_dict As New Dictionary(Of String, String)
				subtask_dict.Add("JobId", taskid)
				subtask_dict.Add("SubTaskId", subtaskid)
				subtask_dict.Add("Status", "Yes")
				BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_subtask, subtask_dict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub
		
'		Private Sub processlog(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal logmessage As String)
'			Try
'				globals.GetObject("EPtoSAMS_PROCESS_LOG").AppendLine(Environment.NewLine & "[" & DateTime.Now.ToString & "] - " & logmessage)
'			Catch ex As Exception
'				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'			End Try	
		
'		End Sub
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="TRG_ENTtoWMTUS_DP_MAIN">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
#End Region
#Region "Rule Change Mgmt"
'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 - - Integration Functions
	'Mods:		
'--------------------------------------------------------------------------------------------------------------------------------------------
#End Region
Namespace OneStream.BusinessRule.Extender.TRG_ENTtoWMTUS_DP_MAIN
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim source_app As String = args.NameValuePairs.XFGetValue("source_app")
						Dim target_app As String = args.NameValuePairs.XFGetValue("target_app")
						Dim getcclist_flag As String = args.NameValuePairs.XFGetValue("getcclist_flag")
						
'						Dim EPtoWMTUS_Process_log As New Text.StringBuilder
'						globals.SetObject("EPtoWMTUS_PROCESS_LOG", EPtoWMTUS_Process_log)
						
'						Dim Target = args.NameValuePairs.XFGetValue("Target")
'						Dim AppID As String = args.NameValuePairs.XFGetValue("AppID")
						Dim wmtus_si As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si,source_app,openAppResult.Success)
						Dim jobid As Guid = Guid.NewGuid
						Dim customSubstVars As New Dictionary(Of String, String)
						customSubstVars.Add("JobId", jobid.ToString)
						'customSubstVars.Add("Description","ENTERPRISE:REGISTER->WMTUS:WMTOPS")
						customSubstVars.Add("Source","ENTERPRISE")
						customSubstVars.Add("Target","WMTUS")
						customSubstVars.Add("SourceAddInfo","ENT")
						customSubstVars.Add("TargetAddInfo","WMTOps")
						customSubstVars.Add("SourceScenario","Plan_Working")
						customSubstVars.Add("TargetScenario","Plan_Working")
						BRApi.Utilities.ExecuteDataMgmtSequence(si, "Sqnc_Submit_Job", customSubstVars)
						
						Dim dict  As New Dictionary(Of String, String)
						dict.Add("JobId", jobid.ToString)
						dict.Add("getcclist_flag", getcclist_flag)
						dict.Add("source_app", source_app)
						dict.Add("target_app", target_app)
						Dim objTaskActivityItem As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(wmtus_si, "ENTtoWMTUS_DP", dict)
						
'						BRApi.Utilities.ExecuteDataMgmtSequence(si, "Sqnc_Submit_Job", customSubstVars)
						CreateSubTask(si, jobid.ToString, objTaskActivityItem.UniqueID.ToString, "Sqnc_Submit_SubTask")
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		#Region "Helper Function"
		Private Sub CreateSubTask(ByVal si As SessionInfo, ByVal taskid As String, ByVal subtaskid As String, ByVal sequenceName_subtask As String)
			Try
				Dim subtask_dict As New Dictionary(Of String, String)
				subtask_dict.Add("JobId", taskid)
				subtask_dict.Add("SubTaskId", subtaskid)
				subtask_dict.Add("Status", "Yes")
				BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_subtask, subtask_dict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub
		
'		Private Sub processlog(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal logmessage As String)
'			Try
'				globals.GetObject("EPtoWMTUS_PROCESS_LOG").AppendLine(Environment.NewLine & "[" & DateTime.Now.ToString & "] - " & logmessage)
'			Catch ex As Exception
'				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'			End Try	
		
'		End Sub
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="TRG_EP_RACItoFCP">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_RACI_toFCP_Load" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.TRG_EP_RACItoFCP
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Dim jobid As String=""
			Try
				Dim DEBUG As Boolean = False
				
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						jobid = args.NameValuePairs.XFGetValue("JobId")
						Dim chunk_size As Integer = args.NameValuePairs.XFGetValue("chunk_size").XFConvertToInt
						processlog(si,globals,"EP_RACI to FCP process started")
						
						'entitylist
						Dim cclist_all As New List(Of String)
						Dim cclist_chunk As New List(Of String)
'						Dim entitylist_meminfo As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "ENT", "E#Sams_US.Base", True)
						Dim entitylist_meminfo As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "ENT", "E#Walmart_Total_Company.Base", True)
						For Each entity In entitylist_meminfo
							cclist_all.Add(entity.Member.Name)
						Next
						'cclist_all.Add("US04959")
						BRApi.ErrorLog.LogMessage(si,"entity count in sams ---- " & cclist_all.Count.ToString)
						processlog(si,globals,"Total Entitylist Count -----  " & cclist_all.Count.ToString)
						If cclist_all.Count>0  Then
							'get Batch id from fcp
								'get credentials from table
							Dim startTime As DateTime= DateTime.Now
							Dim dml As String = String.Format( "SELECT * FROM [dbo].[XFW_FCP_ENT_PUT_CRED] where App='EP_RACI-DEV'")
							Dim cred_dt As DataTable
							Using dbConnApp As DBConnInfo = BRAPi.Database.CreateApplicationDbConnInfo(si)
							    cred_dt = BRApi.Database.ExecuteSql(dbConnApp, dml.ToString, True)
							End Using
							If cred_dt Is Nothing Or cred_dt.Rows.Count<0 Then
								Throw New System.Exception("FCP put credentials do not found in table")
							End If
							Dim baseUrl As String = cred_dt.Rows(0)("Base_URI").ToString
							Dim svcConsumerId As String = cred_dt.Rows(0)("ConsumerId").ToString
							Dim	svcName As String = cred_dt.Rows(0)("Name").ToString
							Dim	svcEnv As String = cred_dt.Rows(0)("ENV").ToString
							globals.SetObject("baseUrl",baseUrl)
							globals.SetObject("svcConsumerId", svcConsumerId)
							globals.SetObject("svcName", svcName)
							globals.SetObject("svcEnv", svcEnv)
							Dim fcpLoadObj As New OneStream.BusinessRule.Extender.EP_RACI_toFCP_Load.MainClass
							Dim batchId As String = fcpLoadObj.getBatchIdFromFCP(si,globals)
							processlog(si,globals,"-------------------->  Time to fetch BatchId: " & (DateTime.Now-startTime).ToString)
							globals.SetObject("batchId",batchId)
						
							globals.SetObject("currentPage",0)
							
							cclist_chunk = toChunks(si, cclist_all, chunk_size)
							For Each chunk_item As String In cclist_chunk
	'						Dim chunk_item = cclist_chunk.Item(0)
								
								chunk_item = chunk_item.Replace(",",",E#")
								chunk_item = "E#" & chunk_item
								
							
								'call RACI export
								Dim sequenceName_raciExport As String = "EP_RACI_Export"
								Dim customSubstVars_raciExport As New Dictionary(Of String, String)
								customSubstVars_raciExport.Add("cclist",chunk_item)
								Dim TaskActivityItem_raciExport_obj1 As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_raciExport, customSubstVars_raciExport)
								
								'submit subtask id
								CreateSubTask(si,jobid.ToString,TaskActivityItem_raciExport_obj1.UniqueID.ToString,"Sqnc_Submit_SubTask")
								
								'get current status of subtask
								Dim TaskActivityItem_raciExport_obj2 As TaskActivityItem = BRApi.TaskActivity.GetTaskActivityItem(si, TaskActivityItem_raciExport_obj1.UniqueID)
								If TaskActivityItem_raciExport_obj2.TaskActivityStatus = TaskActivityStatus.Failed Then
									'throw exception
									processlog(si, globals, "raciExport Failed")
									Throw New System.Exception("raciExport Failed")
								ElseIf TaskActivityItem_raciExport_obj2.TaskActivityStatus = TaskActivityStatus.Completed Then
									processlog(si, globals, "raciExport Completed")
									If globals.GetObject("EP_RACItoFCP_extractSourceData") IsNot Nothing AndAlso DirectCast(globals.GetObject("EP_RACItoFCP_extractSourceData"), DataTable).Rows.Count > 0 Then
									'call load sqnc
										Dim sequenceName_load As String = "EP_RACItoFCP_load"
										Dim customSubstVars_load As New Dictionary(Of String, String)
										Dim TaskActivityItem_load_obj1 As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_load, customSubstVars_load)
										
										'submit subtask id
										CreateSubTask(si,jobid.ToString,TaskActivityItem_load_obj1.UniqueID.ToString,"Sqnc_Submit_SubTask")
										
										Dim TaskActivityItem_load_obj2 As TaskActivityItem = BRApi.TaskActivity.GetTaskActivityItem(si, TaskActivityItem_load_obj1.UniqueID)
										If TaskActivityItem_load_obj2.TaskActivityStatus = TaskActivityStatus.Failed Then
											processlog(si, globals, "load Failed")
											Throw New System.Exception("load Failed")
										ElseIf TaskActivityItem_load_obj2.TaskActivityStatus = TaskActivityStatus.Completed
											processlog(si, globals, "load Completed")
										End If
									Else
										processlog(si, globals, "no data found in cube")
									End If
								Else
									Throw New System.Exception("Something went wrong")
								End If
							Next
							startTime = DateTime.Now
							fcpLoadObj.PutMarkCompletionFromFCP(si,batchId,globals)
							processlog(si,globals, "-------------------->  Time to FCP mark completion: " & (DateTime.Now-startTime).ToString)
							processlog(si,globals, "RACI to FCP put completed for-------" & globals.GetObject("currentPage").ToString & " number of pages.")
						Else
							processlog(si,globals, "No entity found")
						End If
				End Select

				Return Nothing
			Catch ex As Exception
				globals.GetObject("EP_RACItoFCP_PROCESS_LOG").AppendLine(ex.Message)
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			Finally
				CreateLogTask(si, globals, jobid.ToString)
			End Try
		End Function
		
		'to chunks
		Private Function toChunks(ByVal si As SessionInfo, ByVal entitylist As List(Of String), ByVal chunk_size As Integer) As List(Of String)
			Try	
				Dim noOfChunk As Integer = 0
				Dim chunkList As New List(Of String)
				Dim templist As New Text.StringBuilder
				Dim temp As String = String.Empty
				Dim tchunk As Integer = chunk_size
				Dim x As Integer = 0
				noOfChunk = Math.Ceiling(entitylist.Count / chunk_size)
			
				For i = 0 To noOfChunk - 1
					Dim j As Integer = x
					While j < tchunk 
						If j < entitylist.Count Then
							templist.Append(entitylist(j) & ",")
						End If	
						j += 1
					End While
					x += chunk_size 
					tchunk = tchunk + chunk_size
					temp = templist.ToString
					temp = temp.Remove(temp.Length - 1, 1)
					chunkList.Add(temp)
					
'					brapi.ErrorLog.LogMessage(si, "templist-" & i & ":" & temp & Environment.NewLine & "Length:" & temp.Length & environment.NewLine & "x:" & x )
					templist.Clear
				Next
				Return chunkList			
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		'create sub task entry in OMD
		Private Sub CreateSubTask(ByVal si As SessionInfo,  ByVal taskid As String, ByVal subtaskid As String, ByVal sequenceName_subtask As String)
			Try
				Dim subtask_dict As New Dictionary(Of String, String)
				subtask_dict.Add("JobId", taskid)
				subtask_dict.Add("SubTaskId", subtaskid)
				subtask_dict.Add("Status", String.Empty)
				BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_subtask, subtask_dict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub
		
		'error log
		Private Sub processlog(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal logmessage As String)
			Try
				globals.GetObject("EP_RACItoFCP_PROCESS_LOG").AppendLine(Environment.NewLine & "[" & DateTime.Now.ToString & "] - " & logmessage)
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		
		End Sub
		
		'submit log to omd
		Private Sub CreateLogTask(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal jobid As String)
			Try
				Dim logdict As New Dictionary(Of String, String)
				logdict("jobId") = jobid.ToString
				logdict("FileName") = "EP_RACItoFCP_PROCESS_LOG"
				logdict("Message") = globals.GetObject("EP_RACItoFCP_PROCESS_LOG").ToString
				BRApi.Utilities.ExecuteDataMgmtSequence(si,"Sqnc_log_msg",logdict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="TRG_EP_RACItoFCP_MAIN">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.TRG_EP_RACItoFCP_MAIN
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				
				Dim EP_RACItoFCP_Process_log As New Text.StringBuilder
				
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						globals.SetObject("EP_RACItoFCP_PROCESS_LOG", EP_RACItoFCP_Process_log)
						Dim jobid As Guid = Guid.NewGuid
						Dim customSubstVars As New Dictionary(Of String, String)
						customSubstVars.Add("JobId", jobid.ToString)
						customSubstVars.Add("Source","ENTERPRISE")
						customSubstVars.Add("Target","FCP")
						customSubstVars.Add("SourceAddInfo","RACI")
						customSubstVars.Add("TargetAddInfo","FCP")
						customSubstVars.Add("SourceScenario","Plan_Working")
						customSubstVars.Add("TargetScenario","Plan_Working")
						BRApi.Utilities.ExecuteDataMgmtSequence(si, "Sqnc_Submit_Job", customSubstVars)
						Dim dict  As New Dictionary(Of String, String)
						dict.Add("JobId", jobid.ToString)
						dict.Add("chunk_size", args.NameValuePairs.XFGetValue("chunk_size"))
						Dim objTaskActivityItem As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(si, "EP_RACItoFCP_Trigger", dict)
					
 						CreateSubTask(si, jobid.ToString, objTaskActivityItem.UniqueID.ToString, "Sqnc_Submit_SubTask")
						Dim objTaskActivityItem2 As TaskActivityItem = BRApi.TaskActivity.GetTaskActivityItem(si, objTaskActivityItem.UniqueID)
				
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Private Sub CreateSubTask(ByVal si As SessionInfo, ByVal taskid As String, ByVal subtaskid As String, ByVal sequenceName_subtask As String)
			Try
				Dim subtask_dict As New Dictionary(Of String, String)
				subtask_dict.Add("JobId", taskid)
				subtask_dict.Add("SubTaskId", subtaskid)
				subtask_dict.Add("Status", "Yes")
				BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_subtask, subtask_dict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="TRG_EPtoENT">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_SharedConstants" />
            </referencedAssemblies>
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports OneStream.BusinessRule.DashboardStringFunction.EP_SharedConstants
#End Region
#Region "Rule Change Mgmt"
'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 - - Integration Functions
	'Mods:		
'--------------------------------------------------------------------------------------------------------------------------------------------
#End Region
Namespace OneStream.BusinessRule.Extender.TRG_EPtoENT
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Dim watcher_table As String = EPSharedConstants.sWatcherTable 
			Dim activityId As String = "TRG1"
			Dim getcclist_flag As String = args.NameValuePairs.XFGetValue("getcclist_flag")
			globals.SetObject("getcclist_flag",getcclist_flag)
			
			Try
				Dim DEBUG As Boolean = False
				
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						 Dim jobid = args.NameValuePairs.XFGetValue("JobId")
						 Dim Description = args.NameValuePairs.XFGetValue("Description")
						'submit entry to central respository
'						Dim jobid As Guid = Guid.NewGuid
'						Dim esi As SessionInfo = GetOtherAppConnectionString(si)
						'submit task id
'						Dim task_desc = "Enterprise:Register->WMTUS:WMTOps"
'						Dim sequenceName_task = "Sqnc_Submit_Job"
'						CreateTask(si,esi,jobid.ToString,task_desc,sequenceName_task)
						
						'call getcclist sqnc
						Dim sequenceName_getCClist As String = "EPtoENT_getCClist"
						Dim customSubstVars_getCClist As New Dictionary(Of String, String)
						customSubstVars_getCClist.Add("Function", "getCClist")
						Dim TaskActivityItem_getCClist_obj1 As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_getCClist, customSubstVars_getCClist)
						
						'submit subtask id
						CreateSubTask(si,jobid.ToString,TaskActivityItem_getCClist_obj1.UniqueID.ToString,"Sqnc_Submit_SubTask")
						
						'get current status of subtask
						Dim TaskActivityItem_getCClist_obj2 As TaskActivityItem = BRApi.TaskActivity.GetTaskActivityItem(si, TaskActivityItem_getCClist_obj1.UniqueID)
						If TaskActivityItem_getCClist_obj2.TaskActivityStatus = TaskActivityStatus.Failed Then
							
							'update watcher = -1, fail
							updateWatcher(si,globals,watcher_table,activityId,"fail")
							'throw exception
							processlog(si, globals, "getCClist Failed")
							Throw New System.Exception("getCClist Failed")
						ElseIf TaskActivityItem_getCClist_obj2.TaskActivityStatus = TaskActivityStatus.Completed Then
							processlog(si, globals, "getCClist Completed")
							
							'if no modified cost centers in watcher, return
							Dim getcclist As String = DirectCast(globals.GetObject("EPtoENT_getCClist"),String)
							If Not getcclist.Length > 0 
								processlog(si, globals, "No unprocessed cost centers in Watcher table")
								CreateLogTask(si, globals, jobid.ToString)
								Return Nothing
							Else
								processlog(si, globals, "cclist - " & getcclist)
							End If
							
							
							'update watcher = 2, running
							updateWatcher(si,globals,watcher_table,activityId,"running")
							
							'call extract source sqnc
							If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "getCClist Completed")
							Dim sequenceName_extractSourceData As String = "EPtoENT_extractSourceData"
							Dim customSubstVars_extractSourceData As New Dictionary(Of String, String)
							customSubstVars_extractSourceData.Add("Function", "extractSourceData")
							Dim TaskActivityItem_extractSourceData_obj1 As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_extractSourceData, customSubstVars_extractSourceData)
							
							'submit subtask id
							CreateSubTask(si,jobid.ToString,TaskActivityItem_extractSourceData_obj1.UniqueID.ToString,"Sqnc_Submit_SubTask")
							
							Dim TaskActivityItem_extractSourceData_obj2 As TaskActivityItem = BRApi.TaskActivity.GetTaskActivityItem(si, TaskActivityItem_extractSourceData_obj1.UniqueID)
							If TaskActivityItem_extractSourceData_obj2.TaskActivityStatus = TaskActivityStatus.Failed Then
								processlog(si, globals, "extractSourceData Failed")
								'update watcher = -1, fail
								updateWatcher(si,globals,watcher_table,activityId,"fail")
								Throw New System.Exception("extractSourceData Failed")
							ElseIf TaskActivityItem_extractSourceData_obj2.TaskActivityStatus = TaskActivityStatus.Completed
								If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "extractSourceData Completed")
								processlog(si, globals, "extractSourceData Completed")
								'call load sqnc
								Dim sequenceName_load As String = "EPtoENT_load"
								Dim customSubstVars_load As New Dictionary(Of String, String)
								Dim cclist As String = DirectCast(globals.GetObject("EPtoENT_getCClist"), String)
								
								Dim cclist_w_Eprefix As String = cclist.Replace(",",",E#")
								cclist_w_Eprefix = "E#" & cclist_w_Eprefix
								
								Dim cclist_vbo_maps As String = cclist.Replace(",","','")
								cclist_vbo_maps = "'" & cclist_vbo_maps & "'"
								
								Dim cclist_omd As String = String.Empty
								cclist_omd = String.Join("-", cclist_w_Eprefix.Split(",")).Replace("E#","")
								
								'sams ecomm vbo list
								Dim sql_ecomm As String = "SELECT DISTINCT VBO FROM " & EPSharedConstants.sRACITable & " WHERE AnaplanECF_Filter LIKE '%Anaplan%'"
								Dim dt_ecomm As New DataTable
								Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
									dt_ecomm = BRApi.Database.ExecuteSql(dbConnApp, sql_ecomm, False)
								End Using
								
								Dim ecomm_entityList As New List(Of String)
								If dt_ecomm IsNot Nothing AndAlso dt_ecomm.Rows.Count>0
									For Each dr_ecomm In dt_ecomm.Rows
										ecomm_entityList.Add(dr_ecomm("VBO"))
									Next	
								End If
								
								globals.SetObject("EPtoENT_SAMS_ECOM_VBO", ecomm_entityList)
								
								'sams additional ecomm cc list
								Dim sql_ecomm_cc As String = "SELECT CC FROM XFW_EP_CC_Attribute WHERE Attribute1 = 'SAMS_ECOMM'"
								Dim dt_ecomm_cc As New DataTable
								Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
									dt_ecomm_cc = BRApi.Database.ExecuteSql(dbConnApp, sql_ecomm_cc, False)
								End Using
								Dim ecomm_entityList_cc As New List(Of String)
								If dt_ecomm_cc IsNot Nothing AndAlso dt_ecomm_cc.Rows.Count>0
									For Each dr_ecomm_cc In dt_ecomm_cc.Rows
										ecomm_entityList_cc.Add(dr_ecomm_cc("CC"))
									Next	
								End If
								globals.SetObject("EPtoENT_SAMS_ECOM_CCList", ecomm_entityList_cc)
								
								'vbo-cc mappings for cclist in watcher
								Dim sql As New Text.StringBuilder
								sql.Append("SELECT COST_CENTER,VBO_NAME FROM [dbo].[" & EPSharedConstants.sVBOCCMappingTable & "] WHERE COST_CENTER IN (" & cclist_vbo_maps & ")")
								
								Dim VBOCCdt As DataTable = Nothing
								Dim VBOCCdict As New Dictionary(Of String, String)
								Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
									VBOCCdt = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, sql.ToString, True)
								End Using
								
								If VBOCCdt.Rows.Count > 0
									For Each VBOCCdr As DataRow In VBOCCdt.Rows
										If Not VBOCCdict.ContainsKey(VBOCCdr("COST_CENTER"))
											VBOCCdict.Add(VBOCCdr("COST_CENTER"),VBOCCdr("VBO_NAME"))
										End If
									Next
								End If
							
								globals.SetObject("EPtoENT_VBOCC_Mappings", VBOCCdict)
								
								customSubstVars_load.Add("cclist",cclist_w_Eprefix)
								Dim TaskActivityItem_load_obj1 As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_load, customSubstVars_load)
								'Dim TaskActivityItem_load_obj1 As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(si, sequenceName_load, customSubstVars_load)
								
								'submit subtask id
								CreateSubTask(si,jobid.ToString,TaskActivityItem_load_obj1.UniqueID.ToString,"Sqnc_Submit_SubTask")
								
								Dim TaskActivityItem_load_obj2 As TaskActivityItem = BRApi.TaskActivity.GetTaskActivityItem(si, TaskActivityItem_load_obj1.UniqueID)
								If TaskActivityItem_load_obj2.TaskActivityStatus = TaskActivityStatus.Failed Then
									'update watcher = -1, fail
									processlog(si, globals, "load Failed")
									updateWatcher(si,globals,watcher_table,activityId,"fail")
									Throw New System.Exception("load Failed")
								ElseIf TaskActivityItem_extractSourceData_obj2.TaskActivityStatus = TaskActivityStatus.Completed
									If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "load Completed")
									processlog(si, globals, "load Completed")
'										'call consolidate sqnc
'										Dim sequenceName_consolidate As String = "EPtoENT_consolidate"
'										Dim customSubstVars_consolidate As New Dictionary(Of String, String)
'										Dim TaskActivityItem_consolidate_obj1 As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_consolidate, customSubstVars_consolidate)
										
'										'submit subtask id
'										CreateSubTask(si,jobid.ToString,TaskActivityItem_consolidate_obj1.UniqueID.ToString,"Sqnc_Submit_SubTask")
									
'										Dim TaskActivityItem_consolidate_obj2 As TaskActivityItem = BRApi.TaskActivity.GetTaskActivityItem(si, TaskActivityItem_consolidate_obj1.UniqueID)
'										If TaskActivityItem_load_obj2.TaskActivityStatus = TaskActivityStatus.Failed Then
'											'update watcher = -1, fail
'											updateWatcher(si,globals,watcher_table,activityId,"fail")
'											Throw New System.Exception("consolidate Failed")
'										ElseIf TaskActivityItem_load_obj2.TaskActivityStatus = TaskActivityStatus.Completed Then
'											If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "consolidate Completed")
'											update watcher = 1, success
											updateWatcher(si,globals,watcher_table,activityId,"success")
											processlog(si, globals, "Watcher update successful")
											Dim validation_params As New Dictionary(Of String, String)		
											validation_params.Add("JobId", jobid.ToString)
											validation_params.Add("EntityList", cclist_omd)
											validation_params.Add("JsonFile", "ep_ens.json")
											Dim validationTAI As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(si, "Sqnc_run_validation", validation_params)
											CreateSubTask(si,jobid.ToString,validationTAI.UniqueID.ToString,"Sqnc_Submit_SubTask")
											processlog(si, globals, "Validation execution successful")
											CreateLogTask(si, globals, jobid.ToString)
'										End If
									
									
								End If
							End If
						End If	
						
				End Select

				Return Nothing
			Catch ex As Exception
				updateWatcher(si,globals,watcher_table,activityId,"fail")
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		#Region "Helper Functions"
		'update watcher based on status
		Private Sub updateWatcher(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal watcher_table As String, ByVal activityId As String, ByVal action As String)
			Try	
				Dim uniquecclist As String = String.Empty
				uniquecclist = DirectCast(globals.GetObject("EPtoENT_getCClist"), String)
				uniquecclist = uniquecclist.Replace(",", "','")
				
				Dim sql As New Text.StringBuilder
				If action.XFEqualsIgnoreCase("success") Then
                   sql.Append("UPDATE " & EPSharedConstants.sWatcherTable & " SET Run_Flag=1,Processed_On='"& DateTime.Now & "' WHERE Wait_Flag=0 AND ActivityID='"& activityId &"' AND CostCenter In ('" & uniquecclist.ToString & "') ")
                   sql.Append("UPDATE " & EPSharedConstants.sWatcherTable & " SET Run_Flag=0,Wait_flag=0,Processed_On='"& DateTime.Now & "' WHERE Wait_Flag=1 AND ActivityID='"& activityId &"' AND CostCenter In ('" & uniquecclist & "') ") 
			    ElseIf action.XFEqualsIgnoreCase("fail")
					sql.Append("UPDATE " & EPSharedConstants.sWatcherTable & " SET Run_Flag=-1,Processed_On='"& DateTime.Now &"' WHERE  ActivityID='"& activityId &"' AND CostCenter In ('" & uniquecclist & "') ")
				ElseIf action.XFEqualsIgnoreCase("running")
					sql.Append("UPDATE " & EPSharedConstants.sWatcherTable & " SET Run_Flag=2,Processed_On=null,Requested_On='"& DateTime.Now &"'  WHERE  ActivityID='"& activityId &"' AND CostCenter In ('" & uniquecclist & "') ")
				End If
				If sql.Length>0
					Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							BRAPi.Database.ExecuteActionQuery(dbConnApp,sql.ToString,False,False)
					End Using
			    End If
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		'create main task entry in OMD
		Private Sub CreateTask(ByVal si As SessionInfo,  ByVal jobid As String, ByVal task_desc As String, ByVal sequenceName_task As String)
			Try
				Dim dict As New Dictionary(Of String, String)
				dict.Add("JobId", jobid)
				dict.Add("Description", task_desc)
				BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_task, dict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub
		
		'create sub task entry in OMD
		Private Sub CreateSubTask(ByVal si As SessionInfo,  ByVal taskid As String, ByVal subtaskid As String, ByVal sequenceName_subtask As String)
			Try
				Dim subtask_dict As New Dictionary(Of String, String)
				subtask_dict.Add("JobId", taskid)
				subtask_dict.Add("SubTaskId", subtaskid)
				subtask_dict.Add("Status", String.Empty)
				BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_subtask, subtask_dict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub
		
		'error log
		Private Sub processlog(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal logmessage As String)
			Try
				globals.GetObject("EPtoENT_PROCESS_LOG").AppendLine(Environment.NewLine & "[" & DateTime.Now.ToString & "] - " & logmessage)
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		
		End Sub
		
		'submit log to omd
		Private Sub CreateLogTask(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal jobid As String)
			Try
				Dim logdict As New Dictionary(Of String, String)
				logdict("jobId") = jobid.ToString
				logdict("FileName") = "EPtoENT_PROCESS_LOG"
				logdict("Message") = globals.GetObject("EPtoENT_PROCESS_LOG").ToString
				BRApi.Utilities.ExecuteDataMgmtSequence(si,"Sqnc_log_msg",logdict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		'print dt
		Private Function PrintDT(dt As DataTable) As Text.StringBuilder
			Dim sCSV As New Text.StringBuilder
			If dt IsNot Nothing Then
				If dt.Rows.Count > 0 Then
					
					For Each dc As DataColumn In dt.Columns
						sCSV.Append(dc.ColumnName & ",")
					Next
					sCSV.Remove(sCSV.Length-1,1)
					sCSV.Append(Environment.NewLine)
					For Each dr As DataRow In dt.Rows
						For Each dc As DataColumn In dt.Columns
	     					sCSV.Append(dr(dc).ToString & ",")
						Next
						sCSV.Remove(sCSV.Length-1,1)
						sCSV.Append(Environment.NewLine)
					Next
				End If
			End If
			Return sCSV
    	End Function
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="TRG_EPtoENT_MAIN">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_SharedConstants" />
            </referencedAssemblies>
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports OneStream.BusinessRule.DashboardStringFunction.EP_SharedConstants
#End Region
#Region "Rule Change Mgmt"
'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 - - Integration Functions
	'Mods:		
'--------------------------------------------------------------------------------------------------------------------------------------------
#End Region
Namespace OneStream.BusinessRule.Extender.TRG_EPtoENT_MAIN
	Public Class MainClass
		
		#Region "Constants"
		Const DEBUG As Boolean = True
		#End Region
	
		#Region "Main"
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Dim watcher_table As String = EPSharedConstants.sWatcherTable
				Dim activityId As String = "TRG1"
				Dim getcclist_flag As String = args.NameValuePairs.XFGetValue("getcclist_flag")
				Dim EPtoENT_Process_log As New Text.StringBuilder
				
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						globals.SetObject("EPtoENT_PROCESS_LOG", EPtoENT_Process_log)
						Dim jobid As Guid = Guid.NewGuid
						Dim customSubstVars As New Dictionary(Of String, String)
						customSubstVars.Add("JobId", jobid.ToString)
						'customSubstVars.Add("Description","Enterprise:Register->Enterprise:ENT")
						customSubstVars.Add("Source","ENTERPRISE")
						customSubstVars.Add("Target","ENTERPRISE")
						customSubstVars.Add("SourceAddInfo","REGISTER")
						customSubstVars.Add("TargetAddInfo","ENT")
						customSubstVars.Add("SourceScenario","Plan_Working")
						customSubstVars.Add("TargetScenario","Plan_Working")
						BRApi.Utilities.ExecuteDataMgmtSequence(si, "Sqnc_Submit_Job", customSubstVars)
						Dim dict  As New Dictionary(Of String, String)
						dict.Add("JobId", jobid.ToString)
						dict.Add("getcclist_flag", getcclist_flag)
						
						Dim sqnc_trigger As String = "EPtoENT_Trigger"
						
						'check if job already running, if yes skip, if no initiate the
						If Not CheckIfJobRunning(si, sqnc_trigger)
							Dim objTaskActivityItem As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(si, sqnc_trigger, dict)
	 						CreateSubTask(si, jobid.ToString, objTaskActivityItem.UniqueID.ToString, "Sqnc_Submit_SubTask")
							Dim objTaskActivityItem2 As TaskActivityItem = BRApi.TaskActivity.GetTaskActivityItem(si, objTaskActivityItem.UniqueID)
							
						Else
							If DEBUG Then BRApi.ErrorLog.LogMessage(si, sqnc_trigger & " is already running")
							'submit entry to skip trigger table for logging
							SubmitToSkipTriggerTable(si, sqnc_trigger)
						End If

				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		'check if trigger is already running
		Private Function CheckIfJobRunning(ByVal si As SessionInfo, ByVal sqnc_name As String) As Boolean
			Try
				Dim job_status As Boolean = True
				Dim dt As DataTable = Nothing
				Dim sql As String = "SELECT TaskActivityStatus FROM TaskActivity WHERE Description = '" & sqnc_name & "' AND TaskActivityStatus = 1000"
				Using dbConnApp As DbConnInfo = BRApi.Database.CreateFrameworkDbConnInfo(si)
					dt = BRAPi.Database.ExecuteSql(dbConnApp,sql,False)
				End Using
				If dt IsNot Nothing AndAlso dt.Rows.Count < 1
					job_status = False
				End If
			Return job_status
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function 
		
		'submit entry in skip trigger table for logging
		Private Sub SubmitToSkipTriggerTable(ByVal si As SessionInfo, ByVal sqnc_name As String)
			Try
				Dim uniqueid As String = Guid.NewGuid.ToString
				Dim username As String = BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName).User.Description
				Dim date_time As DateTime = System.DateTime.Now
				Dim sql As String = "INSERT INTO " & EPSharedConstants.sSkipTriggerTable & " VALUES ('" & uniqueid & "','" & sqnc_name & "','" & username & "','" & date_time & "')"
				BRAPi.ErrorLog.LogMessage(si, "XFW_ExpensePlanning_Skip_Triggers", sql)
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					BRApi.Database.ExecuteActionQuery (dbConnApp, sql, False, False)
				End Using
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub	
		
		Private Sub CreateSubTask(ByVal si As SessionInfo, ByVal taskid As String, ByVal subtaskid As String, ByVal sequenceName_subtask As String)
			Try
				Dim subtask_dict As New Dictionary(Of String, String)
				subtask_dict.Add("JobId", taskid)
				subtask_dict.Add("SubTaskId", subtaskid)
				subtask_dict.Add("Status", "Yes")
				BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_subtask, subtask_dict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub
		
		
		
		Private Sub processlog(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal logmessage As String)
			Try
				globals.GetObject("EPtoENT_PROCESS_LOG").AppendLine(Environment.NewLine & "[" & DateTime.Now.ToString & "] - " & logmessage)
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		
		End Sub
		
		'submit log to omd
		Private Sub CreateLogTask(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal jobid As String)
			Try
				Dim logdict As New Dictionary(Of String, String)
				logdict("jobId") = jobid.ToString
				logdict("FileName") = "EPtoENT_PROCESS_LOG"
				logdict("Message") = globals.GetObject("EPtoENT_PROCESS_LOG").ToString
				BRApi.Utilities.ExecuteDataMgmtSequence(si,"Sqnc_log_msg",logdict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		#End Region
	End Class
End Namespace]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="TRG_EPtoFCP">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.TRG_EPtoFCP
	Public Class MainClass
		
		#Region "Main Function"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Dim watcher_table As String = "XFW_ExpensePlanning_Watcher"
			Dim activityId As String = "TRG5"
			Dim jobid = args.NameValuePairs.XFGetValue("JobId")
			Dim getcclist_flag As String = args.NameValuePairs.XFGetValue("getcclist_flag")
			globals.SetObject("getcclist_flag",getcclist_flag)
			
			Try
				Dim DEBUG As Boolean = False
				
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						' --------------------------- call getcclist sqnc -------------------
						Dim sequenceName_getCClist As String = "EPtoFCP_getCClist"
						Dim customSubstVars_getCClist As New Dictionary(Of String, String)
						customSubstVars_getCClist.Add("Function", "getCClist")
						Dim TaskActivityItem_getCClist_obj1 As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_getCClist, customSubstVars_getCClist)
						
						' --------------------- submit subtask id in OMD -----------------------------
						CreateSubTask(si,jobid.ToString,TaskActivityItem_getCClist_obj1.UniqueID.ToString,"Sqnc_Submit_SubTask")
						
						' --------------------- get current status of subtask -------------------------
						Dim TaskActivityItem_getCClist_obj2 As TaskActivityItem = BRApi.TaskActivity.GetTaskActivityItem(si, TaskActivityItem_getCClist_obj1.UniqueID)
						
						If TaskActivityItem_getCClist_obj2.TaskActivityStatus = TaskActivityStatus.Failed Then
							' ---------------------- update watcher = -1, fail -------------------
							updateWatcher(si,globals,watcher_table,activityId,"fail")
							' --------------------- throw exception and log it -------------------
							processlog(si, globals, "getCClist Failed")
							Throw New System.Exception("getCClist Failed")
						
						ElseIf TaskActivityItem_getCClist_obj2.TaskActivityStatus = TaskActivityStatus.Completed Then
							processlog(si, globals, "getCClist Completed")
							
							' --------------------- if no modified cost centers in watcher, return ----------------------
							Dim getcclist As String = DirectCast(globals.GetObject("EPtoFCP_getCClist"),String)
							If Not getcclist.Length > 0 
								processlog(si, globals, "No unprocessed cost centers in Watcher table")
								CreateLogTask(si, globals, jobid.ToString)
								Return Nothing
							End If
							
							processlog(si, globals, "cclist - " & getcclist)
							' ------------------------- update watcher = 2, running -------------------------
							updateWatcher(si,globals,watcher_table,activityId,"running")
							
							' ----------------------- call extract source sqnc ------------------------------
							If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "getCClist Completed")
							Dim sequenceName_extractSourceData As String = "EPtoFCP_extractSourceData"
							Dim customSubstVars_extractSourceData As New Dictionary(Of String, String)
							customSubstVars_extractSourceData.Add("Function", "extractSourceData")
							Dim TaskActivityItem_extractSourceData_obj1 As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_extractSourceData, customSubstVars_extractSourceData)
							
							' -------------------- submit subtask id of extract in OMD -------------------------
							CreateSubTask(si,jobid.ToString,TaskActivityItem_extractSourceData_obj1.UniqueID.ToString,"Sqnc_Submit_SubTask")
							
							Dim TaskActivityItem_extractSourceData_obj2 As TaskActivityItem = BRApi.TaskActivity.GetTaskActivityItem(si, TaskActivityItem_extractSourceData_obj1.UniqueID)
							If TaskActivityItem_extractSourceData_obj2.TaskActivityStatus = TaskActivityStatus.Failed Then
								processlog(si, globals, "extractSourceData Failed")
								' ------------------- update watcher = -1, fail -----------------
								updateWatcher(si,globals,watcher_table,activityId,"fail")
								Throw New System.Exception("extractSourceData Failed")
								
							ElseIf TaskActivityItem_extractSourceData_obj2.TaskActivityStatus = TaskActivityStatus.Completed
								If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "extractSourceData Completed")
								processlog(si, globals, "extractSourceData Completed")
								' ----------------- call load sqnc -------------------------------
								Dim sequenceName_load As String = "EPtoFCP_load"
								Dim customSubstVars_load As New Dictionary(Of String, String)
								Dim cclist As String = DirectCast(globals.GetObject("EPtoFCP_getCClist"), String)
								
								cclist = cclist.Replace(",",",E#")
								cclist = "E#" & cclist
								Dim cclist_omd As String = String.Empty
								cclist_omd = String.Join("-", cclist.Split(",")).Replace("E#","")
								
								customSubstVars_load.Add("cclist",cclist)
								Dim TaskActivityItem_load_obj1 As TaskActivityItem = BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_load, customSubstVars_load)
								
								' --------------------------- submit subtask id of load in OMD -----------------------
								CreateSubTask(si,jobid.ToString,TaskActivityItem_load_obj1.UniqueID.ToString,"Sqnc_Submit_SubTask")
								
								Dim TaskActivityItem_load_obj2 As TaskActivityItem = BRApi.TaskActivity.GetTaskActivityItem(si, TaskActivityItem_load_obj1.UniqueID)
								If TaskActivityItem_load_obj2.TaskActivityStatus = TaskActivityStatus.Failed Then
									' ------------------ update watcher = -1, fail ------------------------
									processlog(si, globals, "load Failed")
									updateWatcher(si,globals,watcher_table,activityId,"fail")
									Throw New System.Exception("load Failed")
								ElseIf TaskActivityItem_extractSourceData_obj2.TaskActivityStatus = TaskActivityStatus.Completed
									If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "load Completed")
									processlog(si, globals, "load Completed")
'										
									' -------------------- update watcher = 1, success -------------------
									updateWatcher(si,globals,watcher_table,activityId,"success")
									processlog(si, globals, "Watcher update successful")
								End If
							End If
						End If	
						
				End Select

				Return Nothing
			Catch ex As Exception
				updateWatcher(si,globals,watcher_table,activityId,"fail")
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			Finally
				' --------------- creating logs in OMD ---------------------
				CreateLogTask(si, globals, jobid.ToString)
			End Try
		End Function
		#End Region
		
		' -------------- update watcher based on status --------------------
		#Region "update watcher function"
		Private Sub updateWatcher(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal watcher_table As String, ByVal activityId As String, ByVal action As String)
			Try	
				Dim uniquecclist As String = String.Empty
				uniquecclist = DirectCast(globals.GetObject("EPtoFCP_getCClist"), String)
				uniquecclist = uniquecclist.Replace(",", "','")
				
				Dim sql As New Text.StringBuilder
				If action.XFEqualsIgnoreCase("success") Then
                   sql.Append("UPDATE XFW_ExpensePlanning_Watcher SET Run_Flag=1,Processed_On='"& DateTime.Now & "' WHERE Wait_Flag=0 AND ActivityID='"& activityId &"' AND CostCenter In ('" & uniquecclist.ToString & "') ")
                   sql.Append("UPDATE XFW_ExpensePlanning_Watcher SET Run_Flag=0,Wait_flag=0,Processed_On='"& DateTime.Now & "' WHERE Wait_Flag=1 AND ActivityID='"& activityId &"' AND CostCenter In ('" & uniquecclist & "') ") 
			    ElseIf action.XFEqualsIgnoreCase("fail")
					sql.Append("UPDATE XFW_ExpensePlanning_Watcher SET Run_Flag=-1,Processed_On='"& DateTime.Now &"' WHERE  ActivityID='"& activityId &"' AND CostCenter In ('" & uniquecclist & "') ")
				ElseIf action.XFEqualsIgnoreCase("running")
					sql.Append("UPDATE XFW_ExpensePlanning_Watcher SET Run_Flag=2,Processed_On=null,Requested_On='"& DateTime.Now &"'  WHERE  ActivityID='"& activityId &"' AND CostCenter In ('" & uniquecclist & "') ")
				End If
				If sql.Length>0
					Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							BRAPi.Database.ExecuteActionQuery(dbConnApp,sql.ToString,False,False)
					End Using
			    End If
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		#End Region
		
		' -------------- create sub task entry in OMD ---------------------
		#Region "Create Sub Task"
		Private Sub CreateSubTask(ByVal si As SessionInfo,  ByVal taskid As String, ByVal subtaskid As String, ByVal sequenceName_subtask As String)
			Try
				Dim subtask_dict As New Dictionary(Of String, String)
				subtask_dict.Add("JobId", taskid)
				subtask_dict.Add("SubTaskId", subtaskid)
				subtask_dict.Add("Status", String.Empty)
				BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_subtask, subtask_dict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub
		#End Region
		
		' -------------- maintaining error log -----------------------------
		#Region "Process Log function"
		Private Sub processlog(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal logmessage As String)
			Try
				globals.GetObject("EPtoFCP_PROCESS_LOG").AppendLine(Environment.NewLine & "[" & DateTime.Now.ToString & "] - " & logmessage)
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		
		End Sub
		#End Region
		
		' -------------- submit log to omd ---------------------------------
		#Region "Create Log Task Function"
		Private Sub CreateLogTask(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal jobid As String)
			Try
				Dim logdict As New Dictionary(Of String, String)
				logdict("jobId") = jobid.ToString
				logdict("FileName") = "EPtoFCP_PROCESS_LOG"
				logdict("Message") = globals.GetObject("EPtoFCP_PROCESS_LOG").ToString
				BRApi.Utilities.ExecuteDataMgmtSequence(si,"Sqnc_log_msg",logdict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="TRG_EPtoFCP_MAIN">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.TRG_EPtoFCP_MAIN
	Public Class MainClass
		
		#Region "Main Function"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				' ----------------- defining variables ------------------
				Dim watcher_table As String = "XFW_ExpensePlanning_Watcher"
				Dim activityId As String = "TRG5"
				Dim EPtoFCP_Process_log As New Text.StringBuilder
				Dim getcclist_flag As String = args.NameValuePairs.XFGetValue("getcclist_flag")
				
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						globals.SetObject("EPtoFCP_PROCESS_LOG", EPtoFCP_Process_log)
						Dim jobid As Guid = Guid.NewGuid
						' ----------------- creating dictionary parameters for OMD job creation --------------------
						Dim customSubstVars As New Dictionary(Of String, String)
						customSubstVars.Add("JobId", jobid.ToString)
						customSubstVars.Add("Source","ENTERPRISE")
						customSubstVars.Add("Target","FCP")
						customSubstVars.Add("SourceAddInfo","REGISTER")
						customSubstVars.Add("TargetAddInfo","FCP")
						customSubstVars.Add("SourceScenario","Plan_Working")
						customSubstVars.Add("TargetScenario","Plan_Working")
						' ---------------- executing submit job sequence in OMD --------------------------
						BRApi.Utilities.ExecuteDataMgmtSequence(si, "Sqnc_Submit_Job", customSubstVars)
						' ---------------- executing EP to FCP trigger  -----------------------------------
						Dim dict  As New Dictionary(Of String, String)
						dict.Add("JobId", jobid.ToString)
						dict.Add("getcclist_flag", getcclist_flag)
						Dim objTaskActivityItem As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(si, "EPtoFCP_Trigger", dict)
					
 						CreateSubTask(si, jobid.ToString, objTaskActivityItem.UniqueID.ToString, "Sqnc_Submit_SubTask")
						Dim objTaskActivityItem2 As TaskActivityItem = BRApi.TaskActivity.GetTaskActivityItem(si, objTaskActivityItem.UniqueID)
						

				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		
		#Region "Create SubTask Function"
		Private Sub CreateSubTask(ByVal si As SessionInfo, ByVal taskid As String, ByVal subtaskid As String, ByVal sequenceName_subtask As String)
			Try
				' ------------------- calling subtask sequence to create subtask in OMD --------------------------
				Dim subtask_dict As New Dictionary(Of String, String)
				subtask_dict.Add("JobId", taskid)
				subtask_dict.Add("SubTaskId", subtaskid)
				subtask_dict.Add("Status", "Yes")
				BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_subtask, subtask_dict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub
		#End Region
		
		
		
	End Class
End Namespace]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="TRG_EPtoSAMS_MAIN">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
#End Region
#Region "Rule Change Mgmt"
'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 - - Integration Functions
	'Mods:		
'--------------------------------------------------------------------------------------------------------------------------------------------
#End Region
Namespace OneStream.BusinessRule.Extender.TRG_EPtoSAMS_MAIN
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim source_app As String = args.NameValuePairs.XFGetValue("source_app")
						Dim target_app As String = args.NameValuePairs.XFGetValue("target_app")
						Dim getcclist_flag As String = args.NameValuePairs.XFGetValue("getcclist_flag")
						
'						Dim EPtoWMTUS_Process_log As New Text.StringBuilder
'						globals.SetObject("EPtoSAMS_PROCESS_LOG", EPtoWMTUS_Process_log)
						
						
'						Dim Target = args.NameValuePairs.XFGetValue("Target")
'						Dim AppID As String = args.NameValuePairs.XFGetValue("AppID")
						Dim sams_si As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si,source_app,openAppResult.Success)
						Dim jobid As Guid = Guid.NewGuid
						Dim customSubstVars As New Dictionary(Of String, String)
						customSubstVars.Add("JobId", jobid.ToString)
						'customSubstVars.Add("Description","ENTERPRISE:REGISTER->SAMS:CLUBOPS")
						customSubstVars.Add("Source","ENTERPRISE")
						customSubstVars.Add("Target","SAMS")
						customSubstVars.Add("SourceAddInfo","REGISTER")
						customSubstVars.Add("TargetAddInfo","CLUBOPS")
						customSubstVars.Add("SourceScenario","Plan_Working")
						customSubstVars.Add("TargetScenario","Plan_Working")
						BRApi.Utilities.ExecuteDataMgmtSequence(si, "Sqnc_Submit_Job", customSubstVars)
						Dim dict  As New Dictionary(Of String, String)
						dict.Add("JobId", jobid.ToString)
						dict.Add("getcclist_flag", getcclist_flag)
						dict.Add("source_app", source_app)
						dict.Add("target_app", target_app)
						Dim objTaskActivityItem As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(sams_si, "EPtoSAMS_Trigger", dict)
						
''						BRApi.Utilities.ExecuteDataMgmtSequence(si, "Sqnc_Submit_Job", customSubstVars)
						CreateSubTask(si, jobid.ToString, objTaskActivityItem.UniqueID.ToString, "Sqnc_Submit_SubTask")
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
'		Private Function GetOtherAppConnectionString(ByVal si As SessionInfo,ByVal Target As String,ByVal AppID As String) As Object
'			Try	
'				Dim appUniqueID As Guid = ConvertHelper.ToGuid(AppID)
'				Dim varAppToken As New ApplicationToken(si.AppToken.SHA1HashCode, Target, appUniqueID)
'				Dim newSeshInfoOtherApp As New SessionInfo(ClientModuleType.Silverlight, si.WebServerUrlUsedByClient, si.AuthToken, varAppToken, si.Culture)
					
'				Return newSeshInfoOtherApp

'			Catch ex As Exception
'				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'			End Try
'		End Function
		
		Private Sub CreateSubTask(ByVal si As SessionInfo, ByVal taskid As String, ByVal subtaskid As String, ByVal sequenceName_subtask As String)
			Try
				Dim subtask_dict As New Dictionary(Of String, String)
				subtask_dict.Add("JobId", taskid)
				subtask_dict.Add("SubTaskId", subtaskid)
				subtask_dict.Add("Status", "Yes")
				BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_subtask, subtask_dict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub
		
'		Private Sub processlog(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal logmessage As String)
'			Try
'				globals.GetObject("EPtoSAMS_PROCESS_LOG").AppendLine(Environment.NewLine & "[" & DateTime.Now.ToString & "] - " & logmessage)
'			Catch ex As Exception
'				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'			End Try	
		
'		End Sub
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="TRG_EPtoWMTUS">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[#Region "Imports"
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
#End Region
#Region "Rule Change Mgmt"
'--------------------------------------------------------------------------------------------------------------------------------------------
	'Developer: 20210607 - - Integration Functions
	'Mods:		
'--------------------------------------------------------------------------------------------------------------------------------------------
#End Region
Namespace OneStream.BusinessRule.Extender.TRG_EPtoWMTUS
	Public Class MainClass
		#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim source_app As String = args.NameValuePairs.XFGetValue("source_app")
						Dim target_app As String = args.NameValuePairs.XFGetValue("target_app")
						Dim getcclist_flag As String = args.NameValuePairs.XFGetValue("getcclist_flag")
						
'						Dim EPtoWMTUS_Process_log As New Text.StringBuilder
'						globals.SetObject("EPtoWMTUS_PROCESS_LOG", EPtoWMTUS_Process_log)
						
'						Dim Target = args.NameValuePairs.XFGetValue("Target")
'						Dim AppID As String = args.NameValuePairs.XFGetValue("AppID")
						Dim wmtus_si As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si,source_app,openAppResult.Success)
						Dim jobid As Guid = Guid.NewGuid
						Dim customSubstVars As New Dictionary(Of String, String)
						customSubstVars.Add("JobId", jobid.ToString)
						'customSubstVars.Add("Description","ENTERPRISE:REGISTER->WMTUS:WMTOPS")
						customSubstVars.Add("Source","ENTERPRISE")
						customSubstVars.Add("Target","WMTUS")
						customSubstVars.Add("SourceAddInfo","REGISTER")
						customSubstVars.Add("TargetAddInfo","WMTOPS")
						customSubstVars.Add("SourceScenario","Plan_Working")
						customSubstVars.Add("TargetScenario","Plan_Working")
						BRApi.Utilities.ExecuteDataMgmtSequence(si, "Sqnc_Submit_Job", customSubstVars)
						
						Dim dict  As New Dictionary(Of String, String)
						dict.Add("JobId", jobid.ToString)
						dict.Add("getcclist_flag", getcclist_flag)
						dict.Add("source_app", source_app)
						dict.Add("target_app", target_app)
						Dim objTaskActivityItem As TaskActivityItem = BRApi.Utilities.StartDataMgmtSequence(wmtus_si, "EPtoWMTUS_Trigger", dict)
						
'						BRApi.Utilities.ExecuteDataMgmtSequence(si, "Sqnc_Submit_Job", customSubstVars)
						CreateSubTask(si, jobid.ToString, objTaskActivityItem.UniqueID.ToString, "Sqnc_Submit_SubTask")
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		#End Region
		#Region "Helper Function"
		Private Sub CreateSubTask(ByVal si As SessionInfo, ByVal taskid As String, ByVal subtaskid As String, ByVal sequenceName_subtask As String)
			Try
				Dim subtask_dict As New Dictionary(Of String, String)
				subtask_dict.Add("JobId", taskid)
				subtask_dict.Add("SubTaskId", subtaskid)
				subtask_dict.Add("Status", "Yes")
				BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_subtask, subtask_dict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub
		
'		Private Sub processlog(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal logmessage As String)
'			Try
'				globals.GetObject("EPtoWMTUS_PROCESS_LOG").AppendLine(Environment.NewLine & "[" & DateTime.Now.ToString & "] - " & logmessage)
'			Catch ex As Exception
'				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'			End Try	
		
'		End Sub
		#End Region
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="TXM_DataMgmtCreateReconItems">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>true</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OFC_SharedHelper" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OFC_DataMgmtHelper" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OFC_SolutionHelper" />
            </referencedAssemblies>
            <sourceCode><![CDATA[p0ydvemsg5zvnGg1WZqc1skFLnTo8jsR3oeJtYzvDFd4/7fKsez6WkfLHMKgX6YdFd29caPdSUW/WO2mNDSYPdbsKHUZrzuPWZ8dh7CttuQZZChVkIopxzTVILv21IukFvaoPaVEVana19wPpPD2M4AX1oC6y/d8zD7ZYtAr6R8XcAaGo1Re/zPGgKWb/btqGpA7KfQsU6dWeiIrLGeT58jrfa0QXM1WhIiV0dGzyynvZn3QqP7Z4O5SzbV6Zh4fGuHS43x2OCE66EwVOJkOibHyPPY2acoeWPgb4kkEpyBheJXUbnGaku46/FUn94QjRsEJt0Q1OrnE6bNF0iZL9inLSlRpiUZEHJEcMjZMEV4L2h6gh6D+TpO9Ij30DrFk7+l+zGnez2Zaitn43y9d/QlZrUerrksWvCp2ERepmAOcPBK3avPfEyk1PYtcw+knEETO2uGl+Ue6AuO3yS+HTopNkXXf7PnkTvmkrWMo+Pc2w/3ZS35bADRfi0xT5ZC15Nm7J1WiLzgYlF8J0eAnVkt0NSw37mEQwzi23PS4B2UnD6UxtZs+VhzblbXKOFRjZTljA54vH/H58U7AbGthNkShMSSLVA/kALzGA8eHN2TnEwSD9jS5BOKV0ywcBa0yuIkxN4QDSrMLjdbZVQxpS3fId8AR7w3Wt/hTjBHMkqagMDxoXdRfiR1OgtnhqGY6IP2ZInDRxtUe2jqB4i8l9Oy5pza2rsEPX6KZA1z+CSfBKFxKYVXn+LryU8u9J0gLc2qLEBjw9+a09moqR3eGjDMyEFtxktpXpi2fBABd9kB5e4dmz1WB9ceqH5o4MHseFuHeXVzxID+D9OzgFZQ5SJrsWioUF4YiFfDLVG6owoSGP+t+Ujlr0p2IJ5Ugv2H0arZGSUojsR1uMYv3KgeDNp+1boh8CyspLnsD1RKqAxcV7meYcVBKkmT2PUNWpfG1FN7ylNWysgLB7MXQ84n7jRK/472pXAAkRuNiLMrfDN/128b5wQbgGv3o487807JFZgHiGu1HjQfERODHZsYdXBBAyn+gQOoIj4OKuop2iYjL8cNWELOFVAPDNMC0cPdF10IJNHxLBDgf7Pf5kh0HydOntoY6JcWYBNAQ/5lnx0d1E9BFHkkKzJ6YyfM5KyptHsdkXQOZ/11M2p6hqdkAPLQpqk4O7JkKVtslstOM3QEWCC4VkDgHQKXUHyrN2m2dK+EgSyULewkAmkcJES+HwMDgrly2VHN+cnDvKSvej0Kj1lgGfR5Gbrtlm1F2YwkLcOE6z9dbLNARMvG68Guo+Xe2qiFV1cUL1zQvjLKnhZXhfzOJQmfCpJOYBTIEqTY9+CgtBhtvFoA/uIYluB6RUL5hFqnziKQCVobAn6sgQbq083gOzN+5OWdA1gihaXJR2VruE4ibqKSSM5YyKB+4dKhIWc4fTb+iP1GO7Bd25tsezfgdijGApOvQ8NJtknWoiBRqspmfDZMJCwXuV480jBTLtWVnIwSkSKnzpa5CdHCc16lEdeWw6aVSLHiyANjU01UYfy03ZpVfKcF97rpHb4U+3uwrIY1xQ+ZKK9xn6I10d4LSlcGdYTqGX29osZ4PXBXXIeYNaeG3r+sKmy507Ka7HPzVeONol+julBbbiCLg2oxlFg1FzcAcQ2MyB3tnteXS/t+XaOLI0rVzFvVP8Dquh5S7K3zbo1tm20KLKK/WEZ75PDwX/N8+QtZYprAuOEfid3ivp+wQgVSovqrvZl/PFneuyTRAVZtHRCSiCjwj1TMZBoZczW2HomSHZiY3D4uzT6/w3w1xKCoknhP58zZ182gb0sGGGe1kg+1lF5sHZPABsQAxZYqd+bE3xPQT+NkDdn1rMjG521lMS0ef8ULBzGV1S9JuvVOxVIGGLQe7FlDXlVLaDbr+TOKSU6ZoCNXbg0fU/ZSKjLCZjvOKihM7aE4/bRIiJcIoOCfkvFgmWFdJjay0YIih5B1ZmPT6v17tw0+NFmdRRK/vn5LDOuP/GXChwmLJ7TIZzJ3Ne8KzF1ggqkpIkhMVxrbBCMC0T7xAtTl1deI7D1nikFEbgQKlB48p+id3We37a8OqzlWfpxedAfLY0XZ6l6IpuQg9HB+KOiC4agkQeqkMBkv/qZkfs3XVyl+9MtaPzWsix9cpYVWV31Zo8PJ3FaypaD9HluAIrqosi/lkGMBa+j8An3hcxt7jvPNljanKEBjYqyP/CKxdZ3zztK6j7WaZkzmwC5f2jxx8/cI6qqvZKXN+fGzwPjf4ERjDfgVieSRfR9wvVHUBrL5j+KolXSe+3QclaLFR0tNNlu7pdcvkec5kG1jTePmEYh5zqQSpksjTRV6IKt5QFwlgHM/Bk2Uc6Q5Hm7e+RbPYY8DzuAlPgJu4md8ieY2pl8vxhWFkoa0ysq/E5xdVPLdZja4P16EthL0IwRIrZlibHCroFJK78X87TRXocCli4Q4SwJQ7uEYaajryUz5gWAooGmS0bsOTLTSrpOmMGu746v1yZVx2CCwI2ndjGYFU6wY9K8lydTo/74TH0Gnn1jNq4HpiX0cS+rXhVPzMD29AkhIyxIFInZbODpzSq8BvbYStP4RZ+wjUZpi1qLlisgdmaMZPIzkER6cp1tBMcs+H/QZqh/UKpkI2ZA5DYD2IyRXDSv8DIkG0+Me5W85OXavoflM3ovYwbteOvekqYG9Ky0wvhcjeZb/ZXygm3jFfy88ZlxBOXmDmpjA4ACxM6DCEZLzkjO92wlARV8j44loL4xOjcQ7HTlzUkWWDKwdYIC7lLIGclg8z02uyeFVw91FY0SlqH0QWlX4rfBNH1cP4Ke26y6wcofp+paxKLbVECiC7ACI0WxxJu+cNA6vsHf5t1T+IUBRNzt3HfHCYCRpNjc4AzGfQ1zBviXwecg8KGLbeE1RsjoQSWEPdkAncT3vxM/ztCxNcu9fqX7UPv6d9a8enchc+K0+DzS7jdeevL7MhPAEPNgXAJw5echntCqRxfVFpPfLYvoOUVHz4ybukYqWl3ykzKCqNVnP+78wt+eZXY2H2cIy7K39kaLmop7icUeHeHjHs7R4C+BTqmWHtffNT+LjMmvXspXaTExtznREVbn8hsjQz2pP0l5dL7yXMDk0rpzGPT4N4]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="TXM_DataMgmtProcess">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>true</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OFC_SharedHelper" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OFC_DataMgmtHelper" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="TXM_SolutionHelper" />
            </referencedAssemblies>
            <sourceCode><![CDATA[p0ydvemsg5zvnGg1WZqc1skFLnTo8jsR3oeJtYzvDFd4/7fKsez6WkfLHMKgX6YdFd29caPdSUW/WO2mNDSYPdbsKHUZrzuPWZ8dh7CttuQZZChVkIopxzTVILv21IukFvaoPaVEVana19wPpPD2M4AX1oC6y/d8zD7ZYtAr6R8XcAaGo1Re/zPGgKWb/btqGpA7KfQsU6dWeiIrLGeT58jrfa0QXM1WhIiV0dGzyynvZn3QqP7Z4O5SzbV6Zh4fGuHS43x2OCE66EwVOJkOibHyPPY2acoeWPgb4kkEpyBheJXUbnGaku46/FUn94QjRsEJt0Q1OrnE6bNF0iZL9inLSlRpiUZEHJEcMjZMEV4L2h6gh6D+TpO9Ij30DrFk7+l+zGnez2Zaitn43y9d/QlZrUerrksWvCp2ERepmAOcPBK3avPfEyk1PYtcw+knEETO2uGl+Ue6AuO3yS+HTopNkXXf7PnkTvmkrWMo+Pc2w/3ZS35bADRfi0xT5ZC15Nm7J1WiLzgYlF8J0eAnVkt0NSw37mEQwzi23PS4B2UnD6UxtZs+VhzblbXKOFRjZTljA54vH/H58U7AbGthNkShMSSLVA/kALzGA8eHN2TnEwSD9jS5BOKV0ywcBa0yuIkxN4QDSrMLjdbZVQxpS3fId8AR7w3Wt/hTjBHMkqagMDxoXdRfiR1OgtnhqGY6IP2ZInDRxtUe2jqB4i8l9Oy5pza2rsEPX6KZA1z+CSfBKFxKYVXn+LryU8u9J0gLc2qLEBjw9+a09moqR3eGjDMyEFtxktpXpi2fBABd9kB5e4dmz1WB9ceqH5o4MHseFuHeXVzxID+D9OzgFZQ5SJrsWioUF4YiFfDLVG6owoSGP+t+Ujlr0p2IJ5Ugv2H098n4chF6vx5RP9uWXVItG26mLVV7M+2u1PczuCwU48lYfY/Z4f/JHOtTt4E0L+K6A93zd0OFKcr5cN5bKZv3ktfSdh1/gfOGg3QCj75d26nRcf4AwjYCX3w1LMvoFQh3jk6bcdQcXUX9sXoeXbqEvrtqWH6zhMhwxD0qxFo3q+J7kOxTl43gYIGmxDzePCcta1/gR8ZSK4bZsfzadmM3Qx+MskLWWXgM6y2ogOt8O5q+bPwNGd20jCyJPX+oJGgVOTF18w3fIZJ2dpS1rDWdIpVw5qKwLw/6dGVl6SbTgytDfrtrMRZmprPxIJklDhHcXvRDqozYgjbjHE8k3ZuF+MVsCBC2tTAxFVaEHaX99ieG/a3Xu/XF3dI9rPRch2w+OfECCypQodZddByz6d7FAfl+1aruPQbH4kJ9Pig6K4rofEndMf7INLX2uMr7k4KUfZwVx27A4kODBjX1WHNzU7CzsueqSL/aQCGT2bgzEgFG4ZJL9z2BC962TTY46yJ4RN0L/9aW0xSMZi783xYx194xi1SLwkct2k3lHCRfzG7+7PTNe+Yuavr8t9jGghR8JNvaE5Fxt7L9SXSozG+BS/KrmXQihFSzy07C3x9AlRF0dTtqoZCm1hDNLqJHO7TNFhFxe5SI9tYlUZdCJIvUMYy0z2tWcU3NdjloCJ9LBjLQiFdCz8lEeq4j4FTE4ou6h8aLMicp8Tt7fWlaLSfEiSEBWIMaU2hgCrLQI6GQNJn/Vb422S0RUMpvvqQHGmp0ca8483QgzHhABxWsDtgxOGx9aYcfFFNw//Bnmp4HJ8rtHEFMCBKaBZ+7/dAT36xdO31MEl2TdKCHKM4GKw2xg/wgZKuO7BjAA3orrkWeQNPQSiM8oP09ADjbcTeLbp8RacFGnN6MjM+3DdKR7BdCph+KsKaOJaaGths7zHyVXb1GTUQ4u2d+3fmQuYIAavAREiwIJhGHQgfPtLJMu5XmROjp0sTyQmX5N0Hd89KVvjwQ6VMrhWdlM9ME0y/Z3lK+ZMGOfelcOqTIzp7mQlcPzsTnHlCGqjTA6SzlQQxitWqjea92jd/xUP17VPnEtYvbOZQiQJNvQA4JcU67dvWnMcX0dk8drr1nHGubygYEc99ndhTaoV5me/p/qaEEboac3LUZbVEGwU21dKYhx5gYWVM5DKhbD1V2Gki0wKUkXa1IMhy9S7NKCdVL3EahZszzG1INeOx+S5y9utvSdor07hT4BknkskNEROGEKwfhxd/dFfl/CktdnE5yxi+Q8I0pBLKQafrlGhR5WYKjIF8ytszmGF2NOy7fwGaJxeoeuT+WGCftEaRJNBzqSWAZ+q/3K+nFyhDTIZsB3aqcJ7TqKghy9R1SPo0NpTPsQUSsvxEaAdN7aKZgfu5d6s7hqmbQhgFC7uPQ59qr0DU8EawgQXtMvcpY+xzJMvi3RDn+vMjNy2VSW1WNXYMOe6SCq3QkriO3jkDwC1Y+v0APT7cTWrg96vUT8k62S0fu4LmiWQjTMTPbDQNOlg1nPmZRd3S0kuKvdH4LFDtSDRTy+oAJPVr8L04zIw85bcsT+RiB9giIFRmZx9H+9YA1ixbC1GlOxXmarsH2iCyKk5npFqR6vEG/XaGKLx7VPqGkZ4XWmj/Zt5CQfqGRv2jwM3Gs5UzItdg3SSjOErPj2IFfuWgZ9gHFMQl3m3DWqkVgYpCcM+mPDy9JHHdPuQ7j44cif7/+sl81Jgd51QQ5dNw6SmCQfWgUzp1BjiuQfj8XjsweutS8XOdjZMgjyCFrYee40KXyrEo1c27IS5T6sV/KSOmllXMQY9eccgGe3vSryuqPDzcIM7T4BPvJPRjM2M40nPZPZaX2HkpOKc2V5RVnI1ht1V4H6adgtE8DYrD4K1t1eOiMFmlANVMVVjGYVuNNf+RcZOl4pyI2gZib4jFhuAXZ9690mR9g5ZUE4kPhCBOufgc6ptWEUr5oWD6XPuDG1Ax62IgeAnCbeAbvUNtGDDHfbtqIjaQPYCtTzhtERwFmGGUykUnBknaibYLmJ22EMnbzcFw+860N3FcRQUpJdOIHXpUVHlfJGhd9Wa2fSy9lPpLFSXiEJ9Po6UKEJUceYyij8hn5NuC4dcOOPfw98RFFT9IFOjqd32HWW+itKP6Vr1jY5GxOUrFMuNJwkCXWA6Q0mHm9+DGkqVzgebEBezyNvCqtQ0NdYmCh9aWzu7xiRzNFPCRhVXFzzgvzIIMclbHj9lMkQeHxNDVqCfiZY3idjw3G//0SKwx8omvQ3XVAu5EsVLhdK8+5v8Av16zC1FIQOtLKeGt7ix+TLOZBknYQmuMKn93qM7rdw5fA10ied2DBYZcH7Nh7MSoME0T89NLl0yvNUydyF/0NNP+ohTl8KBIprSPgORomnY17zzuVK1iNq/NvMpP5kQlJAWcieX/ewbmVIFzCFghQ0c+wNy13Yhnlv8GlzhF6UgDTHCzNWSivtpVqbsJOvJawQZVKGTKdq2XA3Ru5B4TVvIyAvbsUcZFnvRklPCgm7LAALZv3FV6Z7AJFEnjYkBs83Csq9WG7504FehWF8AnxmYEBGSePG4QyL3/XHOb70x9YXrIhoy4WFA1D9Tu2IGTzc9LuoKseFBTPhMMjIXdJ7I+Q2eN1c4Z1Js6s+Xzsaa3psuj/CZf8En0Vh3WHW04UiDR/f1vfDiqvnSfSAFLRRd5LX/MUlvV5TjjVAbKaFRmKq+t2/j8fWKaNCJ5f1squYftO3AiSre76qq9BsquIDtArry4DHF5b1cFVjfBNzjk4mKJQIebR2Csc5xbIJxAZ0qmBzLKNdr02QPyIPiNElfVpaDDBO8wS5LKRCphE02cPbVeOF70TWnplpTUYuX1EXf4UtWbHhCaXeq7VDoXyLo+Q6NPyfkCcM60OGB0OFT4CNUYCOvZA0DNjFOccdjFKkB2VB9/3VwGfdiG6KH+WZw1omE3Xaa86CTqVD/TDMYBnImyewzseK51fo/FfEZ5NTvX6P+gfgN7UV6tuWAGZXrJJyK1w+n+G6Vbkp3BODceKIstn05j/DvXm+sF03XTe4FLEUdFRwLONZ+x7Ofj7c/y2meGh+vC3XW8biVpSt700Gs1rXdiC/gtRw30xOEu9GP9nNypjy4lFbW1kgF6s/yLPCbUyC25MEt4bimeTGy3vlGxM1a1QKfkO7kgrGuJ0Lzs1mCn9+q8cgQBOad81TChJoXMI0E0ZvyVZqMd/DJdyAZBMiM6pafO6f2+VRSiicwXaxZIi02ViKejZa9qyE9Ve1CzGP2PTMNFZ750RmgRV+EF9ZyZQcWermYv2kVG08e5uVxCmRsOZ0i43eE1WoE9zmeoBtjyavAcTXy7aOaJJJZTJXJ0SHcP0i2Jj7MKEDchmS7OSMqSYZkc3um1hT8lFyXcb66yTGdK+2IB6enhokPYNqFvTX5ydJI2XSpC622fqkOi8IgRKZA1P/IdexU4dvyMPhZO5myvU2v+UqFcmpKDl1RDQ7GwzymERZ0Yvc/y8Ha9pJrtoks604F2pLB0ABbaVi8VphnTBmGEUPj50zZSFboPnWH3QR6TMZkaxOpjyhDzZR8uVmqnQ0qZv7fe8KkKRY/BtFh2ycMiQ/eOPA6CZWBr4dZ0WN31QkWKV00s9DM9oRZxU2YfCuylJQ7ZaApqisHQ84BqkZ1VONEVtFY1/HDbciToPAMNk9DJgc128a2VOYMKweqocttYNBH7/Rn3wLFDaRitjUKX/aAkP0Bcu/njGLzBB4yGzzlOhWR8dsw/x8fNZ0Yu74DfKxdOdyyumkFyJTmD4FXo0lato3byIitCKY4leRtP9Nr1j3LUkIk0yoplm17zaj18IlCbkR6yMqZtQhC3VUZkWQ/GFjpPqExFA6YLZNNER0fFXUvH3/KIgFBCHFBBr1lBdoQxcI3OhTgtwJQ7kbyP50ArnPFYEafCwbyKvy1wMddDk6wZuaUt1vCKFOPmaun/S6pyi9wx7Vl0JxWVdAkmD85As9n6za2hLINEVKk9Vl3dV+N2L5v/tbR5ZjnwtrdWvsumWEV2yoyfupWugLB0uNbIjweiM6qczSLcNp7rvYjOgR8T19whykEntxum0D+sZe0sJQlKe0yEn0Ay0O1zr2znvceGmjjOYC7uA35X5r23BtEcNyfbhYgi0wlAe+nqLstNjCmZ5EQnWrVj4/w13vD4RehjVSBRzK4g4C5YZwwnadtJ/aFweiPIJ4WmL2hR/r4SlTushQ+1A3TYxE28zr+YM1VUfc4rUuNikboghbR+I/QasQL070Zhp/a82DoZ+d7fwMUC0D4QTnMkbnWEjZWx4RWiYtX4Rg4AGR8UoLleBnsmUhDElJ2RdQ/OLuxTqTfHqjbq8UPiAiYnCpA139mKfPuwELwQpurV0zxRMuIzm37chKmrOyEDqmsR0WMrcN/tL4kZ4YG2wXQG3Ph8dCP0Uc2jQeWA=]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ValidateVBOCCMappings">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.ValidateVBOCCMappings
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						Dim VBOdt As DataTable = Nothing
						Dim sql As New Text.StringBuilder
						sql.Append("SELECT DISTINCT VBO_NAME FROM XFW_ExpensePlanning_SEGMENT_VBO")
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							VBOdt = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, sql.ToString, True)
						End Using
						Dim VBOlist As New List(Of String) ({"WMTUS_Total_Operations_mgmt"})
'						If VBOdt.Rows.Count > 0
'							For Each dr As DataRow In VBOdt.Rows
'								VBOlist.Add(dr("VBO_NAME"))
'							Next	
'						End If
					
						For Each VBO In VBOlist 
							Dim cclist_meminfo1 = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "ENT", "E#" & VBO & ".Base", True)
							Dim setA = New HashSet(Of String)
							Dim setB = New HashSet(Of String)
							For Each cc In cclist_meminfo1
								setA.Add(cc.Member.Name)
							Next
							For Each otherVBO In VBOlist
								If otherVBO <> VBO
									Dim cclist_meminfo2 = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "ENT", "E#" & otherVBO & ".Base", True)
									For Each cc In cclist_meminfo2
										setB.Add(cc.Member.Name)
									Next
								End If	
							Next
							CheckVBO_ME(si, VBO, setA, setB)
						Next
						
						
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Function CheckVBO_ME(ByVal si As SessionInfo, ByVal VBO As String, ByVal setA As HashSet(Of String),  ByVal setB As HashSet(Of String))
			Try
				Dim dup_cc As String = String.Empty
				setA.IntersectWith(setB)
				If setA.Count > 0
					For Each item In setA
						dup_cc += item & ","
					Next
				End If
				If dup_cc.Length > 0
					dup_cc = dup_cc.Remove(dup_cc.Length-1,1)
				End If
				
				BRApi.ErrorLog.LogMessage(si, "VBO:" & VBO & ", Duplicate CC:" & dup_cc)
			Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ValidationTest">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.ValidationTest
	Public Class MainClass
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType					
					Case Is = ExtenderFunctionType.Unknown
						
						'Define Variables
						Dim dimensionName As String = "Et"
						Dim wfProfileID As Guid = si.WorkflowClusterPk.ProfileKey
						Dim wfScenarioId As Integer = si.WorkflowClusterPk.ScenarioKey
						Dim wfStartTimeId As Integer = TimeDimHelper.GetIdFromName("2022M8")
						Dim wfEndTimeId As Integer = TimeDimHelper.GetIdFromName("2022M8")
						Dim noDistinct As Boolean = True
						
						'Execute the Variables
						Using dbConnApp As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
						
							Dim dt As DataTable = Nothing
							If noDistinct Then
								'Simple Query
								dt = StageUnmappedForDimension(dbConnApp, dimensionName, wfProfileID, wfScenarioId, wfStartTimeId, wfEndTimeId)	
							Else
								'Standard Query
								dt = StageDistinctUnmappedForDimension(dbConnApp, dimensionName, wfProfileID, wfScenarioId, wfStartTimeId, wfEndTimeId)	
							End If	
								
							If Not dt Is Nothing Then
								BrApi.ErrorLog.LogMessage(si, "Validate Rows Test: " & dt.Rows.Count.ToString)
							End If	
							
						End Using

				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Function StageDistinctUnmappedForDimension(ByVal dbCon As DbConnInfo, ByVal dimensionName As String, ByVal WorkflowProfileKey As Guid, ByVal WorkflowScenarioKey As Integer, ByVal cubeStartTimeId As Integer, ByVal cubeEndTimeId As Integer) As DataTable
            Try
                'Initialize the statement
                Dim strQuery As String = "Select Distinct " & dimensionName & " As " & StageTableFields.DerivedColumns.InvalidMemberName & " "
                strQuery = strQuery & "From " & StageViewNames.Views.StageSourceAndTargetData & " "
                strQuery = strQuery & "Where (" & StageSourceDataColNames.DimWorkflowProfileKey & " = '" & WorkflowProfileKey.ToString & "') "
                strQuery = strQuery & "And (" & StageSourceDataColNames.DimWorkflowScenarioKey & " = " & WorkflowScenarioKey.ToString(CultureInfo.InvariantCulture) & ") "
                strQuery = strQuery & "And (" & StageSourceDataColNames.DimWorkflowTimeKey & " >= " & cubeStartTimeId.ToString(CultureInfo.InvariantCulture) & ") "
                strQuery = strQuery & "And (" & StageSourceDataColNames.DimWorkflowTimeKey & " <= " & cubeEndTimeId.ToString(CultureInfo.InvariantCulture) & ") "
                strQuery = strQuery & "And (" & StageSourceDataColNames.DimRowType & " < " & CInt(SourceRowTypes.DerivedNoValidateOrExport).ToString(CultureInfo.InvariantCulture) & ") "
                strQuery = strQuery & "And ((" & dimensionName & StageConstants.DimensionSuffixes.Target & " = '" & StageConstants.TransformationGeneral.DimUnmapped & "') "
                strQuery = strQuery & "OR (" & dimensionName & StageConstants.DimensionSuffixes.Target & " = '" & String.Empty & "')) "
                strQuery = strQuery & "Order By " & dimensionName

                'Set the return value
                StageDistinctUnmappedForDimension = DbSql.GetDataTableUsingReader(dbCon, strQuery, Nothing, True)
                StageDistinctUnmappedForDimension.TableName = dimensionName

            Catch ex As Exception
                Throw ErrorHandler.LogWrite(dbCon.SI, dbCon.RetryManager, New XFException(dbCon.SI, ex))
            End Try
        End Function

		Public Function StageUnmappedForDimension(ByVal dbCon As DbConnInfo, ByVal dimensionName As String, ByVal WorkflowProfileKey As Guid, ByVal WorkflowScenarioKey As Integer, ByVal cubeStartTimeId As Integer, ByVal cubeEndTimeId As Integer) As DataTable
            Try
                'Initialize the statement
                Dim strQuery As String = "Select " & dimensionName & " As " & StageTableFields.DerivedColumns.InvalidMemberName & " "
                strQuery = strQuery & "From " & StageViewNames.Views.StageSourceAndTargetData & " "
                strQuery = strQuery & "Where (" & StageSourceDataColNames.DimWorkflowProfileKey & " = '" & WorkflowProfileKey.ToString & "') "
                strQuery = strQuery & "And (" & StageSourceDataColNames.DimWorkflowScenarioKey & " = " & WorkflowScenarioKey.ToString(CultureInfo.InvariantCulture) & ") "
                strQuery = strQuery & "And (" & StageSourceDataColNames.DimWorkflowTimeKey & " >= " & cubeStartTimeId.ToString(CultureInfo.InvariantCulture) & ") "
                strQuery = strQuery & "And (" & StageSourceDataColNames.DimWorkflowTimeKey & " <= " & cubeEndTimeId.ToString(CultureInfo.InvariantCulture) & ") "
                strQuery = strQuery & "And (" & StageSourceDataColNames.DimRowType & " < " & CInt(SourceRowTypes.DerivedNoValidateOrExport).ToString(CultureInfo.InvariantCulture) & ") "
                strQuery = strQuery & "And ((" & dimensionName & StageConstants.DimensionSuffixes.Target & " = '" & StageConstants.TransformationGeneral.DimUnmapped & "') "
                strQuery = strQuery & "OR (" & dimensionName & StageConstants.DimensionSuffixes.Target & " = '" & String.Empty & "')) "

                'Set the return value
                Dim dt As DataTable = DbSql.GetDataTableUsingReader(dbCon, strQuery, Nothing, True)
                dt.TableName = dimensionName
				Return dt
				
            Catch ex As Exception
                Throw ErrorHandler.LogWrite(dbCon.SI, dbCon.RetryManager, New XFException(dbCon.SI, ex))
            End Try
        End Function
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="VBO_CC_Mappings">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="EP_Utility" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.VBO_CC_Mappings
	
	
	
	Public Class MainClass
		
		Const DEBUG As Boolean = False
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep, ExtenderFunctionType.Unknown
						
						UpdateVBOSEGMappings(si)
						UpdateVBOCCMappings(si)
						
					
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Sub UpdateVBOSEGMappings(ByVal si As SessionInfo)
			Try
				If DEBUG Then BRAPI.ErrorLog.LogMessage(si, "Inside UpdateVBOSEGMappings")
				Dim attributelist As New Text.StringBuilder
				Dim timeid As Integer = BRApi.Finance.Members.GetMemberId(si, DimTypeID.Time, "2023")
				
				Dim dt As New DataTable
				dt.Columns.Add("VBO_NAME",GetType(String))
				dt.Columns.Add("VBO_DESCRIPTION",GetType(String))
				dt.Columns.Add("SEGMENT",GetType(String))
				dt.Columns.Add("CUBE",GetType(String))
				dt.Columns.Add("GLOBAL_TECH",GetType(String))
				
				
				Dim seg_list As New List(Of String)
				seg_list.Add("Walmart_US")
				seg_list.Add("Sams_US")
				seg_list.Add("Walmart_Corp")
				
				Dim cube_dict As New Dictionary(Of String, String)
				cube_dict.Add("Walmart_US","WMT_US")
				cube_dict.Add("Sams_US", "SAMS")
				cube_dict.Add("Walmart_Corp","CORP")
				
				Dim globaltech_entityList As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "ENT", "E#Global_Tech_Rollup.Base", True)
					
				For Each item In seg_list
						Dim entityList As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "ENT", "E#" & item & ".Base", True)
						For Each entity In entityList
							Dim entityId As Integer = BRApi.Finance.Members.GetMemberId(si, DimTypeID.Entity, entity.Member.Name)
							Dim vbo_attribute As String = BRApi.Finance.Entity.Text(si, entityId, 5, ScenarioTypeId.Budget, timeid)
							If Not attributelist.ToString.Contains(vbo_attribute.Replace("Att_","").Replace("ATT_",""))
									attributelist.Append(vbo_attribute.Replace("Att_","").Replace("ATT_","") & ",")
									Dim row As DataRow = dt.NewRow
									row("VBO_NAME") = vbo_attribute.Replace("Att_","").Replace("ATT_","")
									row("VBO_DESCRIPTION") = "EP_" & vbo_attribute.Replace("Att_","").Replace("ATT_","")
									row("SEGMENT") = item
									row("CUBE") = cube_dict.Item(item)
									If globaltech_entityList.Contains(entity)
										row("GLOBAL_TECH") = "Yes"
									End If
									dt.Rows.Add(row)
							End If
						Next
				Next
				
				Dim sql As String = "DELETE FROM XFW_ExpensePlanning_SEGMENT_VBO"
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					BRAPi.Database.ExecuteActionQuery(dbConnApp,sql,False,False)
				End Using
				
				BRApi.Database.SaveCustomDataTable(si, "Application", "XFW_ExpensePlanning_SEGMENT_VBO", dt, True)
				
				If DEBUG Then BRApi.ErrorLog.LogMessage(si, "UpdateVBOSEGMappings Completed")
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		
		Public Sub UpdateVBOCCMappings(ByVal si As SessionInfo)
			If DEBUG Then BRAPI.ErrorLog.LogMessage(si, "Inside UpdateVBOCCMappings")
			Try
				
				Dim dt As DataTable
				
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					BRAPi.Database.ExecuteActionQuery(dbConnApp, "DELETE FROM XFW_ExpensePlanning_VBO_CC_Mappings", False, False)
					
					'Read VBOs From Static table
					dt = BRAPi.Database.ExecuteSql(dbConnApp, "SELECT * FROM XFW_ExpensePlanning_SEGMENT_VBO;", False)
				End Using
				
				If dt.Rows.Count > 0 Then
					
					Dim dtVBOCC As New DataTable
					dtVBOCC.Columns.Add("VBO_NAME")
					dtVBOCC.Columns.Add("WORKFLOW_PROFILE_VBO")
					dtVBOCC.Columns.Add("COST_CENTER")
					dtVBOCC.Columns.Add("LOCAL_CURRENCY")
					
					For Each dr As DataRow In dt.Rows
						
						'Get base nodes (cost centers) of each VBO
						Dim lstCostCenters As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(si, "ENT", "E#[" & dr("VBO_NAME").ToString & "].Base", True)
						If lstCostCenters.Count > 0  Then
							
							For Each curCostCenter As MemberInfo In lstCostCenters
								Dim drVBOCC As DataRow = dtVBOCC.NewRow
								drVBOCC("VBO_NAME") = dr("VBO_NAME")
								drVBOCC("WORKFLOW_PROFILE_VBO") = "EP_" & dr("VBO_NAME")
								drVBOCC("COST_CENTER") = curCostCenter.Member.Name
								drVBOCC("LOCAL_CURRENCY") = BRApi.Finance.Entity.GetLocalCurrency(si, BRApi.Finance.Members.GetMemberId(si, DimTypeId.Entity, curCostCenter.Member.Name)).Name
								
								dtVBOCC.Rows.Add(drVBOCC)
							Next
						End If
					Next
					
					'Refreshing the static table as per Entity hierarchy
					BRApi.Database.SaveCustomDataTable(si, "App", "XFW_ExpensePlanning_VBO_CC_Mappings", dtVBOCC, False)
					
					If DEBUG Then BRApi.ErrorLog.LogMessage(si, "UpdateVBOCCMappings Completed")
					
					UpdateVBOsinRegister(si, dtVBOCC)
					
					BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, False, "CCVBO_UserID", BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName).User.NameAndDescription)
					BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, False, "CCVBO_LastExecutionTime", DateTime.Now)
					
				End If
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		
		End Sub
		
		Public Sub UpdateVBOsinRegister(ByVal si As SessionInfo, ByVal dt As DataTable)
			If DEBUG Then BRAPI.ErrorLog.LogMessage(si, "Inside UpdateVBOsinRegister")
			
			Try
				
				Dim dtReg As DataTable = Nothing
				Dim sScenarioName As String = ScenarioDimHelper.GetNameFromId(si, si.WorkflowClusterPk.ScenarioKey)
				Dim sTimeName As String = BRApi.Finance.Time.GetNameFromId(si, si.WorkflowClusterPk.TimeKey)
				
				Dim dctVBOCC As New Dictionary(Of String, String)
				
				If dt.Rows.Count > 0 Then
					For Each dr As DataRow In dt.Rows
						If Not dctVBOCC.ContainsKey(dr("COST_CENTER")) Then
							dctVBOCC.Add(dr("COST_CENTER"), dr("VBO_NAME"))
						End If
					Next
				End If
				
				Dim sSQL1 As New Text.StringBuilder
				sSQL1.Append("SELECT DISTINCT CostCenter,GL,WFProfileName FROM XFW_NonWage_Register
								 WHERE WFScenarioName = '" & sScenarioName & "' AND WFTimeName = '" & sTimeName & "' ")

				Using dbConnApp As DBConnInfo = BRAPi.Database.CreateApplicationDbConnInfo(si)
					dtReg = BRAPi.Database.ExecuteSql(dbConnApp, sSQL1.tostring, False)
				End Using
				
				
				
				Dim sSQL2 As New Text.StringBuilder
				For Each drReg As DataRow In dtReg.Rows
					If drReg("WFProfileName").ToString.Contains(".")
					Dim wf_steparray As String() = drReg("WFProfileName").ToString.Split(".")
					Dim wf_step As String = wf_steparray(1)
					If dctVBOCC.ContainsKey(drReg("CostCenter")) AndAlso drReg("WFProfileName").ToString.Replace("EP_","") <> dctVBOCC(drReg("CostCenter")) & "." & wf_step Then
					
					   	sSQL2.AppendLine("UPDATE XFW_NonWage_Register 
										 SET WFProfileName = 'EP_" & dctVBOCC(drReg("CostCenter")) & "." & wf_step & 
										 "' WHERE WFScenarioName = '" & sScenarioName & "' AND WFTimeName = '" & sTimeName & "'
							    		 AND CostCenter = '"& drReg("CostCenter").ToString & "' AND GL = '" & drReg("GL") & "'")
					   		
					End If
				End If
				Next 
				
				If Not sSQL2.ToString.XFEqualsIgnoreCase(String.Empty) Then
					Using dbConnApp As DBConnInfo = BRAPi.Database.CreateApplicationDbConnInfo(si)
							BRAPi.Database.ExecuteActionQuery(dbConnApp, sSQL2.ToString, True, False)
					End Using
				End If
				
				
				If DEBUG Then BRApi.ErrorLog.LogMessage(si, "UpdateVBOsinRegister Completed")
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
			
		End Sub
		
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="WF_Clear">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.WF_Clear
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						Dim yourValue As String = "Test"  '<-- Enter message to write to log
						BRApi.ErrorLog.LogMessage(si, yourValue)
						'define the specific WF to clear - enter in the correct workflow, scenario and WFTime
						Dim wfUnitPKToClear As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, "Admin_corp.Corp_Admin_Adj", "Actual", "2021M12")
						'execute the clear for a specifc source ID - pass in 'Nothing' if looking to clear all source IDs
						brapi.Import.Process.ClearStageData(si, wfUnitPKToClear, Nothing)

						Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
'					Case Is = ExtenderFunctionType.ExecuteExternalDimensionSource
'						'Add External Members
'						Dim externalMembers As New List(Of NameValuePair)
'						externalMembers.Add(New NameValuePair("YourMember1Name","YourMember1Value"))
'						externalMembers.Add(New NameValuePair("YourMember2Name","YourMember2Value"))
'						Return externalMembers
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="WFP_to_ENS_Trigger">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.WFP_to_ENS_Trigger
	Public Class MainClass
		Dim wsi As SessionInfo
		Dim jobid As String
		Dim getCClistTAI As TaskActivityItem
		Dim getCClistTAIStatus As TaskActivityItem
		Dim extractSourceDataTAI As TaskActivityItem
		Dim extractSourceDataTAIStatus As TaskActivityItem
		Dim loadTAI As TaskActivityItem
		Dim loadTAIStatus As TaskActivityItem
		Dim consolidateTAI As TaskActivityItem
		Dim consolidateTAIStatus As TaskActivityItem
		Dim validationTAI As TaskActivityItem
		Dim validationTAIStatus As TaskActivityItem
		
		Dim watcher_table As String = "XFW_PLP_WMT_Watcher"
		Dim activityId As String = "TRG2"
		Dim sequenceName_getCClist As String = "WFPtoENS_getCClist"	
		Dim sequenceName_extractSourceData As String = "WFPtoENS_extractSourceData"
		Dim sequenceName_load As String = "WFPtoENS_load"
		Dim sequenceName_consolidate As String = "WFPtoENS_consolidate"
		
		Dim customSubstVars_getCClist As New Dictionary(Of String, String)
		Dim customSubstVars_consolidate As New Dictionary(Of String, String)
		Dim validation_params As New Dictionary(Of String, String)
		Dim WFPtoENS_PROCESS_LOG As New Text.StringBuilder
		
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						globals.SetObject("getcclist_flag", args.NameValuePairs.XFGetValue("getcclist_flag"))
						globals.SetObject("WFPtoENS_source_app", args.NameValuePairs.XFGetValue("WFPtoENS_source_app"))
						globals.SetObject("WFPtoENS_target_app", args.NameValuePairs.XFGetValue("WFPtoENS_target_app"))
						globals.SetObject("WFPtoENS_PlanYear", args.NameValuePairs.XFGetValue("WFPtoENS_PlanYear"))
'						brapi.ErrorLog.LogMessage(si, "WFPtoENS_PlanYear:" & globals.GetObject("WFPtoENS_PlanYear").ToString)
						globals.SetObject("WFPtoENS_PROCESS_LOG", WFPtoENS_PROCESS_LOG)
						
						Dim chunk_size As Integer = args.NameValuePairs.XFGetValue("chunk_size").XFConvertToInt
						Dim cclist As String = String.Empty
						Dim cclist_chunk As New List(Of String)
						Dim cclist_all() As String
						Dim cclistx As String = String.Empty
						
						wsi = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si, globals.GetObject("WFPtoENS_source_app").ToString, openAppResult.Success)
						jobid = args.NameValuePairs.XFGetValue("JobId")
						
						processlog(si, globals, "TRG_WPtoWFP_MAIN Started")
						processlog(si, globals, "JobID: " & jobid.ToString)
						
						'getCClist
						Try
							customSubstVars_getCClist.Add("Function", "getCClist")
							getCClistTAI = BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_getCClist, customSubstVars_getCClist)
							CreateSubTask(si,jobid.ToString, getCClistTAI.UniqueID.ToString,"Sqnc_Submit_SubTask")
							getCClistTAIStatus = BRApi.TaskActivity.GetTaskActivityItem(si, getCClistTAI.UniqueID)
						Catch ex As Exception
							processlog(si, globals, sequenceName_getCClist & ":" & ex.Message & " InnerException:" & ex.InnerException.Message)
							updateWatcher(si, wsi, globals, watcher_table, activityId, "fail")
						End Try	
						
						If getCClistTAIStatus.TaskActivityStatus = TaskActivityStatus.Failed Then
							updateWatcher(si, wsi, globals, watcher_table, activityId, "fail")
							Throw New System.Exception("getCClist Failed")
						ElseIf getCClistTAIStatus.TaskActivityStatus = TaskActivityStatus.Completed Then
							processlog(si, globals, "getCClist Completed")
							If globals.GetObject("WFPtoENS_getCClist") IsNot Nothing AndAlso DirectCast(globals.GetObject("WFPtoENS_getCClist"), String).Length > 0 Then
								cclist_all = String.Concat(globals.GetObject("WFPtoENS_getCClist").ToString, getDefaultCCSeg(si, args)).Split(",")
								processlog(si, globals, "Cost Center All:" & String.Join(",", cclist_all.ToArray()))
								updateWatcher(si, wsi, globals, watcher_table, activityId, "running")
								
							    '*****************************************************************************************************'
							    'DR-22/09/2021  
								
								'update To Get sams ecomm vbo 
								globals.SetObject("WFPtoENT_SAMS_ECOM_VBO", getecomm_entityList(si))
								globals.SetObject("WFPtoENT_SAMS_ECOM_CC", getSAMSEcomm_entityList(si))
								
								
								
								'cc And vbo-cc mappings
								globals.SetObject("WFPtoENT_VBOCC_Mappings", getVBOCCdict(si, args, cclist_all))
								'********************************************************************************************************'
									
								If cclist_all.Length > chunk_size Then
									cclist_chunk = toChunks(si, cclist_all, chunk_size)
									For Each cclistitr As String In cclist_chunk
										Me.executeTrigger(si, globals, cclistitr)
									Next
								Else
									Me.executeTrigger(si, globals, String.Join(",", cclist_all))
								End If
								
									consolidateTAI = BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_consolidate, Nothing)
									CreateSubTask(si,jobid.ToString,consolidateTAI.UniqueID.ToString,"Sqnc_Submit_SubTask")
									consolidateTAIStatus = BRApi.TaskActivity.GetTaskActivityItem(si, consolidateTAI.UniqueID)
									
									If consolidateTAIStatus.TaskActivityStatus = TaskActivityStatus.Failed Then
										updateWatcher(si,wsi,globals,watcher_table,activityId,"fail")
										processlog(si, globals, "Consolidation Failed")
										Throw New System.Exception("Consolidation Failed")
									ElseIf consolidateTAIStatus.TaskActivityStatus = TaskActivityStatus.Completed Then
										processlog(si, globals, "Consolidation Completed")
										updateWatcher(si,wsi,globals,watcher_table,activityId,"success")
										
										Try
											cclistx = String.Join(",", cclist_all)
											cclistx = String.Join("-", cclistx.Split(",")).Replace("E#","")
											
											validation_params.Add("JobId", jobid.ToString)
											validation_params.Add("JsonFile", "wfp_ens.json")
											validation_params.Add("EntityList", cclistx)
											
											validationTAI = BRApi.Utilities.ExecuteDataMgmtSequence(si, "Sqnc_run_validation", validation_params)
											CreateSubTask(si,jobid.ToString,validationTAI.UniqueID.ToString,"Sqnc_Submit_SubTask")
											validationTAIStatus = BRApi.TaskActivity.GetTaskActivityItem(si, validationTAI.UniqueID)
											
											If validationTAIStatus.TaskActivityStatus = TaskActivityStatus.Failed Then
												processlog(si, globals, "Validation Failed")
											Else
												processlog(si, globals, "Validation Completed")
											End If	
										Catch ex As Exception
											processlog(si, globals, "Sqnc_run_validation:" & ex.Message & " InnerException:" & ex.InnerException.Message)
										End Try	
										
									End If	
										
							Else
								processlog(si, globals, "No CC Found")
							End If	
						End If	
						
				End Select

				Return Nothing
			Catch ex As Exception
				
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			Finally
				Dim customSubstVars_log As New Dictionary(Of String, String)
				
				customSubstVars_log.Add("JobId", jobid)
				customSubstVars_log.Add("FileName", "WFPtoENS_PROCESS_LOG")
				customSubstVars_log.Add("Message", globals.GetObject("WFPtoENS_PROCESS_LOG").ToString)

				BRApi.Utilities.StartDataMgmtSequence(si, "Sqnc_log_msg", customSubstVars_log)	
			End Try
		End Function
		
		Sub executeTrigger(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal cclist As String)
			Try
				
				Dim customSubstVars_extractSourceData As New Dictionary(Of String, String)
				Dim customSubstVars_load As New Dictionary(Of String, String)
				
				'extractSourceData
				Try
					customSubstVars_extractSourceData.Add("Function", "extractSourceData") 
					customSubstVars_extractSourceData.Add("cclist", cclist)
					processlog(si, globals, "Cost Center Chunk:" & cclist)
					extractSourceDataTAI = BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_extractSourceData, customSubstVars_extractSourceData)
					CreateSubTask(si,jobid.ToString,extractSourceDataTAI.UniqueID.ToString,"Sqnc_Submit_SubTask")
					extractSourceDataTAIStatus = BRApi.TaskActivity.GetTaskActivityItem(si, extractSourceDataTAI.UniqueID)
				Catch ex As Exception
					processlog(si, globals, sequenceName_load & ":" & ex.Message & " InnerException:" & ex.InnerException.Message)
					updateWatcher(si, wsi, globals, watcher_table, activityId, "fail")
				End Try
				
				If extractSourceDataTAIStatus.TaskActivityStatus = TaskActivityStatus.Failed Then
					updateWatcher(si,wsi,globals,watcher_table,activityId,"fail")
					processlog(si, globals, "extractSourceData Failed")
					Throw New System.Exception("extractSourceData Failed")
				ElseIf extractSourceDataTAIStatus.TaskActivityStatus = TaskActivityStatus.Completed
					processlog(si, globals, "extractSourceData Completed")
					'load
					If globals.GetObject("WFPtoENS_extractSourceData") IsNot Nothing AndAlso DirectCast(globals.GetObject("WFPtoENS_extractSourceData"), DataTable).Rows.Count > 0 Then
						cclist = String.Join(",", cclist.Split(",").[Select](Function(x) "E#" & x))
						
						customSubstVars_load.Add("WFPtoENS_getCClist", cclist)
						loadTAI = BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_load, customSubstVars_load)
						CreateSubTask(si,jobid.ToString,loadTAI.UniqueID.ToString,"Sqnc_Submit_SubTask")
						loadTAIStatus = BRApi.TaskActivity.GetTaskActivityItem(si, loadTAI.UniqueID)
						
						If loadTAIStatus.TaskActivityStatus = TaskActivityStatus.Failed Then
							updateWatcher(si,wsi,globals,watcher_table,activityId,"fail")
							processlog(si, globals, "Load Failed")
							Throw New System.Exception("Load Failed")
						ElseIf loadTAIStatus.TaskActivityStatus = TaskActivityStatus.Completed
							processlog(si, globals, "Load Completed")
						End If
					End If
				End If
				
			
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
	
		
		Private Sub updateWatcher(ByVal si As SessionInfo, ByVal wsi As SessionInfo, ByVal globals As BRGlobals, ByVal watcher_table As String, ByVal activityId As String, ByVal action As String)
			Try	
				Dim uniquecclist As String = String.Empty
				uniquecclist = DirectCast(globals.GetObject("WFPtoENS_getCClist"), String)
				uniquecclist = uniquecclist.Replace(",", "','")
				
				Dim sql As New Text.StringBuilder
				If action.XFEqualsIgnoreCase("success") Then
                   sql.Append("UPDATE XFW_PLP_WMT_Watcher SET Run_Flag=1,Processed_On='"& DateTime.Now & "' WHERE Wait_Flag=0 AND ActivityID='"& activityId &"' AND CostCenter In ('" & uniquecclist.ToString & "') ")
                   sql.Append("UPDATE XFW_PLP_WMT_Watcher SET Run_Flag=0,Wait_flag=0,Processed_On='"& DateTime.Now & "' WHERE Wait_Flag=1 AND ActivityID='"& activityId &"' AND CostCenter In ('" & uniquecclist & "') ") 
			    ElseIf action.XFEqualsIgnoreCase("fail")
					sql.Append("UPDATE XFW_PLP_WMT_Watcher SET Run_Flag=-1,Processed_On='"& DateTime.Now &"' WHERE  ActivityID='"& activityId &"' AND CostCenter In ('" & uniquecclist & "') ")
				ElseIf action.XFEqualsIgnoreCase("running")
					sql.Append("UPDATE XFW_PLP_WMT_Watcher SET Run_Flag=2,Processed_On=null  WHERE  ActivityID='"& activityId &"' AND CostCenter In ('" & uniquecclist & "') ")
				End If
				If sql.Length > 0
					Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(wsi)
							BRAPi.Database.ExecuteActionQuery(dbConnApp,sql.ToString,False,False)
					End Using
			    End If
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		Private Function getecomm_entityList(ByVal si As SessionInfo) As List(Of String)
			Try
				
				Dim sql_ecomm As String = "SELECT DISTINCT VBO FROM XFW_RACI_Matrix WHERE AnaplanECF_Filter LIKE '%Anaplan%'"
				Dim dt_ecomm As New DataTable
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_ecomm = BRApi.Database.ExecuteSql(dbConnApp, sql_ecomm, False)
				End Using
				Dim ecomm_entityList As New List(Of String)
				If dt_ecomm IsNot Nothing AndAlso dt_ecomm.Rows.Count>0
					For Each dr_ecomm In dt_ecomm.Rows
						ecomm_entityList.Add(dr_ecomm("VBO"))
					Next	
				End If
				
				Return ecomm_entityList
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		'sams additional ecomm cc list outside ecomm VBO
		Private Function getSAMSEcomm_entityList(ByVal si As SessionInfo) As List(Of String)
			Try
				Dim sql_ecomm_cc As String = "SELECT CC FROM XFW_EP_CC_Attribute WHERE Attribute1 = 'Y'"
				Dim dt_ecomm_cc As New DataTable
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_ecomm_cc = BRApi.Database.ExecuteSql(dbConnApp, sql_ecomm_cc, False)
				End Using
				Dim ecomm_entityList_cc As New List(Of String)
				If dt_ecomm_cc IsNot Nothing AndAlso dt_ecomm_cc.Rows.Count>0
					For Each dr_ecomm_cc In dt_ecomm_cc.Rows
						ecomm_entityList_cc.Add(dr_ecomm_cc("CC"))
					Next	
				End If
				
				Return ecomm_entityList_cc
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		
		Private Function getVBOCCdict(ByVal si As SessionInfo, ByVal args As ExtenderArgs, ByVal cclist_all() As String) As Dictionary(Of String, String)
			Try
				Dim cclist_vbo_maps As String = String.Empty
				cclist_vbo_maps = String.Join("','",cclist_all)
				Dim wfp_si As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si,args.NameValuePairs.XFGetValue("WFPtoENS_source_app"),openAppResult.Success)
				Dim sql As New Text.StringBuilder
				sql.Append("SELECT COST_CENTER,VBO_NAME FROM [dbo].[XFW_WMT_PLP_VBO_HIER] WHERE COST_CENTER IN ('" & cclist_vbo_maps & "')")
				
				Dim VBOCCdt As DataTable = Nothing
				Dim VBOCCdict As New Dictionary(Of String, String)
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(wfp_si)
					VBOCCdt = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, sql.ToString, True)
				End Using
				'save vbo-cc mappings in a dictionary
				If VBOCCdt.Rows.Count > 0 Then
					For Each VBOCCdr As DataRow In VBOCCdt.Rows
						If Not VBOCCdict.ContainsKey(VBOCCdr("COST_CENTER"))
							VBOCCdict.Add(VBOCCdr("COST_CENTER"),VBOCCdr("VBO_NAME"))
						End If
					Next
				End If
				
				Return VBOCCdict
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Private Function getDefaultCCSeg(ByVal si As SessionInfo, ByVal args As ExtenderArgs) As String
			Try
				Dim wfp_si As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si,args.NameValuePairs.XFGetValue("WFPtoENS_source_app"),openAppResult.Success)
				Dim sql_defaultcc As String = "SELECT Entity FROM XFW_WMT_ENTITY_ATTRIBUTES WHERE UDA LIKE '%Corp%' OR  UDA LIKE '%SamsUS%' OR UDA LIKE '%INTL%' OR UDA LIKE '%WalmartUS%' "
				Dim sql_defaultcc_dt As New DataTable
				Dim entityList_defaultcc As New Text.StringBuilder
				
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(wfp_si)
					sql_defaultcc_dt = BRApi.Database.ExecuteSql(dbConnApp, sql_defaultcc, False)
				End Using
				
				If sql_defaultcc_dt IsNot Nothing AndAlso sql_defaultcc_dt.Rows.Count > 0 Then
					For Each dfccitm As DataRow In sql_defaultcc_dt.Rows
						entityList_defaultcc.Append("," & dfccitm("Entity"))
					Next
				End If
				
				Return entityList_defaultcc.ToString
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		
		Private Sub CreateSubTask(ByVal si As SessionInfo, ByVal taskid As String, ByVal subtaskid As String, ByVal sequenceName_subtask As String)
			Try
				Dim subtask_dict As New Dictionary(Of String, String)
				subtask_dict.Add("JobId", taskid)
				subtask_dict.Add("SubTaskId", subtaskid)
				subtask_dict.Add("Status", String.Empty)
				BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_subtask, subtask_dict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub
		
		Private Sub processlog(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal logmessage As String)
			Try
				If globals.GetObject("WFPtoENS_PROCESS_LOG") IsNot Nothing  Then
					globals.GetObject("WFPtoENS_PROCESS_LOG").AppendLine(Environment.NewLine & "[" & DateTime.Now.ToString & "] - " & logmessage)
				End If	
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		
		End Sub
		
		Private Function toChunks(ByVal si As SessionInfo, ByVal cclist_all() As String, ByVal chunk_size As Integer) As List(Of String)
			Try
				
				Dim noOfChunk As Integer = 0
				Dim chunkList As New List(Of String)
				Dim templist As New Text.StringBuilder
				Dim temp As String = String.Empty
				Dim tchunk As Integer = chunk_size
				Dim x As Integer = 0
				
				
				noOfChunk = Math.Ceiling(cclist_all.Length / chunk_size)
			
				For i = 0 To noOfChunk - 1
					Dim j As Integer = x
					While j < tchunk 
						If j < cclist_all.Length Then
							templist.Append(cclist_all(j) & ",")
						End If	
						j += 1
					End While
					x += chunk_size 
					tchunk = tchunk + chunk_size
					temp = templist.ToString
					temp = temp.Remove(temp.Length - 1, 1)
					chunkList.Add(temp)
					
					templist.Clear
				Next
				
				Return 	chunkList			
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function	
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="WFPtoENS">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.WFPtoENS
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim DEBUG As Boolean = True
						Dim func As String = args.NameValuePairs.XFGetValue("Function")
						Dim cclist As String = args.NameValuePairs.XFGetValue("cclist")
						Dim wsi_si As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si,globals.GetObject("WFPtoENS_source_app").ToString, openAppResult.Success)
						Dim watcher_table As String = "XFW_PLP_WMT_Watcher"
						
						If func.XFEqualsIgnoreCase("getCClist") Then
							Dim getCCList_status As Boolean = getCClist(si, globals, wsi_si, watcher_table)
							
							If Not getCCList_status Then Return Nothing
							
						ElseIf func.XFEqualsIgnoreCase("extractSourceData")
							Dim wfp_cubeView As String = "WFPtoENS_Push"
							Dim extractSourceData_status As Boolean = extractSourceData(si, globals, wsi_si, wfp_cubeView, cclist)
							If Not extractSourceData_status Then Return Nothing
						End If
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		
		Private Function getCClist(ByVal si As SessionInfo, ByRef globals As BRGLobals, ByVal wsi_si As SessionInfo,  ByVal watcher_table As String) As Boolean

			Dim getCCList_status As Boolean = False
			Try
				Dim getcclist_flag As String = DirectCast(globals.GetObject("getcclist_flag"),String)
				Dim dt As DataTable = Nothing
				Dim uniquecclist As String = String.Empty
				Dim sql As String = String.Empty
				Dim all_entityList As New Text.StringBuilder
				Dim colname As String = String.Empty
				
				'get WMTUS Ecomm VBO list from RACI
				Dim sql_wmtus_ecomm As String = "SELECT DISTINCT VBO FROM XFW_RACI_Matrix WHERE AnaplanECF_Filter LIKE '%ECF%'"
				Dim dt_wmtus_ecomm As New DataTable
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_wmtus_ecomm = BRApi.Database.ExecuteSql(dbConnApp, sql_wmtus_ecomm, False)
				End Using
				Dim entityList_wmtus_ecomm As New List(Of String)
				If dt_wmtus_ecomm IsNot Nothing AndAlso dt_wmtus_ecomm.Rows.Count > 0 Then
					For Each dr_wmtus_ecomm In dt_wmtus_ecomm.Rows
						Dim entityList_meminfo_wmtus_ecomm As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(wsi_si, "WFP_ENT", "E#" & dr_wmtus_ecomm("VBO") & ".Base", True)
						For Each entity_wmtus_ecomm In entityList_meminfo_wmtus_ecomm
							entityList_wmtus_ecomm.Add(entity_wmtus_ecomm.Member.Name)
						Next	
					Next	
				End If	
				
				globals.SetObject("WFPtoENS_wmtusecomm", entityList_wmtus_ecomm)
				
				If getcclist_flag.XFEqualsIgnoreCase("Watcher") Then
					colname = "CostCenter"
					sql = "SELECT DISTINCT " & colname & " FROM " & watcher_table & " WHERE ActivityID='TRG2' AND (Run_Flag=0 OR Run_Flag =-1)"
					
					Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(wsi_si)
						dt = BRAPi.Database.ExecuteSql(dbConnApp, sql, False)
					End Using
					
					If dt IsNot Nothing AndAlso dt.Rows.Count > 0 Then
						For Each dr As DataRow In dt.Rows
							uniquecclist += dr(colname) & ","
						Next
					End If
					
					If uniquecclist.Length > 0 Then
						uniquecclist = uniquecclist.Remove(uniquecclist.Length-1,1)
					End If
					globals.SetObject("WFPtoENS_getCClist", uniquecclist)
					
				ElseIf getcclist_flag.XFEqualsIgnoreCase("All") Then
					
					Dim all_entityList_meminfo As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(wsi_si, "WFP_ENT", "E#Walmart_Total_Company.Base.Where((Text2 Contains 'Overheads') OR (Text2 Contains 'WFP_Operational'))", True)
					Dim all_entityListStr As String = String.Empty
					
					For Each all_entity In all_entityList_meminfo
							all_entityList.Append(all_entity.Member.Name & ",")
					Next
					
					If all_entityList.Length > 0 Then
						all_entityListStr = all_entityList.ToString.Remove(all_entityList.ToString.Length -1, 1)
					End If	
					
					globals.SetObject("WFPtoENS_getCClist", all_entityListStr)
					
				End If
				
				getCCList_status = True
				
			Catch ex As Exception
				getCCList_status = False
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		Return getCCList_status
		End Function	
		
		Private Function extractSourceData(ByVal si As SessionInfo, ByRef globals As BRGLobals, ByVal wsi As SessionInfo, ByVal cubeViewName As String, ByVal cclist As String) As Boolean
			Dim extractSourceData_status As Boolean = False
			Try
				Dim dt As DataTable = Nothing
				
				If cclist.Length > 0 Then
					
					cclist = String.Join(",", cclist.Split(",").[Select](Function(x) "E#" & x))
					
					Dim vParams As New Dictionary(Of String, String)
					vParams.Add("ATAEntity", cclist)
					vParams.Add("ATATime", globals.GetObject("WFPtoENS_PlanYear").ToString)
					
					dt = CVRender(si, wsi, cubeViewName, vParams)
					
					If dt IsNot Nothing AndAlso dt.Rows.Count > 0 Then 
						globals.SetObject("WFPtoENS_extractSourceData", dt)
					End If	
				
				End If	
				
				extractSourceData_status = True
			Catch ex As Exception
				extractSourceData_status = False
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		Return extractSourceData_status
		End Function
		
		Public Function CVRender(ByRef si As SessionInfo, ByRef wsi As SessionInfo, ByVal cubeViewName As String, ByVal vParams As Dictionary(Of String, String)) As DataTable
			Dim value As New NameValueFormatBuilder 
			Dim instance As New XFIfActionExpr("CVFilter", value)
			value = instance.NameValueFormatBuilder
			value.ApplyNameValuePairsFromDictionary(vParams)
			Dim entityDimensionName As String = ""
			Dim entityMemFilter As String = ""
			Dim scenarioDimName As String = ""
			Dim scenarioMemFilter As String = ""
			Dim timeMemFilter As String = ""
			Dim includeCellTextCols As Boolean = False
			Dim useStandardFactTableFields As Boolean = True
			Dim useGenericTimeColNames As Boolean = True
			Dim parallelQueryCount As Integer = 8
			Dim logStatistics As Boolean = False
			Dim dt As DataTable = Nothing
			Try
				
				dt = BRApi.Import.Data.FdxExecuteCubeViewTimePivot(wsi, cubeViewName, 
					entityDimensionName, entityMemFilter, scenarioDimName, scenarioMemFilter, timeMemFilter, value, includeCellTextCols, 
					useStandardFactTableFields, True, Nothing, parallelQueryCount, logStatistics)
				
				If dt IsNot Nothing Then					
					Return dt
				Else
					Return Nothing
				End If
			Catch e As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try
		End Function
		
		Private Sub processlog(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal logmessage As String)
			Try
				globals.GetObject("WFPtoENS_PROCESS_LOG").AppendLine(Environment.NewLine & "[" & DateTime.Now.ToString & "] - " & logmessage)
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		
		End Sub
		
		
		Public Function PrintDT(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal Desc As String)
		Try
			 'Print Table
			 Dim dtprint As New Text.StringBuilder
				 For Each dc As DataColumn In dt.Columns
					dtprint.Append(dc.ColumnName & ",")
				 Next
				 dtprint.Remove(dtprint.Length - 1, 1)
				 dtprint.Append(Environment.NewLine)
				 For Each dr As DataRow In dt.Rows										
					For Each dc As DataColumn In dt.Columns
						dtprint.Append(dr(dc.ColumnName) & ",")
					Next
					dtprint.Remove(dtprint.Length - 1, 1)
					dtprint.Append(Environment.NewLine)
				 Next
				 BRApi.ErrorLog.LogMessage(si, Desc,dtprint.ToString)
		Return Nothing		 
		Catch ex As Exception                
	   		Throw ErrorHandler.LogWrite(si,New XFException(si,ex))
		End Try		 
		End Function
		
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="WFPtoENS_Actual">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.WFPtoENS_Actual
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
						
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						Dim DEBUG As Boolean = True
						Dim func As String = args.NameValuePairs.XFGetValue("Function")
						Dim cclist As String = args.NameValuePairs.XFGetValue("cclist")
						Dim getcclist_flag As String = args.NameValuePairs.XFGetValue("getcclist_flag")
						Dim source_app As String = args.NameValuePairs.XFGetValue("source_app")
						Dim wfp_scenario As String = args.NameValuePairs.XFGetValue("wfp_scenario",String.Empty)
						Dim wfp_year As String = args.NameValuePairs.XFGetValue("wfp_year",String.Empty)
						Dim wfp_month As String = args.NameValuePairs.XFGetValue("wfp_month")
						Dim wsi_si As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si,source_app, openAppResult.Success)
						
						If func.XFEqualsIgnoreCase("getCClist") Then
							Dim getCCList_status As Boolean = getCClist(si, globals, wsi_si, getcclist_flag, wfp_scenario)
							
							If Not getCCList_status Then Return Nothing
							
						ElseIf func.XFEqualsIgnoreCase("extractSourceData")
							Dim wfp_cubeView As String = "WFPtoENS_Actual_Push"
							Dim extractSourceData_status As Boolean = extractSourceData(si, globals, wsi_si, wfp_cubeView, cclist, wfp_scenario, wfp_year, wfp_month)
							If Not extractSourceData_status Then Return Nothing
						End If
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		#Region "getCCList"
		Private Function getCClist(ByVal si As SessionInfo, ByRef globals As BRGLobals, ByVal wsi_si As SessionInfo,  ByVal getcclist_flag As String, ByVal wfp_scenario As String) As Boolean

			Dim getCCList_status As Boolean = False
			Try
				Dim dt As DataTable = Nothing
				Dim uniquecclist As String = String.Empty
				Dim sql As String = String.Empty
				Dim all_entityList As New Text.StringBuilder
				Dim colname As String = String.Empty
				
				'get WMTUS Ecomm VBO list from RACI
				Dim sql_wmtus_ecomm As String = "SELECT DISTINCT VBO FROM XFW_RACI_Matrix WHERE AnaplanECF_Filter LIKE '%ECF%'"
				Dim dt_wmtus_ecomm As New DataTable
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_wmtus_ecomm = BRApi.Database.ExecuteSql(dbConnApp, sql_wmtus_ecomm, False)
				End Using
				Dim entityList_wmtus_ecomm As New List(Of String)
				If dt_wmtus_ecomm IsNot Nothing AndAlso dt_wmtus_ecomm.Rows.Count > 0 Then
					For Each dr_wmtus_ecomm In dt_wmtus_ecomm.Rows
						Dim entityList_meminfo_wmtus_ecomm As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(wsi_si, "WFP_ENT", "E#" & dr_wmtus_ecomm("VBO") & ".Base", True)
						For Each entity_wmtus_ecomm In entityList_meminfo_wmtus_ecomm
							entityList_wmtus_ecomm.Add(entity_wmtus_ecomm.Member.Name)
						Next	
					Next	
				End If	
				
				globals.SetObject("WFPtoENS_wmtusecomm", entityList_wmtus_ecomm)
				
				If getcclist_flag.XFEqualsIgnoreCase("All") Then
					
					Dim all_entityList_meminfo As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(wsi_si, "WFP_ENT", "E#Walmart_Total_Company.Base.Where((Text2 Contains 'Overheads') OR (Text2 Contains 'WFP_Operational'))", True)
					Dim all_entityListStr As String = String.Empty
					
					For Each all_entity In all_entityList_meminfo
							all_entityList.Append(all_entity.Member.Name & ",")
					Next
					
					If all_entityList.Length > 0 Then
						all_entityListStr = all_entityList.ToString.Remove(all_entityList.ToString.Length -1, 1)
					End If	
					
					globals.SetObject("WFPtoENS_" & wfp_scenario & "_getCClist", all_entityListStr)
					BRApi.ErrorLog.LogMessage(si,getcclist_flag & " --- ",all_entityListStr)
				End If
				
				getCCList_status = True
				
			Catch ex As Exception
				getCCList_status = False
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		Return getCCList_status
		End Function	
		#End Region
		
		#Region "extractSourceData"
		Private Function extractSourceData(ByVal si As SessionInfo, ByRef globals As BRGLobals, ByVal wsi As SessionInfo, ByVal cubeViewName As String, ByVal cclist As String,ByVal wfp_scenario As String, ByVal wfp_year As String, ByVal wfp_month As String) As Boolean
			Dim extractSourceData_status As Boolean = False
			Try
				Dim dt As DataTable = Nothing
				
				If cclist.Length > 0 Then
					
					cclist = String.Join(",", cclist.Split(",").[Select](Function(x) "E#" & x))
					
					Dim vParams As New Dictionary(Of String, String)
					vParams.Add("Entity", cclist)
					vParams.Add("Time", wfp_year)
					vParams.Add("Month",wfp_month)
					vParams.Add("Scenario",wfp_scenario)
					
					dt = CVRender(si, wsi, cubeViewName, vParams)
					BRApi.ErrorLog.LogMessage(si,"dt count",dt.Rows.Count.ToString)
					If dt IsNot Nothing AndAlso dt.Rows.Count > 0 Then 
						Me.PrintDT(si,dt,"data ------")
						globals.SetObject("WFPtoENS_" & wfp_scenario & "_extractSourceData", dt)
					End If	
				
				End If	
				
				extractSourceData_status = True
			Catch ex As Exception
				extractSourceData_status = False
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		Return extractSourceData_status
		End Function
		#End Region
		
		#Region "CubeView Render Function"
		Public Function CVRender(ByRef si As SessionInfo, ByRef wsi As SessionInfo, ByVal cubeViewName As String, ByVal vParams As Dictionary(Of String, String)) As DataTable
			Dim value As New NameValueFormatBuilder 
			Dim instance As New XFIfActionExpr("CVFilter", value)
			value = instance.NameValueFormatBuilder
			value.ApplyNameValuePairsFromDictionary(vParams)
			Dim entityDimensionName As String = ""
			Dim entityMemFilter As String = ""
			Dim scenarioDimName As String = ""
			Dim scenarioMemFilter As String = ""
			Dim timeMemFilter As String = ""
			Dim includeCellTextCols As Boolean = False
			Dim useStandardFactTableFields As Boolean = True
			Dim useGenericTimeColNames As Boolean = True
			Dim parallelQueryCount As Integer = 8
			Dim logStatistics As Boolean = False
			Dim dt As DataTable = Nothing
			Try
				
				dt = BRApi.Import.Data.FdxExecuteCubeViewTimePivot(wsi, cubeViewName, 
					entityDimensionName, entityMemFilter, scenarioDimName, scenarioMemFilter, timeMemFilter, value, includeCellTextCols, 
					useStandardFactTableFields, useGenericTimeColNames, Nothing, parallelQueryCount, logStatistics)
				
				If dt IsNot Nothing Then					
					Return dt
				Else
					Return New DataTable
				End If
			Catch e As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try
		End Function
		#End Region
		
		Public Function PrintDT(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal Desc As String)
		Try
			 'Print Table
			 Dim dtprint As New Text.StringBuilder
				 For Each dc As DataColumn In dt.Columns
					dtprint.Append(dc.ColumnName & ",")
				 Next
				 dtprint.Remove(dtprint.Length - 1, 1)
				 dtprint.Append(Environment.NewLine)
				 For Each dr As DataRow In dt.Rows										
					For Each dc As DataColumn In dt.Columns
						dtprint.Append(dr(dc.ColumnName) & ",")
					Next
					dtprint.Remove(dtprint.Length - 1, 1)
					dtprint.Append(Environment.NewLine)
				 Next
				 BRApi.ErrorLog.LogMessage(si, Desc,dtprint.ToString)
		Return Nothing		 
		Catch ex As Exception                
	   		Throw ErrorHandler.LogWrite(si,New XFException(si,ex))
		End Try		 
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="WFPtoENS_Actual_Trigger">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.WFPtoENS_Actual_Trigger
	Public Class MainClass
		Dim wsi As SessionInfo
		Dim jobid As String
		Dim getCClistTAI As TaskActivityItem
		Dim getCClistTAIStatus As TaskActivityItem
		Dim extractSourceDataTAI As TaskActivityItem
		Dim extractSourceDataTAIStatus As TaskActivityItem
		Dim loadTAI As TaskActivityItem
		Dim loadTAIStatus As TaskActivityItem
		Dim consolidateTAI As TaskActivityItem
		Dim consolidateTAIStatus As TaskActivityItem
		Dim validationTAI As TaskActivityItem
		Dim validationTAIStatus As TaskActivityItem
		
		Dim sequenceName_getCClist As String = "WFPtoENS_Actual_getCClist"	
		Dim sequenceName_extractSourceData As String = "WFPtoENS_Actual_extractSourceData"
		Dim sequenceName_load As String = "WFPtoENS_Actual_load"
		Dim sequenceName_consolidate As String = "WFPtoENS_Actual_consolidate"
		Dim wfp_scenario As String = ""
		Dim wfp_year As String = ""
		Dim wfp_month As String = ""
		Dim source_app As String = ""
		
		Dim customSubstVars_getCClist As New Dictionary(Of String, String)
		Dim customSubstVars_consolidate As New Dictionary(Of String, String)
		Dim validation_params As New Dictionary(Of String, String)
		Dim WFPtoENS_PROCESS_LOG As New Text.StringBuilder
		
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						Dim getcclist_flag As String = args.NameValuePairs.XFGetValue("getcclist_flag")
						wfp_scenario = args.NameValuePairs.XFGetValue("wfp_scenario")
						wfp_year = args.NameValuePairs.XFGetValue("wfp_year")
						wfp_month = args.NameValuePairs.XFGetValue("wfp_month")
						source_app = args.NameValuePairs.XFGetValue("source_app")
						Dim chunk_size As Integer = args.NameValuePairs.XFGetValue("chunk_size").XFConvertToInt
						jobid = args.NameValuePairs.XFGetValue("JobId")
						
						globals.SetObject("WFPtoENS_" & wfp_scenario & "_PROCESS_LOG", WFPtoENS_PROCESS_LOG)
						
						
						Dim cclist As String = String.Empty
						Dim cclist_chunk As New List(Of String)
						Dim cclist_all() As String
						Dim cclistx As String = String.Empty
						
						
						processlog(si, globals, "TRG_WFPtoENS_Actual Started")
						processlog(si, globals, "JobID: " & jobid.ToString)
						
						' --------- getCClist ----------------------------
						Try
							customSubstVars_getCClist.Add("Function", "getCClist")
							customSubstVars_getCClist.Add("getcclist_flag",getcclist_flag)
							customSubstVars_getCClist.Add("source_app",source_app)
							customSubstVars_getCClist.Add("wfp_scenario",wfp_scenario)
							getCClistTAI = BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_getCClist, customSubstVars_getCClist)
							CreateSubTask(si,jobid.ToString, getCClistTAI.UniqueID.ToString,"Sqnc_Submit_SubTask")
							getCClistTAIStatus = BRApi.TaskActivity.GetTaskActivityItem(si, getCClistTAI.UniqueID)
						Catch ex As Exception
							processlog(si, globals, sequenceName_getCClist & ":" & ex.Message & " InnerException:" & ex.InnerException.Message)
						End Try	
						
						If getCClistTAIStatus.TaskActivityStatus = TaskActivityStatus.Failed Then
							Throw New System.Exception("getCClist Failed")
						ElseIf getCClistTAIStatus.TaskActivityStatus = TaskActivityStatus.Completed Then
							processlog(si, globals, "getCClist Completed")
							If globals.GetObject("WFPtoENS_" & wfp_scenario & "_getCClist") IsNot Nothing AndAlso DirectCast(globals.GetObject("WFPtoENS_" & wfp_scenario & "_getCClist"), String).Length > 0 Then
								cclist_all = String.Concat(globals.GetObject("WFPtoENS_" & wfp_scenario & "_getCClist").ToString, getDefaultCCSeg(si, args)).Split(",")
								processlog(si, globals, "Cost Center List: " & String.Join(",", cclist_all.ToArray()))
								
							    '*****************************************************************************************************'
							    'DR-22/09/2021  
								
								'update To Get sams ecomm vbo 
								globals.SetObject("WFPtoENT_SAMS_ECOM_VBO", getecomm_entityList(si))
								globals.SetObject("WFPtoENT_SAMS_ECOM_CC", getSAMSEcomm_entityList(si))
								
								
								
								'cc And vbo-cc mappings
								globals.SetObject("WFPtoENT_VBOCC_Mappings", getVBOCCdict(si, args, cclist_all))
								'********************************************************************************************************'
									
								cclist_chunk = toChunks(si, cclist_all, chunk_size)
								For Each cclistitr As String In cclist_chunk
									Me.executeTrigger(si, globals, cclistitr)
								Next
								
								
'								consolidateTAI = BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_consolidate, Nothing)
'								CreateSubTask(si,jobid.ToString,consolidateTAI.UniqueID.ToString,"Sqnc_Submit_SubTask")
'								consolidateTAIStatus = BRApi.TaskActivity.GetTaskActivityItem(si, consolidateTAI.UniqueID)
								
'								If consolidateTAIStatus.TaskActivityStatus = TaskActivityStatus.Failed Then
'									processlog(si, globals, "Consolidation Failed")
'									Throw New System.Exception("Consolidation Failed")
'								ElseIf consolidateTAIStatus.TaskActivityStatus = TaskActivityStatus.Completed Then
'									processlog(si, globals, "Consolidation Completed")
									
									
'									Try
'										cclistx = String.Join(",", cclist_all)
'										cclistx = String.Join("-", cclistx.Split(",")).Replace("E#","")
										
'										validation_params.Add("JobId", jobid.ToString)
'										validation_params.Add("JsonFile", "wfp_ens_actual.json")
'										validation_params.Add("Year", wfp_year)
'										validation_params.Add("EntityList", cclistx)
										
'										validationTAI = BRApi.Utilities.ExecuteDataMgmtSequence(si, "Sqnc_run_validation", validation_params)
'										CreateSubTask(si,jobid.ToString,validationTAI.UniqueID.ToString,"Sqnc_Submit_SubTask")
'										validationTAIStatus = BRApi.TaskActivity.GetTaskActivityItem(si, validationTAI.UniqueID)
										
'										If validationTAIStatus.TaskActivityStatus = TaskActivityStatus.Failed Then
'											processlog(si, globals, "Validation Failed")
'										If validationTAIStatus.TaskActivityStatus = TaskActivityStatus.Completed Then
											Me.updateControlTable(si,jobid,"Completed",source_app)
'											processlog(si, globals, "Validation Completed")
'										End If	
'									Catch ex As Exception
'										processlog(si, globals, "Sqnc_run_validation:" & ex.Message & " InnerException:" & ex.InnerException.Message)
'									End Try	
									
'								End If	
										
							Else
								processlog(si, globals, "No CC Found")
							End If	
						End If	
						
				End Select

				Return Nothing
			Catch ex As Exception
				Me.updateControlTable(si,jobid,"Failed",source_app)
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			Finally
				Dim customSubstVars_log As New Dictionary(Of String, String)
				
				customSubstVars_log.Add("JobId", jobid)
				customSubstVars_log.Add("FileName", "WFPtoENS_PROCESS_LOG")
				customSubstVars_log.Add("Message", globals.GetObject("WFPtoENS_" & wfp_scenario & "_PROCESS_LOG").ToString)

				BRApi.Utilities.StartDataMgmtSequence(si, "Sqnc_log_msg", customSubstVars_log)	
			End Try
		End Function
		
		Sub executeTrigger(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal cclist As String)
			Try
				
				Dim customSubstVars_extractSourceData As New Dictionary(Of String, String)
				Dim customSubstVars_load As New Dictionary(Of String, String)
				
				' --------- extractSourceData -----------
				Try
					customSubstVars_extractSourceData.Add("Function", "extractSourceData") 
					customSubstVars_extractSourceData.Add("cclist", cclist)
					customSubstVars_extractSourceData.Add("wfp_scenario",wfp_Scenario)
					customSubstVars_extractSourceData.Add("wfp_year",wfp_Year)
					customSubstVars_extractSourceData.Add("wfp_month",wfp_month)
					customSubstVars_extractSourceData.Add("source_app",source_app)
					extractSourceDataTAI = BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_extractSourceData, customSubstVars_extractSourceData)
					CreateSubTask(si,jobid.ToString,extractSourceDataTAI.UniqueID.ToString,"Sqnc_Submit_SubTask")
					extractSourceDataTAIStatus = BRApi.TaskActivity.GetTaskActivityItem(si, extractSourceDataTAI.UniqueID)
				Catch ex As Exception
					processlog(si, globals, sequenceName_load & ":" & ex.Message & " InnerException:" & ex.InnerException.Message)
				End Try
				
				If extractSourceDataTAIStatus.TaskActivityStatus = TaskActivityStatus.Failed Then
					processlog(si, globals, "extractSourceData Failed")
					Throw New System.Exception("extractSourceData Failed")
				ElseIf extractSourceDataTAIStatus.TaskActivityStatus = TaskActivityStatus.Completed
					processlog(si, globals, "extractSourceData Completed")
					'load
					If globals.GetObject("WFPtoENS_" & wfp_scenario & "_extractSourceData") IsNot Nothing AndAlso DirectCast(globals.GetObject("WFPtoENS_" & wfp_scenario & "_extractSourceData"), DataTable).Rows.Count > 0 Then
						cclist = String.Join(",", cclist.Split(",").[Select](Function(x) "E#" & x))
						
						customSubstVars_load.Add("WFPtoENS_" & wfp_scenario & "_getCClist", cclist)
						customSubstVars_load.Add("wfp_scenario",wfp_Scenario)
						customSubstVars_load.Add("wfp_year",wfp_Year)
						customSubstVars_load.Add("wfp_month",wfp_month)
						loadTAI = BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_load, customSubstVars_load)
						CreateSubTask(si,jobid.ToString,loadTAI.UniqueID.ToString,"Sqnc_Submit_SubTask")
						loadTAIStatus = BRApi.TaskActivity.GetTaskActivityItem(si, loadTAI.UniqueID)
						
						If loadTAIStatus.TaskActivityStatus = TaskActivityStatus.Failed Then
							processlog(si, globals, "Load Failed")
							Throw New System.Exception("Load Failed")
						ElseIf loadTAIStatus.TaskActivityStatus = TaskActivityStatus.Completed
							processlog(si, globals, "Load Completed")
						End If
					End If
				End If
				
			
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
	
		
		
		Private Function getecomm_entityList(ByVal si As SessionInfo) As List(Of String)
			Try
				
				Dim sql_ecomm As String = "SELECT DISTINCT VBO FROM XFW_RACI_Matrix WHERE AnaplanECF_Filter LIKE '%Anaplan%'"
				Dim dt_ecomm As New DataTable
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_ecomm = BRApi.Database.ExecuteSql(dbConnApp, sql_ecomm, False)
				End Using
				Dim ecomm_entityList As New List(Of String)
				If dt_ecomm IsNot Nothing AndAlso dt_ecomm.Rows.Count>0
					For Each dr_ecomm In dt_ecomm.Rows
						ecomm_entityList.Add(dr_ecomm("VBO"))
					Next	
				End If
				
				Return ecomm_entityList
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		'sams additional ecomm cc list outside ecomm VBO
		Private Function getSAMSEcomm_entityList(ByVal si As SessionInfo) As List(Of String)
			Try
				Dim sql_ecomm_cc As String = "SELECT CC FROM XFW_EP_CC_Attribute WHERE Attribute1 = 'Y'"
				Dim dt_ecomm_cc As New DataTable
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					dt_ecomm_cc = BRApi.Database.ExecuteSql(dbConnApp, sql_ecomm_cc, False)
				End Using
				Dim ecomm_entityList_cc As New List(Of String)
				If dt_ecomm_cc IsNot Nothing AndAlso dt_ecomm_cc.Rows.Count>0
					For Each dr_ecomm_cc In dt_ecomm_cc.Rows
						ecomm_entityList_cc.Add(dr_ecomm_cc("CC"))
					Next	
				End If
				
				Return ecomm_entityList_cc
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		
		Private Function getVBOCCdict(ByVal si As SessionInfo, ByVal args As ExtenderArgs, ByVal cclist_all() As String) As Dictionary(Of String, String)
			Try
				Dim cclist_vbo_maps As String = String.Empty
				cclist_vbo_maps = String.Join("','",cclist_all)
				Dim wfp_si As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si,source_app,openAppResult.Success)
				Dim sql As New Text.StringBuilder
				sql.Append("SELECT COST_CENTER,VBO_NAME FROM [dbo].[XFW_WMT_PLP_VBO_HIER] WHERE COST_CENTER IN ('" & cclist_vbo_maps & "')")
				
				Dim VBOCCdt As DataTable = Nothing
				Dim VBOCCdict As New Dictionary(Of String, String)
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(wfp_si)
					VBOCCdt = BRApi.Database.ExecuteSqlUsingReader(dbConnApp, sql.ToString, True)
				End Using
				'save vbo-cc mappings in a dictionary
				If VBOCCdt.Rows.Count > 0 Then
					For Each VBOCCdr As DataRow In VBOCCdt.Rows
						If Not VBOCCdict.ContainsKey(VBOCCdr("COST_CENTER"))
							VBOCCdict.Add(VBOCCdr("COST_CENTER"),VBOCCdr("VBO_NAME"))
						End If
					Next
				End If
				
				Return VBOCCdict
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Private Function getDefaultCCSeg(ByVal si As SessionInfo, ByVal args As ExtenderArgs) As String
			Try
				Dim wfp_si As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si,source_app,openAppResult.Success)
				Dim sql_defaultcc As String = "SELECT Entity FROM XFW_WMT_ENTITY_ATTRIBUTES WHERE UDA LIKE '%Corp%' OR  UDA LIKE '%SamsUS%' OR UDA LIKE '%INTL%' OR UDA LIKE '%WalmartUS%' "
				Dim sql_defaultcc_dt As New DataTable
				Dim entityList_defaultcc As New Text.StringBuilder
				
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(wfp_si)
					sql_defaultcc_dt = BRApi.Database.ExecuteSql(dbConnApp, sql_defaultcc, False)
				End Using
				
				If sql_defaultcc_dt IsNot Nothing AndAlso sql_defaultcc_dt.Rows.Count > 0 Then
					For Each dfccitm As DataRow In sql_defaultcc_dt.Rows
						entityList_defaultcc.Append("," & dfccitm("Entity"))
					Next
				End If
				
				Return entityList_defaultcc.ToString
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		
		Private Sub CreateSubTask(ByVal si As SessionInfo, ByVal taskid As String, ByVal subtaskid As String, ByVal sequenceName_subtask As String)
			Try
				Dim subtask_dict As New Dictionary(Of String, String)
				subtask_dict.Add("JobId", taskid)
				subtask_dict.Add("SubTaskId", subtaskid)
				subtask_dict.Add("Status", String.Empty)
				BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName_subtask, subtask_dict)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub
		
		Private Sub processlog(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal logmessage As String)
			Try
				If globals.GetObject("WFPtoENS_" & wfp_scenario & "_PROCESS_LOG") IsNot Nothing  Then
					globals.GetObject("WFPtoENS_" & wfp_scenario & "_PROCESS_LOG").AppendLine(Environment.NewLine & "[" & DateTime.Now.ToString & "] - " & logmessage)
				End If	
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		
		End Sub
		#Region "updateControlTable"

		Private Sub updateControlTable(ByVal si As SessionInfo,ByVal id As String, ByVal status As String, ByVal source_app As String)
			Try
				Dim sql As New Text.StringBuilder
				Dim user As String = BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName).User.Description
				Dim wfp_si As SessionInfo = BRApi.Security.Authorization.CreateSessionInfoForAnotherApp(si,source_app,openAppResult.Success)
				Using dbConn As DBConnInfo = BRAPi.Database.CreateApplicationDbConnInfo(wfp_si)
						
					sql.AppendLine(String.Format("Update XFW_ENS_ACTUAl_PUSH_CONTROL_TABLE Set Status='{0}' where id='{1}'",status,id))
					
					BRAPi.Database.ExecuteSql(dbConn, sql.ToString, False)
					
				End Using
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		
		End Sub
#End Region	
		Private Function toChunks(ByVal si As SessionInfo, ByVal cclist_all() As String, ByVal chunk_size As Integer) As List(Of String)
			Try
				
				Dim noOfChunk As Integer = 0
				Dim chunkList As New List(Of String)
				Dim templist As New Text.StringBuilder
				Dim temp As String = String.Empty
				Dim tchunk As Integer = chunk_size
				Dim x As Integer = 0
				
				
				noOfChunk = Math.Ceiling(cclist_all.Length / chunk_size)
			
				For i = 0 To noOfChunk - 1
					Dim j As Integer = x
					While j < tchunk 
						If j < cclist_all.Length Then
							templist.Append(cclist_all(j) & ",")
						End If	
						j += 1
					End While
					x += chunk_size 
					tchunk = tchunk + chunk_size
					temp = templist.ToString
					temp = temp.Remove(temp.Length - 1, 1)
					chunkList.Add(temp)
					
					templist.Clear
				Next
				
				Return 	chunkList			
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function	
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="WFStatus_Corp">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.WFStatus_Corp
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
					
						Dim SourceScenario As String = args.NameValuePairs("SourceScenario")
						Dim wfScenario As String = "Plan_Working"
						Dim wfTime As String = args.NameValuePairs("wfTime")
						
						Dim wfStepCorp As String = "Corporate.Corp_Plan_Copy to Corp Submission"
					
						Dim wfCLusterPkCorp As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, wfStepCorp, wfScenario, wfTime)	
						Dim wfInfoCorp As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfCLusterPkCorp)
'						Dim wfStatusTypesCorp As WorkflowStatusTypes = wfInfoCorp.LastExecutedStep.Status
						Dim wfStatusTypesCorpStatus As WorkflowStatusTypes = wfInfoCorp.GetOverallStatus
							
'						brapi.ErrorLog.LogMessage(si, "wfStatusTypesCorp" & wfStatusTypesCorp.ToString)
						brapi.ErrorLog.LogMessage(si, "wfStatusTypesCorpStatus" & wfStatusTypesCorpStatus.ToString)
						
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				
							Dim sql As New Text.StringBuilder
							sql.AppendLine("INSERT Into [dbo].[ActivityLog_Plan_WFStatus] ")
							sql.AppendLine("( ") 
							sql.AppendLine("[Workflow_Step], [Scenario], [Year], [Cube], [Status], [Last_Step], [Last_Time] ") 
							sql.AppendLine(") ") 
							sql.AppendLine("VALUES ") 
							sql.AppendLine("( ") 
							sql.AppendLine(" '" & wfStepCorp & "', '" & SourceScenario & "', '" & wfTime & "', 'CORP', '" & wfStatusTypesCorpStatus.ToString & "', '" & wfStatusTypesCorpStatus.ToString & "', '" & DateTime.Now & "'")
							sql.AppendLine(")")
							
							BRApi.Database.ExecuteActionQuery(dbConnApp, sql.ToString, False, False)
							
						End Using
						
				End Select	
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="WFStatus_INTL">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.WFStatus_INTL
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
											
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						Dim SourceScenario As String = args.NameValuePairs("SourceScenario")
						Dim wfTime As String = args.NameValuePairs("wfTime")
						
						Dim wfStepINTL As String = "INTL.Import_from_INTL"
					
						Dim wfCLusterPkINTL As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, wfStepINTL, SourceScenario, wfTime)	
						Dim wfInfoINTL As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfCLusterPkINTL)
'						Dim wfStatusTypesCorp As WorkflowStatusTypes = wfInfoCorp.LastExecutedStep.Status
						Dim wfStatusTypesINTLStatus As WorkflowStatusTypes = wfInfoINTL.GetOverallStatus
							
'						brapi.ErrorLog.LogMessage(si, "wfStatusTypesCorp" & wfStatusTypesCorp.ToString)
						brapi.ErrorLog.LogMessage(si, "wfStatusTypesINTLStatus" & wfStatusTypesINTLStatus.ToString)
						
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				
							Dim sql As New Text.StringBuilder
							sql.AppendLine("INSERT Into [dbo].[ActivityLog_Plan_WFStatus] ")
							sql.AppendLine("( ") 
							sql.AppendLine("[Workflow_Step], [Scenario], [Year], [Cube], [Status], [Last_Step], [Last_Time] ") 
							sql.AppendLine(") ") 
							sql.AppendLine("VALUES ") 
							sql.AppendLine("( ") 
							sql.AppendLine(" '" & wfStepINTL & "', '" & SourceScenario & "', '" & wfTime & "', 'INTL', '" & wfStatusTypesINTLStatus.ToString & "', '" & wfStatusTypesINTLStatus.ToString & "', '" & DateTime.Now & "'")
							sql.AppendLine(")")
							
							BRApi.Database.ExecuteActionQuery(dbConnApp, sql.ToString, False, False)
							
						End Using
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="WFStatus_Sams">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.WFStatus_Sams
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
											
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						Dim SourceScenario As String = args.NameValuePairs("SourceScenario")
						Dim wfScenario As String = "Plan_Working"
						Dim wfTime As String = args.NameValuePairs("wfTime")
						
						Dim wfStepSams As String = "Sams.Sams_Plan_Copy to Corp Submission"
												     					
						Dim wfCLusterPkSams As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, wfStepSams, wfScenario, wfTime)	
						Dim wfInfoSams As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfCLusterPkSams)
'						Dim wfStatusTypesSams As WorkflowStatusTypes = wfInfoSams.LastCompletedTask.Status
'						Dim wfStatusTypesSams1 As WorkflowStatusTypes = wfInfoSams.LastCompletedTask.PreceedingTask.Status
						Dim wfStatusTypesSamsStatus As WorkflowStatusTypes = wfInfoSams.GetOverallStatus
						
'						brapi.ErrorLog.LogMessage(si, "wfStatusTypesSams" & wfStatusTypesSams.ToString)
'						brapi.ErrorLog.LogMessage(si, "wfStatusTypesSams1" & wfStatusTypesSams1.ToString)
						brapi.ErrorLog.LogMessage(si, "wfStatusTypesSamsStatus" & wfStatusTypesSamsStatus.ToString)
					
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				
							Dim sql As New Text.StringBuilder
							sql.AppendLine("INSERT Into [dbo].[ActivityLog_Plan_WFStatus] ")
							sql.AppendLine("( ") 
							sql.AppendLine("[Workflow_Step], [Scenario], [Year], [Cube], [Status], [Last_Step], [Last_Time] ") 
							sql.AppendLine(") ") 
							sql.AppendLine("VALUES ")
							sql.AppendLine("( ")
							sql.AppendLine(" '" & wfStepSams & "', '" & SourceScenario & "', '" & wfTime & "', 'SAMS', '" & wfStatusTypesSamsStatus.ToString & "', '" & wfStatusTypesSamsStatus.ToString & "', '" & DateTime.Now & "'")
							sql.AppendLine(")")
							
							BRApi.Database.ExecuteActionQuery(dbConnApp, sql.ToString, False, False)
							
						End Using
							
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="WFStatus_Table">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.WFStatus_Table
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
					
						Dim Workspace As StepClassificationTypes
						Dim SourceScenario As String = args.NameValuePairs("SourceScenario")
						Dim wfScenario As String = "Plan_Working"
						Dim wfTime As String = args.NameValuePairs("wfTime")
						
						Dim wfStepCorp As String = "Corporate.Corp_Plan_Copy to Corp Submission"
					
						Dim wfCLusterPkCorp As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, wfStepCorp, wfScenario, wfTime)	
						Dim wfInfoCorp As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfCLusterPkCorp)
						Dim wfStatusTypesCorp As WorkflowStatusTypes = wfInfoCorp.GetStepStatus(Workspace)
						Dim wfStatusTypesCorpStatus As WorkflowStatusTypes = wfInfoCorp.GetOverallStatus
							
						Dim wfStepSams As String = "Sams.Sams_Plan_Copy to Corp Submission"
												     					
						Dim wfCLusterPkSams As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, wfStepSams, wfScenario, wfTime)	
						Dim wfInfoSams As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfCLusterPkSams)
						Dim wfStatusTypesSams As WorkflowStatusTypes = wfInfoSams.GetStepStatus(Workspace)
						Dim wfStatusTypesSamsStatus As WorkflowStatusTypes = wfInfoSams.GetOverallStatus
					
						Dim wfStepWMTUS As String = "WMTUS.WMTUS_Plan_Copy to Corp Submission"
					
						Dim wfCLusterPkWMTUS As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, wfStepWMTUS, wfScenario, wfTime)	
						Dim wfInfoWMTUS As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfCLusterPkWMTUS)
						Dim wfStatusTypesWMTUS As WorkflowStatusTypes= wfInfoWMTUS.GetStepStatus(Workspace)
						Dim wfStatusTypesWMTUSStatus As WorkflowStatusTypes = wfInfoWMTUS.GetOverallStatus
					Dim wfStatusTypesWMTUSStatus1 As WorkflowStatusTypes = wfInfoWMTUS.LastExecutedStep.Status
					
						brapi.ErrorLog.LogMessage(si, "wfStatusTypesCorp" & wfStatusTypesCorp.ToString)
						brapi.ErrorLog.LogMessage(si, "wfStatusTypesCorpStatus" & wfStatusTypesCorpStatus.ToString)	
						brapi.ErrorLog.LogMessage(si, "wfStatusTypesSams" & wfStatusTypesSams.ToString)
						brapi.ErrorLog.LogMessage(si, "wfStatusTypesSamsStatus" & wfStatusTypesSamsStatus.ToString)
						brapi.ErrorLog.LogMessage(si, "wfStatusTypesWMTUS" & wfStatusTypesWMTUS.ToString)
						brapi.ErrorLog.LogMessage(si, "wfStatusTypesWMTUSStatus" & wfStatusTypesWMTUSStatus.ToString)
						brapi.ErrorLog.LogMessage(si, "SourceScenario" & SourceScenario)
					
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				
							Dim sql As New Text.StringBuilder
							sql.AppendLine("INSERT Into [dbo].[ActivityLog_Plan_WFStatus] ")
							sql.AppendLine("( ") 
							sql.AppendLine("[Workflow_Step], [Scenario], [Year], [Cube], [Status], [Last_Step], [Last_Time] ") 
							sql.AppendLine(") ") 
							sql.AppendLine("VALUES ") 
							sql.AppendLine("( ") 
							sql.AppendLine(" '" & wfStepCorp & "', '" & SourceScenario & "', '" & wfTime & "', 'CORP', '" & wfStatusTypesCorpStatus.ToString & "', '" & wfStatusTypesCorpStatus.ToString & "', '" & DateTime.Now & "'")
							sql.AppendLine("), ")
							sql.AppendLine("( ")
							sql.AppendLine(" '" & wfStepSams & "', '" & SourceScenario & "', '" & wfTime & "', 'SAMS', '" & wfStatusTypesSamsStatus.ToString & "', '" & wfStatusTypesSamsStatus.ToString & "', '" & DateTime.Now & "'")
							sql.AppendLine("), ")
							sql.AppendLine("( ")
							sql.AppendLine(" '" & wfStepWMTUS & "', '" & SourceScenario & "', '" & wfTime & "', 'WMT_US', '" & wfStatusTypesWMTUSStatus.ToString & "', '" & wfStatusTypesWMTUSStatus.ToString & "', '" & DateTime.Now & "'")
							sql.AppendLine(") ")
							
							BRApi.Database.ExecuteActionQuery(dbConnApp, sql.ToString, False, False)
							
						End Using
							
			End Select
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="WFStatus_WMTUS">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.WFStatus_WMTUS
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						Dim Workspace As StepClassificationTypes
						Dim SourceScenario As String = args.NameValuePairs("SourceScenario")
						Dim wfScenario As String = "Plan_Working"
						Dim wfTime As String = args.NameValuePairs("wfTime")
						
						Dim wfStepWMTUS As String = "WMTUS.WMTUS_Plan_Copy to Corp Submission"
					
						Dim wfCLusterPkWMTUS As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, wfStepWMTUS, wfScenario, wfTime)	
						Dim wfInfoWMTUS As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfCLusterPkWMTUS)
						Dim wfStatusTypesWMTUS As WorkflowStatusTypes= wfInfoWMTUS.GetStepStatus(Workspace)
						Dim wfStatusTypesWMTUSStatus As WorkflowStatusTypes = wfInfoWMTUS.GetOverallStatus
					
						brapi.ErrorLog.LogMessage(si, "wfStatusTypesWMTUS" & wfStatusTypesWMTUS.ToString)
						brapi.ErrorLog.LogMessage(si, "wfStatusTypesWMTUSStatus" & wfStatusTypesWMTUSStatus.ToString)
						
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				
							Dim sql As New Text.StringBuilder
							sql.AppendLine("INSERT Into [dbo].[ActivityLog_Plan_WFStatus] ")
							sql.AppendLine("( ") 
							sql.AppendLine("[Workflow_Step], [Scenario], [Year], [Cube], [Status], [Last_Step], [Last_Time] ") 
							sql.AppendLine(") ") 
							sql.AppendLine("VALUES ") 
							sql.AppendLine("( ")
							sql.AppendLine(" '" & wfStepWMTUS & "', '" & SourceScenario & "', '" & wfTime & "', 'WMT_US', '" & wfStatusTypesWMTUSStatus.ToString & "', '" & wfStatusTypesWMTUSStatus.ToString & "', '" & DateTime.Now & "'")
							sql.AppendLine(")")
							
							BRApi.Database.ExecuteActionQuery(dbConnApp, sql.ToString, False, False)
							
						End Using
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="WorkflowEventHandler" name="WorkflowEventHandler">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_VARIABLES" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_GATEWAY" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Models" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_INTEGRATION_UTILITY" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="OS_Utility" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Text

Imports System.Net
Imports System.Net.Http
Imports System.Timers
Imports System.Threading
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
Imports Newtonsoft.Json.JsonPropertyAttribute
Imports System.Diagnostics
Imports System.Net.Mail

Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_VARIABLES
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_GATEWAY
Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_UTILITY
Imports OneStream.BusinessRule.Extender.OS_Models

Imports OneStream.BusinessRule.Extender.OS_Utility.MainClass

Namespace OneStream.BusinessRule.WorkflowEventHandler.WorkflowEventHandler
	Public Class MainClass
		
		Private m_moduleName As String = String.Empty
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As WorkflowEventHandlerArgs) As Object
				Dim wfScenNwfNameKeyvaluePair = New Dictionary(Of String, list(Of String)) From _
				{	
					{"ACTUAL", New List(Of String)({ "ACTUALS_HFM_CORP", "ACTUALS_HFM_SAMS", "ACTUALS_HFM_WMTUS",
													 "ACTUALS_HFM_ADJS_CORP", "ACTUALS_HFM_ADJS_SAMS", "ACTUALS_HFM_ADJS_WMTUS",
													 "ACTUALS_SAPBI_CORP", "ACTUALS_SAPBI_SAMS", "ACTUALS_SAPBI_WMTUS_BAL",
													 "ACTUALS_SAPBI_WMTUS_SALES", "ACTUALS_SAPBI_WMTUS_OTHERS", "ACTUALS_SAPBI_ROI",
													 "ACTUALS_SLEDG_ADJ",
													 "INTL"})'INTL app2appWorkflow
					 }, 
					 {"PLAN_WORKING", New List(Of String)({"PLAN_ANAPLAN_FIN", "PLAN_ECF"})},
					 {"PLAN", New List(Of String)({"INTL","SAMS_FRESH_APP2APP_IMPORT","SAMS_OPS_APP2APP_IMPORT", _
					 							  "SAMS_FRESH_APP2APP_IMPORT_PLAN","SAMS_MERCH_APP2APP_IMPORT", _
												  "WMTUS_OPS_APP2APP_IMPORT","WMT_US_MERCH_APP2APP_IMPORT","WMTUS_OMNI_APP2APP_IMPORT"})}, 'PLAN app2appWorkflow
					 {"FCST", New List(Of String)({"INTL","SAMS_FRESH_APP2APP_IMPORT","SAMS_OPS_APP2APP_IMPORT", _
					 							  "SAMS_FRESH_APP2APP_IMPORT_PLAN","SAMS_MERCH_APP2APP_IMPORT", _
												  "WMTUS_OPS_APP2APP_IMPORT","WMT_US_MERCH_APP2APP_IMPORT","WMTUS_OMNI_APP2APP_IMPORT"})} 'FCST app2appWorkflow 
				}
		'				
				
				'To Identify AOP Workflow names and update module name												   
				Dim AOPwfNamesInScope = New List(Of String)({"PLAN_ANAPLAN_FIN","PLAN_ECF"})
				
				'vn50tv8/DPA-29476/JAN10th - to Identify APP to APP Workflow names and update module name												   
				Dim app2appWorkflowNames = New List(Of String)({"INTL","SAMS_FRESH_APP2APP_IMPORT",  _
														"SAMS_OPS_APP2APP_IMPORT","SAMS_FRESH_APP2APP_IMPORT_PLAN","SAMS_MERCH_APP2APP_IMPORT", _
														"WMTUS_OPS_APP2APP_IMPORT","WMT_US_MERCH_APP2APP_IMPORT","WMTUS_OMNI_APP2APP_IMPORT"})


		   		Dim returnValue As Object = args.DefaultReturnValue
				args.UseReturnValueFromBusinessRule = False
				args.Cancel = False

				Dim wfProfileInfo As WorkflowProfileInfo = Nothing
				Dim wfName As String = String.Empty
				Dim wfCube As String = String.Empty
				Dim wfScen As String = String.Empty
				Dim wfTime As String = String.Empty
				Dim wfError As String = String.Empty
				Dim status As String = String.Empty
				Dim stepType As String = String.Empty
				Dim emailBody As String = String.Empty
				Dim startTime As DateTime = DateTime.UtcNow
				Dim endTime As DateTime = DateTime.UtcNow
				Dim duration As Integer = 0
				Dim fcpRowCount As Integer = 0
				Dim osRowCount As Integer = 0
				Dim batchId As String = String.Empty
				Dim sendRequest As Boolean = False
				Dim wfBatchInfo As WorkflowBatchFileInfo = Nothing
				Dim wfInfo As WorkflowInfo = Nothing
				Dim ccGateway As IntegrationGateWay(Of IntegrationParams)=Nothing 									
				Dim extract As (startTime As DateTime, endTime As DateTime, duration As Integer, rowCount As Integer, errorMsg As String) = Nothing 
				Dim statekey As String = String.Empty ''DPA-29476/vn50tv8/29thdec -App2App Notifications
				Dim wfProfileType As String = String.Empty 'DPA-29476/vn50tv8/29thdec -App2App Notifications
				Dim sourceApp As String = String.Empty 'DPA-29476/vn50tv8/29thdec -App2App Notifications
				
				Try
					
					If BRApi.Security.Authorization.IsUserInRole(si, RoleTypeId.ManageWorkflowProfiles) Then
						If args.OperationName() = BREventOperationType.Workflow.WorkflowFileBatchLoadFile Then 
							wfBatchInfo = DirectCast(args.Inputs(0), WorkflowBatchFileInfo)
							wfInfo = brapi.Workflow.Status.GetWorkflowStatus(si,wfBatchInfo.CurrentWorkflowUnitPk.CreateWorkflowUnitClusterPk())'DPA-29476/vn50tv8/29thdec
							wfProfileType= wfInfo.Name 'DPA-29476/vn50tv8/29thdec -App2App Notifications
							wfName = wfBatchInfo.ProfileName.Split(New Char() {"."c})(0).ToUpper
							wfScen = wfBatchInfo.ScenarioName
						End If 
						
						If args.OperationName() = BREventOperationType.Workflow.UpdateWorkflowStatus Then 
							wfInfo = DirectCast(args.Inputs(0), WorkflowInfo)
							wfProfileType= wfInfo.Name 'DPA-29476/vn50tv8/29thdec -App2App Notifications
							wfProfileInfo = BRApi.Workflow.Metadata.GetProfile(si, wfInfo.WfUnitPk.ProfileKey)
							wfName = wfProfileInfo.Name.Split(New Char() {"."c})(0).ToUpper
							wfScen = BRApi.Finance.Members.GetMember(si, DimType.Scenario.Id, wfInfo.WfUnitPk.ScenarioKey).Name							
						End If	
						Dim tempWfScen As String = String.Empty
						tempWfScen = wfScen.ToUpper
						'To Identify AOP Workflow names and update module name
						If AOPwfNamesInScope.Contains(wfName) Then
							m_moduleName = "CommandCenter_AOP"
						Else If app2appWorkflowNames.Contains(wfName) Then 'To Identify APPtoAPP Workflow names and update module name and scenario'DPA-29476/vn50tv8/29th --App2App Notifications
							m_moduleName = GetAppToAppModuleNameAndAppName(si,wfName,sourceApp)
							If tempWfScen.Contains("PLAN") Or tempWfScen ="EXP_WORKING"
								tempWfScen = "PLAN"
							Else If tempWfScen.Contains("FORECAST_WORKING") Or tempWfScen.StartsWith("FCST") Or tempWfScen.StartsWith("CORPFCST")  Then
								tempWfScen = "FCST"
							End If
						Else
							m_moduleName = "CommandCenter_MEC"
						End If					
						
						If wfScenNwfNameKeyvaluePair.Keys.Contains(tempWfScen) Then
							If wfScenNwfNameKeyvaluePair(tempWfScen).Contains(wfName) Then							
								If app2appWorkflowNames.Contains(wfName) Then'DPA-29476/vn50tv8/29th -App2App Notifications
									 ccGateway = New IntegrationGateWay(Of IntegrationParams)(si, m_moduleName,Nothing)
								Else									
								     ccGateway = New IntegrationGateWay(Of IntegrationParams)(si, m_moduleName, OSModuleType.CC)	
								End If

						 		Select Case args.OperationName()
								 	Case Is = BREventOperationType.Workflow.WorkflowFileBatchLoadFile
										sendRequest = True
										batchId = wfBatchInfo.FilePath.Split(New Char() {"\"c})(8).Split(New Char() {"_"c})(1)
										wfCube = wfBatchInfo.ProfileInfo.CubeName
										wfScen = wfBatchInfo.ScenarioName
										wfTime = wfBatchInfo.TimeName

										If args.IsBeforeEvent Then
											status = "Started"
											stepType = "Start"
										Else
											Dim wfPOVId As String = $"{wfBatchInfo.ProfileInfo.Name.ToUpper}_{wfBatchInfo.ScenarioName.ToUpper}_{wfBatchInfo.TimeName.ToUpper}"
											Dim importResponse As ResponseStatus = ExtractImportResponse(si, wfPOVId)
											If importResponse IsNot Nothing Then
												If importResponse.Success Then
													status = If(wfBatchInfo.FileProcessed, "Success", "Failed")
													wfError = ExtractError(si, wfBatchInfo)
												Else
													status = "Failed"
													wfError = $"ErrorCode: {importResponse.StatusCode}, Message: {importResponse.ReasonPhrase}"
												End If
												fcpRowCount = importResponse.FcpRecordCount
												osRowCount = importResponse.OsRecordCount
											Else
												status = If(wfBatchInfo.FileProcessed, "Success", "Failed")
												wfError = ExtractError(si, wfBatchInfo)
											End If
											stepType = "End"
										End If	
									Case Is = BREventOperationType.Workflow.UpdateWorkflowStatus
						            	 If Not args.IsBeforeEvent Then
											 Dim wfStep As StepClassificationTypes = DirectCast(args.Inputs(1), StepClassificationTypes)
											 Dim wfStatus As WorkflowStatusTypes = DirectCast(args.Inputs(2), WorkflowStatusTypes)
											 If New WorkflowStatusTypes() { WorkflowStatusTypes.Completed, WorkflowStatusTypes.HasError }.Contains(wfStatus) Then
												 If New WorkflowStatusTypes() { StepClassificationTypes.DataLoadTransform, StepClassificationTypes.ValidateTransform, _
												  StepClassificationTypes.ValidateIntersection, StepClassificationTypes.LoadCube, StepClassificationTypes.ProcessCube }.Contains(wfStep) Then 
													 sendRequest = True
													 wfCube = wfProfileInfo.CubeName
													 wfScen = BRApi.Finance.Members.GetMember(si, DimType.Scenario.Id, wfInfo.WfUnitPk.ScenarioKey).Name
													 wfTime = BRApi.Finance.Members.GetMember(si, DimType.Time.Id, wfInfo.WfUnitPk.TimeKey).Name
													 status = If(wfStatus = WorkflowStatusTypes.HasError, "Failed", wfStatus.ToString)
													 stepType = wfStep.ToString

'													 Dim extract As (startTime As DateTime, endTime As DateTime, duration As Integer, rowCount As Integer, errorMsg As String) = _
													 extract= ExtractUpdateWorkflowStatus(si, wfStep, args.Inputs(3))
													 startTime = extract.startTime
													 endTime = extract.endTime
													 duration = extract.duration
													 wfError = If(wfStatus = WorkflowStatusTypes.HasError, If(String.IsNullOrEmpty(extract.errorMsg), "Errors found", extract.errorMsg), "")
													 If wfStep = StepClassificationTypes.DataLoadTransform Then
														 Dim wfPOVId As String = $"{wfProfileInfo.Name.ToUpper}_{wfScen.ToUpper}_{wfTime.ToUpper}"
														 Dim importResponse As ResponseStatus = ExtractImportResponse(si, wfPOVId)
														 fcpRowCount =  If(importResponse IsNot Nothing, importResponse.FcpRecordCount, 0)
														 osRowCount =If(importResponse IsNot Nothing, importResponse.OsRecordCount, 0)
														 wfError = If(wfStatus = WorkflowStatusTypes.HasError, $"ErrorCode: {importResponse.StatusCode}, Message: {importResponse.ReasonPhrase}", "")
												 	End If
											 	End If
											End If
										 End If
								End Select

								If sendRequest Then
									Dim result = New With { _
										.eventType = "WORKFLOW", _
										.name = wfName, _
										.batchId = If(String.IsNullOrEmpty(batchId), 0, Convert.ToInt32(batchId)), _
										.scenario = wfScen, _
										.period = wfTime, _
										.startTime = startTime.ToString("G", CultureInfo.CreateSpecificCulture("en-US")), _
										.endTime = endTime.ToString("G", CultureInfo.CreateSpecificCulture("en-US")), _
										.duration = duration, _
										.cubeName = wfCube, _
										.step = stepType, _
										.status = status, _
										.fcpRecordCount = fcpRowCount, _
										.osRecordCount = osRowCount, _
										.error = wfError, _
										.appName= CommonUtility.GetAppAndEnvName(si), _
										.userId = si.UserName
									}
									
									' For debugging purpose write response to local file share.														
		'							Dim sSubFolder As String = "\Groups\Everyone\"
		'							Dim logFolderPath As String = BRApi.Utilities.GetFileShareFolder(si, FileShareFolderTypes.ApplicationIncoming, Nothing).Replace("\Incoming","")  & sSubFolder

		'							Dim destFile As String = $"WorkflowEventHandler-{wfName}-{wfScen}-{wfTime}-log.txt"  
								
		'	             			'Create/Append a file To write To.
		'				            Using sw As StreamWriter = If (Not File.Exists(logFolderPath & destFile), File.CreateText(logFolderPath & destFile), File.AppendText(logFolderPath & destFile))          
		'				                sw.WriteLine($"Operation: {args.OperationName}, IsBeforeEvent: {args.IsBeforeEvent}")
		'								sw.WriteLine($"WorkFlow: {wfName}, Scenario: {wfScen}, Period: {wfTime}, Cube: {wfCube}, BatchId: {batchId}")
		'								sw.WriteLine($"Step: {stepType}, Status: {status}")
		'								sw.WriteLine($"StartTime: {startTime.ToString("G", CultureInfo.CreateSpecificCulture("en-US"))}, " & _ 
		'										    $"EndTime: {endTime.ToString("G", CultureInfo.CreateSpecificCulture("en-US"))}, " & _
		'										    $"Duration: {duration}, RowCount: {rowCount}, Error: {wfError}")
		'								sw.WriteLine()
		'				            End Using
		
									If Not  app2appWorkflowNames.Contains(wfName) Then	'DPA-29476/vn50tv8/29th	-App2App Notifications																
									    Dim jsonPayLoad As String = JsonConvert.SerializeObject(result)										
										Dim response = ccGateway.PutData(si, jsonPayLoad, False)
										'notify the command center team in case of failure with payload information 
										If Not response.Result.Success Then
											Dim subject As String = $"Command center post failed for Workflow {wfName}_{wfScen}_{wfTime}"
											CommonUtility.sendmail(si, subject, jsonPayLoad, m_moduleName & " - WorkflowEventHandler", ccGateway.Params)
										Else
											If ccGateway.Params.Debugger Then
												BRApi.ErrorLog.LogMessage(si, $"{m_moduleName} - WorkflowEventHandler Payload sent successfully")
											End If
										End If
									End If
								End If
							End If
						End If
					End If
            	Catch ex As Exception
				  emailBody = ex.Message
				  BRApi.ErrorLog.LogMessage(si,"EmailBody" &ex.Message)
                  Throw ErrorHandler.LogWrite(si, New XFException(si, ex))	
				  
				Finally
					'DPA-29476/vn50tv8/29thdec -App2App Notifications
				  If app2appWorkflowNames.Contains(wfName) Then
					  statekey  = m_moduleName & "_" & wfName &"_" & wfScen									
					  Dim statevalue = GetSessionStateValue(si,statekey,String.Empty)
					   If Not String.IsNullOrWhiteSpace(stepType) Then
						  statevalue = IIf(String.IsNullOrWhiteSpace(statevalue), ("Step:  "& stepType & " " & status) ,(statevalue & Environment.NewLine & "Step:  "& stepType & " " & status))										
					   End If									
					  SetSessionStateValue(si,statekey,statevalue)
					  Dim lastStepType As String = String .Empty
					  If wfProfileType.ToLower().Contains("process") Then
						  lastStepType = "processcube"
					  ElseIf wfProfileType.ToLower().Contains("load") Then
						   lastStepType = "loadcube"
					  End If
					  If (status.ToLower = "failed") Or  (status.ToLower = "completed" And stepType.ToLower() = lastStepType.ToLower())Then 						
						Dim targetApp ="Enterprise"
						statevalue = GetSessionStateValue(si,statekey,String.Empty)
						Dim rowCount As String = String .Empty						  
						rowCount =	GetSessionStateValue(si,"App2App",String.Empty)
						Dim dictWorkflowInfo As New Dictionary(Of String, String)
						dictWorkflowInfo.Add("wfName",$"{wfName}")
						dictWorkflowInfo.Add("wfTime",$"{wfTime}")
						dictWorkflowInfo.Add("wfScen",$"{wfScen}")
						dictWorkflowInfo.Add("App2AppCopy","App2App Copy –")
						dictWorkflowInfo.Add("AppNames",sourceApp &" To " & targetApp & " App")
						dictWorkflowInfo.Add("rowCount",rowCount)
						If (status.ToLower = "failed") Then dictWorkflowInfo.Add("errorInfo",emailBody)'						
						commonutility.SendMail(si,statevalue,ccGateway.Params,m_moduleName,dictWorkflowInfo)
						BRApi.State.DeleteSessionState(si, False, ClientModuleType.External, String.Empty, String.Empty, stateKey, String.Empty)
						BRApi.State.DeleteSessionState(si, False, ClientModuleType.External, String.Empty, String.Empty, "App2App", String.Empty)
					  End If 
				  End If
            	End Try	
			Return returnValue
		End Function	
		Private Function ExtractImportResponse(ByVal si As SessionInfo, ByVal wfPOVId As String) As ResponseStatus
			Dim response As ResponseStatus = Nothing
			Try
				Dim objXFUserState As XFUserState = BRApi.State.GetSessionState(si, False, ClientModuleType.External, String.Empty, String.Empty, wfPOVId + "_response", String.Empty)
				
				If objXFUserState IsNot Nothing Then
					response = JsonConvert.DeserializeObject(Of ResponseStatus)(objXFUserState.TextValue)
				End If
			Catch
			End Try
			Return response
		End Function
		
		Private Function ExtractError(ByVal si As SessionInfo, ByVal wfBatchInfo As WorkflowBatchFileInfo) As String
			Dim errorBuilder As New StringBuilder
			Dim wfUnitPk = wfBatchInfo.CurrentWorkflowUnitPk
			If wfBatchInfo.ProcessInfo.HasError Then
				errorBuilder.AppendLine($"Step: DataLoadTransform, {wfBatchInfo.ProcessInfo.ErrorMessage}")
				errorBuilder.AppendLine()
			End If
			
			If wfBatchInfo.ValTransProcessInfoErrors.ContainsKey(wfUnitPk.CreateWorkflowUnitClusterPk) Then
				Dim vtProcessInfo = wfBatchInfo.ValTransProcessInfoErrors(wfUnitPk.CreateWorkflowUnitClusterPk)
				errorBuilder.AppendLine($"Step: ValidateTransform, {vtProcessInfo.TotalUnmappedCount} unmapped dimensions found")
				errorBuilder.AppendLine()
			End If
			
			If wfBatchInfo.ValIntersectProcessInfoErrors.ContainsKey(wfUnitPk.CreateWorkflowUnitClusterPk) Then
				Dim viProcessInfo = wfBatchInfo.ValIntersectProcessInfoErrors(wfUnitPk.CreateWorkflowUnitClusterPk)
				errorBuilder.AppendLine($"Step: ValidateIntersection, {viProcessInfo.IntersectionErrorCount} intersection errors found")
				errorBuilder.AppendLine()
			End If
			
			If wfBatchInfo.LoadCubeProcessInfoErrors.ContainsKey(wfUnitPk.CreateWorkflowUnitClusterPk) Then
				 Dim lcProcessInfo = wfBatchInfo.LoadCubeProcessInfoErrors(wfUnitPk.CreateWorkflowUnitClusterPk)
				 errorBuilder.AppendLine($"Step: LoadCube, {lcProcessInfo.ErrorMessage} Errors found")
				 errorBuilder.AppendLine()
			End If
			
			If wfBatchInfo.ProcessCubeProcessInfoErrors.ContainsKey(wfUnitPk.CreateWorkflowUnitClusterPk) Then
				Dim pcProcessInfo = wfBatchInfo.ProcessCubeProcessInfoErrors(wfUnitPk.CreateWorkflowUnitClusterPk)
				errorBuilder.AppendLine($"Step: ProcessCube, {pcProcessInfo.ErrorMessage} Errors found")
				errorBuilder.AppendLine()
			End If
			
			Return errorBuilder.ToString
		End Function
		
		Private Function ExtractUpdateWorkflowStatus(ByVal si As SessionInfo, ByVal stepType As StepClassificationTypes, ByVal rawData As String) As (StartTime As DateTime, EndTime As DateTime, Duration As Double, Count As Integer, ErrorMsg As String)
		
			Dim startTime As DateTime
			Dim endTime As DateTime
			Dim duration As Integer
			Dim count As Integer
	 		Dim length As Integer
			Dim errorMsg As String = ""
			Try
			
			If Not String.IsNullOrEmpty(rawData) Then
				Dim rawDataArr As String() = rawData.Split(New String() {Environment.NewLine}, StringSplitOptions.None)
				length = rawDataArr.Length
				Select stepType
					Case Is = StepClassificationTypes.DataLoadTransform
						startTime = Convert.ToDateTime(rawDataArr(1).Split(New Char() {"="c})(1).Trim)
						endTime = Convert.ToDateTime(rawDataArr(2).Split(New Char() {"="c})(1).Trim)
						duration = Convert.ToInt32(rawDataArr(5).Split(New Char() {"="c})(1).Replace("Milli-Seconds(MS)","").Trim)
						count = Convert.ToInt32(rawDataArr(16).Split(New Char() {"="c})(1).Trim)
					Case Is = StepClassificationTypes.ValidateTransform
					    startTime = Convert.ToDateTime(rawDataArr(1).Split(New Char() {"="c})(1).Trim)
						endTime = Convert.ToDateTime(rawDataArr(2).Split(New Char() {"="c})(1).Trim)
						duration = CInt((endTime - startTime).TotalMilliseconds)
						count = Convert.ToInt32(rawDataArr(3).Split(New Char() {"="c})(1).Trim)
						errorMsg = If(count = 0, String.Empty, $"{count} unmapped dimensions found")
					Case Is = StepClassificationTypes.ValidateIntersection
						startTime = Convert.ToDateTime(rawDataArr(1).Split(New Char() {"="c})(1).Trim)
						endTime = Convert.ToDateTime(rawDataArr(2).Split(New Char() {"="c})(1).Trim)
						duration = Convert.ToInt32(rawDataArr(3).Split(New Char() {"="c})(1).Trim)
						count = Convert.ToInt32(rawDataArr(4).Split(New Char() {"="c})(1).Trim)
						errorMsg = If(count = 0, String.Empty, $"{count} intersection errors found")
					Case Is = StepClassificationTypes.LoadCube
						startTime = Convert.ToDateTime(rawDataArr(1).Split(New Char() {"="c})(1).Trim)
						endTime = Convert.ToDateTime(rawDataArr(2).Split(New Char() {"="c})(1).Trim)
						duration = Convert.ToInt32(rawDataArr(3).Split(New Char() {"="c})(1).Trim)
						count = Convert.ToInt32(rawDataArr(4).Split(New Char() {"="c})(1).Trim)
					Case Is = StepClassificationTypes.ProcessCube
						startTime = Convert.ToDateTime(rawDataArr(1).Split(New Char() {"="c})(1).Trim)
						endTime = Convert.ToDateTime(rawDataArr(2).Split(New Char() {"="c})(1).Trim)
						duration = Convert.ToInt32(rawDataArr(3).Split(New Char() {"="c})(1).Trim)
						count = Convert.ToInt32(rawDataArr(4).Split(New Char() {"="c})(1).Trim)
				End Select
				
			End If 
			Catch ex As Exception
				BRApi.ErrorLog.LogMessage(si, $"{stepType.ToString()}{vbCrLf}{length}{vbCrLf}{rawData}{vbCrLf}Exception: {ex.Message}")
			End Try
		
			Return (StartTime:= startTime, EndTime:= endTime, Duration:= duration, Count:= count, ErrorMsg:= errorMsg)
		End Function
	End Class
End Namespace















'Imports System
'Imports System.Data
'Imports System.Data.Common
'Imports System.IO
'Imports System.Collections.Generic
'Imports System.Globalization
'Imports System.Linq
'Imports Microsoft.VisualBasic
'Imports System.Windows.Forms
'Imports OneStream.Shared.Common
'Imports OneStream.Shared.Wcf
'Imports OneStream.Shared.Engine
'Imports OneStream.Shared.Database
'Imports OneStream.Stage.Engine
'Imports OneStream.Stage.Database
'Imports OneStream.Finance.Engine
'Imports OneStream.Finance.Database
'Imports System.Text

'Imports System.Net
'Imports System.Net.Http
'Imports System.Timers
'Imports System.Threading
'Imports Newtonsoft.Json
'Imports Newtonsoft.Json.Linq
'Imports Newtonsoft.Json.JsonPropertyAttribute
'Imports System.Diagnostics
'Imports System.Net.Mail

'Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_VARIABLES
'Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_GATEWAY
'Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_UTILITY
'Imports OneStream.BusinessRule.Extender.OS_Models


'Namespace OneStream.BusinessRule.WorkflowEventHandler.WorkflowEventHandler
'	Public Class MainClass
		
'		Private m_moduleName As String = "CommandCenter_MEC"
		
'		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As WorkflowEventHandlerArgs) As Object
'				Dim wfScenNwfNameKeyvaluePair = New Dictionary(Of String, list(Of String)) From _
'				{	
'					{"ACTUAL", New List(Of String)({ "ACTUALS_HFM_CORP", "ACTUALS_HFM_SAMS", "ACTUALS_HFM_WMTUS",
'													 "ACTUALS_HFM_ADJS_CORP", "ACTUALS_HFM_ADJS_SAMS", "ACTUALS_HFM_ADJS_WMTUS",
'													 "ACTUALS_SAPBI_CORP", "ACTUALS_SAPBI_SAMS", "ACTUALS_SAPBI_WMTUS_BAL",
'													 "ACTUALS_SAPBI_WMTUS_SALES", "ACTUALS_SAPBI_WMTUS_OTHERS", "ACTUALS_SAPBI_ROI",
'													 "ACTUALS_SLEDG_ADJ"})
'					 }, 
'					 {"PLAN_WORKING", New List(Of String)({"PLAN_ANAPLAN_FIN", "PLAN_ECF"})}
'				}
				
'				'To Identify AOP Workflow names and update module name												   
'				Dim AOPwfNamesInScope = New List(Of String)({"PLAN_ANAPLAN_FIN","PLAN_ECF"})
				
'		   		Dim returnValue As Object = args.DefaultReturnValue
'				args.UseReturnValueFromBusinessRule = False
'				args.Cancel = False

'				Dim wfProfileInfo As WorkflowProfileInfo = Nothing
'				Dim wfName As String = String.Empty
'				Dim wfCube As String = String.Empty
'				Dim wfScen As String = String.Empty
'				Dim wfTime As String = String.Empty
'				Dim wfError As String = String.Empty
'				Dim status As String = String.Empty
'				Dim stepType As String = String.Empty
'				Dim startTime As DateTime = DateTime.UtcNow
'				Dim endTime As DateTime = DateTime.UtcNow
'				Dim duration As Integer = 0
'				Dim fcpRowCount As Integer = 0
'				Dim osRowCount As Integer = 0
'				'Dim rowCount As Integer = 0
'				Dim batchId As String = String.Empty
'				Dim sendRequest As Boolean = False
'				Dim wfBatchInfo As WorkflowBatchFileInfo = Nothing
'				Dim wfInfo As WorkflowInfo = Nothing
'				Try
					
'					If BRApi.Security.Authorization.IsUserInRole(si, RoleTypeId.ManageWorkflowProfiles) Then
'						If args.OperationName() = BREventOperationType.Workflow.WorkflowFileBatchLoadFile Then 
'							wfBatchInfo = DirectCast(args.Inputs(0), WorkflowBatchFileInfo)
'							wfName = wfBatchInfo.ProfileName.Split(New Char() {"."c})(0).ToUpper
'							wfScen = wfBatchInfo.ScenarioName
'						End If 

'						If args.OperationName() = BREventOperationType.Workflow.UpdateWorkflowStatus Then 
'							wfInfo = DirectCast(args.Inputs(0), WorkflowInfo)
'							wfProfileInfo = BRApi.Workflow.Metadata.GetProfile(si, wfInfo.WfUnitPk.ProfileKey)
'							wfName = wfProfileInfo.Name.Split(New Char() {"."c})(0).ToUpper
'							wfScen = BRApi.Finance.Members.GetMember(si, DimType.Scenario.Id, wfInfo.WfUnitPk.ScenarioKey).Name
'						End If
						
'						'To Identify AOP Workflow names and update module name
'						If AOPwfNamesInScope.Contains(wfName) Then
'							m_moduleName = "CommandCenter_AOP"
'						End If
						
'						If wfScenNwfNameKeyvaluePair.Keys.Contains(wfScen.ToUpper) Then
'							If wfScenNwfNameKeyvaluePair(wfScen.ToUpper).Contains(wfName) Then
'								Dim ccGateway = New IntegrationGateWay(Of IntegrationParams)(si, m_moduleName, OSModuleType.CC)	

'						 		Select Case args.OperationName()
'								 	Case Is = BREventOperationType.Workflow.WorkflowFileBatchLoadFile
'										sendRequest = True
'										batchId = wfBatchInfo.FilePath.Split(New Char() {"\"c})(8).Split(New Char() {"_"c})(1)
'										wfCube = wfBatchInfo.ProfileInfo.CubeName
'										wfScen = wfBatchInfo.ScenarioName
'										wfTime = wfBatchInfo.TimeName

'										If args.IsBeforeEvent Then
'											status = "Started"
'											stepType = "Start"
'										Else
'											Dim wfPOVId As String = $"{wfBatchInfo.ProfileInfo.Name.ToUpper}_{wfBatchInfo.ScenarioName.ToUpper}_{wfBatchInfo.TimeName.ToUpper}"
'											Dim importResponse As ResponseStatus = ExtractImportResponse(si, wfPOVId)
'											If importResponse IsNot Nothing Then
'												If importResponse.Success Then
'													status = If(wfBatchInfo.FileProcessed, "Success", "Failed")
'													wfError = ExtractError(si, wfBatchInfo)
'												Else
'													status = "Failed"
'													wfError = $"ErrorCode: {importResponse.StatusCode}, Message: {importResponse.ReasonPhrase}"
'												End If
'												fcpRowCount = importResponse.FcpRecordCount
'												osRowCount = importResponse.OsRecordCount
'											Else
'												status = If(wfBatchInfo.FileProcessed, "Success", "Failed")
'												wfError = ExtractError(si, wfBatchInfo)
'											End If
'											stepType = "End"
'										End If	
'									Case Is = BREventOperationType.Workflow.UpdateWorkflowStatus
'						            	 If Not args.IsBeforeEvent Then
'											 Dim wfStep As StepClassificationTypes = DirectCast(args.Inputs(1), StepClassificationTypes)
'											 Dim wfStatus As WorkflowStatusTypes = DirectCast(args.Inputs(2), WorkflowStatusTypes)
'											 If New WorkflowStatusTypes() { WorkflowStatusTypes.Completed, WorkflowStatusTypes.HasError }.Contains(wfStatus) Then
'												 If New WorkflowStatusTypes() { StepClassificationTypes.DataLoadTransform, StepClassificationTypes.ValidateTransform, _
'												  StepClassificationTypes.ValidateIntersection, StepClassificationTypes.LoadCube, StepClassificationTypes.ProcessCube }.Contains(wfStep) Then 
'													 sendRequest = True
'													 wfCube = wfProfileInfo.CubeName
'													 wfScen = BRApi.Finance.Members.GetMember(si, DimType.Scenario.Id, wfInfo.WfUnitPk.ScenarioKey).Name
'													 wfTime = BRApi.Finance.Members.GetMember(si, DimType.Time.Id, wfInfo.WfUnitPk.TimeKey).Name
'													 status = If(wfStatus = WorkflowStatusTypes.HasError, "Failed", wfStatus.ToString)
'													 stepType = wfStep.ToString

'													 Dim extract As (startTime As DateTime, endTime As DateTime, duration As Integer, rowCount As Integer, errorMsg As String) = _
'													 ExtractUpdateWorkflowStatus(si, wfStep, args.Inputs(3))
'													 startTime = extract.startTime
'													 endTime = extract.endTime
'													 duration = extract.duration
'													 wfError = If(wfStatus = WorkflowStatusTypes.HasError, If(String.IsNullOrEmpty(extract.errorMsg), "Errors found", extract.errorMsg), "")
'													 If wfStep = StepClassificationTypes.DataLoadTransform Then
'														 Dim wfPOVId As String = $"{wfProfileInfo.Name.ToUpper}_{wfScen.ToUpper}_{wfTime.ToUpper}"
'														 Dim importResponse As ResponseStatus = ExtractImportResponse(si, wfPOVId)
'														 fcpRowCount =  If(importResponse IsNot Nothing, importResponse.FcpRecordCount, 0)
'														 osRowCount =If(importResponse IsNot Nothing, importResponse.OsRecordCount, 0)
'														 wfError = If(wfStatus = WorkflowStatusTypes.HasError, $"ErrorCode: {importResponse.StatusCode}, Message: {importResponse.ReasonPhrase}", "")
'												 	End If
'											 	End If
'											End If
'										 End If
'								End Select
	
'								If sendRequest Then
'									Dim result = New With { _
'										.eventType = "WORKFLOW", _
'										.name = wfName, _
'										.batchId = If(String.IsNullOrEmpty(batchId), 0, Convert.ToInt32(batchId)), _
'										.scenario = wfScen, _
'										.period = wfTime, _
'										.startTime = startTime.ToString("G", CultureInfo.CreateSpecificCulture("en-US")), _
'										.endTime = endTime.ToString("G", CultureInfo.CreateSpecificCulture("en-US")), _
'										.duration = duration, _
'										.cubeName = wfCube, _
'										.step = stepType, _
'										.status = status, _
'										.fcpRecordCount = fcpRowCount, _
'										.osRecordCount = osRowCount, _
'										.error = wfError, _
'										.appName= CommonUtility.GetAppAndEnvName(si), _
'										.userId = si.UserName
'									}
									
'									' For debugging purpose write response to local file share.														
'		'							Dim sSubFolder As String = "\Groups\Everyone\"
'		'							Dim logFolderPath As String = BRApi.Utilities.GetFileShareFolder(si, FileShareFolderTypes.ApplicationIncoming, Nothing).Replace("\Incoming","")  & sSubFolder

'		'							Dim destFile As String = $"WorkflowEventHandler-{wfName}-{wfScen}-{wfTime}-log.txt"  
								
'		'	             			'Create/Append a file To write To.
'		'				            Using sw As StreamWriter = If (Not File.Exists(logFolderPath & destFile), File.CreateText(logFolderPath & destFile), File.AppendText(logFolderPath & destFile))          
'		'				                sw.WriteLine($"Operation: {args.OperationName}, IsBeforeEvent: {args.IsBeforeEvent}")
'		'								sw.WriteLine($"WorkFlow: {wfName}, Scenario: {wfScen}, Period: {wfTime}, Cube: {wfCube}, BatchId: {batchId}")
'		'								sw.WriteLine($"Step: {stepType}, Status: {status}")
'		'								sw.WriteLine($"StartTime: {startTime.ToString("G", CultureInfo.CreateSpecificCulture("en-US"))}, " & _ 
'		'										    $"EndTime: {endTime.ToString("G", CultureInfo.CreateSpecificCulture("en-US"))}, " & _
'		'										    $"Duration: {duration}, RowCount: {rowCount}, Error: {wfError}")
'		'								sw.WriteLine()
'		'				            End Using
									
'									Dim jsonPayLoad As String = JsonConvert.SerializeObject(result)
									
'									Dim response = ccGateway.PutData(si, jsonPayLoad, False)
										
'									If ccGateway.Params.Debugger Then
'										BRApi.ErrorLog.LogMessage(si, $"{m_moduleName} - WorkflowEventHandler Payload - {jsonPayLoad}")
'									End If
									
'									If ccGateway.Params.Debugger Then
'										BRApi.ErrorLog.LogMessage(si, $"{m_moduleName} - WorkflowEventHandler Payload response - {JsonConvert.SerializeObject(response.Result)}")
'									End If
									
'									'notify the command center team in case of failure with payload information 
'									If Not response.Result.Success Then
'										Dim subject As String = $"Command center post failed for Workflow {wfName}_{wfScen}_{wfTime}"
'										CommonUtility.sendmail(si, subject, jsonPayLoad, m_moduleName & " - WorkflowEventHandler", ccGateway.Params)
'									Else
'										If ccGateway.Params.Debugger Then
'											BRApi.ErrorLog.LogMessage(si, $"{m_moduleName} - WorkflowEventHandler Payload sent successfully")
'										End If
'									End If
'								End If
'							End If
'						End If
'					End If
'            	Catch ex As Exception
'                  Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
'            	End Try	
'			Return returnValue
'		End Function
		
'		Private Function ExtractImportResponse(ByVal si As SessionInfo, ByVal wfPOVId As String) As ResponseStatus
'			Dim response As ResponseStatus = Nothing
'			Try
'				Dim objXFUserState As XFUserState = BRApi.State.GetSessionState(si, False, ClientModuleType.External, String.Empty, String.Empty, wfPOVId + "_response", String.Empty)
				
'				If objXFUserState IsNot Nothing Then
'					response = JsonConvert.DeserializeObject(Of ResponseStatus)(objXFUserState.TextValue)
'				End If
'			Catch
'			End Try
'			Return response
'		End Function
'		Private Sub GetBatchWFInfo(ByVal si As SessionInfo,ByVal args As WorkflowEventHandlerArgs,ByVal wfBatchInfo As WorkflowBatchFileInfo)
'			Dim wfName As String = String.Empty
'			Dim wfCube As String = String.Empty
'			Dim wfScen As String = String.Empty
'			Dim wfTime As String = String.Empty
'			Dim wfError As String = String.Empty
'			Dim status As String = String.Empty
'			Dim stepType As String = String.Empty
'			Dim fcpRowCount As Integer = 0
'			Dim osRowCount As Integer = 0
'			Dim batchId As String = String.Empty
			
'			batchId = wfBatchInfo.FilePath.Split(New Char() {"\"c})(8).Split(New Char() {"_"c})(1)
'			wfCube = wfBatchInfo.ProfileInfo.CubeName
'			wfScen = wfBatchInfo.ScenarioName
'			wfTime = wfBatchInfo.TimeName

'			If args.IsBeforeEvent Then
'					status = "Started"
'					stepType = "Start"
'			Else
'					Dim wfPOVId As String = $"{wfBatchInfo.ProfileInfo.Name.ToUpper}_{wfBatchInfo.ScenarioName.ToUpper}_{wfBatchInfo.TimeName.ToUpper}"
'					Dim importResponse As ResponseStatus = ExtractImportResponse(si, wfPOVId)
'					If importResponse IsNot Nothing Then
'							If importResponse.Success Then
'								status = If(wfBatchInfo.FileProcessed, "Success", "Failed")
'								wfError = ExtractError(si, wfBatchInfo)
'							Else
'								status = "Failed"
'								wfError = $"ErrorCode: {importResponse.StatusCode}, Message: {importResponse.ReasonPhrase}"
'							End If
'							fcpRowCount = importResponse.FcpRecordCount
'							osRowCount = importResponse.OsRecordCount
'					Else
'						status = If(wfBatchInfo.FileProcessed, "Success", "Failed")
'						wfError = ExtractError(si, wfBatchInfo)
'					End If
'						stepType = "End"
'			End If	
'		End Sub
'		Private Function ExtractError(ByVal si As SessionInfo, ByVal wfBatchInfo As WorkflowBatchFileInfo) As String
'			Dim errorBuilder As New StringBuilder
'			Dim wfUnitPk = wfBatchInfo.CurrentWorkflowUnitPk
'			If wfBatchInfo.ProcessInfo.HasError Then
'				errorBuilder.AppendLine($"Step: DataLoadTransform, {wfBatchInfo.ProcessInfo.ErrorMessage}")
'				errorBuilder.AppendLine()
'			End If
			
'			If wfBatchInfo.ValTransProcessInfoErrors.ContainsKey(wfUnitPk.CreateWorkflowUnitClusterPk) Then
'				Dim vtProcessInfo = wfBatchInfo.ValTransProcessInfoErrors(wfUnitPk.CreateWorkflowUnitClusterPk)
'				errorBuilder.AppendLine($"Step: ValidateTransform, {vtProcessInfo.TotalUnmappedCount} unmapped dimensions found")
'				errorBuilder.AppendLine()
'			End If
			
'			If wfBatchInfo.ValIntersectProcessInfoErrors.ContainsKey(wfUnitPk.CreateWorkflowUnitClusterPk) Then
'				Dim viProcessInfo = wfBatchInfo.ValIntersectProcessInfoErrors(wfUnitPk.CreateWorkflowUnitClusterPk)
'				errorBuilder.AppendLine($"Step: ValidateIntersection, {viProcessInfo.IntersectionErrorCount} intersection errors found")
'				errorBuilder.AppendLine()
'			End If
			
'			If wfBatchInfo.LoadCubeProcessInfoErrors.ContainsKey(wfUnitPk.CreateWorkflowUnitClusterPk) Then
'				 Dim lcProcessInfo = wfBatchInfo.LoadCubeProcessInfoErrors(wfUnitPk.CreateWorkflowUnitClusterPk)
'				 errorBuilder.AppendLine($"Step: LoadCube, {lcProcessInfo.ErrorMessage} Errors found")
'				 errorBuilder.AppendLine()
'			End If
			
'			If wfBatchInfo.ProcessCubeProcessInfoErrors.ContainsKey(wfUnitPk.CreateWorkflowUnitClusterPk) Then
'				Dim pcProcessInfo = wfBatchInfo.ProcessCubeProcessInfoErrors(wfUnitPk.CreateWorkflowUnitClusterPk)
'				errorBuilder.AppendLine($"Step: ProcessCube, {pcProcessInfo.ErrorMessage} Errors found")
'				errorBuilder.AppendLine()
'			End If
			
'			Return errorBuilder.ToString
'		End Function
		
'		Private Function ExtractUpdateWorkflowStatus(ByVal si As SessionInfo, ByVal stepType As StepClassificationTypes, ByVal rawData As String) As (StartTime As DateTime, EndTime As DateTime, Duration As Double, Count As Integer, ErrorMsg As String)
		
'			Dim startTime As DateTime
'			Dim endTime As DateTime
'			Dim duration As Integer
'			Dim count As Integer
'	 		Dim length As Integer
'			Dim errorMsg As String = ""
'			Try
			
'			If Not String.IsNullOrEmpty(rawData) Then
'				Dim rawDataArr As String() = rawData.Split(New String() {Environment.NewLine}, StringSplitOptions.None)
'				length = rawDataArr.Length
'				Select stepType
'					Case Is = StepClassificationTypes.DataLoadTransform
'						startTime = Convert.ToDateTime(rawDataArr(1).Split(New Char() {"="c})(1).Trim)
'						endTime = Convert.ToDateTime(rawDataArr(2).Split(New Char() {"="c})(1).Trim)
'						duration = Convert.ToInt32(rawDataArr(5).Split(New Char() {"="c})(1).Replace("Milli-Seconds(MS)","").Trim)
'						count = Convert.ToInt32(rawDataArr(16).Split(New Char() {"="c})(1).Trim)
'					Case Is = StepClassificationTypes.ValidateTransform
'					    startTime = Convert.ToDateTime(rawDataArr(1).Split(New Char() {"="c})(1).Trim)
'						endTime = Convert.ToDateTime(rawDataArr(2).Split(New Char() {"="c})(1).Trim)
'						duration = CInt((endTime - startTime).TotalMilliseconds)
'						count = Convert.ToInt32(rawDataArr(3).Split(New Char() {"="c})(1).Trim)
'						errorMsg = If(count = 0, String.Empty, $"{count} unmapped dimensions found")
'					Case Is = StepClassificationTypes.ValidateIntersection
'						startTime = Convert.ToDateTime(rawDataArr(1).Split(New Char() {"="c})(1).Trim)
'						endTime = Convert.ToDateTime(rawDataArr(2).Split(New Char() {"="c})(1).Trim)
'						duration = Convert.ToInt32(rawDataArr(3).Split(New Char() {"="c})(1).Trim)
'						count = Convert.ToInt32(rawDataArr(4).Split(New Char() {"="c})(1).Trim)
'						errorMsg = If(count = 0, String.Empty, $"{count} intersection errors found")
'					Case Is = StepClassificationTypes.LoadCube
'						startTime = Convert.ToDateTime(rawDataArr(1).Split(New Char() {"="c})(1).Trim)
'						endTime = Convert.ToDateTime(rawDataArr(2).Split(New Char() {"="c})(1).Trim)
'						duration = Convert.ToInt32(rawDataArr(3).Split(New Char() {"="c})(1).Trim)
'						count = Convert.ToInt32(rawDataArr(4).Split(New Char() {"="c})(1).Trim)
'					Case Is = StepClassificationTypes.ProcessCube
'						startTime = Convert.ToDateTime(rawDataArr(1).Split(New Char() {"="c})(1).Trim)
'						endTime = Convert.ToDateTime(rawDataArr(2).Split(New Char() {"="c})(1).Trim)
'						duration = Convert.ToInt32(rawDataArr(3).Split(New Char() {"="c})(1).Trim)
'						count = Convert.ToInt32(rawDataArr(4).Split(New Char() {"="c})(1).Trim)
'				End Select
				
'			End If 
'			Catch ex As Exception
'				BRApi.ErrorLog.LogMessage(si, $"{stepType.ToString()}{vbCrLf}{length}{vbCrLf}{rawData}{vbCrLf}Exception: {ex.Message}")
'			End Try
		
'			Return (StartTime:= startTime, EndTime:= endTime, Duration:= duration, Count:= count, ErrorMsg:= errorMsg)
'		End Function
'	End Class
'End Namespace



''Imports System
''Imports System.Data
''Imports System.Data.Common
''Imports System.IO
''Imports System.Collections.Generic
''Imports System.Globalization
''Imports System.Linq
''Imports Microsoft.VisualBasic
''Imports System.Windows.Forms
''Imports OneStream.Shared.Common
''Imports OneStream.Shared.Wcf
''Imports OneStream.Shared.Engine
''Imports OneStream.Shared.Database
''Imports OneStream.Stage.Engine
''Imports OneStream.Stage.Database
''Imports OneStream.Finance.Engine
''Imports OneStream.Finance.Database
''Imports System.Text

''Imports System.Net
''Imports System.Net.Http
''Imports System.Timers
''Imports System.Threading
''Imports Newtonsoft.Json
''Imports Newtonsoft.Json.Linq
''Imports Newtonsoft.Json.JsonPropertyAttribute
''Imports System.Diagnostics
''Imports System.Net.Mail

''Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_VARIABLES
''Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_GATEWAY
''Imports OneStream.BusinessRule.Extender.OS_INTEGRATION_UTILITY
''Imports OneStream.BusinessRule.Extender.OS_Models

''Imports OneStream.BusinessRule.Extender.OS_Utility.MainClass

''Namespace OneStream.BusinessRule.WorkflowEventHandler.WorkflowEventHandler
''	Public Class MainClass
		
''		Private m_moduleName As String = "CommandCenter_MEC"
		
''		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As WorkflowEventHandlerArgs) As Object
''			Dim wfScenNwfNameKeyvaluePair = New Dictionary(Of String, list(Of String)) From _
''				{	
''					{"ACTUAL", New List(Of String)({ "ACTUALS_HFM_CORP", "ACTUALS_HFM_SAMS", "ACTUALS_HFM_WMTUS",
''													 "ACTUALS_HFM_ADJS_CORP", "ACTUALS_HFM_ADJS_SAMS", "ACTUALS_HFM_ADJS_WMTUS",
''													 "ACTUALS_SAPBI_CORP", "ACTUALS_SAPBI_SAMS", "ACTUALS_SAPBI_WMTUS_BAL",
''													 "ACTUALS_SAPBI_WMTUS_SALES", "ACTUALS_SAPBI_WMTUS_OTHERS", "ACTUALS_SAPBI_ROI",
''													 "ACTUALS_SLEDG_ADJ"})
''					 }, 
''					 {"PLAN_WORKING", New List(Of String)({"PLAN_ANAPLAN_FIN", "PLAN_ECF"})}
''				}
'''			Dim wfScenNwfNameKeyvaluePair = New Dictionary(Of String, list(Of String)) From _
'''				{	
'''					{"ACTUAL", New List(Of String)({ "ACTUALS_HFM_CORP", "ACTUALS_HFM_SAMS", "ACTUALS_HFM_WMTUS",
'''													 "ACTUALS_HFM_ADJS_CORP", "ACTUALS_HFM_ADJS_SAMS", "ACTUALS_HFM_ADJS_WMTUS",
'''													 "ACTUALS_SAPBI_CORP", "ACTUALS_SAPBI_SAMS", "ACTUALS_SAPBI_WMTUS_BAL",
'''													 "ACTUALS_SAPBI_WMTUS_SALES", "ACTUALS_SAPBI_WMTUS_OTHERS", "ACTUALS_SAPBI_ROI",
'''													 "ACTUALS_SLEDG_ADJ","INTLTOES_APP2APP_IMPORT","INTL","INTL SEGMENT PLANNER"})
'''					 }, 
'''					 {"PLAN_WORKING", New List(Of String)({"PLAN_ANAPLAN_FIN", "PLAN_ECF","WMTUS_OPS_APP2APP_IMPORT","WMT_US_MERCH_APP2APP_IMPORT","WMTUS_OMNI_APP2APP_IMPORT","SAMS_OPS_APP2APP_IMPORT","SAMS_FRESH_APP2APP_IMPORT_PLAN","SAMS_MERCH_APP2APP_IMPORT","SAMS_FRESH_APP2APP_IMPORT","INTLTOES_APP2APP_IMPORT","INTL","INTL SEGMENT PLANNER"})} ,
'''					 {"PLAN_V1", New List(Of String)({"WMTUS_OPS_APP2APP_IMPORT","WMT_US_MERCH_APP2APP_IMPORT","WMTUS_OMNI_APP2APP_IMPORT","SAMS_OPS_APP2APP_IMPORT","SAMS_FRESH_APP2APP_IMPORT_PLAN","SAMS_MERCH_APP2APP_IMPORT","SAMS_FRESH_APP2APP_IMPORT"})} ,
'''					 {"PLAN_V2", New List(Of String)({"WMTUS_OPS_APP2APP_IMPORT","WMT_US_MERCH_APP2APP_IMPORT","WMTUS_OMNI_APP2APP_IMPORT","SAMS_OPS_APP2APP_IMPORT","SAMS_FRESH_APP2APP_IMPORT_PLAN","SAMS_MERCH_APP2APP_IMPORT","SAMS_FRESH_APP2APP_IMPORT"})} ,
'''					 {"PLAN_V3", New List(Of String)({"WMTUS_OPS_APP2APP_IMPORT","WMT_US_MERCH_APP2APP_IMPORT","WMTUS_OMNI_APP2APP_IMPORT","SAMS_OPS_APP2APP_IMPORT","SAMS_FRESH_APP2APP_IMPORT_PLAN","SAMS_MERCH_APP2APP_IMPORT","SAMS_FRESH_APP2APP_IMPORT"})} ,
'''					 {"PLAN_FINAL", New List(Of String)({"WMTUS_OPS_APP2APP_IMPORT","WMT_US_MERCH_APP2APP_IMPORT","WMTUS_OMNI_APP2APP_IMPORT","SAMS_OPS_APP2APP_IMPORT","SAMS_FRESH_APP2APP_IMPORT_PLAN","SAMS_MERCH_APP2APP_IMPORT","SAMS_FRESH_APP2APP_IMPORT"})} ,
'''					 {"SAMSFRESH_PLAN_WORKING", New List(Of String)({"SAMS_FRESH_APP2APP_IMPORT_PLAN","SAMS_FRESH_APP2APP_IMPORT"})} ,
'''					 {"FORECAST_WORKING", New List(Of String)({"INTLTOES_APP2APP_IMPORT","INTL","INTL SEGMENT PLANNER"})} ,
'''					 {"FORECAST", New List(Of String)({"INTL SEGMENT PLANNER"})} ,
'''					 {"PRIOR_FORECAST", New List(Of String)({"INTL SEGMENT PLANNER"})}
'''				}	
''		'				
				
''				'To Identify AOP Workflow names and update module name												   
''				Dim AOPwfNamesInScope = New List(Of String)({"PLAN_ANAPLAN_FIN","PLAN_ECF"})
''				'vn50tv8/DPA-29476/JAN10th
''				'To Identify APP to APP Workflow names and update module name												   
''				Dim app2appWorkflowNames = New List(Of String)({"INTLTOES_APP2APP_IMPORT","INTL","INTL SEGMENT PLANNER","SAMS_FRESH_APP2APP_IMPORT",  _
''				"SAMS_OPS_APP2APP_IMPORT","SAMS_FRESH_APP2APP_IMPORT_PLAN","SAMS_MERCH_APP2APP_IMPORT","WMTUS_OPS_APP2APP_IMPORT","WMT_US_MERCH_APP2APP_IMPORT","WMTUS_OMNI_APP2APP_IMPORT"})''DPA-29476/vn50tv8/29thdec


''		   		Dim returnValue As Object = args.DefaultReturnValue
''				args.UseReturnValueFromBusinessRule = False
''				args.Cancel = False

''				Dim wfProfileInfo As WorkflowProfileInfo = Nothing
''				Dim wfName As String = String.Empty
''				Dim wfCube As String = String.Empty
''				Dim wfScen As String = String.Empty
''				Dim wfTime As String = String.Empty
''				Dim wfError As String = String.Empty
''				Dim status As String = String.Empty
''				Dim stepType As String = String.Empty
''				Dim emailBody As String = String.Empty
''				Dim startTime As DateTime = DateTime.UtcNow
''				Dim endTime As DateTime = DateTime.UtcNow
''				Dim duration As Integer = 0
''				Dim fcpRowCount As Integer = 0
''				Dim osRowCount As Integer = 0
''				'Dim rowCount As Integer = 0
''				Dim batchId As String = String.Empty
''				Dim sendRequest As Boolean = False
''				Dim wfBatchInfo As WorkflowBatchFileInfo = Nothing
''				Dim wfInfo As WorkflowInfo = Nothing
''				Dim ccGateway As IntegrationGateWay(Of IntegrationParams)=Nothing 					
''				Dim statekey As String = String.Empty ''DPA-29476/vn50tv8/29thdec
''				Dim wfProfileType As String = String.Empty 'DPA-29476/vn50tv8/29thdec
''				Dim extract As (startTime As DateTime, endTime As DateTime, duration As Integer, rowCount As Integer, errorMsg As String) = Nothing 
''				Dim sourceApp As String = String.Empty 'DPA-29476/vn50tv8/29thdec
				
''				Try
					
''					If BRApi.Security.Authorization.IsUserInRole(si, RoleTypeId.ManageWorkflowProfiles) Then
''						If args.OperationName() = BREventOperationType.Workflow.WorkflowFileBatchLoadFile Then 
''							wfBatchInfo = DirectCast(args.Inputs(0), WorkflowBatchFileInfo)
''							wfInfo = brapi.Workflow.Status.GetWorkflowStatus(si,wfBatchInfo.CurrentWorkflowUnitPk.CreateWorkflowUnitClusterPk())'DPA-29476/vn50tv8/29thdec
''							wfProfileType= wfInfo.Name 'DPA-29476/vn50tv8/29thdec
''							wfName = wfBatchInfo.ProfileName.Split(New Char() {"."c})(0).ToUpper
''							wfScen = wfBatchInfo.ScenarioName
''						End If 
						
''						If args.OperationName() = BREventOperationType.Workflow.UpdateWorkflowStatus Then 
''							wfInfo = DirectCast(args.Inputs(0), WorkflowInfo)
''							wfProfileType= wfInfo.Name 'DPA-29476/vn50tv8/29thdec
''							wfProfileInfo = BRApi.Workflow.Metadata.GetProfile(si, wfInfo.WfUnitPk.ProfileKey)
''							wfName = wfProfileInfo.Name.Split(New Char() {"."c})(0).ToUpper
''							wfScen = BRApi.Finance.Members.GetMember(si, DimType.Scenario.Id, wfInfo.WfUnitPk.ScenarioKey).Name							
''						End If						
''						'To Identify AOP Workflow names and update module name
''						If AOPwfNamesInScope.Contains(wfName) Then
''							m_moduleName = "CommandCenter_AOP"
''						End If
						
''						'To Identify APPtoAPP Workflow names and update module name'DPA-29476/vn50tv8/29th
''						If app2appWorkflowNames.Contains(wfName) Then 'DPA-29476/vn50tv8/29th
''							m_moduleName = GetAppToAppModuleNameAndAppName(si,wfName,sourceApp)
''						End If
''						If wfScenNwfNameKeyvaluePair.Keys.Contains(wfScen.ToUpper) Then
''							If wfScenNwfNameKeyvaluePair(wfScen.ToUpper).Contains(wfName) Then								
''								If app2appWorkflowNames.Contains(wfName) Then'DPA-29476/vn50tv8/29th
''									 ccGateway = New IntegrationGateWay(Of IntegrationParams)(si, m_moduleName,Nothing)
''								Else									
''								     ccGateway = New IntegrationGateWay(Of IntegrationParams)(si, m_moduleName, OSModuleType.CC)	
''								End If

''						 		Select Case args.OperationName()
''								 	Case Is = BREventOperationType.Workflow.WorkflowFileBatchLoadFile
''										sendRequest = True
''										batchId = wfBatchInfo.FilePath.Split(New Char() {"\"c})(8).Split(New Char() {"_"c})(1)
''										wfCube = wfBatchInfo.ProfileInfo.CubeName
''										wfScen = wfBatchInfo.ScenarioName
''										wfTime = wfBatchInfo.TimeName

''										If args.IsBeforeEvent Then
''											status = "Started"
''											stepType = "Start"
''										Else
''											Dim wfPOVId As String = $"{wfBatchInfo.ProfileInfo.Name.ToUpper}_{wfBatchInfo.ScenarioName.ToUpper}_{wfBatchInfo.TimeName.ToUpper}"
''											Dim importResponse As ResponseStatus = ExtractImportResponse(si, wfPOVId)
''											If importResponse IsNot Nothing Then
''												If importResponse.Success Then
''													status = If(wfBatchInfo.FileProcessed, "Success", "Failed")
''													wfError = ExtractError(si, wfBatchInfo)
''												Else
''													status = "Failed"
''													wfError = $"ErrorCode: {importResponse.StatusCode}, Message: {importResponse.ReasonPhrase}"
''												End If
''												fcpRowCount = importResponse.FcpRecordCount
''												osRowCount = importResponse.OsRecordCount
''											Else
''												status = If(wfBatchInfo.FileProcessed, "Success", "Failed")
''												wfError = ExtractError(si, wfBatchInfo)
''											End If
''											stepType = "End"
''										End If	
''									Case Is = BREventOperationType.Workflow.UpdateWorkflowStatus
''						            	 If Not args.IsBeforeEvent Then
''											 Dim wfStep As StepClassificationTypes = DirectCast(args.Inputs(1), StepClassificationTypes)
''											 Dim wfStatus As WorkflowStatusTypes = DirectCast(args.Inputs(2), WorkflowStatusTypes)
''											 If New WorkflowStatusTypes() { WorkflowStatusTypes.Completed, WorkflowStatusTypes.HasError }.Contains(wfStatus) Then
''												 If New WorkflowStatusTypes() { StepClassificationTypes.DataLoadTransform, StepClassificationTypes.ValidateTransform, _
''												  StepClassificationTypes.ValidateIntersection, StepClassificationTypes.LoadCube, StepClassificationTypes.ProcessCube }.Contains(wfStep) Then 
''													 sendRequest = True
''													 wfCube = wfProfileInfo.CubeName
''													 wfScen = BRApi.Finance.Members.GetMember(si, DimType.Scenario.Id, wfInfo.WfUnitPk.ScenarioKey).Name
''													 wfTime = BRApi.Finance.Members.GetMember(si, DimType.Time.Id, wfInfo.WfUnitPk.TimeKey).Name
''													 status = If(wfStatus = WorkflowStatusTypes.HasError, "Failed", wfStatus.ToString)
''													 stepType = wfStep.ToString

'''													 Dim extract As (startTime As DateTime, endTime As DateTime, duration As Integer, rowCount As Integer, errorMsg As String) = _
''													 extract= ExtractUpdateWorkflowStatus(si, wfStep, args.Inputs(3))
''													 startTime = extract.startTime
''													 endTime = extract.endTime
''													 duration = extract.duration
''													 wfError = If(wfStatus = WorkflowStatusTypes.HasError, If(String.IsNullOrEmpty(extract.errorMsg), "Errors found", extract.errorMsg), "")
''													 If wfStep = StepClassificationTypes.DataLoadTransform Then
''														 Dim wfPOVId As String = $"{wfProfileInfo.Name.ToUpper}_{wfScen.ToUpper}_{wfTime.ToUpper}"
''														 Dim importResponse As ResponseStatus = ExtractImportResponse(si, wfPOVId)
''														 fcpRowCount =  If(importResponse IsNot Nothing, importResponse.FcpRecordCount, 0)
''														 osRowCount =If(importResponse IsNot Nothing, importResponse.OsRecordCount, 0)
''														 wfError = If(wfStatus = WorkflowStatusTypes.HasError, $"ErrorCode: {importResponse.StatusCode}, Message: {importResponse.ReasonPhrase}", "")
''												 	End If
''											 	End If
''											End If
''										 End If
''								End Select

''								If sendRequest Then
''									Dim result = New With { _
''										.eventType = "WORKFLOW", _
''										.name = wfName, _
''										.batchId = If(String.IsNullOrEmpty(batchId), 0, Convert.ToInt32(batchId)), _
''										.scenario = wfScen, _
''										.period = wfTime, _
''										.startTime = startTime.ToString("G", CultureInfo.CreateSpecificCulture("en-US")), _
''										.endTime = endTime.ToString("G", CultureInfo.CreateSpecificCulture("en-US")), _
''										.duration = duration, _
''										.cubeName = wfCube, _
''										.step = stepType, _
''										.status = status, _
''										.fcpRecordCount = fcpRowCount, _
''										.osRecordCount = osRowCount, _
''										.error = wfError, _
''										.appName= CommonUtility.GetAppAndEnvName(si), _
''										.userId = si.UserName
''									}
									
''									' For debugging purpose write response to local file share.														
''		'							Dim sSubFolder As String = "\Groups\Everyone\"
''		'							Dim logFolderPath As String = BRApi.Utilities.GetFileShareFolder(si, FileShareFolderTypes.ApplicationIncoming, Nothing).Replace("\Incoming","")  & sSubFolder

''		'							Dim destFile As String = $"WorkflowEventHandler-{wfName}-{wfScen}-{wfTime}-log.txt"  
								
''		'	             			'Create/Append a file To write To.
''		'				            Using sw As StreamWriter = If (Not File.Exists(logFolderPath & destFile), File.CreateText(logFolderPath & destFile), File.AppendText(logFolderPath & destFile))          
''		'				                sw.WriteLine($"Operation: {args.OperationName}, IsBeforeEvent: {args.IsBeforeEvent}")
''		'								sw.WriteLine($"WorkFlow: {wfName}, Scenario: {wfScen}, Period: {wfTime}, Cube: {wfCube}, BatchId: {batchId}")
''		'								sw.WriteLine($"Step: {stepType}, Status: {status}")
''		'								sw.WriteLine($"StartTime: {startTime.ToString("G", CultureInfo.CreateSpecificCulture("en-US"))}, " & _ 
''		'										    $"EndTime: {endTime.ToString("G", CultureInfo.CreateSpecificCulture("en-US"))}, " & _
''		'										    $"Duration: {duration}, RowCount: {rowCount}, Error: {wfError}")
''		'								sw.WriteLine()
''		'				            End Using
		
''									If Not  app2appWorkflowNames.Contains(wfName) Then	'DPA-29476/vn50tv8/29th																	
''									    Dim jsonPayLoad As String = JsonConvert.SerializeObject(result)										
''										Dim response = ccGateway.PutData(si, jsonPayLoad, False)
''										'notify the command center team in case of failure with payload information 
''										If Not response.Result.Success Then
''											Dim subject As String = $"Command center post failed for Workflow {wfName}_{wfScen}_{wfTime}"
''											CommonUtility.sendmail(si, subject, jsonPayLoad, m_moduleName & " - WorkflowEventHandler", ccGateway.Params)
''										Else
''											If ccGateway.Params.Debugger Then
''												BRApi.ErrorLog.LogMessage(si, $"{m_moduleName} - WorkflowEventHandler Payload sent successfully")
''											End If
''										End If
''									End If
''								End If
''							End If
''						End If
''					End If
''            	Catch ex As Exception
''				  emailBody = ex.Message
''                  Throw ErrorHandler.LogWrite(si, New XFException(si, ex))	
''				Finally
''					'DPA-29476/vn50tv8/29thdec
''				  If app2appWorkflowNames.Contains(wfName) Then
''					  statekey  = m_moduleName & "_" & wfName &"_" & wfScen									
''					  Dim statevalue = GetSessionStateValue(si,statekey,String.Empty)
''					   If Not String.IsNullOrWhiteSpace(stepType) Then
''						  statevalue = IIf(String.IsNullOrWhiteSpace(statevalue), ("Step:  "& stepType & " " & status) ,(statevalue & Environment.NewLine & "Step:  "& stepType & " " & status))										
''					   End If									
''					  SetSessionStateValue(si,statekey,statevalue)
''					  Dim lastStepType As String = String .Empty
''					  If wfProfileType.ToLower().Contains("process") Then
''						  lastStepType = "processcube"
''					  ElseIf wfProfileType.ToLower().Contains("load") Then
''						   lastStepType = "loadcube"
''					  End If
''					  If (status.ToLower = "failed") Or  (status.ToLower = "completed" And stepType.ToLower() = lastStepType.ToLower())Then 						
''						Dim targetApp ="Enterprise"
''						statevalue = GetSessionStateValue(si,statekey,String.Empty)
''						Dim rowCount As String = String .Empty						  
''						rowCount =	GetSessionStateValue(si,"App2App",String.Empty)
''						Dim lstWorkflowInfo As List(Of KeyValuePair(Of String, String)) = New List(Of KeyValuePair(Of String, String))
''						lstWorkflowInfo.Add(New KeyValuePair(Of String, String)("wfName",$"{wfName}"))
''						lstWorkflowInfo.Add(New KeyValuePair(Of String, String)("wfTime",$"{wfTime}"))
''						lstWorkflowInfo.Add(New KeyValuePair(Of String, String)("wfScen",$"{wfScen}"))
''						lstWorkflowInfo.Add(New KeyValuePair(Of String, String)("App2AppCopy","App2App Copy –"))
''						lstWorkflowInfo.Add(New KeyValuePair(Of String, String)("AppNames",sourceApp &" To " & targetApp & " App"))
''						lstWorkflowInfo.Add(New KeyValuePair(Of String, String)("rowCount",rowCount))
''						If (status.ToLower = "failed") Then lstWorkflowInfo.Add(New KeyValuePair(Of String, String)("errorInfo",emailBody))
''						commonutility.SendMail(si,statevalue,ccGateway.Params,m_moduleName,lstWorkflowInfo)
''						BRApi.State.DeleteSessionState(si, False, ClientModuleType.External, String.Empty, String.Empty, stateKey, String.Empty)
''						BRApi.State.DeleteSessionState(si, False, ClientModuleType.External, String.Empty, String.Empty, "App2App", String.Empty)
''					  End If 
''				  End If
''            	End Try	
''			Return returnValue
''		End Function	
''		Private Function ExtractImportResponse(ByVal si As SessionInfo, ByVal wfPOVId As String) As ResponseStatus
''			Dim response As ResponseStatus = Nothing
''			Try
''				Dim objXFUserState As XFUserState = BRApi.State.GetSessionState(si, False, ClientModuleType.External, String.Empty, String.Empty, wfPOVId + "_response", String.Empty)
				
''				If objXFUserState IsNot Nothing Then
''					response = JsonConvert.DeserializeObject(Of ResponseStatus)(objXFUserState.TextValue)
''				End If
''			Catch
''			End Try
''			Return response
''		End Function
		
''		Private Function ExtractError(ByVal si As SessionInfo, ByVal wfBatchInfo As WorkflowBatchFileInfo) As String
''			Dim errorBuilder As New StringBuilder
''			Dim wfUnitPk = wfBatchInfo.CurrentWorkflowUnitPk
''			If wfBatchInfo.ProcessInfo.HasError Then
''				errorBuilder.AppendLine($"Step: DataLoadTransform, {wfBatchInfo.ProcessInfo.ErrorMessage}")
''				errorBuilder.AppendLine()
''			End If
			
''			If wfBatchInfo.ValTransProcessInfoErrors.ContainsKey(wfUnitPk.CreateWorkflowUnitClusterPk) Then
''				Dim vtProcessInfo = wfBatchInfo.ValTransProcessInfoErrors(wfUnitPk.CreateWorkflowUnitClusterPk)
''				errorBuilder.AppendLine($"Step: ValidateTransform, {vtProcessInfo.TotalUnmappedCount} unmapped dimensions found")
''				errorBuilder.AppendLine()
''			End If
			
''			If wfBatchInfo.ValIntersectProcessInfoErrors.ContainsKey(wfUnitPk.CreateWorkflowUnitClusterPk) Then
''				Dim viProcessInfo = wfBatchInfo.ValIntersectProcessInfoErrors(wfUnitPk.CreateWorkflowUnitClusterPk)
''				errorBuilder.AppendLine($"Step: ValidateIntersection, {viProcessInfo.IntersectionErrorCount} intersection errors found")
''				errorBuilder.AppendLine()
''			End If
			
''			If wfBatchInfo.LoadCubeProcessInfoErrors.ContainsKey(wfUnitPk.CreateWorkflowUnitClusterPk) Then
''				 Dim lcProcessInfo = wfBatchInfo.LoadCubeProcessInfoErrors(wfUnitPk.CreateWorkflowUnitClusterPk)
''				 errorBuilder.AppendLine($"Step: LoadCube, {lcProcessInfo.ErrorMessage} Errors found")
''				 errorBuilder.AppendLine()
''			End If
			
''			If wfBatchInfo.ProcessCubeProcessInfoErrors.ContainsKey(wfUnitPk.CreateWorkflowUnitClusterPk) Then
''				Dim pcProcessInfo = wfBatchInfo.ProcessCubeProcessInfoErrors(wfUnitPk.CreateWorkflowUnitClusterPk)
''				errorBuilder.AppendLine($"Step: ProcessCube, {pcProcessInfo.ErrorMessage} Errors found")
''				errorBuilder.AppendLine()
''			End If
			
''			Return errorBuilder.ToString
''		End Function
		
''		Private Function ExtractUpdateWorkflowStatus(ByVal si As SessionInfo, ByVal stepType As StepClassificationTypes, ByVal rawData As String) As (StartTime As DateTime, EndTime As DateTime, Duration As Double, Count As Integer, ErrorMsg As String)
		
''			Dim startTime As DateTime
''			Dim endTime As DateTime
''			Dim duration As Integer
''			Dim count As Integer
''	 		Dim length As Integer
''			Dim errorMsg As String = ""
''			Try
			
''			If Not String.IsNullOrEmpty(rawData) Then
''				Dim rawDataArr As String() = rawData.Split(New String() {Environment.NewLine}, StringSplitOptions.None)
''				length = rawDataArr.Length
''				Select stepType
''					Case Is = StepClassificationTypes.DataLoadTransform
''						startTime = Convert.ToDateTime(rawDataArr(1).Split(New Char() {"="c})(1).Trim)
''						endTime = Convert.ToDateTime(rawDataArr(2).Split(New Char() {"="c})(1).Trim)
''						duration = Convert.ToInt32(rawDataArr(5).Split(New Char() {"="c})(1).Replace("Milli-Seconds(MS)","").Trim)
''						count = Convert.ToInt32(rawDataArr(16).Split(New Char() {"="c})(1).Trim)
''					Case Is = StepClassificationTypes.ValidateTransform
''					    startTime = Convert.ToDateTime(rawDataArr(1).Split(New Char() {"="c})(1).Trim)
''						endTime = Convert.ToDateTime(rawDataArr(2).Split(New Char() {"="c})(1).Trim)
''						duration = CInt((endTime - startTime).TotalMilliseconds)
''						count = Convert.ToInt32(rawDataArr(3).Split(New Char() {"="c})(1).Trim)
''						errorMsg = If(count = 0, String.Empty, $"{count} unmapped dimensions found")
''					Case Is = StepClassificationTypes.ValidateIntersection
''						startTime = Convert.ToDateTime(rawDataArr(1).Split(New Char() {"="c})(1).Trim)
''						endTime = Convert.ToDateTime(rawDataArr(2).Split(New Char() {"="c})(1).Trim)
''						duration = Convert.ToInt32(rawDataArr(3).Split(New Char() {"="c})(1).Trim)
''						count = Convert.ToInt32(rawDataArr(4).Split(New Char() {"="c})(1).Trim)
''						errorMsg = If(count = 0, String.Empty, $"{count} intersection errors found")
''					Case Is = StepClassificationTypes.LoadCube
''						startTime = Convert.ToDateTime(rawDataArr(1).Split(New Char() {"="c})(1).Trim)
''						endTime = Convert.ToDateTime(rawDataArr(2).Split(New Char() {"="c})(1).Trim)
''						duration = Convert.ToInt32(rawDataArr(3).Split(New Char() {"="c})(1).Trim)
''						count = Convert.ToInt32(rawDataArr(4).Split(New Char() {"="c})(1).Trim)
''					Case Is = StepClassificationTypes.ProcessCube
''						startTime = Convert.ToDateTime(rawDataArr(1).Split(New Char() {"="c})(1).Trim)
''						endTime = Convert.ToDateTime(rawDataArr(2).Split(New Char() {"="c})(1).Trim)
''						duration = Convert.ToInt32(rawDataArr(3).Split(New Char() {"="c})(1).Trim)
''						count = Convert.ToInt32(rawDataArr(4).Split(New Char() {"="c})(1).Trim)
''				End Select
				
''			End If 
''			Catch ex As Exception
''				BRApi.ErrorLog.LogMessage(si, $"{stepType.ToString()}{vbCrLf}{length}{vbCrLf}{rawData}{vbCrLf}Exception: {ex.Message}")
''			End Try
		
''			Return (StartTime:= startTime, EndTime:= endTime, Duration:= duration, Count:= count, ErrorMsg:= errorMsg)
''		End Function
''	End Class
''End Namespace


]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="XF_Metadata_Analysis">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies>
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="true" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="Metadata_HelperQueries" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="false" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\WPF\WindowsBase.dll" />
                <referencedAssembly isInBusinessRulesAssemblyFolder="false" isOtherBusinessRule="false" isInEnvironmentSpecialFolder="false" environmentSpecialFolder="" assemblyName="F:\OneStream Software\OneStreamAppRoot\OneStreamApp\bin\DocumentFormat.OpenXml.dll" />
            </referencedAssemblies>
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Imports DocumentFormat.OpenXml
Imports DocumentFormat.OpenXml.Packaging
Imports DocumentFormat.OpenXml.Spreadsheet

#Region "Summary"

'==============================================================================================
' This BR queries multiple applications in the same environment for 
' Dimension Types: Entity, Scenario, Account, Flow, UD1 - UD8
' and creates 4 analysis files
' 	Dimension Extensibility: a side-By-side comparison Of the dimensions In Each dimension type
'	Cubes Analysis: a side-by-side comparison of application cube values, including dimensions for default and non-default scenario types
'	Dimension Member Analysis: Shows all dimensions whos members do not match a standard
'   BR/MF Analysis: A list of all active LogMessage notes in Finance Business Rules and Member Formulas
'
' Files are located
' 	Applications\(Current Application)\DataManagement\Export\(user)\MetadataAnalysis
'
' Depentants:
' 	Used by Data Management sequence Run Metadata Analysis
' 	Used in dashboard maintanance group Metadata_Analysis via DM sequence above
'
' Related Business Rules:
'	Dashboard Extender > XFR_Metadata_Analysis
'	Dashboard XFBR String > XFBR_Metadata_Analysis
'==============================================================================================

#End Region	
#Region "Change Log / Tombstone"

'==============================================================================================
' Date			User				Description
'----------------------------------------------------------------------------------------------
' 08/12/2021	vn51ji2 (Jaimie)	Created by OneStream ASS/ISS Team
' 09/08/2021	vb51ji2	(Jaimie)	Completed and turned over to Walmart
'==============================================================================================

#End Region

Namespace OneStream.BusinessRule.Extender.XF_Metadata_Analysis
	Public Class MainClass

	#Region "Settings / Parameters"	

		'================================================
		' Manual Settings / Parameters
		'================================================
		Dim DEBUG As Boolean = True 	'turn on and off debugging which writes to the error log
		Dim EMAIL As Boolean = True		'turn on and off emailing the file. By default the file will be emailed to the CURRENT USER.
										'optional comma seperated list of extra emails to send the file to (other than yourself)
		Dim EMAILS As String = ""	
		Dim excludeDims As New List(Of String)'({""}) 'Add dimensions to exclude (logic uses StartsWith) to exclude members. Does not work on root members.
		Dim excludeApps As New List(Of String)'({""})
		Dim runExtAnalysis As Boolean = True
		Dim runCubeAnalysis As Boolean = True
		Dim runDimAnalysis As Boolean = True
		Dim runBRMFAnalysis As Boolean = True
		Dim appStandards As New list(Of String)
		
		'================================================
		' Other Global Settings / Parameters
		'================================================	
		Dim emailConnectionName As String = ""
		Dim _log As String = "Metadata Analysis Log:"
		Dim fullListDimTypes As New List(Of String)({"Entity","Scenario","Account","Flow","UD1","UD2","UD3","UD4","UD5","UD6","UD7","UD8"})
		Dim listFilterPrefix As New List(Of String)({"E","S","A","F","U1","U2","U3","U4","U5","U6","U7","U8"})
		Dim pad As Char = "."c
		
		'General
		Dim masterList As List(Of DimListByDimTypeAndApp)
		Dim dt As DataTable = Nothing
		Dim dimTypeIdsByDimTypeName As New Dictionary(Of String, Integer)
		Dim appList As New List(Of String)	
		
		'Dimension 
		Dim DimCoverPageName As String = "DimAnalysis"
		Dim dsDims As New DataSet
		'Dim dsDimsTab1Only As New dataset
		Dim _dimsList As New List(Of String)
		Dim _dimsOrderedList As String = ""
		Dim listDimFindings As New List(Of DataTable)	
		Dim listDimOrderIssues As New List(Of DataTable)
		Dim standardDimensions As New List(Of String)
		Dim indLvl As New Dictionary(Of String, Integer)
		Dim dictChildren As New Dictionary(Of String, list(Of String))	
		Dim dictDimListsByApp As New Dictionary(Of String, List(Of List(Of OneStream.Shared.Wcf.Dim)))
		Dim missingMembersByTabName As New Dictionary(Of String, List(Of String))
		Dim extraMembersByTabName As New Dictionary(Of String, List(Of String))
		Dim showAllMembers As Boolean = False
		
		'Extensibility
		Dim ExtensibilityCoverPageName As String = "ExtensibilityAnalysis"
		Dim dsExt As New DataSet
		Dim listExFindings As New List(Of DataTable)
		
		'Cube
		Dim CubeCoverPageName As String = "CubeAnalysis"
		Dim CubeOverviewPageName As String = "Overview"
		'Dim cubeTable As New DataTable()
		'Dim cubeList As New List(Of String)
		Dim dsCubes As New DataSet
		Dim dsCubesList As New List(Of DataTable)		
		Dim lstCubeIssues As New List(Of String)
		Dim dtCubeCoverPage As New DataTable() With { .TableName = CubeCoverPageName }		
		Dim possibleCubeIssueCount As Integer = 0
		Dim nonDefaultScenarioDims As New List(Of String)
		Dim nonDefaultDims As New List(Of String)
		Dim dtCubeOverviewPage As New DataTable() With { .TableName = CubeOverviewPageName }
		'Dim CubeDefaults As New Dictionary(Of String, String)
		
	#End Region

#Region "Main"
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try			
				'=============================================================================================
				#Region "Get runtime parameters"
				'=============================================================================================
				Select Case args.FunctionType
					Case ExtenderFunctionType.Unknown
						log(si," Using default Parameters")
						'use default values
						EMAILS = brapi.Security.Admin.GetUser(si,si.UserName).User.Email
						
					Case ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						log(si," Evaluating DataMgmt Parameters")
						
						DEBUG = Convert.ToBoolean(args.NameValuePairs.XFGetValue("Debug",DEBUG))
						EMAIL = Convert.ToBoolean(args.NameValuePairs.XFGetValue("Email",EMAIL))
						EMAILS = args.NameValuePairs.XFGetValue("Emails",EMAILS).Replace(", ",",")
						emailConnectionName = args.NameValuePairs.XFGetValue("EmailName")
						'brapi.ErrorLog.LogMessage(si,"and..." & emailConnectionName)
						' LOOK FOR MEMBER COMPARE VARIABLES AND OVERRIDE WITH MEMBER COMPARE FILE IF ALL ARE PRESENT
						Dim app1 As String = args.NameValuePairs.XFGetValue("App1")
						Dim app2 As String = args.NameValuePairs.XFGetValue("App2")
						Dim dimtype1 As String = args.NameValuePairs.XFGetValue("DimType1")
						Dim dimtype2 As String = args.NameValuePairs.XFGetValue("DimType2")						
						Dim dim1 As String = args.NameValuePairs.XFGetValue("Dim1")
						Dim dim2 As String = args.NameValuePairs.XFGetValue("Dim2")
						Dim mem1 As String = args.NameValuePairs.XFGetValue("Mem1")
						Dim mem2 As String = args.NameValuePairs.XFGetValue("Mem2")
						Dim csName As Boolean = Convert.ToBoolean(args.NameValuePairs.XFGetValue("CSName",False))
						Dim csDesc As Boolean = Convert.ToBoolean(args.NameValuePairs.XFGetValue("CSDesc",True))
						
						If app1 <> "" And app2 <> "" And dimtype1<> "" And dimtype2 <> "" And dim1 <> "" And dim2 <> "" And mem1 <> "" And mem2 <> "" Then
							log(si,"Creating member compare")
							log(si,"app1: " & app1)
							log(si,"app2: " & app2)
							log(si,"dimtype1: " & dimtype1)
							log(si,"dimtype2: " & dimtype2)
							log(si,"dim1: " & dim1)
							log(si,"dim2: " & dim2)
							log(si,"mem1: " & mem1)
							log(si,"mem2: " & mem2)
							log(si,"csName: " & csName)
							log(si,"csDesc: " & csDesc)
							CreateMemberCompareFile(si,app1,app2,dimtype1,dimtype2,dim1,dim2,mem1,mem2,csName,csDesc)
							Return Nothing
						End If
							
						excludeApps = If(args.NameValuePairs.XFGetValue("ExcludeApps","")<>"",args.NameValuePairs.XFGetValue("ExcludeApps","").Split("|").ToList(), New List(Of String))
						excludeDims = If(args.NameValuePairs.XFGetValue("ExcludeDims","")<>"",args.NameValuePairs.XFGetValue("ExcludeDims","").Split("|").ToList(), New List(Of String))
						
						runExtAnalysis = Convert.ToBoolean(args.NameValuePairs.XFGetValue("AnalyzeExtensibility",runExtAnalysis))
						runCubeAnalysis = Convert.ToBoolean(args.NameValuePairs.XFGetValue("AnalyzeCubes",runCubeAnalysis))
						runDimAnalysis = Convert.ToBoolean(args.NameValuePairs.XFGetValue("AnalyzeDimensions",runDimAnalysis))
						runBRMFAnalysis = Convert.ToBoolean(args.NameValuePairs.XFGetValue("AnalyzeBRMF",runBRMFAnalysis))
						
						'brapi.ErrorLog.LogMessage(si,"Show: " & showAllMembers.ToString())
						'brapi.ErrorLog.LogMessage(si,"ShowAllMembers: " & args.NameValuePairs.XFGetValue("ShowAllMembers",showAllMembers.ToString()))
						showAllMembers = Convert.ToBoolean(args.NameValuePairs.XFGetValue("ShowAllMembers",showAllMembers.ToString()))
						
						'Dim rawAppStandards As String = args.NameValuePairs.XFGetValue("AppStandards")
						appStandards = args.NameValuePairs.XFGetValue("AppStandards",String.Join("|",appStandards)).Split("|").ToList()
						
						Dim tempLog As New stringBuilder
						tempLog.AppendLine("Metadata Analysis is running with Parameters")
						tempLog.AppendLine("  DEBUG: " & DEBUG)
						tempLog.AppendLine("  EMAIL: " & EMAIL)
						tempLog.AppendLine("  EMAILS: " & EMAILS)
						'tempLog.AppendLine("  RawAppStandards: " & rawAppStandards)
						tempLog.AppendLine("  StandardApps: " & String.Join("|",appStandards))
						tempLog.AppendLine("  ExcludeApps: " & String.Join("|",excludeApps))
						tempLog.AppendLine("  ShowAllMembers: " & showAllMembers)
						log(si,tempLog.ToString())
						'brapi.ErrorLog.LogMessage(si,tempLog.ToString)
				End Select
				
				If EMAILS = "" Then
					log(si," *** Email is set to true, but the email distribution list is empty. Turning off email.")
					EMAIL = False
				End If
				
				'Get current environment
				log(si," Getting current environment")
				Dim curEnvName As String = GetCurrentEnvironment()
				log(si,"       " & curEnvName)
				#End Region
				
				'=============================================================================================
				#Region "Create list of applications in the current environment to report on"
				'=============================================================================================
				log(si," Application names")
				Dim xfEnv As New XFEnvironment()
				Dim appAdminInfo As XFApplicationAdminInitInfo = xfEnv.GetApplicationAdminInitInfo(si)
				Dim appInfoList As List(Of xfApplicationInfo) = appAdminInfo.Applications
				appList = appInfoList.Select(Function(x) x.Application.Name).ToList()
				If appList IsNot Nothing Then
					If excludeApps.Count > 0 Then
						log(si,"  Excluding applicataions: " & String.Join(",",excludeApps))
						appList.RemoveAll(Function(e) excludeApps.Exists(Function(f) f = e))
					End If
					log(si,"  Remaining included applications: " & String.Join(",",appList))
				Else
					log(si,"  *** No application list found!")
					Throw New Exception(" *** No applications found!")
				End If
				#End Region
				
				'=============================================================================================
				#Region "Build dictionary to find dim type ids by dim type names"
				'=============================================================================================
				dimTypeIdsByDimTypeName.Add("Account",dimtype.Account.Id)
				dimTypeIdsByDimTypeName.Add("Flow",dimtype.Flow.Id)
				dimTypeIdsByDimTypeName.Add("UD1",dimtype.UD1.Id)
				dimTypeIdsByDimTypeName.Add("UD2",dimtype.UD2.Id)
				dimTypeIdsByDimTypeName.Add("UD3",dimtype.UD3.Id)
				dimTypeIdsByDimTypeName.Add("UD4",dimtype.UD4.Id)
				dimTypeIdsByDimTypeName.Add("UD5",dimtype.UD5.Id)
				dimTypeIdsByDimTypeName.Add("UD6",dimtype.UD6.Id)
				dimTypeIdsByDimTypeName.Add("UD7",dimtype.UD7.Id)
				dimTypeIdsByDimTypeName.Add("UD8",dimtype.UD8.Id)
				#End Region
				
				'=============================================================================================
				#Region "Query for the data"
				'=============================================================================================
				brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,$"Metadata Analysis{vbnewline} ...Building Data Sets",15)
				log(si," Add each application's data sets")
				masterList = New List(Of DimListByDimTypeAndApp)
				For Each _app As String In appList
					AddAppToDataSet(si,_app)
				Next _app
				If masterList IsNot Nothing Then
					log(si, "  " & masterList.Count & " dimensions found")
				Else
					log(si, "  *** No dimensions found!")
				End If
				#End Region
								
				'=============================================================================================
				#Region "Create Extensibility Analysis File"
				'=============================================================================================
				
				'set up main working folder and ensure it exists
				Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
				Dim outputFilePath As String = FileShareFolderHelper.GetDataManagementExportUsernameFolderForApp(si, True, configSettings.FileShareRootFolder, si.AppToken.AppName) & "\MetadataAnalysis\"
				If Not Directory.Exists(outputFilePath) Then Directory.CreateDirectory(outputFilePath)
						
				brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,$"Metadata Analysis{vbnewline} ...Running Extensibility Analysis",15)
				log(si," Build Extensibility Analysis DataTable")
				Dim fullFileNameExtensibility As String = ""
				Dim dtDim As DataTable = BuildData(si)				
				If dtDim IsNot Nothing Then
					
					'Add datatable to dataset (CreateExcelDocument function requires a dataset)
					dsExt.Tables.Add(dtDim)
					
					'Add any issue tables
					If runExtAnalysis Then
						log(si,"  Adding extensibility findings")
						If listExFindings.Count > 0 Then
							For Each _dt As DataTable In listExFindings
								dsExt.Tables.Add(_dt)
							Next
						End If
					End If
										
					'Create the excel file
					log(si,"  Creating dim analysis file")
'					Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
'					Dim outputFilePath As String = FileShareFolderHelper.GetDataManagementExportUsernameFolderForApp(si, True, configSettings.FileShareRootFolder, si.AppToken.AppName) & "\MetadataAnalysis\"
'					If Not Directory.Exists(outputFilePath) Then Directory.CreateDirectory(outputFilePath)
					'fullFileNameExtensibility = outputFilePath & DateTime.UtcNow.ToString("yyyyMMddhhmmss") & "_DimensionReport.xlsx"
					'fullFileNameExtensibility = $"{outputFilePath}ExtensibilityAnalysis_{curEnvName}_{DateTime.UtcNow.ToString("yyyyMMddhhmmss")}.xlsx"
					Dim extFileBaseName As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si,False,"prm_mda_ext_file_base_name")
					fullFileNameExtensibility = $"{outputFilePath}{extFileBaseName}_{curEnvName}.xlsx"
					CreateExcelExtDoc(si, dsExt, fullFileNameExtensibility)
				Else
					If runExtAnalysis Then log(si,"       " & "Extensibility Analysis datatable was empty!")
				End If
				#End Region
				
				'=============================================================================================
				#Region "Create Cube Analysis File"
				'=============================================================================================
				brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,$"Metadata Analysis{vbnewline} ...Running Cube Analysis",15)
				log(si," Creating Cube Files")
				Dim fullFileNameCubes As String = ""	
				If runCubeAnalysis Then
					If dsCubesList.Count > 0 Then		
					
						'Add cover page
						dsCubes.Tables.Add(dtCubeCoverPage)
						
						'Add overview page
						dsCubes.Tables.Add(dtCubeOverviewPage)
								
						'Add lists
						log(si,"  Adding cube findings")
						If dsCubesList.Count > 0 Then
							For Each _dt As DataTable In dsCubesList
								dsCubes.Tables.Add(_dt)
							Next
						End If
					
						'Create the excel file
						log(si,"  Creating cube analysis file")
'						Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
'						Dim outputFilePath As String = FileShareFolderHelper.GetDataManagementExportUsernameFolderForApp(si, True, configSettings.FileShareRootFolder, si.AppToken.AppName) & "\MetadataAnalysis\"
'						If Not Directory.Exists(outputFilePath) Then Directory.CreateDirectory(outputFilePath)
						'fullFileNameCubes = outputFilePath & DateTime.UtcNow.ToString("yyyyMMddhhmmss") & "_CubeReport.xlsx"
						'fullFileNameCubes = $"{outputFilePath}CubeAnalysis_{curEnvName}_{DateTime.UtcNow.ToString("yyyyMMddhhmmss")}.xlsx"
						Dim cubeFileBaseName As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si,False,"prm_mda_cube_file_base_name")
						fullFileNameCubes = $"{outputFilePath}{cubeFileBaseName}_{curEnvName}.xlsx"
						CreateExcelCubeDoc(si, dsCubes, fullFileNameCubes)
					End If					
				Else
					log(si,"  *** Cube Analysis datatable was empty!")
				End If			
				#End Region
				
				'=============================================================================================
				#Region "Create Dimension Analysis File"
				'=============================================================================================
				brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,$"Metadata Analysis{vbnewline} ...Running Dimension Member Analysis",15)
				log(si," Creating Dimension Files")
				Dim fullFileNameDims As String = ""	
				If runDimAnalysis Then
					If dictDimListsByApp IsNot Nothing And dictDimListsByApp.Keys.Count > 0 Then
						
				
						'Add datatable to dataset (CreateExcelDocument function requires a dataset)
						Dim dtDimsCopy As DataTable = dtDim.Copy()
						dtDimsCopy.TableName = DimCoverPageName
						dsDims.Tables.Add(dtDimsCopy)
						
						Dim dtDimsCopy2 As DataTable = dtDim.Copy()
						dtDimsCopy2.TableName = DimCoverPageName
						'dsDimsTab1Only.Tables.Add(dtDimsCopy2)
						

						Dim dimFileBaseName As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si,False,"prm_mda_dim_file_base_name")
						fullFileNameDims = $"{outputFilePath}{dimFileBaseName}_{curEnvName}.xlsx"						

						ExecuteDimensionAnalysis(si)
						

						'Create the excel file
						log(si,"  Creating dim analysis file")

						CreateExcelDimDoc(si, dsDims, fullFileNameDims)		
						'CreateExcelDimDoc(si, dsDimsTab1Only, $"{outputFilePath}Dim_Mbr_Analysis_{curEnvName}_Tab1Only.xlsx")
					Else
						log(si,"  *** Dimension Analysis datatable was empty!")
					End If					
				End If
				#End Region

				'=============================================================================================
				#Region "Create BR/MF Analysis File"
				
				Dim fullFileNameBRMF As String = ""
				If runBRMFAnalysis Then
					Dim qh As New OneStream.BusinessRule.DashboardDataSet.Metadata_HelperQueries.MainClass
					Dim dtBr As DataTable = qh.GetBRLogMessagesDataTable(si)
					dtBr.TableName = "BR Analysis"
					Dim dtMf As DataTable = qh.GetMFLogMessagesDataTable(si)
					dtMf.TableName = "MF Analysis"
					Dim dsBRMF As New DataSet

					If Not dtBr Is Nothing Then
						dsBRMF.Tables.Add(dtBr)
					End If
					If Not dtMf Is Nothing Then
						dsBRMF.Tables.Add(dtMf)
					End If
					If dsBRMF.Tables.Count > 0 Then
						'Create the excel file
						log(si,"  Creating BR/MF analysis file")
						Dim brmfFileBaseName As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si,False,"prm_mda_brmf_file_base_name")
						fullFileNameBRMF = $"{outputFilePath}{brmfFileBaseName}_{curEnvName}.xlsx"
						CreateExcelBRMFDoc(si, dsBRMF, fullFileNameBRMF)
					End If
				End If
				
				#End Region
				
				'===================================================================================================
				#Region "EMAIL"
				'===================================================================================================
				If EMAIL Then
					brapi.TaskActivity.UpdateRunningTaskActivityAndCheckIfCanceled(si,args,$"Metadata Analysis{vbnewline} ...Sending Email",35)
					
					log(si,"  Creating Email")
					Dim subject As String = $"{curEnvName} Dimension Compare"
					log(si," subject: " & subject)
					Dim preBody As String = "Please see attached <i>" & curEnvName & "</i> Metadata reports."
					log(si," preBody: " & preBody)
					
					'Add email addresses
					log(si,"  Creating email distribution list")	
					Dim toEmail As List(Of String) = EMAILS.Split(",").ToList()
					If toEmail IsNot Nothing Then
						log(si,"   " & String.Join(",",toEmail))
					Else
						log(si,"   *** Email distribution list is empty!")
					End If
					
					'Add Attachments
					log(si,"  Adding Attachments")
					Dim attachments As New List(Of String)
					If runExtAnalysis Then
						If fullFileNameExtensibility <> "" And File.Exists(fullFileNameExtensibility) Then
						    attachments.Add(fullFileNameExtensibility)
							log(si,"   Extensibility Analysis File attached")
						Else
							log(si,"   *** Extensibility Analysis File not found")
						End If
					End If
					If runCubeAnalysis Then
						If fullFileNameCubes <> "" And File.Exists(fullFileNameCubes) Then
						    attachments.Add(fullFileNameCubes)
							log(si,"   Cube Analysis File attached")
						Else
							log(si,"   *** Cube Analysis File not found")
						End If
					End If
					If runDimAnalysis Then
						If fullFileNameDims <> "" And File.Exists(fullFileNameDims) Then
						    attachments.Add(fullFileNameDims)
							log(si,"   Dimension Analysis File attached")
						Else
							log(si,"   *** Dimension Analysis File not found")
						End If
					End If
					If runBRMFAnalysis Then
						If fullFileNameBRMF <> "" And File.Exists(fullFileNameBRMF) Then
							attachments.Add(fullFileNameBRMF)
							log(si,"   *** BR/MF Analysis file attached")
						Else
							log(si,"   *** BR/MF Analysis file not found")
						End If
					End If
					
					'Send the message
					log(si,"  Sending Email")
					BRApi.Utilities.SendMail(si, emailConnectionName, toEmail, subject, preBody, True, attachments)	
					
					'Delete file
'					log(si,"  Deleting File")
'					If runExtAnalysis And File.Exists(fullFileNameExtensibility) Then File.Delete(fullFileNameExtensibility)
'					If runCubeAnalysis And File.Exists(fullFileNameCubes) Then File.Delete(fullFileNameCubes)
'					If runDimAnalysis And File.Exists(fullFileNameDims) Then File.Delete(fullFileNameDims)
						
					
				End If
				#End Region
				
				log(si," Export(s) Complete")
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			Finally
				If DEBUG Then Brapi.ErrorLog.LogMessage(si,_log)
			End Try
		End Function
#End Region


		Public Function GetCurrentEnvironment() As String
			Dim xEnv As New XFEnvironment
			Dim xSet As XFEnvironmentSettings = xEnv.GetAppServerConfigEnvironmentSettings()
			Return xSet.EnvironmentName
		End Function
		Public Sub AddAppToDataSet(ByVal si As SessionInfo, ByVal otherAppName As String)
			
			'SUMMARY
			' Queries for the dimensions in the other app
			' Then for each dimension found, queries for the inherited members 
			' And builds the indentured dimension list for each dimension type for the given application
			'
			'	I.e. builds the indentured list for Walmart Dev / Account Excluding any dimensions that start with ACM
			'		RootAccountDim
			'		.Summary_Account
			'		..Detail_Account
			'		..LRP_Account
			'		.WMTUS_IS
			
			'=============================================================================================
			#Region "Get Session Info for named application"
			'=============================================================================================
			Dim otherAppSeshInfo As SessionInfo = brapi.Security.Authorization.CreateSessionInfoForAnotherApp(si, otherAppName, OpenAppResult.Success)
			If otherAppSeshInfo Is Nothing Then
				log(si,$"  *** App {otherAppName} not found")
				Exit Sub
			End If
			#End Region	
			'=============================================================================================
			#Region "Dimension Lists for current Application"
			'=============================================================================================
			Dim entityDims As List(Of OneStream.Shared.Wcf.Dim) = BRApi.Finance.Dim.GetDims(otherAppSeshInfo,dimTypeId.Entity)
			Dim scenarioDims As List(Of OneStream.Shared.Wcf.Dim) = BRApi.Finance.Dim.GetDims(otherAppSeshInfo,dimTypeId.Scenario)
			Dim accountDims As List(Of OneStream.Shared.Wcf.Dim) = BRApi.Finance.Dim.GetDims(otherAppSeshInfo,dimTypeId.Account)
			Dim flowDims As List(Of OneStream.Shared.Wcf.Dim) = BRApi.Finance.Dim.GetDims(otherAppSeshInfo,dimTypeId.Flow)
			Dim ud1Dims As List(Of OneStream.Shared.Wcf.Dim) = BRApi.Finance.Dim.GetDims(otherAppSeshInfo,dimTypeId.UD1)
			Dim ud2Dims As List(Of OneStream.Shared.Wcf.Dim) = BRApi.Finance.Dim.GetDims(otherAppSeshInfo,dimTypeId.UD2)
			Dim ud3Dims As List(Of OneStream.Shared.Wcf.Dim) = BRApi.Finance.Dim.GetDims(otherAppSeshInfo,dimTypeId.UD3)
			Dim ud4Dims As List(Of OneStream.Shared.Wcf.Dim) = BRApi.Finance.Dim.GetDims(otherAppSeshInfo,dimTypeId.UD4)
			Dim ud5Dims As List(Of OneStream.Shared.Wcf.Dim) = BRApi.Finance.Dim.GetDims(otherAppSeshInfo,dimTypeId.UD5)
			Dim ud6Dims As List(Of OneStream.Shared.Wcf.Dim) = BRApi.Finance.Dim.GetDims(otherAppSeshInfo,dimTypeId.UD6)
			Dim ud7Dims As List(Of OneStream.Shared.Wcf.Dim) = BRApi.Finance.Dim.GetDims(otherAppSeshInfo,dimTypeId.UD7)
			Dim ud8Dims As List(Of OneStream.Shared.Wcf.Dim) = BRApi.Finance.Dim.GetDims(otherAppSeshInfo,dimTypeId.UD8)
			#End Region	
			'=============================================================================================
			#Region "Build indentured list using inherited dimensions fo the current application"
			'=============================================================================================			
			'Build indentured list by looking up inherited dimensions
			CreateIndenturedDimList(si,"Entity",otherAppSeshInfo,entityDims)
			CreateIndenturedDimList(si,"Scenario",otherAppSeshInfo,scenarioDims)
			CreateIndenturedDimList(si,"Account",otherAppSeshInfo,accountDims)
			CreateIndenturedDimList(si,"Flow",otherAppSeshInfo,flowDims)
			CreateIndenturedDimList(si,"UD1",otherAppSeshInfo,ud1Dims)
			CreateIndenturedDimList(si,"UD2",otherAppSeshInfo,ud2Dims)
			CreateIndenturedDimList(si,"UD3",otherAppSeshInfo,ud3Dims)
			CreateIndenturedDimList(si,"UD4",otherAppSeshInfo,ud4Dims)
			CreateIndenturedDimList(si,"UD5",otherAppSeshInfo,ud5Dims)
			CreateIndenturedDimList(si,"UD6",otherAppSeshInfo,ud6Dims)
			CreateIndenturedDimList(si,"UD7",otherAppSeshInfo,ud7Dims)
			CreateIndenturedDimList(si,"UD8",otherAppSeshInfo,ud8Dims)
			#End Region		
			'=============================================================================================
			#Region "Extensibility Analyzer"
			'=============================================================================================		
			If runExtAnalysis Then 
				ExecuteExtensibilityAnalysis(si,otherAppSeshInfo)
			End If
			#End Region
			'=============================================================================================
			#Region "Cube Analyzer"
			'=============================================================================================				
			If runCubeAnalysis Then 
				Dim dimList As New List(Of List(Of OneStream.Shared.Wcf.Dim))({entityDims,scenarioDims,accountDims,flowDims,ud1Dims,ud2Dims,ud3Dims,ud4Dims,ud5Dims,ud6Dims,ud7Dims,ud8Dims})
				ExecuteCubeAnalysis(si,otherAppSeshInfo,dimList)
			End If
			#End Region			
			'=============================================================================================
			#Region "Dimension Analyzer - build member list dictionary by app and dimension"
			'=============================================================================================				
			If runDimAnalysis Then
				Dim dimList As New List(Of List(Of OneStream.Shared.Wcf.Dim))({entityDims,scenarioDims,accountDims,flowDims,ud1Dims,ud2Dims,ud3Dims,ud4Dims,ud5Dims,ud6Dims,ud7Dims,ud8Dims})
				dictDimListsByApp.Add(otherAppSeshInfo.AppName,dimList)
			End If
			#End Region
			
		End Sub

		Private Sub CreateMemberCompareFile(ByVal si As SessionInfo, _
			ByVal app1 As String, ByVal app2 As String, _
			ByVal dimtype1 As String, ByVal dimtype2 As String, _
			ByVal dim1 As String, ByVal dim2 As String, _
			ByVal mem1 As String, ByVal mem2 As String, _
			ByVal csName As Boolean, ByVal csDesc As Boolean)
		
			'=============================================================================================
			#Region "Init data table"
			'=============================================================================================
			Dim dt As New DataTable
			dt.TableName = "Member Compare"
			dt.Columns.Add("(1) Indenture")
			dt.Columns.Add("(1) Member")
			dt.Columns.Add("(1) Description")	
			dt.Columns.Add("    vs    ")			
			dt.Columns.Add("(2) Indenture")
			dt.Columns.Add("(2) Member")
			dt.Columns.Add("(2) Description")
			#End Region
			'=============================================================================================
			#Region "Initialize App 1"
			'=============================================================================================			
			Dim sesh1 As SessionInfo
			If app1.XFEqualsIgnoreCase(si.AppName) Then 
				sesh1 = si
			Else
				sesh1  = brapi.Security.Authorization.CreateSessionInfoForAnotherApp(si, app1, OpenAppResult.Success)
			End If
			
			Dim member1Filter As String = $"{listFilterPrefix(fullListDimTypes.IndexOf(dimtype1))}#{mem1}.TreeDescendantsInclusive"
			Dim mem1list As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(sesh1, dim1, member1Filter, False)		
			#End Region
			'=============================================================================================
			#Region "Initialize App 2"
			'=============================================================================================
			Dim sesh2 As SessionInfo
			If app2.XFEqualsIgnoreCase(si.AppName) Then 
				sesh2 = si
			Else
				sesh2 = brapi.Security.Authorization.CreateSessionInfoForAnotherApp(si, app2, OpenAppResult.Success)
			End If
			Dim member2Filter As String = $"{listFilterPrefix(fullListDimTypes.IndexOf(dimtype2))}#{mem2}.TreeDescendantsInclusive"
			Dim mem2list As List(Of MemberInfo) = BRApi.Finance.Metadata.GetMembersUsingFilter(sesh2, dim2, member2Filter, False)	
			#End Region
			'=============================================================================================
			#Region "Loop and compare - Add member 1 to DataTable"
			'=============================================================================================
			Dim flagGreenMembers As New List(Of String)
			Dim flagGreenDescriptions As New List(Of String)
			Dim flagYellowDescriptions As New List(Of String)
			If Not mem1list Is Nothing Then
				If mem1list.Count > 0 Then
					For Each m1 As MemberInfo In mem1list
						Dim dr As DataRow = dt.NewRow
						dr(0) = m1.IndentLevel
						dr(1) = m1.Member.Name
						dr(2) = m1.Member.Description
						dt.Rows.Add(dr)
						
						'If we have a second list
						If Not mem2list Is Nothing Then
							
							' CASE SENSITIVE NAME ****************************
							
							If csName Then
								
								'check if the current member name exists in the second list
								If mem2list.Select(Function(x) x.Member.Name).ToList().Contains(m1.Member.Name) Then
									
									'If the member exists in the second list, add it to the green list
									If Not flagGreenMembers.Contains(m1.Member.Name) Then
										flagGreenMembers.Add(m1.Member.Name)
									End If
									
									'Dim mem2listdist As String = member2.Description
									Dim member2 As MemberInfo = mem2list.Where(Function(x) x.Member.Name = m1.Member.Name).FirstOrDefault()
									Dim mem2listdist As String = member2.Member.Description
									
									'CASE SENSITIVE DESCRIPTION *****************************
									If csDesc Then
										If mem2listdist = m1.Member.Description Then

											If Not flagGreenDescriptions.Contains(m1.Member.Name & "|" & m1.Member.Description) Then
												flagGreenDescriptions.Add(m1.Member.Name & "|" & m1.Member.Description)
											End If	
											
										'Otherwise, it gets flagged as yellow
										Else
											If Not flagYellowDescriptions.Contains(m1.Member.Name & "|" & m1.Member.Description) Then
												flagYellowDescriptions.Add(m1.Member.Name & "|" & m1.Member.Description)
											End If
											If Not flagYellowDescriptions.Contains(member2.Member.Name & "|" & mem2listdist)
												flagYellowDescriptions.Add(member2.Member.Name & "|" & mem2listdist)
											End If											
										End If										
									
									
									'CASE INSENSITIVE DESCRIPTION ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
									Else
										If mem2listdist.XFEqualsIgnoreCase(m1.Member.Description) Then
											
											'If the description matches, add to the green list
											If Not flagGreenDescriptions.Contains(m1.Member.Name & "|" & m1.Member.Description) Then
												flagGreenDescriptions.Add(m1.Member.Name & "|" & m1.Member.Description)
											End If	
											If Not flagGreenDescriptions.Contains(member2.Member.Name & "|" & mem2listdist) Then
												flagGreenDescriptions.Add(member2.Member.Name & "|" & mem2listdist)
											End If												
										'Otherwise, it gets flagged as yellow
										Else
											If Not flagYellowDescriptions.Contains(m1.Member.Name & "|" & m1.Member.Description) Then
												flagYellowDescriptions.Add(m1.Member.Name & "|" & m1.Member.Description)
											End If
											If Not flagYellowDescriptions.Contains(member2.Member.Name & "|" & mem2listdist)
												flagYellowDescriptions.Add(member2.Member.Name & "|" & mem2listdist)
											End If
										End If
									End If
								End If								
							Else

								' CASE INSENSITIVE NAME ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
								
								'check if the current member name exists in the second list
								If mem2list.Select(Function(x) x.Member.Name).ToList().Contains(m1.Member.Name, StringComparer.OrdinalIgnoreCase) Then
									
									'If the member exists in the second list, add it to the green list
									If Not flagGreenMembers.Contains(m1.Member.Name) Then
										flagGreenMembers.Add(m1.Member.Name)
									End If
									
									Dim member2 As MemberInfo = mem2list.Where(Function(x) x.Member.Name.XFEqualsIgnoreCase(m1.Member.Name)).FirstOrDefault()
									Dim mem2listdist As String = member2.Member.Description
									
									If Not flagGreenMembers.Contains(member2.Member.Name) Then
										flagGreenMembers.Add(member2.Member.Name)
									End If


									
									If csDesc Then
										
										'CASE SENSITIVE DESCRIPTION *****************************
										
										If mem2listdist = m1.Member.Description Then
											
											'If the description matches, add to the green list
											If Not flagGreenDescriptions.Contains(m1.Member.Name & "|" & m1.Member.Description) Then
												flagGreenDescriptions.Add(m1.Member.Name & "|" & m1.Member.Description)
											End If	
											
										'Otherwise, it gets flagged as yellow
										Else
											If Not flagYellowDescriptions.Contains(m1.Member.Name & "|" & m1.Member.Description) Then
												flagYellowDescriptions.Add(m1.Member.Name & "|" & m1.Member.Description)
											End If
											If Not flagYellowDescriptions.Contains(member2.Member.Name & "|" & mem2listdist)
												flagYellowDescriptions.Add(member2.Member.Name & "|" & mem2listdist)
											End If											
										End If										
									Else
										
										'CASE INSENSITIVE DESCRIPTION *************************

										If mem2listdist.XFEqualsIgnoreCase(m1.Member.Description) Then
											
											'If the description matches, add to the green list
											If Not flagGreenDescriptions.Contains(m1.Member.Name & "|" & m1.Member.Description) Then
												flagGreenDescriptions.Add(m1.Member.Name & "|" & m1.Member.Description)
											End If	
											If Not flagGreenDescriptions.Contains(member2.Member.Name & "|" & mem2listdist) Then
												flagGreenDescriptions.Add(member2.Member.Name & "|" & mem2listdist)
											End If
											
										'Otherwise, it gets flagged as yellow
										Else
											If Not flagYellowDescriptions.Contains(m1.Member.Name & "|" & m1.Member.Description) Then
												flagYellowDescriptions.Add(m1.Member.Name & "|" & m1.Member.Description)
											End If
											If Not flagYellowDescriptions.Contains(member2.Member.Name & "|" & mem2listdist)
												flagYellowDescriptions.Add(member2.Member.Name & "|" & mem2listdist)
											End If
										End If
									End If
								End If										
							End If							
						End If	
					Next m1
				Else
					brapi.ErrorLog.LogMessage(si,"mem1list was not nothing but had 0 count")
				End If
			Else
				brapi.ErrorLog.LogMessage(si,"Could not get member list for m1")
			End If
			#End Region
			'=============================================================================================
			#Region "Add member 2 to DataTable"
			'=============================================================================================			
			If Not mem2list Is Nothing Then
				If mem2list.Count > 0 Then
					Dim idx As Integer = -1
					For Each m2 As MemberInfo In mem2list
						idx += 1
						Dim dr As DataRow
						If idx <= (dt.Rows.Count - 1) Then
							dr = dt.Rows(idx)
							dr(4) = m2.IndentLevel
							dr(5) = m2.Member.Name
							dr(6) = m2.Member.Description	
						Else
							dr = dt.NewRow
							dr(4) = m2.IndentLevel
							dr(5) = m2.Member.Name
							dr(6) = m2.Member.Description
							dt.Rows.Add(dr)
						End If
					Next m2
				End If
			End If
			#End Region
			'=============================================================================================
			#Region "Create file from DataTable and send email"
			'=============================================================================================
			If Not dt Is Nothing And dt.Rows.Count > 0 Then
				Dim ds As New DataSet
				ds.Tables.Add(dt)

				Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
				Dim outputFilePath As String = FileShareFolderHelper.GetDataManagementExportUsernameFolderForApp(si, True, configSettings.FileShareRootFolder, si.AppToken.AppName) & "\MetadataAnalysis\"
				If Not Directory.Exists(outputFilePath) Then Directory.CreateDirectory(outputFilePath)			
	
				'Dim curDate As String = System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Now,"Eastern Standard Time").ToString("yyyyMMdd_HHmmss")
				Dim curDate As String = DateTime.Now.ToString("yyyyMMdd_HHmmss")
				
				Dim filePath As String = $"{outputFilePath}MemberCompare ({app1}-{dimtype1}-{dim1}-{mem1}) vs ({app2}-{dimtype2}-{dim2}-{mem2}){If (csName," CSName","")}{If (csDesc," CSDesc","")} {GetCurrentEnvironment()} {curDate}.xlsx"
				CreateExcelBRMFDoc(si,ds,filePath,flagGreenMembers,flagGreenDescriptions,flagYellowDescriptions)

				Dim subject As String = $"{si.AppName}_{GetCurrentEnvironment()}_{si.UserName}_Member Compare"
				Dim body As String = "<p>Please see attached <i>" & GetCurrentEnvironment() & "</i> Member Compare Report</p>"
				
				body += "<p>"
				
				body += $"App1: {app1}<br>"
				body += $"App2: {app2}<hr>"
		
				body += $"DimType1: {dimtype1}<br>"
				body += $"DimType2: {dimtype2}<hr>"
				body += $"Dim1: {dim1}<br>"
				body += $"Dim2: {dim2}<hr>"
				body += $"Member1: {mem1}<br>"
				body += $"Member2: {mem2}<hr>"

				body += $"Case Sensitive Name: {csName}<br>"
				body += $"Case Sensitive Description: {csDesc}<hr>"
				
				body += $"Ran By: {si.UserName}<br>"
				body += $"Sent: {DateTime.Now} Local Time"
				
				body += "</p>"

				'Add email addresses	
				Dim toEmail As List(Of String) = EMAILS.Split(",").ToList()

				'Add Attachments
				Dim attachments As New List(Of String)({filePath})

				'Send the message
				BRApi.Utilities.SendMail(si, emailConnectionName, toEmail, subject, body, True, attachments)					

			End If
			#end region
		End Sub
		
		Private Sub ExecuteDimensionAnalysis(ByVal si As SessionInfo)
		
			log(si,"  Running dimension analysis")			
			Dim includeInheritedDims As Boolean = False
			
			'=============================================================================================
			#Region "Init variables"
			'=============================================================================================
			Dim standardDimList As New List(Of List(Of OneStream.Shared.Wcf.Dim))
			Dim variableDimList As New List(Of List(Of OneStream.Shared.Wcf.Dim))
			Dim standardMembersForDimension As New List(Of OneStream.Shared.Wcf.MemberInfo)
			Dim variablemembersForDimension As New List(Of OneStream.Shared.Wcf.MemberInfo)
'			Dim standardMembersForDimension As New List(Of OneStream.Shared.Common.Member)
'			Dim variablemembersForDimension As New List(Of OneStream.Shared.Common.Member)
			Dim standardAppSeshInfo As SessionInfo = Nothing
			Dim variableAppSeshInfo As SessionInfo = Nothing
			Dim filterIndex As Integer = 0
			Dim memberFilter As String = ""
			#End Region
			'=============================================================================================
			#Region "For each standard app, for each dimension, get members and compare to non-standard apps"
			'=============================================================================================
			For Each appStandard As String In appStandards
				If dictDimListsByApp.ContainsKey(appStandard) Then
					
					'Get standard/baseline dimensions
					standardDimList = dictDimListsByApp(appStandard)
					
					If standardDimList IsNot Nothing And standardDimList.Count 	> 0 Then
						standardAppSeshInfo = brapi.Security.Authorization.CreateSessionInfoForAnotherApp(si, appStandard, OpenAppResult.Success)

						'Loop on each standard dimension
						For Each _dimList As List(Of OneStream.Shared.Wcf.Dim) In standardDimList
							For Each _dim As OneStream.Shared.Wcf.Dim In _dimList
								
								If Not standardDimensions.Contains(_dim.Name) Then 
									log(si,"   Adding standard dimension " & _dim.Name)
									standardDimensions.Add(_dim.Name)
								End If
								
								'Get standard/baseline Members
								memberFilter = listFilterPrefix(standardDimList.IndexOf(_dimList))  & "#Root.TreeDescendants"
								standardMembersForDimension = BRApi.Finance.Metadata.GetMembersUsingFilter(standardAppSeshInfo, _dim.Name, memberFilter, False)
								
								If standardMembersForDimension IsNot Nothing And standardMembersForDimension.Count > 0 Then
									For Each _app As String In appList
										If Not appStandards.contains(_app) Then
											variableAppSeshInfo = brapi.Security.Authorization.CreateSessionInfoForAnotherApp(si, _app, OpenAppResult.Success)
											variableDimList = dictDimListsByApp(_app)
											For Each _dimListV As List(Of OneStream.Shared.Wcf.Dim) In variableDimList
												For Each _dimV As OneStream.Shared.Wcf.Dim In _dimListV
													If _dimV.Name.XFEqualsIgnoreCase(_dim.Name) Then
														variablemembersForDimension = BRApi.Finance.Metadata.GetMembersUsingFilter(variableAppSeshInfo,_dimV.Name,memberFilter,False)
														ShowMembersSideBySide(si,variableAppSeshInfo,appStandard,_app,_dim,_dimV,standardMembersForDimension,variablemembersForDimension)
													End If
												Next _dimV
											Next _dimListV
										End If
									Next
								Else
									log(si,"   *** standard members for dimension was empty")
								End If
							Next _dim
						Next _dimList	
					Else
						log(si,"   *** standardDimList was empty")
					End If
				Else
					log(si,$"   *** Standard app {appStandard} not found")
				End If			
			Next
			log(si,"   Dimension Analysis Complete")
			#End Region
		End Sub
		
		Private Sub ShowMembersSideBySide(ByVal si As SessionInfo, ByVal otherAppSeshInfo As SessionInfo,
			ByVal appStandard As String, ByVal appVariable As String,
			ByVal sDim As OneStream.Shared.Wcf.Dim, ByVal vDim As OneStream.Shared.Wcf.Dim,
			ByVal standardMembersForDimension As List(Of Onestream.Shared.Wcf.MemberInfo), 
			ByVal variablemembersForDimension As List(Of Onestream.Shared.Wcf.MemberInfo))
			'=============================================================================================
			#Region "Validation - make sure dimension lists contain dimensions"
			'=============================================================================================
			If standardMembersForDimension Is Nothing Then
				log(si,"   standard members not supplied to showmembers side by side. Null Object.")
				Exit Sub
			End If
			If standardMembersForDimension.Count = 0 Then
				log(si,"   standard members not supplied to showmembers side by side. No Rows.")
				Exit Sub				
			End If
			If variablemembersForDimension Is Nothing Then
				log(si,"   Variable members not supplied to showmembers side by side. Null Object.")
				Exit Sub
			End If
			If variablemembersForDimension.Count = 0 Then
				log(si,"   Variable members not supplied to showmembers side by side. No Rows.")
				Exit Sub				
			End If
			#End Region
			'=============================================================================================
			#Region "Init data table"
			'=============================================================================================
			Dim _dt As New DataTable
			Dim test = appList.IndexOf(appVariable)
			Dim tabName As String = $"{appList.IndexOf(appStandard)}|{appList.IndexOf(appVariable)}|{sDim.Name}"
			_dt.TableName = tabName
			Dim columnNames As New List(Of String)
			columnNames.Add($"{appStandard} Ind")
			columnNames.Add($"{appStandard} Mbr")
			columnNames.Add($"{appStandard} Desc")
			columnNames.Add($"{appStandard}")
			columnNames.Add($"{appVariable} Ind")
			columnNames.Add($"{appVariable} Mbr")
			columnNames.Add($"{appVariable} Desc")
			columnNames.Add($"{appVariable}")
			_dt.Columns.AddRange(columnNames.Select(Function(x) New DataColumn(x)).ToArray())
			#End Region
			'=============================================================================================
			#Region "Find missing and extra members"
			'=============================================================================================
			Dim missingMembers As List(Of String) = standardMembersForDimension.Select(Function(x) x.Member.Name).ToList().Except(variablemembersForDimension.Select(Function(y) y.Member.Name).ToList()).ToList()
			Dim extraMembers As List(Of String) = variablemembersForDimension.Select(Function(x) x.Member.Name).ToList().Except(standardMembersForDimension.Select(Function(y) y.Member.Name).ToList()).ToList()

			Dim isDiff As Boolean = False
			Dim idx As Integer = 0
			Dim maxIdx As Integer = 1000000
			Dim prntCode As Integer = 0 '1=left, 2=right, 3=both
			
			'clean up standard and variable dimension lists
			If Not showAllMembers Then
				standardMembersForDimension.RemoveAll(Function(x) Not missingMembers.Contains(x.Member.Name))
				variablemembersForDimension.RemoveAll(Function(x) Not extraMembers.Contains(x.Member.Name))
			End If
			#End Region
			'=============================================================================================
			#Region "Loop and compare"
			'=============================================================================================				

				Do While idx < standardMembersForDimension.Count Or idx < variablemembersForDimension.Count
					
					'Failsafe - prevent overflow
					idx += 1
					If idx >= maxIdx Then
						log(si,"   *** Max itterations reached on sub ShowMembersSideBySide!")
						Exit Do
					End If
					
					#Region "try to add white space - works on a limited basis"
	'				'If both lists still have available values to print
	'				If sIdx < standardMembersForDimension.count And vIdx < variablemembersForDimension.Count Then
						
	'					'If both member names are the same, list them on the same line
	'					If standardMembersForDimension(sIdx).Member.Name.XFEqualsIgnoreCase(variablemembersForDimension(vIdx).Member.Name)
							
	'						_dt.Rows.Add({standardMembersForDimension(sIdx).IndentLevel, _
	'									  standardMembersForDimension(sIdx).Member.Name, _
	'									  standardMembersForDimension(sIdx).Member.Description,
	'									  variablemembersForDimension(vIdx).IndentLevel, _
	'									  variablemembersForDimension(vIdx).Member.Name, _
	'									  variablemembersForDimension(vIdx).Member.Description})
	'						If Not isDiff And (standardMembersForDimension(sIdx).IndentLevel <> variablemembersForDimension(vIdx).IndentLevel Or _
	'											standardMembersForDimension(sIdx).Member.Name <> variablemembersForDimension(vIdx).Member.Name Or _
	'											standardMembersForDimension(sIdx).Member.Description <> variablemembersForDimension(vIdx).Member.Description) Then
	'							isDiff = True
	'						End If				
							
	'						sIdx += 1
	'						vIdx += 1
							
	'					'If they are not equal
	'					Else
							
	'						'If standard contains the variable value then, add standard and a blank for the variable. The variable will be listed when the same value in the standard is reached.
	'						If standardMembersForDimension.Any(Function(x) x.Member.Name.XFEqualsIgnoreCase(variablemembersForDimension(vIdx).Member.Name)) Then
	'							isDiff = True
	'							'Dim stdPadName As String = standardMembersForDimension(idx).Member.Name.PadLeft(standardMembersForDimension(idx).Member.Name.Length + standardMembersForDimension(idx).IndentLevel, pad)
	'							_dt.Rows.Add({standardMembersForDimension(sIdx).IndentLevel, _
	'										  standardMembersForDimension(sIdx).Member.Name, _
	'										  standardMembersForDimension(sIdx).Member.Description,
	'										  "", _
	'										  "", _
	'										  ""})	
	'							sIdx += 1
	'						'Else if variable contains standard, then list blank for standard and list the variable
	'						Else If variablemembersForDimension.Any(Function(x) x.Member.Name.XFEqualsIgnoreCase(standardMembersForDimension(sIdx).Member.Name)) Then
	'							isDiff = True
	'							'Dim varPadName As String = variablemembersForDimension(idx).Member.Name.PadLeft(variablemembersForDimension(idx).Member.Name.Length + variablemembersForDimension(idx).IndentLevel, pad)
	'							_dt.Rows.Add({"", _
	'										  "", _
	'										  "",
	'										  variablemembersForDimension(vIdx).IndentLevel, _
	'										  variablemembersForDimension(vIdx).Member.Name, _
	'										  variablemembersForDimension(vIdx).Member.Description})				
	'							vIdx += 1
	'						Else
	'							'Totally different member names, add each to a separte row
	'							isDiff = True
	'							'Dim stdPadName As String = standardMembersForDimension(idx).Member.Name.PadLeft(standardMembersForDimension(idx).Member.Name.Length + standardMembersForDimension(idx).IndentLevel, pad)
	'							_dt.Rows.Add({standardMembersForDimension(sIdx).IndentLevel, _
	'										  standardMembersForDimension(sIdx).Member.Name, _
	'										  standardMembersForDimension(sIdx).Member.Description,
	'										  "", _
	'										  "", _
	'										  ""})	
	'							sIdx += 1		
	'							_dt.Rows.Add({"", _
	'										  "", _
	'										  "",
	'										  variablemembersForDimension(vIdx).IndentLevel, _
	'										  variablemembersForDimension(vIdx).Member.Name, _
	'										  variablemembersForDimension(vIdx).Member.Description})				
	'							vIdx += 1							
	'						End If
	'					End If
					
	'				Else If sIdx < standardMembersForDimension.Count Then
	'					'Totally different member names, add each to a separte row
	'					isDiff = True
	'					'Dim stdPadName As String = standardMembersForDimension(idx).Member.Name.PadLeft(standardMembersForDimension(idx).Member.Name.Length + standardMembersForDimension(idx).IndentLevel, pad)
	'					_dt.Rows.Add({standardMembersForDimension(sIdx).IndentLevel, _
	'								  standardMembersForDimension(sIdx).Member.Name, _
	'								  standardMembersForDimension(sIdx).Member.Description,
	'								  "", _
	'								  "", _
	'								  ""})	
	'					sIdx += 1		
	'				Else If vIdx < variablemembersForDimension.Count Then
	'					isDiff = True
	'					_dt.Rows.Add({"", _
	'								  "", _
	'								  "",
	'								  variablemembersForDimension(vIdx).IndentLevel, _
	'								  variablemembersForDimension(vIdx).Member.Name, _
	'								  variablemembersForDimension(vIdx).Member.Description})				
	'					vIdx += 1	
	'				Else
	'					log(si,"End of data found")
	'					Exit Do
	'				End If
					#End Region
					
					If idx < standardMembersForDimension.count And idx < variablemembersForDimension.Count Then		
						Dim stdPadName As String = standardMembersForDimension(idx).NameAndDescription.PadLeft(standardMembersForDimension(idx).NameAndDescription.Length + standardMembersForDimension(idx).IndentLevel, pad)
						Dim varPadName As String = variablemembersForDimension(idx).NameAndDescription.PadLeft(variablemembersForDimension(idx).NameAndDescription.Length + variablemembersForDimension(idx).IndentLevel, pad)
						_dt.Rows.Add({standardMembersForDimension(idx).IndentLevel, 
									  standardMembersForDimension(idx).Member.Name, 
									  standardMembersForDimension(idx).Member.Description,
									  stdPadName,
									  variablemembersForDimension(idx).IndentLevel, 
									  variablemembersForDimension(idx).Member.Name, 
									  variablemembersForDimension(idx).Member.Description,
									  varPadName})
						If Not isDiff And (standardMembersForDimension(idx).IndentLevel <> variablemembersForDimension(idx).IndentLevel Or _
											Not standardMembersForDimension(idx).Member.Name.XFEqualsIgnoreCase(variablemembersForDimension(idx).Member.Name) Or _
											Not standardMembersForDimension(idx).Member.Description.XFEqualsIgnoreCase(variablemembersForDimension(idx).Member.Description)) Then
							isDiff = True
						End If
					Else If idx < standardMembersForDimension.Count Then
						isDiff = True
						Dim stdPadName As String = standardMembersForDimension(idx).NameAndDescription.PadLeft(standardMembersForDimension(idx).NameAndDescription.Length + standardMembersForDimension(idx).IndentLevel, pad)
						_dt.Rows.Add({standardMembersForDimension(idx).IndentLevel,
									  standardMembersForDimension(idx).Member.Name,
									  standardMembersForDimension(idx).Member.Description,
									  stdPadName,
									  "", 
									  "", 
									  "",
									  ""})		
									  
					Else If idx < variablemembersForDimension.Count Then
						isDiff = True
						Dim varPadName As String = variablemembersForDimension(idx).NameAndDescription.PadLeft(variablemembersForDimension(idx).NameAndDescription.Length + variablemembersForDimension(idx).IndentLevel, pad)
						_dt.Rows.Add({"", 
									  "", 
									  "",
									  "",
									  variablemembersForDimension(idx).IndentLevel, 
									  variablemembersForDimension(idx).Member.Name, 
									  variablemembersForDimension(idx).Member.Description,
									  varPadName})
					Else
						'log(si,"End of data found")
						Exit Do
					End If
				Loop
				#End Region
			'=============================================================================================
			#Region "Map extra members by tab name in a dictionary for each lookup"
			'=============================================================================================
			If missingMembers IsNot Nothing And missingMembers.Count > 0 And tabName <> "" Then
				If Not missingMembersByTabName.ContainsKey(tabName) Then
					missingMembersByTabName.Add(tabName,missingMembers)
				End If
			End If
			If extraMembers IsNot Nothing And extraMembers.Count > 0 And tabName <> "" Then
				If Not extraMembersByTabName.ContainsKey(tabName) Then
					extraMembersByTabName.Add(tabName,extraMembers)
				End If
			End If
			#End Region
			'=============================================================================================
			#Region "Flag any issues"
			'=============================================================================================
			If isDiff And _dt IsNot Nothing And _dt.Rows.Count > 0 Then		
				If (missingMembers IsNot Nothing And missingMembers.Count > 0) Or (extraMembers IsNot Nothing And extraMembers.Count) > 0 Then
					listDimFindings.Add(_dt)
					dsDims.Tables.Add(_dt)
				Else
					listDimOrderIssues.Add(_dt)
				End If
			End If
			#End Region
		End Sub
		Private Function DeVowel(ByVal inputString As String) As String
			If inputString = "" Then Return ""
			Return inputString.Substring(0,1) & inputString.Substring(1).Replace("a","").Replace("e","").Replace("i","").Replace("o","").Replace("u","")
		End Function
		Private Sub CompareDimensionMembers(ByVal si As SessionInfo, ByVal otherAppSeshInfo As SessionInfo,
			ByVal appStandard As String, ByVal appVariable As String,
			ByVal sDim As OneStream.Shared.Wcf.Dim, ByVal vDim As OneStream.Shared.Wcf.Dim,
			ByVal standardMembersForDimension As List(Of Onestream.Shared.Wcf.MemberInfo), 
			ByVal variablemembersForDimension As List(Of Onestream.Shared.Wcf.MemberInfo))
			
			'Create new DataTable
			Dim _dt As New DataTable
			
			'Table Name
			Dim tbName As String = $"{appVariable}|{sDim.Name}"
			If tbName.Length > 31 Then
				tbName = tbName.Substring(0,30)
			End If
			_dt.TableName = tbName
			
			'================================================================================================ new approach
			_dt.Columns.AddRange({"Std Ind","Std Member","Std Desc","Std Mbr Id","Std Prnt Id","Ind","Member","Desc","Mbr Id","Prnt Id"}.Select(Function(x) New DataColumn(x)).ToArray())
			Dim vMbr As MemberInfo = Nothing
			Dim numMissing As Integer = 0
			Dim numExtra As Integer = 0
			Dim numDesc As Integer = 0
			Dim numInd As Integer = 0
			
			Dim sIdx As Integer = -1
			Dim vIdx As Integer = 0
			For Each stdMbr As MemberInfo In standardMembersForDimension
				sIdx += 1
				'Same Name? 
				If variablemembersForDimension.Any(Function(x) x.NameOrDescription.XFEqualsIgnoreCase(stdMbr.NameOrDescription)) Then
'					'Same parents?
					vMbr = variablemembersForDimension.FirstOrDefault(Function(x) x.NameOrDescription.XFEqualsIgnoreCase(stdMbr.NameOrDescription) And x.IndentLevel = stdMbr.IndentLevel)
					If vMbr Is Nothing Then
						vMbr = variablemembersForDimension.FirstOrDefault(Function(x) x.NameOrDescription.XFEqualsIgnoreCase(stdMbr.NameOrDescription))
					End If
					
					If vMbr IsNot Nothing Then
						_dt.Rows.Add({stdMbr.IndentLevel, stdMbr.NameOrDescription, stdMbr.Description, stdMbr.Member.MemberId, stdMbr.ParentMemberId, vMbr.IndentLevel,vMbr.NameOrDescription,vMbr.Description, vMbr.Member.MemberId, vMbr.ParentMemberId})
						If stdMbr.IndentLevel <> vMbr.IndentLevel Then
							numInd += 1
						End If
						If stdMbr.Description <> vMbr.Description Then
							numDesc += 1
						End If	
					Else
						_dt.Rows.Add({stdMbr.IndentLevel,stdMbr.NameOrDescription,stdMbr.Description,stdMbr.Member.MemberId,stdMbr.ParentMemberId,"","","",""})
					End If
				End If
			Next stdMbr

			log(si,"Calculate extra members")
			Dim extraMembers As List(Of MemberInfo) = variablemembersForDimension.Except(standardMembersForDimension).ToList()
			log(si,"Print extra members to data table")
			For Each em As MemberInfo In extraMembers
				_dt.Rows.Add({"","","","","",em.IndentLevel, em.NameOrDescription,em.Description,em.Member.MemberId,em.ParentMemberId})
			Next
			
			log(si,"Check _dt row count")
			If _dt IsNot Nothing And _dt.Rows.Count > 0 Then
				log(si,"Adding _dt to list of findings")
				listDimFindings.Add(_dt)
				dsDims.Tables.Add(_dt)
			End If

		End Sub		
		
		Private Sub ExecuteCubeAnalysis(ByVal si As SessionInfo, ByVal otherAppSeshInfo As SessionInfo, ByVal dimList As List (Of List(Of OneStream.Shared.Wcf.Dim)))
			'=============================================================================================
			#Region "Get cube infos"
			'=============================================================================================
			log(si,"    - Running cube analysis")
			Dim cubeInfos As List(Of CubeInfo) = BRApi.Finance.Cubes.GetCubeInfos(otherAppSeshInfo)
			#End Region
			'=============================================================================================
			#Region "Build scenario type dictionary"
			'=============================================================================================
			'BUILD SCENARIO TYPE ID DICTIONARY BY SCENARIO NAME
			Dim _scenarioTypeIdDefault As Integer = -1000
			'Dim _scenarioTypeId As Integer = 0
			
			Dim dictScenarioTypeIds As New Dictionary(Of String, Integer)
			dictScenarioTypeIds.Add("(Default)",_scenarioTypeIdDefault)
			'dictScenarioTypeIds.Add("Unknown",ScenarioTypeId.Unknown)
			dictScenarioTypeIds.Add("Actual",ScenarioTypeId.Actual)
			dictScenarioTypeIds.Add("Administration",ScenarioTypeId.Administration)
			'dictScenarioTypeIds.Add("All",ScenarioTypeId.All)					
			dictScenarioTypeIds.Add("Budget",ScenarioTypeId.Budget)
			dictScenarioTypeIds.Add("Control",ScenarioTypeId.Control)
			dictScenarioTypeIds.Add("Flash",ScenarioTypeId.Flash)
			dictScenarioTypeIds.Add("Forecast",ScenarioTypeId.Forecast)
			dictScenarioTypeIds.Add("FXModel",ScenarioTypeId.FXModel)
			dictScenarioTypeIds.Add("History",ScenarioTypeId.History)
			dictScenarioTypeIds.Add("LongTerm",ScenarioTypeId.LongTerm)
			dictScenarioTypeIds.Add("Model",ScenarioTypeId.Model)
			dictScenarioTypeIds.Add("Operational",ScenarioTypeId.Operational)
			dictScenarioTypeIds.Add("Plan",ScenarioTypeId.Plan)
			dictScenarioTypeIds.Add("Sustainability",ScenarioTypeId.Sustainability)
			dictScenarioTypeIds.Add("Target",ScenarioTypeId.Target)
			dictScenarioTypeIds.Add("Tax",ScenarioTypeId.Tax)
			dictScenarioTypeIds.Add("Variance",ScenarioTypeId.Variance)
			dictScenarioTypeIds.Add("ScenarioType1",ScenarioTypeId.ScenarioType1)
			dictScenarioTypeIds.Add("ScenarioType2",ScenarioTypeId.ScenarioType2)
			dictScenarioTypeIds.Add("ScenarioType3",ScenarioTypeId.ScenarioType3)
			dictScenarioTypeIds.Add("ScenarioType4",ScenarioTypeId.ScenarioType4)
			dictScenarioTypeIds.Add("ScenarioType5",ScenarioTypeId.ScenarioType5)
			dictScenarioTypeIds.Add("ScenarioType6",ScenarioTypeId.ScenarioType6)
			dictScenarioTypeIds.Add("ScenarioType7",ScenarioTypeId.ScenarioType7)
			dictScenarioTypeIds.Add("ScenarioType8",ScenarioTypeId.ScenarioType8)		
			#End Region	
			'=============================================================================================
			#Region "Initialize dtCube DataTable"
			'=============================================================================================
			log(si,"  Creating first column")
			Dim dtCube As New DataTable
			dtCube.TableName = otherAppSeshInfo.AppName
			dtCube.Columns.Add(" ")
			dtCube.Rows.Add({" "})
			dtCube.Rows.Add({"Entity"})
			dtCube.Rows.Add({"Scenario"})
			dtCube.Rows.Add({"Account"})
			dtCube.Rows.Add({"Flow"})
			dtCube.Rows.Add({"UD1"})
			dtCube.Rows.Add({"UD2"})
			dtCube.Rows.Add({"UD3"})
			dtCube.Rows.Add({"UD4"})
			dtCube.Rows.Add({"UD5"})
			dtCube.Rows.Add({"UD6"})
			dtCube.Rows.Add({"UD7"})
			dtCube.Rows.Add({"UD8"})		
			#End Region		
			'=============================================================================================
			#Region "Get all cube references using list allRefCubes"
			'=============================================================================================
			log(si,"  Looping on top level cubes")
			Dim existingColumnNames As New List(Of String)
			Dim allRefCubes As New List(Of String)
			For Each cubeInfo As CubeInfo In cubeInfos
				Dim refCubes As List(Of Cube) = BRApi.Finance.Cubes.GetReferencedCubes(otherAppSeshInfo, cubeInfo.Cube.CubeId, False, True)
				If refCubes.Count > 0 Then 		
					For Each refCube As Cube In refCubes
						If Not allRefCubes.Contains(refCube.Name) Then
							allRefCubes.Add(refCube.Name)
						End If
					Next
				End If
			Next
			#End Region
			'=============================================================================================
			#Region "Add cube cover page"
			'=============================================================================================
			'ADD COVER PAGE COLUMNS
			If dtCubeCoverPage.Columns.Count = 0 Then 
				dtCubeCoverPage.Columns.Add("App Name")
				dtCubeCoverPage.Columns.Add("Total Cube Count")
				dtCubeCoverPage.Columns.Add("Non-Default-Dims Cube Count")
				dtCubeCoverPage.Columns.Add("Non-Default-Dims Scenario Count")
				dtCubeCoverPage.Columns.Add("Non-Top-Level Unreferenced Cube Count")
			End If			
			
			'OVERVIEW COLUMNS
			If dtCubeOverviewPage.Columns.Count = 0 Then
				
				dtCubeOverviewPage.Columns.Add("Environment")
				dtCubeOverviewPage.Columns.Add("App")
				dtCubeOverviewPage.Columns.Add("Cube")
				dtCubeOverviewPage.Columns.Add("ScenarioType")
				dtCubeOverviewPage.Columns.Add("Scenario")
				dtCubeOverviewPage.Columns.Add("Entity")
				dtCubeOverviewPage.Columns.Add("Account")
				dtCubeOverviewPage.Columns.Add("Flow")
				dtCubeOverviewPage.Columns.Add("UD1")
				dtCubeOverviewPage.Columns.Add("UD2")
				dtCubeOverviewPage.Columns.Add("UD3")
				dtCubeOverviewPage.Columns.Add("UD4")
				dtCubeOverviewPage.Columns.Add("UD5")
				dtCubeOverviewPage.Columns.Add("UD6")
				dtCubeOverviewPage.Columns.Add("UD7")
				dtCubeOverviewPage.Columns.Add("UD8")
				
'				dtCubeOverviewPage.Columns.Add("App")
'				dtCubeOverviewPage.Columns.Add("Cube")
'				dtCubeOverviewPage.Columns.Add("Environment")
'				dtCubeOverviewPage.Columns.Add("Scenario")
'				dtCubeOverviewPage.Columns.Add("Entity")
'				dtCubeOverviewPage.Columns.Add("Account")
'				dtCubeOverviewPage.Columns.Add("Flow")
'				dtCubeOverviewPage.Columns.Add("UD1")
'				dtCubeOverviewPage.Columns.Add("UD2")
'				dtCubeOverviewPage.Columns.Add("UD3")
'				dtCubeOverviewPage.Columns.Add("UD4")
'				dtCubeOverviewPage.Columns.Add("UD5")
'				dtCubeOverviewPage.Columns.Add("UD6")
'				dtCubeOverviewPage.Columns.Add("UD7")
'				dtCubeOverviewPage.Columns.Add("UD8")
			End If
			
			'APP / CUBE TABS (1 datatable per tab, counts things up to be displayed on the coverpage)
			possibleCubeIssueCount = 0
			nonDefaultScenarioDims = New List(Of String)
			nonDefaultDims = New List(Of String)
			For Each cubeInfo As CubeInfo In cubeInfos
				If Not allRefCubes.Contains(cubeInfo.Cube.Name) Then
					RecursivlyAddCubes(si,otherAppSeshInfo,cubeInfo,cubeInfos,dimList,dictScenarioTypeIds,_scenarioTypeIdDefault,allRefCubes,0,dtCube)
				End If
			Next cubeInfo
			
			'COVER PAGE ROW - ONE PER APPLICATION
			dtCubeCoverPage.Rows.Add({otherAppSeshInfo.AppName, cubeInfos.Count, nonDefaultDims.Count, nonDefaultScenarioDims.Count, possibleCubeIssueCount})
			
			'ADD DATATABLE TO CUBE Analysis DATA SET
			log(si,"    - Add datatable to dsCubes DataSet")
			dsCubesList.Add(dtCube)
			#End Region		
		End Sub
		
		Private Sub RecursivlyAddCubes(ByVal si As SessionInfo, ByVal otherAppSeshInfo As SessionInfo, ByVal cubeInfo As CubeInfo, _
			ByVal cubeInfos As List(Of CubeInfo), ByVal dimList As List (Of List(Of OneStream.Shared.Wcf.Dim)), ByVal dictScenarioTypeIds As Dictionary(Of String, Integer), _
			ByVal _scenarioTypeIdDefault As Integer, ByVal allRefCubes As List(Of String), ByVal indenture As Integer,ByRef  dtCube As DataTable)		
			'=============================================================================================
			#Region "Test for Unreferenced non-IsTopLevelCubeForWorkflow"
			'=============================================================================================
			If Not cubeInfo.Cube.IsTopLevelCubeForWorkflow And Not allRefCubes.Contains(cubeInfo.Cube.Name) Then
				possibleCubeIssueCount += 1
				lstCubeIssues.Add($"{otherAppSeshInfo.AppName}|{cubeInfo.Cube.Name}")
			End If
			#End Region		
			'=============================================================================================
			#Region "Get (default) Dimensions"
			'=============================================================================================			
			'log(si,"    - getting default values for current cube")
			Dim dimNameEntityD As String = dimList(0).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.Entity,_scenarioTypeIdDefault)).FirstOrDefault().Name
			Dim dimNameScenarioD As String = dimList(1).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.Scenario,_scenarioTypeIdDefault)).FirstOrDefault().Name
			Dim dimNameAccountD As String = dimList(2).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.Account,_scenarioTypeIdDefault)).FirstOrDefault().Name
			Dim dimNameFlowD As String = dimList(3).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.Flow,_scenarioTypeIdDefault)).FirstOrDefault().Name
			Dim dimNameUD1D As String = dimList(4).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.UD1,_scenarioTypeIdDefault)).FirstOrDefault().Name
			Dim dimNameUD2D As String = dimList(5).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.UD2,_scenarioTypeIdDefault)).FirstOrDefault().Name
			Dim dimNameUD3D As String = dimList(6).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.UD3,_scenarioTypeIdDefault)).FirstOrDefault().Name
			Dim dimNameUD4D As String = dimList(7).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.UD4,_scenarioTypeIdDefault)).FirstOrDefault().Name
			Dim dimNameUD5D As String = dimList(8).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.UD5,_scenarioTypeIdDefault)).FirstOrDefault().Name
			Dim dimNameUD6D As String = dimList(9).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.UD6,_scenarioTypeIdDefault)).FirstOrDefault().Name
			Dim dimNameUD7D As String = dimList(10).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.UD7,_scenarioTypeIdDefault)).FirstOrDefault().Name
			Dim dimNameUD8D As String = dimList(11).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.UD8,_scenarioTypeIdDefault)).FirstOrDefault().Name	
			#End Region
			'=============================================================================================
			#Region "Initialize non-(default) Variables (dimNameEntity-dimNameUD8)"
			'=============================================================================================
			'log(si,"    - Initializing non default variables")
			Dim dimNameEntity As String = ""
			Dim dimNameScenario As String = ""
			Dim dimNameAccount As String = ""
			Dim dimNameFlow As String = ""
			Dim dimNameUD1 As String = ""
			Dim dimNameUD2 As String = ""
			Dim dimNameUD3 As String = ""
			Dim dimNameUD4 As String = ""
			Dim dimNameUD5 As String = ""
			Dim dimNameUD6 As String = ""
			Dim dimNameUD7 As String = ""
			Dim dimNameUD8 As String = ""
			Dim _scenarioTypeId As Integer = 0
			#End Region
			'=============================================================================================
			#Region "Get environment"
			'=============================================================================================			
			Dim env As String = GetcurrentEnvironment()
			#End Region
			'=============================================================================================
			#Region "Loop on scenarios dictionary and compare to default and list only if different"
			'=============================================================================================
			'log(si,"    - Loop on scenarios")
			Dim scnCnt As Integer = 0
			For Each kvp As KeyValuePair(Of String,Integer) In dictScenarioTypeIds
				scnCnt += 1
				'log(si,"      Loop " & scnCnt)
				_scenarioTypeId = kvp.Value
				
				If scnCnt = 1 Then
					'log(si,"      Adding first column - created padded name")
					Dim paddedName As String = cubeInfo.Cube.Name.PadLeft(cubeInfo.Cube.Name.Length + indenture, pad)
					'log(si,"      Adding first column - adding " & paddedName)
					dtCube.Columns.Add(paddedName)
					'log(si,"      Adding first column - created padded name")
					dtCube(0)(paddedName) = kvp.Key
					dtCube(1)(paddedName) = dimNameEntityD
					dtCube(2)(paddedName) = dimNameScenarioD
					dtCube(3)(paddedName) = dimNameAccountD
					dtCube(4)(paddedName) = dimNameFlowD
					dtCube(5)(paddedName) = dimNameUD1D
					dtCube(6)(paddedName) = dimNameUD2D
					dtCube(7)(paddedName) = dimNameUD3D
					dtCube(8)(paddedName) = dimNameUD4D
					dtCube(9)(paddedName) = dimNameUD5D
					dtCube(10)(paddedName) = dimNameUD6D
					dtCube(11)(paddedName) = dimNameUD7D
					dtCube(12)(paddedName) = dimNameUD8D	
					'log(si,"      Adding first column - finished")
					
'					dtCubeOverviewPage.Rows.Add(otherAppSeshInfo.AppName,paddedName,env,dimNameScenarioD,dimNameEntityD,dimNameAccountD,dimNameFlowD,dimNameUD1D,dimNameUD2D,dimNameUD3D,dimNameUD4D,dimNameUD5D,dimNameUD6D,dimNameUD7D,dimNameUD8D)
					dtCubeOverviewPage.Rows.Add(env,otherAppSeshInfo.AppName,paddedName,kvp.Key,dimNameScenarioD,dimNameEntityD,dimNameAccountD,dimNameFlowD,dimNameUD1D,dimNameUD2D,dimNameUD3D,dimNameUD4D,dimNameUD5D,dimNameUD6D,dimNameUD7D,dimNameUD8D)
				Else
					'log(si,"      Adding additional column - setting variables")
					dimNameEntity = dimList(0).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.Entity,_scenarioTypeId)).FirstOrDefault().Name
					dimNameScenario = dimList(1).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.Scenario,_scenarioTypeId)).FirstOrDefault().Name
					dimNameAccount = dimList(2).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.Account,_scenarioTypeId)).FirstOrDefault().Name
					dimNameFlow = dimList(3).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.Flow,_scenarioTypeId)).FirstOrDefault().Name
					dimNameUD1 = dimList(4).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.UD1,_scenarioTypeId)).FirstOrDefault().Name
					dimNameUD2 = dimList(5).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.UD2,_scenarioTypeId)).FirstOrDefault().Name
					dimNameUD3 = dimList(6).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.UD3,_scenarioTypeId)).FirstOrDefault().Name
					dimNameUD4 = dimList(7).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.UD4,_scenarioTypeId)).FirstOrDefault().Name
					dimNameUD5 = dimList(8).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.UD5,_scenarioTypeId)).FirstOrDefault().Name
					dimNameUD6 = dimList(9).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.UD6,_scenarioTypeId)).FirstOrDefault().Name
					dimNameUD7 = dimList(10).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.UD7,_scenarioTypeId)).FirstOrDefault().Name
					dimNameUD8 = dimList(11).Where(Function(x) x.DimPk.DimId = cubeInfo.Cube.CubeDims.GetDimId(dimTypeId.UD8,_scenarioTypeId)).FirstOrDefault().Name		
				
					'log(si,"      Adding additional column - checking if any non-defaults exist")
					If dimNameEntity <> dimNameEntityD Or _
						dimNameScenario <> dimNameScenarioD Or _
						dimNameAccount <> dimNameAccountD Or _
						dimNameFlow <> dimNameFlowD Or _
						dimNameUD1 <> dimNameUD1D Or _
						dimNameUD2 <> dimNameUD2D Or _
						dimNameUD3 <> dimNameUD3D Or _
						dimNameUD4 <> dimNameUD4D Or _
						dimNameUD5 <> dimNameUD5D Or _
						dimNameUD6 <> dimNameUD6D Or _
						dimNameUD7 <> dimNameUD7D Or _
						dimNameUD8 <> dimNameUD8D Then
						
						Dim newColName As String = $"_{cubeInfo.Cube.Name}|{kvp.Key}"
						'log(si,"      Adding additional column - adding " & newColName)
						
						If Not nonDefaultDims.Contains(cubeInfo.Cube.Name) Then
							nonDefaultDims.Add(cubeInfo.Cube.Name)
						End If
						
						If dtCube.Columns.Contains(newColName) Then
							If IsDbNull(dt(0)(newColName)) Then								
								dtCube(0)(newColName) = kvp.Key
							Else
								'leave it alone for now
							End If
						Else 
							dtCube.Columns.Add(newColName)
							dtCube(0)(newColName) = kvp.Key
						End If
						
						Dim paddedName As String = cubeInfo.Cube.Name.PadLeft(cubeInfo.Cube.Name.Length + indenture, pad)
						
						Dim anyNonDefaults As Boolean = False
						Dim ovEntity As String = ""
						If dimNameEntity <> dimNameEntityD Then 
							anyNonDefaults = True
							ovEntity = dimNameEntity
							dtCube(1)(newColName) = dimNameEntity
							'dtCubeOverviewPage.Rows.Add(env,otherAppSeshInfo.AppName,paddedName,kvp.Key,dimNameScenarioD,dimNameEntity,dimNameAccountD,dimNameFlowD,dimNameUD1D,dimNameUD2D,dimNameUD3D,dimNameUD4D,dimNameUD5D,dimNameUD6D,dimNameUD7D,dimNameUD8D)
							If Not nonDefaultScenarioDims.Contains($"{newColName}|Entity") Then
								nonDefaultScenarioDims.Add($"{newColName}|Entity")
							End If
						End If
						
						Dim ovScenario As String = ""
						If dimNameScenario <> dimNameScenarioD Then 
							anyNonDefaults = True
							ovScenario = dimNameScenario
							dtCube(2)(newColName) = dimNameScenario
							'dtCubeOverviewPage.Rows.Add(env,otherAppSeshInfo.AppName,paddedName,kvp.Key,dimNameScenario,dimNameEntityD,dimNameAccountD,dimNameFlowD,dimNameUD1D,dimNameUD2D,dimNameUD3D,dimNameUD4D,dimNameUD5D,dimNameUD6D,dimNameUD7D,dimNameUD8D)
							If Not nonDefaultScenarioDims.Contains($"{newColName}|Scenario") Then
								nonDefaultScenarioDims.Add($"{newColName}|Scenario")
							End If
						End If			
						Dim ovAccount As String = ""
						If dimNameAccount <> dimNameAccountD Then 
							anyNonDefaults = True
							ovAccount = dimNameAccount
							dtCube(3)(newColName) = dimNameAccount
							'dtCubeOverviewPage.Rows.Add(env,otherAppSeshInfo.AppName,paddedName,kvp.Key,dimNameScenarioD,dimNameEntityD,dimNameAccount,dimNameFlowD,dimNameUD1D,dimNameUD2D,dimNameUD3D,dimNameUD4D,dimNameUD5D,dimNameUD6D,dimNameUD7D,dimNameUD8D)
							If Not nonDefaultScenarioDims.Contains($"{newColName}|Account") Then
								nonDefaultScenarioDims.Add($"{newColName}|Account")
							End If
						End If	
						Dim ovFlow As String = ""
						If dimNameFlow <> dimNameFlowD Then 
							anyNonDefaults = True
							ovFlow = dimNameFlow
							dtCube(4)(newColName) = dimNameFlow
							'dtCubeOverviewPage.Rows.Add(env,otherAppSeshInfo.AppName,paddedName,kvp.Key,dimNameScenarioD,dimNameEntityD,dimNameAccountD,dimNameFlow,dimNameUD1D,dimNameUD2D,dimNameUD3D,dimNameUD4D,dimNameUD5D,dimNameUD6D,dimNameUD7D,dimNameUD8D)
							If Not nonDefaultScenarioDims.Contains($"{newColName}|Flow") Then
								nonDefaultScenarioDims.Add($"{newColName}|Flow")
							End If
						End If
						Dim ovUD1 As String = ""
						If dimNameUD1 <> dimNameUD1D Then 
							anyNonDefaults = True
							ovUD1 = dimNameUD1
							dtCube(5)(newColName) = dimNameUD1
							'dtCubeOverviewPage.Rows.Add(env,otherAppSeshInfo.AppName,paddedName,kvp.Key,dimNameScenarioD,dimNameEntityD,dimNameAccountD,dimNameFlowD,dimNameUD1,dimNameUD2D,dimNameUD3D,dimNameUD4D,dimNameUD5D,dimNameUD6D,dimNameUD7D,dimNameUD8D)
							If Not nonDefaultScenarioDims.Contains($"{newColName}|UD1") Then
								nonDefaultScenarioDims.Add($"{newColName}|UD1")
							End If
						End If		
						Dim ovUD2 As String = ""
						If dimNameUD2 <> dimNameUD2D Then 
							anyNonDefaults = True
							ovUD2 = dimNameUD2
							dtCube(6)(newColName) = dimNameUD2
							'dtCubeOverviewPage.Rows.Add(env,otherAppSeshInfo.AppName,paddedName,kvp.Key,dimNameScenarioD,dimNameEntityD,dimNameAccountD,dimNameFlowD,dimNameUD1D,dimNameUD2,dimNameUD3D,dimNameUD4D,dimNameUD5D,dimNameUD6D,dimNameUD7D,dimNameUD8D)
							If Not nonDefaultScenarioDims.Contains($"{newColName}|UD2") Then
								nonDefaultScenarioDims.Add($"{newColName}|UD2")
							End If
						End If		
						Dim ovUD3 As String = ""
						If dimNameUD3 <> dimNameUD3D Then 
							anyNonDefaults = True
							ovUD3 = dimNameUD3
							dtCube(7)(newColName) = dimNameUD3
							'dtCubeOverviewPage.Rows.Add(env,otherAppSeshInfo.AppName,paddedName,kvp.Key,dimNameScenarioD,dimNameEntityD,dimNameAccountD,dimNameFlowD,dimNameUD1D,dimNameUD2D,dimNameUD3,dimNameUD4D,dimNameUD5D,dimNameUD6D,dimNameUD7D,dimNameUD8D)
							If Not nonDefaultScenarioDims.Contains($"{newColName}|UD3") Then
								nonDefaultScenarioDims.Add($"{newColName}|UD3")
							End If
						End If	
						Dim ovUD4 As String = ""
						If dimNameUD4 <> dimNameUD4D Then 
							anyNonDefaults = True
							ovUD4 = dimNameUD4
							dtCube(8)(newColName) = dimNameUD4
							'dtCubeOverviewPage.Rows.Add(env,otherAppSeshInfo.AppName,paddedName,kvp.Key,dimNameScenarioD,dimNameEntityD,dimNameAccountD,dimNameFlowD,dimNameUD1D,dimNameUD2D,dimNameUD3D,dimNameUD4,dimNameUD5D,dimNameUD6D,dimNameUD7D,dimNameUD8D)
							If Not nonDefaultScenarioDims.Contains($"{newColName}|UD4") Then
								nonDefaultScenarioDims.Add($"{newColName}|UD4")
								
							End If
						End If	
						Dim ovUD5 As String = ""
						If dimNameUD5 <> dimNameUD5D Then
							anyNonDefaults = True
							ovUD5 = dimNameUD5
							dtCube(9)(newColName) = dimNameUD5
							'dtCubeOverviewPage.Rows.Add(env,otherAppSeshInfo.AppName,paddedName,kvp.Key,dimNameScenarioD,dimNameEntityD,dimNameAccountD,dimNameFlowD,dimNameUD1D,dimNameUD2D,dimNameUD3D,dimNameUD4D,dimNameUD5,dimNameUD6D,dimNameUD7D,dimNameUD8D)
							If Not nonDefaultScenarioDims.Contains($"{newColName}|UD5") Then
								nonDefaultScenarioDims.Add($"{newColName}|UD5")
								
							End If
						End If	
						Dim ovUD6 As String = ""
						If dimNameUD6 <> dimNameUD6D Then 
							anyNonDefaults = True
							ovUD6 = dimNameUD6
							dtCube(10)(newColName) = dimNameUD6
							'dtCubeOverviewPage.Rows.Add(env,otherAppSeshInfo.AppName,paddedName,kvp.Key,dimNameScenarioD,dimNameEntityD,dimNameAccountD,dimNameFlowD,dimNameUD1D,dimNameUD2D,dimNameUD3D,dimNameUD4D,dimNameUD5D,dimNameUD6,dimNameUD7D,dimNameUD8D)
							If Not nonDefaultScenarioDims.Contains($"{newColName}|UD6") Then
								nonDefaultScenarioDims.Add($"{newColName}|UD6")
								
							End If
						End If	
						Dim ovUD7 As String = ""
						If dimNameUD7 <> dimNameUD7D Then 
							anyNonDefaults = True
							ovUD7 = dimNameUD7
							dtCube(11)(newColName) = dimNameUD7
							'dtCubeOverviewPage.Rows.Add(env,otherAppSeshInfo.AppName,paddedName,kvp.Key,dimNameScenarioD,dimNameEntityD,dimNameAccountD,dimNameFlowD,dimNameUD1D,dimNameUD2D,dimNameUD3D,dimNameUD4D,dimNameUD5D,dimNameUD6D,dimNameUD7,dimNameUD8D)
							If Not nonDefaultScenarioDims.Contains($"{newColName}|UD7") Then
								nonDefaultScenarioDims.Add($"{newColName}|UD7")
								
							End If
						End If	
						Dim ovUD8 As String = ""
						If dimNameUD8 <> dimNameUD8D Then 
							anyNonDefaults = True
							ovUD8 = dimNameUD8
							dtCube(12)(newColName) = dimNameUD8
							'dtCubeOverviewPage.Rows.Add(env,otherAppSeshInfo.AppName,paddedName,kvp.Key,dimNameScenarioD,dimNameEntityD,dimNameAccountD,dimNameFlowD,dimNameUD1D,dimNameUD2D,dimNameUD3D,dimNameUD4D,dimNameUD5D,dimNameUD6D,dimNameUD7D,dimNameUD8)
							If Not nonDefaultScenarioDims.Contains($"{newColName}|UD8") Then
								nonDefaultScenarioDims.Add($"{newColName}|UD8")
								
							End If
						End If	
						
						If anyNonDefaults Then
							dtCubeOverviewPage.Rows.Add(env,otherAppSeshInfo.AppName,paddedName,kvp.Key,ovScenario,ovEntity,ovAccount,ovFlow,ovUD1,ovUD2,ovUD3,ovUD4,ovUD5,ovUD6,ovUD7,ovUD8)
						End If
					End If		
				
				End If
			Next kvp
			#End Region
			'=============================================================================================
			#Region "Get Reference Cubes and Recursivly add to the cube cover page"
			'=============================================================================================			
			'GET REFERENCE CUBES
			Dim refCubes As List(Of Cube) = BRApi.Finance.Cubes.GetReferencedCubes(otherAppSeshInfo, cubeInfo.Cube.CubeId, False, True)
			If refCubes.Count > 0 Then  
				Dim refCubesList As List(Of String) = refCubes.Select(Function(x) x.Name).ToList()
				If refCubesList.Count > 0 Then
					For Each refCube As String In refCubesList
						RecursivlyAddCubes(si,otherAppSeshInfo,cubeInfos.Where(Function(x) x.Cube.Name = refCube).FirstOrDefault(),cubeInfos,dimList,dictScenarioTypeIds,_scenarioTypeIdDefault,allRefCubes,indenture+1,dtCube)
					Next
				End If
			End If	
			#End Region
		End Sub
		
		Private Sub CreateIndenturedDimList(ByVal si As SessionInfo, ByVal _dimType As String, ByVal otherAppSeshInfo As SessionInfo, ByVal _dims As List(Of OneStream.Shared.Wcf.Dim))
			
			'Looks up the inherited dimensions to build the indentured list
			'	- Builds dictionaries of children by parent
			'	- Builds dictionary of indenture by dimension
			'	- Builds list of root dimensions (no inheritance found)
			'	- Recursivly builds list of dimensions
			
			'SET VARIABLES / RESET GLOBAL VARIABLES
			Dim paddedDim As String = ""
			Dim parent As String = ""
			Dim myDimName As String = ""
			_dimsList = New List(Of String)
			
			indLvl = New Dictionary(Of String, Integer)
			dictChildren = New Dictionary(Of String, list(Of String))
		
			'LOOP ON DIMS
			Dim _roots As New List(Of String)
			Dim _include As Boolean = False
			For Each _dim As OneStream.Shared.Wcf.Dim In _dims
				
				'BUILD CHILDREN LIST FOR EACH DIMENSION AND ADD ROOT DIMS
				myDimName = _dim.Name
				Dim iDims As List(Of OneStream.Shared.Wcf.Dim) = BRApi.Finance.Dim.GetInheritedDims(otherAppSeshInfo,_dim.DimPk)
				If iDims IsNot Nothing And iDims.Count > 0 Then
					
					'IF EXCLUDE LIST HAS ANY ENTRIES THEN INCLUDE
					
					If excludeDims IsNot Nothing And excludeDims.Count > 0 Then
						If Not excludeDims.Any(Function(x) myDimName.StartsWith(x)) Then
							_include = True
						Else
							_include = False
							log(si,$"Excluding {myDimName}. On Exclude dime list.")
						End If
						
					Else If excludeDims IsNot Nothing And excludeDims.Count = 0 Then
						_include = True
					Else
						_include = False
						log(si,$"Excluding {myDimName}. Exlusion list is empty. No dims excluded.")
					End If	
					
					If _include Then
						parent = iDims(0).Name 
						If Not indLvl.ContainsKey(myDimName) Then
							indLvl.Add(myDimName,iDims.Count)
						End If
						
						If Not dictChildren.ContainsKey(parent) Then
							dictChildren.Add(parent,New List(Of String)({myDimName}))
						Else If dictChildren.ContainsKey(parent) And Not dictChildren(parent).Contains(myDimName) Then
							dictChildren(parent).Add(myDimName)
						End If
					End If		
				Else
					If Not indLvl.ContainsKey(myDimName) Then
						indLvl.Add(myDimName,0)
					End If
					If Not _dimsList.Contains(myDimName)
						_dimsList.Add(myDimName)
					End If
					If Not _roots.Contains(myDimName) Then
						_roots.Add(myDimName)
					End If
				End If	

			Next
			
			'LOOP TO ADD STRUCTURE
			For Each _root As String In _roots
				RecursiveReorder(otherAppSeshInfo,_root)
			Next
			
			Dim lastIndLvl As Integer = 0
			Dim curIndLvl As Integer = 0
			_dimsOrderedList = "<ul style='list-style:none; margin-left:-18px;'>"
			For Each tmpDim As String In _dimsList
				
				curIndLvl = tmpDim.Count(Function(c As Char) c = pad)
				
				If curIndLvl < lastIndLvl Then
					_dimsOrderedList += "</ul>"
				Else If curIndLvl > lastIndLvl
					_dimsOrderedList += "<ul style='list-style:none; margin-left:-20px; '>"
				End If
				
				_dimsOrderedList += $"<li style='white-space:nowrap; margin-left:-20px; text-indent: -16px'>{tmpDim.Replace(".","")}</li>"
				
				lastIndLvl = curIndLvl

			Next tmpDim
			_dimsOrderedList += "</ul>"

			'ADD TO MASTER LIST
			masterList.Add(New DimListByDimTypeAndApp(otherAppSeshInfo.AppName,_dimType,_dimsList,_dims,_dimsOrderedList))
			
		End Sub
		Private Sub RecursiveReorder(ByVal si As sessioninfo, ByVal parent As String)
		
			'Recursivly builds list of dimensions
			
			'ADD PARENT
			If Not indLvl.containskey(parent) Then
				log(si,"No indenture found for " & parent)
			Else
				Dim paddedParent As String = parent.PadLeft(parent.Length + indLvl(parent), pad)
				If Not _dimsList.Contains(paddedParent) Then
					_dimsList.Add(paddedParent)
				End If
			End If
			
			'LOOP ON CHILDREN
			Dim paddedChild As String = ""
			If dictChildren.containsKey(parent) Then
				For Each _child As String In dictChildren(parent)
					If Not indLvl.containskey(_child) Then
						log(si,"No indenture found for " & _child)
					Else					
						paddedChild = _child.PadLeft(_child.Length + indLvl(_child), pad)
						If Not _dimsList.Contains(paddedChild) Then
							_dimsList.Add(paddedChild)		
						End If
						If dictChildren.ContainsKey(_child) Then
							RecursiveReorder(si, _child)
						End If
					End If
				Next
			End If
			
		End Sub
		Private Sub ExecuteExtensibilityAnalysis(ByVal si As SessionInfo, ByVal otherAppSeshInfo As SessionInfo)
			
			'TODO: Is there a better way of getting the dimtypeid from the dimtype name? 
			'NOTE: Entity and scenario are not in the list...

			For Each _dimType As String In fullListDimTypes
				If dimTypeIdsByDimTypeName.containsKey(_dimType) Then
					Dim sql As String = $"SELECT DISTINCT a.Name AS [Member Name], a2.Name AS [Child Name], e.Name As [Dimension Name]
											FROM
											  (
												   SELECT a.Name AS [Member Name], c.ParentId, c.DimTypeId, c.ChildId, c.DimId As RelDimId, a.DimId as MbrDimId
												   From Relationship c 
												   LEFT JOIN Member a ON a.MemberId=c.ParentId AND a.DimId = c.DimId
												   WHERE c.DimTypeId = {dimTypeIdsByDimTypeName(_dimType)}
												   AND a.Name is not null
											  ) s

											  RIGHT JOIN Relationship c ON s.ParentId = c.ParentId
											  LEFT JOIN Member a ON a.MemberId=s.ParentId
											  LEFT JOIN Member a2 ON a2.MemberId=c.ChildId
											  LEFT JOIN Dim e ON s.DimTypeId=e.DimTypeId AND c.DimId=e.DimId
											  WHERE c.DimId > s.RelDimId
											  Order by a.Name"
					
					Using dbConn As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(otherAppSeshInfo)
						Dim dtIssue As DataTable = BRApi.Database.ExecuteSql(dbConn,sql,False)
						If dtIssue IsNot Nothing And dtIssue.Rows.Count > 0 Then
							log(si,$"  - Adding Issue Tab {otherAppSeshInfo.AppName}|{_dimType}")
							dtIssue.TableName = $"{otherAppSeshInfo.AppName}|{_dimType}"
							listExFindings.Add(dtIssue)
						End If
					End Using			
				End If
			Next
			
		End Sub
		
		Private Function DimHasIssue(ByVal si As SessionInfo, ByVal appName As String, ByVal dimType As String,ByVal dimName As String) As Boolean
			If dimName = "" Then Return False
			If appName = "" Then Return False
			If dimType = "" Then Return False
			If listExFindings.Any(Function(x) x.TableName = $"{appName}|{dimType}") Then
				For Each drFinding As DataRow In listExFindings.Where(Function (x) x.TableName = $"{appName}|{dimType}").FirstOrDefault().Rows
					If drFinding("Dimension Name").ToString().XFEqualsIgnoreCase(dimName.Replace(".","")) Then
						Return True									
					End If
				Next drFinding
			End If
			Return False
		End Function
		Private Function GetDimFindingTblNm(ByVal si As SessionInfo,ByVal appName As String, ByVal dimName As String) As String
			If appName = "" Then Return ""
			If dimName = "" Then Return ""
			
			Dim tabName As String = $"|{appList.IndexOf(appName.Replace(".",""))}|{dimName.Replace(".","")}"
			'Dim tbAbbr As String = $"|{appName}|{dimName}"
				
			'Dim tbName As String = $"{appName.Replace(".","")}|{dimName.Replace(".","")}"
			'If tbName.Length > 31 Then tbName = tbName.Substring(0,30)	
			'If listDimFindings.Any(Function(x) x.TableName = tbName) Then
			'log(si,$"  GetDimFindingTblNm Evaluating " & tbAbbr)
			If listDimFindings.Any(Function(x) x.TableName.EndsWith(tabName)) Then
				'log(si,$"  GetDimFindingTblNm Getting matching list of table")
				Dim matchingList As List(Of DataTable) = listDimFindings.Where(Function(x) x.TableName.EndsWith(tabName)).ToList()
				'log(si,$"found {matchingList.Count} matching table(s)")
				Return matchingList.FirstOrDefault().TableName
			End If
			Return ""
		End Function		
		Private Function DimsMatch(ByVal si As SessionInfo,ByVal appName As String, ByVal dimName As String) As Boolean
			If appName = "" Then Return True
			If dimName = "" Then Return True
				
			Dim tbName As String = $"{appName.Replace(".","")}|{dimName.Replace(".","")}"
			If tbName.Length > 31 Then tbName = tbName.Substring(0,30)	
			'If listDimFindings.Any(Function(x) x.TableName = tbName) Then
			If listDimFindings.Any(Function(x) x.TableName = tbName) Then
				Return False
			End If
			Return True
		End Function
		Private Function DimExistsInStandard(ByVal si As SessionInfo, ByVal appName As String, ByVal dimName As String) As Boolean
			If appName = "" Then Return True 'false will flag cell orange.
			If dimName = "" Then Return True
			'If standardDimensions.Any(Function(x) x.Name.XFEqualsIgnoreCase(dimName.Replace(".",""))) Then
			If Not standardDimensions.Contains(dimName.Replace(".","")) Then
				Return False
			End If
			Return True
		End Function
		Private Function HighlightMbrDiff(ByVal si As SessionInfo, ByVal mbrName As String, ByVal tblName As String) As Boolean
			If mbrName = "" Then Return False
			If tblName = "" Then Return False
			
			If missingMembersByTabName.ContainsKey(tblName) Then
				If missingMembersByTabName(tblName).Any(Function(x) x.XFEqualsIgnoreCase(mbrName)) Then
					Return True
				End If
			End If
				
			If extraMembersByTabName.ContainsKey(tblName) Then
				If extraMembersByTabName(tblName).Any(Function(x) x.XFEqualsIgnoreCase(mbrName)) Then
					Return True
				End If
			End If				

			Return False
		End Function
		Private Function HasOrderIssue(ByVal si As SessionInfo, ByVal trgTblName As String) As Boolean
			If trgTblName = "" Then Return False 'true will flag cell color change
			Return listDimOrderIssues.Any(Function(x) x.TableName.XFEqualsIgnoreCase(trgTblName))				
		End Function


		Public Function BuildData(ByVal si As sessioninfo) As DataTable
			
			'Uses the global list of DimListByDimTypeAndApp (a local class defined below which holds the DimType, AppName, DimensionList as list(of string))
			'to build a datatable that will be printed out as an excel file.
			
			' BuildData
			'	Query master table for app names
			'	MapDimsToDataTable
			'		
			
			'BUILD DataTable FOR EACH DIMENSION (i.e. Entity, Account, UD1..) FOR EACH APPLICATION
			'Loops through the main dimensions and adds the data to the table
			dt = New DataTable
			dt.TableName = ExtensibilityCoverPageName
			dt.Columns.Add(" ")
			Dim appNames As List(Of String) = masterList.GroupBy(Function(x) x.AppName).Select(Function(x) x.First).ToList().Select(Function(x) x.AppName).ToList()
			dt.Columns.AddRange(appNames.Select(Function(x) New DataColumn(x)).ToArray())
			
			For Each _dimType As String In fullListDimTypes
				MapDimsToDataTable(si,appNames,_dimType)
				
				'Add extra row
				Dim dr As DataRow = dt.NewRow
				For Each c As DataColumn In dt.Columns
					dr(c.ColumnName) = ""
				Next
				dt.Rows.Add(dr)
			Next
			
			Return dt
			
		End Function
		Public Sub MapDimsToDataTable(ByVal si As SessionInfo,ByVal appNames As List(Of String), ByVal _dimType As String)
		
			'Loops through the applications for each new row
			'  If value is found, value is added to the row to the appropriate application name column
			'  If value is not found, a value of "" is added to the row
			'  Loop continues until either the maximum itterates is reached (to prevent overflow)
			'  Or when no value is found for any of the applications.
			'In this way, it creates the excel file
		
			Dim somethingFound As Boolean = True
			Dim cntMax As Integer = 100
			Dim cnt As Integer = 0
			
			Do While somethingFound
				cnt+=1
				If cnt > cntMax Then
					log(si,"Max itterations reached!")
					Exit Do
				End If
				
				somethingFound = False		
				Dim dr As DataRow = dt.NewRow
				If cnt = 1 Then
					dr(0) = _dimType
				Else
					dr(0) = ""
				End If
				
				For Each appNm In appNames
					Dim _dimAppObj As DimListByDimTypeAndApp = masterList.Where(Function(x) x.AppName = appNm And x.DimType = _dimType).FirstOrDefault()
					If _dimAppObj IsNot Nothing Then	
						Dim _dimNamesForAppNm As List(Of String) = _dimAppObj.DimNames
						If _dimNamesForAppNm IsNot Nothing And _dimNamesForAppNm.Count >= cnt Then
							somethingFound = True
							dr(appNm) = _dimAppObj.DimNames(cnt-1)
						Else
							dr(appNm) = ""
						End If	
					Else
						dr(appNm) = ""
					End If
				Next
				
				If somethingFound Then
					dt.Rows.add(dr)
				End If
			
			Loop
		End Sub

		Private Sub CreateExcelBRMFDoc(ByVal si As sessioninfo, ByVal ds As DataSet, ByVal sFilename As String, _
					Optional flagGreenMembers As List(Of String) = Nothing, _
					Optional flagGreenDescriptions As List(Of String) = Nothing, _
					Optional flagYellowDescriptions As List(Of String) = Nothing)
	        Try

				'Creates the excel document using OpenXML
				
	            Dim WB As SpreadsheetDocument = SpreadsheetDocument.Create(sFilename, SpreadsheetDocumentType.Workbook)

	            ' Add a WorkbookPart to the document.
	            Dim WBP As WorkbookPart = WB.AddWorkbookPart

	            WBP.Workbook = New Workbook
	            WB.WorkbookPart.Workbook.Sheets = New Spreadsheet.Sheets
				
	        #Region "STYLES Yes...all of this for some yellow fill and bold"

	            Dim stylesPart = WB.WorkbookPart.AddNewPart(Of WorkbookStylesPart)
	            stylesPart.Stylesheet = New Stylesheet()
				
				'bold font
				Dim fontBold As New Font() With { .bold = New Bold() }
				
	            stylesPart.Stylesheet.Fonts = New Fonts()
	            stylesPart.Stylesheet.Fonts.Count = 2
	            stylesPart.Stylesheet.Fonts.AppendChild(New Font())
				stylesPart.Stylesheet.Fonts.AppendChild(fontBold)


	            stylesPart.Stylesheet.Fills = New Fills()

	            Dim req1PF As New PatternFill With {.PatternType = PatternValues.None}
	            Dim req2PF As New PatternFill With {.PatternType = PatternValues.Gray125}
				
	            Dim solidYellowPF As New PatternFill With {.PatternType = PatternValues.Solid}
	            solidYellowPF.ForegroundColor = New ForegroundColor With {.Rgb = HexBinaryValue.FromString("FFFFFF00")}
	            solidYellowPF.BackgroundColor = New BackgroundColor With {.Indexed = 64}

	            Dim lightYellowPF As New PatternFill With {.PatternType = PatternValues.Solid}
	            lightYellowPF.ForegroundColor = New ForegroundColor With {.Rgb = HexBinaryValue.FromString("FFFCFCE8")}
	            lightYellowPF.BackgroundColor = New BackgroundColor With {.Indexed = 64}

	            Dim lightGreenPF As New PatternFill With {.PatternType = PatternValues.Solid}
	            lightGreenPF.ForegroundColor = New ForegroundColor With {.Rgb = HexBinaryValue.FromString("FFd9fadc")}
	            lightGreenPF.BackgroundColor = New BackgroundColor With {.Indexed = 64}
				
	            stylesPart.Stylesheet.Fills.AppendChild(New Fill With {.PatternFill = req1PF})			'0
	            stylesPart.Stylesheet.Fills.AppendChild(New Fill With {.PatternFill = req2PF})			'1
	            stylesPart.Stylesheet.Fills.AppendChild(New Fill With {.PatternFill = solidYellowPF})	'2
				stylesPart.Stylesheet.Fills.AppendChild(New Fill With {.PatternFill = lightYellowPF})	'3
				stylesPart.Stylesheet.Fills.AppendChild(New Fill With {.PatternFill = lightGreenPF})	'4
	            stylesPart.Stylesheet.Fills.Count = 5

	            'blank border list
	            stylesPart.Stylesheet.Borders = New Borders()
	            stylesPart.Stylesheet.Borders.Count = 1
	            stylesPart.Stylesheet.Borders.AppendChild(New Border())

	            'blank cell format list
	            stylesPart.Stylesheet.CellStyleFormats = New CellStyleFormats()
	            stylesPart.Stylesheet.CellStyleFormats.Count = 1
	            stylesPart.Stylesheet.CellStyleFormats.AppendChild(New CellFormat())

	            'cell format list
	            stylesPart.Stylesheet.CellFormats = New CellFormats()
	            ' empty one for index 0, seems to be required
	            stylesPart.Stylesheet.CellFormats.AppendChild(New CellFormat())
	            stylesPart.Stylesheet.CellFormats.AppendChild(New CellFormat With {.FormatId = 0, .FontId = 0, .BorderId = 0, .FillId = 2, .ApplyFill = True}).AppendChild(New Alignment With {.Horizontal = HorizontalAlignmentValues.Left})            
				stylesPart.Stylesheet.CellFormats.AppendChild(New CellFormat() With  { .FontId = 1 })	'2 - solid yellow
				stylesPart.Stylesheet.CellFormats.AppendChild(New CellFormat() With  { .FillId = 3 })	'3 - light yellow
				stylesPart.Stylesheet.CellFormats.AppendChild(New CellFormat() With  { .FillId = 4 })	'4 - light green
				stylesPart.Stylesheet.CellFormats.Count = 5				
				
				
	            stylesPart.Stylesheet.Save()
				
			'END STYLES REGION
            #End Region 
				
				Dim dimType As String = ""
				Dim rCnt As Integer = 0
				Dim colCnt As Integer = 0
	            Dim SheetID As Int32 = 1
				
	            ' Append a new worksheet and associate it with the workbook.
	            For Each dt As DataTable In ds.Tables
					
					' Add a WorksheetPart to the WorkbookPart.
	                Dim WSP As WorksheetPart = WBP.AddNewPart(Of WorksheetPart)()
					Dim WS As New Worksheet()
					
					'NAMED RANGES
					'Dim definedNamesCol As New DefinedNames
'					log(si,"Target range for named range: " & $"{dt.TableName}!$A$1:$G${dt.Rows.Count + 1}")
'					Dim definedName As New DefinedName With { .Name="BRLogMessages", .Text=$"{dt.TableName}!$A$1:$G${dt.Rows.Count + 1}" }
'					Dim definedNames As New DefinedNames
'					definedNames.Append(definedName)
'					WBP.Workbook.DefinedNames = definedNames
					'definedNamesCol.Append(definedName)
					'WBP.Workbook.Append(definedNamesCol)
					
					' FREEZE PANES
					Dim sheetViews As New SheetViews()
					Dim sheetView As New SheetView() With { .TabSelected = False, .WorkbookViewId = CType(0UI, UInt32Value) }
					Dim pane As New Pane() With { .VerticalSplit = 1D, .TopLeftCell = "A2", .ActivePane = PaneValues.BottomLeft, .State = PaneStateValues.Frozen }	
					sheetView.Append(pane)
					sheetViews.Append(sheetView)
					WS.Append(sheetViews)					

					' CREATE SHEET DATA AND APPEND TO WORKSHEET
					Dim WSD As New SheetData()
					WS.Append(WSD)
					WSP.Worksheet = WS
	                Dim SHS As Sheets = WB.WorkbookPart.Workbook.GetFirstChild(Of Sheets)
	                Dim rID As String = WB.WorkbookPart.GetIdOfPart(WSP)
	                Dim SH As Sheet = New Sheet
	                SH.Id = WB.WorkbookPart.GetIdOfPart(WSP)
	                SH.SheetId = SheetID
	                SH.Name = dt.TableName
	                SheetID = SheetID + 1
	                SHS.Append(SH)

					' HEADERS FROM COLUMN NAMES
	                Dim HR As Spreadsheet.Row = New Spreadsheet.Row
	                Dim columns As List(Of String) = New List(Of String)
	                For Each column As System.Data.DataColumn In dt.Columns
	                    columns.Add(column.ColumnName)
	                    Dim Cell As Spreadsheet.Cell = New Spreadsheet.Cell
	                    Cell.DataType = Spreadsheet.CellValues.String
						cell.StyleIndex = 2 'bold app names
	                    Cell.CellValue = New Spreadsheet.CellValue(column.ColumnName)
	                    HR.AppendChild(Cell)
	                Next
	                WSD.AppendChild(HR)
					
					' ROWS FROM ROW DATA
					rCnt = 0
	                For Each dr As System.Data.DataRow In dt.Rows
						rCnt += 1 
	                    Dim newRow As Spreadsheet.Row = New Spreadsheet.Row
						colCnt = 0
	                    For Each col As String In columns
							colCnt +=1
							
							Dim Cell As Spreadsheet.Cell = New Spreadsheet.Cell
	                        Cell.DataType = Spreadsheet.CellValues.String
							
							Dim newCellVal As New cellValue()
							newCellVal.Text = dr(col).ToString()
							Cell.CellValue = New Spreadsheet.CellValue(dr(col).ToString())
							
							If dt.TableName.XFEqualsIgnoreCase("Member Compare")Then
								
								'members - flag green if match
								If (colCnt = 2 Or colCnt = 6) Then
									If flagGreenMembers.Contains(dr(col).ToString()) Then
										cell.StyleIndex = 4
									End If
									
								'description - flag green if match
								Else If (colCnt = 3 Or colCnt = 7) Then
									'brapi.ErrorLog.LogMessage(si, dr(colCnt-2).ToString() & "|" & dr(col).ToString())
									
									If flagGreenDescriptions.Contains(dr(colCnt-2).ToString() & "|" & dr(col).ToString()) Then
										Cell.StyleIndex = 4 
										
									Else If flagYellowDescriptions.Contains(dr(colCnt-2).ToString() & "|" & dr(col).ToString()) Then
										Cell.StyleIndex = 3 
									End If
							
									
								'Else If (colCnt = 3 Or colCnt = 7) Then
									'brapi.ErrorLog.LogMessage(si,dr(colCnt-2).ToString() & "|" & dr(col).ToString())

								End If
								
							End If

	                        newRow.AppendChild(Cell)
	                    Next
	                    WSD.AppendChild(newRow)
	                Next

	            Next
	            WBP.Workbook.Save()

	            ' Close the document.
	            WB.Close()
	        Catch ex As Exception
	            Throw New Exception(ex.Message, ex)
	        End Try
    	End Sub	
		
		Private Sub CreateExcelExtDoc(ByVal si As sessioninfo, ByVal ds As DataSet, ByVal sFilename As String)
	        Try
				'Creates the excel document using OpenXML
				
	            Dim WB As SpreadsheetDocument = SpreadsheetDocument.Create(sFilename, SpreadsheetDocumentType.Workbook)

	            ' Add a WorkbookPart to the document.
	            Dim WBP As WorkbookPart = WB.AddWorkbookPart

	            WBP.Workbook = New Workbook
	            WB.WorkbookPart.Workbook.Sheets = New Spreadsheet.Sheets
				
			#Region "STYLES Yes...all of this for some yellow fill and bold"

	            Dim stylesPart = WB.WorkbookPart.AddNewPart(Of WorkbookStylesPart)
	            stylesPart.Stylesheet = New Stylesheet()
				
				'bold font
				Dim fontBold As New Font() With { .bold = New Bold() }
				
	            stylesPart.Stylesheet.Fonts = New Fonts()
	            stylesPart.Stylesheet.Fonts.Count = 2
	            stylesPart.Stylesheet.Fonts.AppendChild(New Font())
				stylesPart.Stylesheet.Fonts.AppendChild(fontBold)


	            stylesPart.Stylesheet.Fills = New Fills()

	            Dim req1PF As New PatternFill With {.PatternType = PatternValues.None}
	            Dim req2PF As New PatternFill With {.PatternType = PatternValues.Gray125}

	            Dim solidYellowPF As New PatternFill With {.PatternType = PatternValues.Solid}
	            solidYellowPF.ForegroundColor = New ForegroundColor With {.Rgb = HexBinaryValue.FromString("FFFFFF00")}
	            solidYellowPF.BackgroundColor = New BackgroundColor With {.Indexed = 64}

	            stylesPart.Stylesheet.Fills.AppendChild(New Fill With {.PatternFill = req1PF})
	            stylesPart.Stylesheet.Fills.AppendChild(New Fill With {.PatternFill = req2PF})
	            stylesPart.Stylesheet.Fills.AppendChild(New Fill With {.PatternFill = solidYellowPF})
	            stylesPart.Stylesheet.Fills.Count = 3

	            'blank border list
	            stylesPart.Stylesheet.Borders = New Borders()
	            stylesPart.Stylesheet.Borders.Count = 1
	            stylesPart.Stylesheet.Borders.AppendChild(New Border())

	            'blank cell format list
	            stylesPart.Stylesheet.CellStyleFormats = New CellStyleFormats()
	            stylesPart.Stylesheet.CellStyleFormats.Count = 1
	            stylesPart.Stylesheet.CellStyleFormats.AppendChild(New CellFormat())

	            'cell format list
	            stylesPart.Stylesheet.CellFormats = New CellFormats()
	            ' empty one for index 0, seems to be required
	            stylesPart.Stylesheet.CellFormats.AppendChild(New CellFormat())

	            ' cell format references style format 0, font 0, border 0, fill 2 And applies the fill
	            stylesPart.Stylesheet.CellFormats.AppendChild(New CellFormat With {.FormatId = 0, .FontId = 0, .BorderId = 0, .FillId = 2, .ApplyFill = True}).AppendChild(New Alignment With {.Horizontal = HorizontalAlignmentValues.Left})            
				stylesPart.Stylesheet.CellFormats.AppendChild(New CellFormat() With  { .FontId = 1 })	
				stylesPart.Stylesheet.CellFormats.Count = 3

	            stylesPart.Stylesheet.Save()
				
			'END STYLES REGION
            #End Region 
				
				Dim dimType As String = ""
				Dim rCnt As Integer = 0
				Dim colCnt As Integer = 0
	            Dim SheetID As Int32 = 1
				
	            ' Append a new worksheet and associate it with the workbook.
	            For Each dt As DataTable In ds.Tables
					
					' Add a WorksheetPart to the WorkbookPart.
	                Dim WSP As WorksheetPart = WBP.AddNewPart(Of WorksheetPart)()
					Dim WS As New Worksheet()
					
					' FREEZE PANES
					If dt.TableName = ExtensibilityCoverPageName Then
						Dim sheetViews As New SheetViews()
						Dim sheetView As New SheetView() With { .TabSelected = False, .WorkbookViewId = CType(0UI, UInt32Value) }
						Dim pane As New Pane() With { .VerticalSplit = 1D,  .HorizontalSplit = 1D, .TopLeftCell = "B2", .ActivePane = PaneValues.BottomLeft, .State = PaneStateValues.Frozen }
						sheetView.Append(pane)
						sheetViews.Append(sheetView)
						WS.Append(sheetViews)
					End If					

					' CREATE SHEET DATA AND APPEND TO WORKSHEET
					Dim WSD As New SheetData()
					WS.Append(WSD)
					WSP.Worksheet = WS
	                Dim SHS As Sheets = WB.WorkbookPart.Workbook.GetFirstChild(Of Sheets)
	                Dim rID As String = WB.WorkbookPart.GetIdOfPart(WSP)
	                Dim SH As Sheet = New Sheet
	                SH.Id = WB.WorkbookPart.GetIdOfPart(WSP)
	                SH.SheetId = SheetID
	                SH.Name = dt.TableName
	                SheetID = SheetID + 1
	                SHS.Append(SH)

					' HEADERS FROM COLUMN NAMES
	                Dim HR As Spreadsheet.Row = New Spreadsheet.Row
	                Dim columns As List(Of String) = New List(Of String)
	                For Each column As System.Data.DataColumn In dt.Columns
	                    columns.Add(column.ColumnName)
	                    Dim Cell As Spreadsheet.Cell = New Spreadsheet.Cell
	                    Cell.DataType = Spreadsheet.CellValues.String
						cell.StyleIndex = 2 'bold app names
	
						If dt.TableName <> ExtensibilityCoverPageName And column.ColumnName = "Member Name" Then
							Dim newCellVal As New cellValue()
							newCellVal.Text = "Member Name"
							Dim cellFormula As New CellFormula() With { .Space = SpaceProcessingModeValues.Preserve }
							cellFormula.Text = $"HYPERLINK(""#'{ExtensibilityCoverPageName}'!A1"",""Member Name"")"
							Cell.Append(cellFormula)
							Cell.Append(newCellVal)
						Else
	                    	Cell.CellValue = New Spreadsheet.CellValue(column.ColumnName)
						End If
						
	                    HR.AppendChild(Cell)
	                Next
	                WSD.AppendChild(HR)
					
					' ROWS FROM ROW DATA
					rCnt = 0
	                For Each dr As System.Data.DataRow In dt.Rows
						rCnt += 1 
	                    Dim newRow As Spreadsheet.Row = New Spreadsheet.Row
						colCnt = 0
	                    For Each col As String In columns
							colCnt +=1
							
							Dim Cell As Spreadsheet.Cell = New Spreadsheet.Cell
	                        Cell.DataType = Spreadsheet.CellValues.String
							
							Dim newCellVal As New cellValue()
							newCellVal.Text = dr(col).ToString()
							
							' BOLD FIRST COLUMN OF ExtensibilityCoverPageName tab
							If dt.TableName = ExtensibilityCoverPageName And colCnt = 1 Then
								If dimType <> dr(col).ToString() And dr(col).ToString() <> "" Then
									Cell.CellValue = New Spreadsheet.CellValue(dr(col).ToString())
									dimType = dr(col).ToString()
									'bold
									Cell.StyleIndex = 2 
								End If
								
							' YELLOW FILL WITH HYPERLINK FOR DIMENSIONS WITH ISSUES
							Else If dt.TableName = ExtensibilityCoverPageName And DimHasIssue(si, col, dimType, dr(col).ToString()) Then
								'yellow fill
								Cell.StyleIndex = 1 
								'hyperlink to specific sheet
								Dim cellFormula As New CellFormula() With { .Space = SpaceProcessingModeValues.Preserve } 
								cellFormula.Text = $"HYPERLINK(""#'{col}|{dimType}'!A1"",""{dr(col).ToString()}"")"
								Cell.Append(cellFormula)
								Cell.Append(newCellVal)
								
							' BOLD VALUES STARTING WITH ROOT 
							Else If dt.TableName = ExtensibilityCoverPageName And dr(col).ToString().ToLower().StartsWith("root") Then
								Cell.CellValue = New Spreadsheet.CellValue(dr(col).ToString())
								Cell.StyleIndex = 2
								
							' OTHERWISE SET VALUE ONLY
							Else
								Cell.CellValue = New Spreadsheet.CellValue(dr(col).ToString())
							End If

	                        newRow.AppendChild(Cell)
	                    Next
	                    WSD.AppendChild(newRow)
	                Next

	            Next
	            WBP.Workbook.Save()

	            ' Close the document.
	            WB.Close()
	        Catch ex As Exception
	            Throw New Exception(ex.Message, ex)
	        End Try
    	End Sub
		Private Sub CreateExcelCubeDoc(ByVal si As sessioninfo, ByVal ds As DataSet, ByVal sFilename As String)
	        Try
				'Creates the excel document using OpenXML
				log(si,"       " & "Creating cube file")
	            Dim WB As SpreadsheetDocument = SpreadsheetDocument.Create(sFilename, SpreadsheetDocumentType.Workbook)

	            ' Add a WorkbookPart to the document.
	            Dim WBP As WorkbookPart = WB.AddWorkbookPart

	            WBP.Workbook = New Workbook
	            WB.WorkbookPart.Workbook.Sheets = New Spreadsheet.Sheets
				
	        #Region "STYLES Yes...all of this for some yellow fill and bold"
				log(si,"       " & "Creating cube styles")
	            Dim stylesPart = WB.WorkbookPart.AddNewPart(Of WorkbookStylesPart)
	            stylesPart.Stylesheet = New Stylesheet()
				
				'bold font
				Dim fontBold As New Font() With { .bold = New Bold() }
				
	            stylesPart.Stylesheet.Fonts = New Fonts()
	            stylesPart.Stylesheet.Fonts.Count = 2
	            stylesPart.Stylesheet.Fonts.AppendChild(New Font())
				stylesPart.Stylesheet.Fonts.AppendChild(fontBold)


	            stylesPart.Stylesheet.Fills = New Fills()

	            Dim req1PF As New PatternFill With {.PatternType = PatternValues.None}
	            Dim req2PF As New PatternFill With {.PatternType = PatternValues.Gray125}

	            Dim solidYellowPF As New PatternFill With {.PatternType = PatternValues.Solid}
	            solidYellowPF.ForegroundColor = New ForegroundColor With {.Rgb = HexBinaryValue.FromString("FFFFFF00")}
	            solidYellowPF.BackgroundColor = New BackgroundColor With {.Indexed = 64}

	            Dim lightYellowPF As New PatternFill With {.PatternType = PatternValues.Solid}
	            lightYellowPF.ForegroundColor = New ForegroundColor With {.Rgb = HexBinaryValue.FromString("FFFCFCE8")}
	            lightYellowPF.BackgroundColor = New BackgroundColor With {.Indexed = 64}

	            stylesPart.Stylesheet.Fills.AppendChild(New Fill With {.PatternFill = req1PF}) 'required standard
	            stylesPart.Stylesheet.Fills.AppendChild(New Fill With {.PatternFill = req2PF}) 'required standard
	            stylesPart.Stylesheet.Fills.AppendChild(New Fill With {.PatternFill = solidYellowPF})
				stylesPart.Stylesheet.Fills.AppendChild(New Fill With {.PatternFill = lightYellowPF})
	            stylesPart.Stylesheet.Fills.Count = 4

	            'blank border list
	            stylesPart.Stylesheet.Borders = New Borders()
	            stylesPart.Stylesheet.Borders.Count = 1
	            stylesPart.Stylesheet.Borders.AppendChild(New Border())

	            'blank cell format list
	            stylesPart.Stylesheet.CellStyleFormats = New CellStyleFormats()
	            stylesPart.Stylesheet.CellStyleFormats.Count = 1
	            stylesPart.Stylesheet.CellStyleFormats.AppendChild(New CellFormat())

	            'cell format list
	            stylesPart.Stylesheet.CellFormats = New CellFormats()
	            ' empty one for index 0, seems to be required
	            stylesPart.Stylesheet.CellFormats.AppendChild(New CellFormat())

	            ' cell format references style format 0, font 0, border 0, fill 2 And applies the fill .FormatId = 3,
	            stylesPart.Stylesheet.CellFormats.AppendChild(New CellFormat With { .FontId = 1, .BorderId = 0, .FillId = 2, .ApplyFill = True}).AppendChild(New Alignment With {.Horizontal = HorizontalAlignmentValues.Left})            	
				stylesPart.Stylesheet.CellFormats.AppendChild(New CellFormat With { .FontId = 0, .BorderId = 0, .FillId = 3, .ApplyFill = True}).AppendChild(New Alignment With {.Horizontal = HorizontalAlignmentValues.Left})            
				stylesPart.Stylesheet.CellFormats.AppendChild(New CellFormat With { .FontId = 1 })
				stylesPart.Stylesheet.CellFormats.Count = 4

	            stylesPart.Stylesheet.Save()
				
			'END STYLES REGION
            #End Region 
				
				Dim dimType As String = ""
				Dim rCnt As Integer = 0
				Dim colCnt As Integer = 0
	            Dim SheetID As Int32 = 1
				
	            ' Append a new worksheet and associate it with the workbook.
	            For Each dt As DataTable In ds.Tables
					
					' Add a WorksheetPart to the WorkbookPart.
	                Dim WSP As WorksheetPart = WBP.AddNewPart(Of WorksheetPart)()
					Dim WS As New Worksheet()
					
					' FREEZE PANES
					If dt.TableName.XFEqualsIgnoreCase(CubeOverviewPageName) Then
						Dim sheetViews As New SheetViews()
						Dim sheetView As New SheetView() With { .TabSelected = False, .WorkbookViewId = CType(0UI, UInt32Value) }
						Dim pane As New Pane() With { .VerticalSplit = 1D, .TopLeftCell = "A2", .ActivePane = PaneValues.BottomLeft, .State = PaneStateValues.Frozen }						
						sheetView.Append(pane)
						sheetViews.Append(sheetView)
						WS.Append(sheetViews)						
					Else If Not dt.TableName.XFEqualsIgnoreCase(CubeCoverPageName) Then
						Dim sheetViews As New SheetViews()
						Dim sheetView As New SheetView() With { .TabSelected = False, .WorkbookViewId = CType(0UI, UInt32Value) }
						Dim pane As New Pane() With { .VerticalSplit = 2D,  .HorizontalSplit = 1D, .TopLeftCell = "B3", .ActivePane = PaneValues.BottomLeft, .State = PaneStateValues.Frozen }
						sheetView.Append(pane)
						sheetViews.Append(sheetView)
						WS.Append(sheetViews)
					End If					

					' CREATE SHEET DATA AND APPEND TO WORKSHEET
					Dim WSD As New SheetData()
					WS.Append(WSD)
					WSP.Worksheet = WS
	                Dim SHS As Sheets = WB.WorkbookPart.Workbook.GetFirstChild(Of Sheets)
	                Dim rID As String = WB.WorkbookPart.GetIdOfPart(WSP)
	                Dim SH As Sheet = New Sheet
	                SH.Id = WB.WorkbookPart.GetIdOfPart(WSP)
	                SH.SheetId = SheetID
	                SH.Name = dt.TableName
	                SheetID = SheetID + 1
	                SHS.Append(SH)

					' HEADERS FROM COLUMN NAMES ==========================
	                Dim HR As Spreadsheet.Row = New Spreadsheet.Row
	                Dim columns As List(Of String) = New List(Of String)
	                For Each column As System.Data.DataColumn In dt.Columns
	                    columns.Add(column.ColumnName)
	                    Dim Cell As Spreadsheet.Cell = New Spreadsheet.Cell
	                    Cell.DataType = Spreadsheet.CellValues.String
						cell.StyleIndex = 3 'bold app names
	
						If Not dt.TableName.XFEqualsIgnoreCase(CubeCoverPageName) And Not dt.TableName.XFEqualsIgnoreCase(CubeOverviewPageName) And column.ColumnName.Trim = "" Then
							
							'TRY TO ADD LINK BACK TO APPROPRIATE APPLICATION CELL IN COLUMN A
							Dim foundReferenceCell As Boolean = False
							Dim rIndex As Integer = 1
							For Each _dr As DataRow In dtCubeCoverPage.Rows
								rIndex += 1
								If _dr(0).ToString = dt.TableName Then
									Dim newCellVal As New cellValue()
									Dim cellFormula As New CellFormula("Back") With { .Space = SpaceProcessingModeValues.Preserve }
									cellFormula.Text = $"HYPERLINK(""#'{CubeCoverPageName}'!A{rIndex}"",""Back"")"
									Cell.Append(cellFormula)
									Cell.Append(newCellVal)
									foundReferenceCell = True
									Exit For
								End If
							Next _dr
							
							'IF NO LINK WAS ADDED, ADD LINK BACK TO CELL A1
							If Not foundReferenceCell Then
								Dim newCellVal As New cellValue("Back")
								Dim cellFormula As New CellFormula() With { .Space = SpaceProcessingModeValues.Preserve }
								cellFormula.Text = $"HYPERLINK(""#'{CubeCoverPageName}'!A1"",""Back"")"
								Cell.Append(cellFormula)
								Cell.Append(newCellVal)								
							End If
						Else 
							If Not column.ColumnName.StartsWith("_") Then
	                    		Cell.CellValue = New Spreadsheet.CellValue(column.ColumnName)
								If Not dt.TableName.XFEqualsIgnoreCase(CubeOverviewPageName) And lstCubeIssues.contains($"{dt.TableName}|{column.ColumnName.Replace(".","")}") Then
									Cell.StyleIndex = 1 'yellow
								End If	
							End If
						End If
						
	                    HR.AppendChild(Cell)
	                Next
	                WSD.AppendChild(HR)
					
					' ROWS FROM ROW DATA =================================
					rCnt = 0
	                For Each dr As System.Data.DataRow In dt.Rows
						rCnt += 1 
	                    Dim newRow As Spreadsheet.Row = New Spreadsheet.Row
						colCnt = 0
	                    For Each col As String In columns
							colCnt +=1
							
							Dim Cell As Spreadsheet.Cell = New Spreadsheet.Cell
	                        Cell.DataType = Spreadsheet.CellValues.String
							
							'HYPERLINKS ON FIRST PAGE
							If dt.TableName = CubeCoverPageName And colCnt = 1 Then
								Dim newCellVal As New cellValue()
								newCellVal.Text = dr(col).ToString()								
								Dim cellFormula As New CellFormula() With { .Space = SpaceProcessingModeValues.Preserve } 
								cellFormula.Text = $"HYPERLINK(""#'{dr(col).ToString()}'!A1"",""{dr(col).ToString()}"")"
								Cell.Append(cellFormula)
								Cell.Append(newCellVal)	
								
							'FIRST PAGE, ONLY LIST NON-ZERO VALUES
							Else If dt.TableName = CubeCoverPageName Then
								If dr(col).ToString().Trim() <> "0" Then
									Cell.DataType = Spreadsheet.CellValues.Number
									Cell.CellValue = New Spreadsheet.CellValue(dr(col).ToString())
									'Cell.StyleIndex = 2 'light yellow
								End If
								
							'Else If dt.TableName.XFEqualsIgnoreCase(CubeOverviewPageName) And (colCnt = 1 Or rCnt <= 1) Then
								
								
							'REMAINING PAGES, BOLD TOP 2 ROWS
							Else If Not dt.TableName.XFEqualsIgnoreCase(CubeCoverPageName) And Not dt.TableName.XFEqualsIgnoreCase(CubeOverviewPageName) And (colCnt = 1 Or rCnt <= 1) Then
								Cell.CellValue = New Spreadsheet.CellValue(dr(col).ToString())
								Cell.StyleIndex = 3 'bold
								
							'FLAG NON-DEFAULT DIMS ON DIFFERENT SCENARIOS WITH LIGHT YELLOW
							Else If _
								Not dt.TableName.XFEqualsIgnoreCase(CubeCoverPageName) _
								And Not dt.TableName.XFEqualsIgnoreCase(CubeOverviewPageName) _
								And col.StartsWith("_") _
								And dr(col).ToString() <> "" _
								And rCnt >=3 Then
									Cell.CellValue = New Spreadsheet.CellValue(dr(col).ToString())
									Cell.StyleIndex = 2 'light yellow	
								
							Else If _
								dt.TableName.XFEqualsIgnoreCase(CubeOverviewPageName) _
								And col.XFEqualsIgnoreCase("ScenarioType") _
								And Not dr(col).ToString.XFEqualsIgnoreCase("(Default)") Then
									Cell.CellValue = New Spreadsheet.CellValue(dr(col).ToString())
									Cell.StyleIndex = 2 'light yellow								
							Else
								Cell.CellValue = New Spreadsheet.CellValue(dr(col).ToString())
							End If
	                        newRow.AppendChild(Cell)
	                    Next
	                    WSD.AppendChild(newRow)
	                Next

	            Next
	            WBP.Workbook.Save()

	            ' Close the document.
	            WB.Close()
	        Catch ex As Exception
	            Throw New Exception(ex.Message, ex)
	        End Try
    	End Sub	
		Private Sub CreateExcelDimDoc(ByVal si As sessioninfo, ByVal ds As DataSet, ByVal sFilename As String)
	        Try
				'Creates the excel document using OpenXML
				
				log(si,$"Dim Doc Dataset has {ds.Tables.Count} tables")
				
	            Dim WB As SpreadsheetDocument = SpreadsheetDocument.Create(sFilename, SpreadsheetDocumentType.Workbook)

	            ' Add a WorkbookPart to the document.
	            Dim WBP As WorkbookPart = WB.AddWorkbookPart

	            WBP.Workbook = New Workbook
	            WB.WorkbookPart.Workbook.Sheets = New Spreadsheet.Sheets
				
	        #Region "STYLES"

	            Dim stylesPart = WB.WorkbookPart.AddNewPart(Of WorkbookStylesPart)
	            stylesPart.Stylesheet = New Stylesheet()
				
				'bold font
				Dim fontBold As New Font() With { .bold = New Bold() }
				
	            stylesPart.Stylesheet.Fonts = New Fonts()
	            stylesPart.Stylesheet.Fonts.Count = 2
	            stylesPart.Stylesheet.Fonts.AppendChild(New Font())
				stylesPart.Stylesheet.Fonts.AppendChild(fontBold)


	            stylesPart.Stylesheet.Fills = New Fills()

	            Dim req1PF As New PatternFill With {.PatternType = PatternValues.None}
	            Dim req2PF As New PatternFill With {.PatternType = PatternValues.Gray125}

	            Dim solidYellowPF As New PatternFill With {.PatternType = PatternValues.Solid}
	            solidYellowPF.ForegroundColor = New ForegroundColor With {.Rgb = HexBinaryValue.FromString("FFEEFF00")}
	            solidYellowPF.BackgroundColor = New BackgroundColor With {.Indexed = 64}
				

	            Dim solidPeachPF As New PatternFill With {.PatternType = PatternValues.Solid}
	            solidPeachPF.ForegroundColor = New ForegroundColor With {.Rgb = HexBinaryValue.FromString("FFFCECD7")}
	            solidPeachPF.BackgroundColor = New BackgroundColor With {.Indexed = 64}	
				
	            Dim stdPF As New PatternFill With {.PatternType = PatternValues.Solid}
	            stdPF.ForegroundColor = New ForegroundColor With {.Rgb = HexBinaryValue.FromString("FFD9DFFA")}
	            stdPF.BackgroundColor = New BackgroundColor With {.Indexed = 64}			
				
	            Dim lightYellowPF As New PatternFill With {.PatternType = PatternValues.Solid}
	            lightYellowPF.ForegroundColor = New ForegroundColor With {.Rgb = HexBinaryValue.FromString("FFF9FF9E")}
	            lightYellowPF.BackgroundColor = New BackgroundColor With {.Indexed = 64}						

	            stylesPart.Stylesheet.Fills.AppendChild(New Fill With {.PatternFill = req1PF})
	            stylesPart.Stylesheet.Fills.AppendChild(New Fill With {.PatternFill = req2PF})
	            stylesPart.Stylesheet.Fills.AppendChild(New Fill With {.PatternFill = solidYellowPF})
				stylesPart.Stylesheet.Fills.AppendChild(New Fill With {.PatternFill = solidPeachPF})
				stylesPart.Stylesheet.Fills.AppendChild(New Fill With {.PatternFill = stdPF})
				stylesPart.Stylesheet.Fills.AppendChild(New Fill With {.PatternFill = lightYellowPF})
	            stylesPart.Stylesheet.Fills.Count = 5

	            'blank border list
	            stylesPart.Stylesheet.Borders = New Borders()
	            stylesPart.Stylesheet.Borders.Count = 1
	            stylesPart.Stylesheet.Borders.AppendChild(New Border())

	            'blank cell format list
	            stylesPart.Stylesheet.CellStyleFormats = New CellStyleFormats()
	            stylesPart.Stylesheet.CellStyleFormats.Count = 1
	            stylesPart.Stylesheet.CellStyleFormats.AppendChild(New CellFormat())

	            'cell format list
	            stylesPart.Stylesheet.CellFormats = New CellFormats()
	            ' empty one for index 0, seems to be required
	            stylesPart.Stylesheet.CellFormats.AppendChild(New CellFormat())

	            ' cell format references style format 0, font 0, border 0, fill 2 And applies the fill
				
				'1 - yellow fill
	            stylesPart.Stylesheet.CellFormats.AppendChild(New CellFormat With {.FormatId = 0, .FontId = 0, .BorderId = 0, .FillId = 2, .ApplyFill = True}).AppendChild(New Alignment With {.Horizontal = HorizontalAlignmentValues.Left})            
				'2 - bold
				stylesPart.Stylesheet.CellFormats.AppendChild(New CellFormat() With  { .FontId = 1 })	
				'3 - peach fill
				stylesPart.Stylesheet.CellFormats.AppendChild(New CellFormat() With {.FIllId = 3})
				'4 - std fill and bold
				stylesPart.Stylesheet.CellFormats.AppendChild(New CellFormat() With { .FontId = 1, .FIllId = 4})
				'5 - std fill
				stylesPart.Stylesheet.CellFormats.AppendChild(New CellFormat() With { .FIllId = 4 })
				'6 - light yellow
				stylesPart.Stylesheet.CellFormats.AppendChild(New CellFormat() With { .FIllId = 5 })
				
				stylesPart.Stylesheet.CellFormats.Count = 6

	            stylesPart.Stylesheet.Save()
				
			'END STYLES REGION
            #End Region 
				
				Dim dimType As String = ""
				Dim rCnt As Integer = 0
				Dim colCnt As Integer = 0
	            Dim SheetID As Int32 = 1
				
	            ' Append a new worksheet and associate it with the workbook.
	            For Each dt As DataTable In ds.Tables
					
					' Add a WorksheetPart to the WorkbookPart.
	                Dim WSP As WorksheetPart = WBP.AddNewPart(Of WorksheetPart)()
					Dim WS As New Worksheet()
					
					' FREEZE PANES
					If dt.TableName = DimCoverPageName Then
						Dim sheetViews As New SheetViews()
						Dim sheetView As New SheetView() With { .TabSelected = False, .WorkbookViewId = CType(0UI, UInt32Value) }
						Dim pane As New Pane() With { .VerticalSplit = 1D,  .HorizontalSplit = 1D, .TopLeftCell = "B2", .ActivePane = PaneValues.BottomLeft, .State = PaneStateValues.Frozen }
						sheetView.Append(pane)
						sheetViews.Append(sheetView)
						WS.Append(sheetViews)
					Else
						Dim sheetViews As New SheetViews()
						Dim sheetView As New SheetView() With { .TabSelected = False, .WorkbookViewId = CType(0UI, UInt32Value) }
						Dim pane As New Pane() With { .VerticalSplit = 1D, .TopLeftCell = "A2", .ActivePane = PaneValues.BottomLeft, .State = PaneStateValues.Frozen }
						sheetView.Append(pane)
						sheetViews.Append(sheetView)
						WS.Append(sheetViews)						
					End If					

					' CREATE SHEET DATA AND APPEND TO WORKSHEET
					Dim WSD As New SheetData()
					WS.Append(WSD)
					WSP.Worksheet = WS
	                Dim SHS As Sheets = WB.WorkbookPart.Workbook.GetFirstChild(Of Sheets)
	                Dim rID As String = WB.WorkbookPart.GetIdOfPart(WSP)
	                Dim SH As Sheet = New Sheet
	                SH.Id = WB.WorkbookPart.GetIdOfPart(WSP)
	                SH.SheetId = SheetID
	                SH.Name = dt.TableName
	                SheetID = SheetID + 1
	                SHS.Append(SH)

					'HEADERS FROM COLUMN NAMES
					Dim cCnt As Integer = -2
	                Dim HR As Spreadsheet.Row = New Spreadsheet.Row
	                Dim columns As List(Of String) = New List(Of String)
	                For Each column As System.Data.DataColumn In dt.Columns
						cCnt += 1
	                    columns.Add(column.ColumnName)
	                    Dim Cell As Spreadsheet.Cell = New Spreadsheet.Cell
	                    Cell.DataType = Spreadsheet.CellValues.String
						Cell.StyleIndex = 2 'bold app names
						'Cell.CellValue = New Spreadsheet.CellValue(column.ColumnName)
						
						If dt.TableName <> DimCoverPageName Then
							Dim newCellVal As New cellValue()
							newCellVal.Text = column.ColumnName
							Dim cellFormula As New CellFormula() With { .Space = SpaceProcessingModeValues.Preserve }
							cellFormula.Text = $"HYPERLINK(""#'{DimCoverPageName}'!A1"",""{column.ColumnName}"")"
							Cell.Append(cellFormula)
							Cell.Append(newCellVal)
						Else If appStandards.contains(column.ColumnName) Then
							If column.ColumnName.Trim() <> ""
								Cell.CellValue = New Spreadsheet.CellValue("(" & cCnt & ") " & column.ColumnName)
							Else
								Cell.CellValue = New Spreadsheet.CellValue("")
							End If
							Cell.StyleIndex = 4
						Else
							If column.ColumnName.Trim() <> ""
								Cell.CellValue = New Spreadsheet.CellValue("(" & cCnt & ") " & column.ColumnName)
							Else
								Cell.CellValue = New Spreadsheet.CellValue("")
							End If
						End If
						
	                    HR.AppendChild(Cell)
	                Next
	                WSD.AppendChild(HR)
					
					' GET A LIST OF MISSING MEMBERS AND EXTRA MEMBERS
					Dim missingMembers As New List(Of String)
					If missingMembersByTabName.ContainsKey(dt.TableName) Then
						missingMembers = missingMembersByTabName(dt.TableName)
					End If
					
					Dim extraMembers As New List(Of String)
					If extraMembersByTabName.ContainsKey(dt.TableName) Then
						extraMembers = extraMembersByTabName(dt.TableName)
					End If
					
					' ROWS FROM ROW DATA
					rCnt = 0
	                For Each dr As System.Data.DataRow In dt.Rows
						rCnt += 1 
	                    Dim newRow As Spreadsheet.Row = New Spreadsheet.Row
						colCnt = 0
	                    For Each col As String In columns
							colCnt +=1
							
							Dim Cell As Spreadsheet.Cell = New Spreadsheet.Cell
	                        Cell.DataType = Spreadsheet.CellValues.String
							'Cell.CellValue = New Spreadsheet.CellValue(dr(col).ToString())
							
							Dim newCellVal As New cellValue()
							newCellVal.Text = dr(col).ToString()
							
							Dim trgTableName As String = ""
							If dt.TableName = DimCoverPageName And colCnt > 1 Then
							 	trgTableName = GetDimFindingTblNm(si,col,dr(col).ToString())
							End If
							
							'Bold first column of main tab
							If dt.TableName = DimCoverPageName And colCnt = 1 Then
								If dimType <> dr(col).ToString() And dr(col).ToString() <> "" Then
									Cell.CellValue = New Spreadsheet.CellValue(dr(col).ToString())
									dimType = dr(col).ToString()
									Cell.StyleIndex = 2 'bold
								End If
							
							'Color standard application columns
							Else If appStandards.contains(col) Then
								Cell.CellValue = New Spreadsheet.CellValue(dr(col).ToString())
								Cell.StyleIndex = 5 'std fill
								
							'Highlight dims that don't exist in the stanard app
							Else If dt.TableName = DimCoverPageName And Not DimExistsInStandard(si,col,dr(col).ToString()) Then
								Cell.CellValue = New Spreadsheet.CellValue(dr(col).ToString())
								Cell.StyleIndex = 3 'peach fill								
								
							' YELLOW FILL WITH HYPERLINK FOR DIMENSIONS WITH ISSUES
'							Else If dt.TableName = DimCoverPageName And Not DimsMatch(si, col, dr(col).ToString()) Then
							Else If dt.TableName = DimCoverPageName And trgTableName <> "" Then
								Cell.StyleIndex = 1 'yellow fill 
								'hyperlink to specific sheet
								Dim cellFormula As New CellFormula() With { .Space = SpaceProcessingModeValues.Preserve } 
								'Dim targetTabName
								'Dim targetTabName As String = $"{col.replace(".","")}|{dr(col).ToString.replace(".","")}"
								'If targetTabName.Length > 31 Then targetTabName = targetTabName.SubString(0,30)
								cellFormula.Text = $"HYPERLINK(""#'{trgTableName}'!A1"",""{dr(col).ToString()}"")"
								Cell.Append(cellFormula)
								Cell.Append(newCellVal)
								
							'members are ok, but there is an order issue	
							Else If dt.TableName = DimCoverPageName And HasOrderIssue(si,trgTableName) Then
								Cell.StyleIndex = 1 'yellow fill 
								Cell.CellValue = New Spreadsheet.CellValue(dr(col).ToString())
							


							Else If dt.TableName <> DimCoverPageName And colCnt=2 And missingMembers.Contains(dr(col).ToString())  'HighlightMbrDiff(si,dr(col).ToString(),dt.TableName)
								Cell.StyleIndex = 6 'light yellow fill 
								Cell.CellValue = New Spreadsheet.CellValue(dr(col).ToString())	
								
							Else If dt.TableName <> DimCoverPageName And colCnt=6 And extraMembers.Contains(dr(col).ToString())  'HighlightMbrDiff(si,dr(col).ToString(),dt.TableName)
								Cell.StyleIndex = 6 'light yellow fill 
								Cell.CellValue = New Spreadsheet.CellValue(dr(col).ToString())	
																
								
							'fill in the 8th column yellow on the dimension compare tabs
							Else If dt.TableName <> DimCoverPageName And colCnt <= 4 Then
								Cell.StyleIndex = 5 'std fill
								Cell.CellValue = New Spreadsheet.CellValue(dr(col).ToString())								

							' BOLD VALUES STARTING WITH ROOT 
'							Else If dt.TableName = ExtensibilityCoverPageName And dr(col).ToString().ToLower().StartsWith("root") Then
'								Cell.CellValue = New Spreadsheet.CellValue(dr(col).ToString())
'								Cell.StyleIndex = 2
								
							' OTHERWISE SET VALUE ONLY
							Else
								Cell.CellValue = New Spreadsheet.CellValue(dr(col).ToString())
							End If

	                        newRow.AppendChild(Cell)
	                    Next
	                    WSD.AppendChild(newRow)
	                Next

	            Next
	            WBP.Workbook.Save()

	            ' Close the document.
	            WB.Close()
	        Catch ex As Exception
	            Throw New Exception(ex.Message, ex)
	        End Try
    	End Sub


#Region "Log"
		Sub log(ByVal si As SessionInfo, ByVal logLineEntry As String)
			If DEBUG Then
				_log += vbnewline & logLineEntry
			End If
		End Sub
#End Region
	End Class
	
#Region "Custom Class DimListByDimTypeAndApp"
	Public Class DimListByDimTypeAndApp
		Public Sub New(_appName As String, _dimType As String, _dimNames As List(Of String),_dims As List(Of OneStream.Shared.Wcf.Dim),_dimsHTML As String)
			Me.AppName = _appName
			Me.DimType = _dimType
			Me.DimNames = _dimNames
			Me.Dims = _dims
			Me.DimOrderedList = _dimsHTML
		End Sub
		Public Property AppName As String
		Public Property DimType As String
		Public Property DimNames As List(Of String)
		Public Property Dims As List(Of  OneStream.Shared.Wcf.Dim)
		Public Property DimOrderedList As String
	End Class
#End Region

End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="XFR_ExecuteBatchFileLoad">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports System.Net.Mail
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.XFR_ExecuteBatchFileLoad
	Public Class MainClass
		'------------------------------------------------------------------------------------------------------------
		'Reference Code: 		XFR_ExecuteBatchFileLoad 
		'
		'Description:			Extender buiness rule that executes a batch file load from the Harvest folder in the fileshare. 
		'
		'Data Mgmt Parameters:	CurScenario=[Actual], CurTime=[2011M3], ValTransform=[True], ValIntersect=[True], LoadCube=[True], ProcessCube=[True], Confirm=[True], AutoCertify=[True], ParallelGroups=[2] 
		'				
		'Created By:			Tom Shea
		'Date Created:			2-2-2016
		'------------------------------------------------------------------------------------------------------------
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				'Define the required parameters
				Dim currentScenario As String = String.Empty
				Dim currentTime As String = String.Empty				
				Dim valTransform As Boolean = True
				Dim valIntersect As Boolean = True
				Dim loadCube As Boolean = False
				Dim processCube As Boolean = False
				Dim confirm As Boolean = False
				Dim autoCertify As Boolean = False														
				Dim parallelFileGroups As Integer = 1				
				
				Select Case args.FunctionType					
					Case Is = ExtenderFunctionType.Unknown
						BRAPi.ErrorLog.LogMessage(si, "Executing from BizRuleEditor")
						'Use hard coded parameters when executing from business rule editor
						currentScenario = "Plan_Working"
						'currentScenario = "Plan_Working"
						currentTime = "2023"
						valTransform = True
						valIntersect = True
						loadCube = True
						processCube = True
						confirm = False
						autoCertify = False														
						parallelFileGroups = 1				
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep			
						'Get the parameters supplied by the Data Management Job
						BRAPi.ErrorLog.LogMessage(si, "Executing from DataMgmtJob")
						currentScenario = args.NameValuePairs.XFGetValue("CurScenario")
						currentTime = args.NameValuePairs.XFGetValue("CurTime")
						valTransform = ConvertHelper.ToBoolean(args.NameValuePairs.XFGetValue("ValTransform", "True"))
						valIntersect = ConvertHelper.ToBoolean(args.NameValuePairs.XFGetValue("ValIntersect", "True"))
						loadCube = ConvertHelper.ToBoolean(args.NameValuePairs.XFGetValue("LoadCube", "False"))
						processCube = ConvertHelper.ToBoolean(args.NameValuePairs.XFGetValue("ProcessCube", "False"))
						confirm = ConvertHelper.ToBoolean(args.NameValuePairs.XFGetValue("Confirm", "False"))
						autoCertify  = ConvertHelper.ToBoolean(args.NameValuePairs.XFGetValue("AutoCertify", "False"))														
						parallelFileGroups = ConvertHelper.ToInt32(args.NameValuePairs.XFGetValue("ParallelGroups", "1"))						
				End Select
							
				'Execute Batch 
				BRAPi.ErrorLog.LogMessage(si, "currentScenario:" & currentScenario)
				BRAPi.ErrorLog.LogMessage(si, "currentTime:" & currentTime)
				'Dim batchInfo As WorkflowBatchFileCollection = BRAPi.Utilities.ExecuteFileHarvestBatchParallel(si, currentScenario, currentTime, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, parallelFileGroups)
				Dim batchInfo As WorkflowBatchFileCollection = BRAPi.Utilities.ExecuteFileHarvestBatchParallel(si, currentScenario, currentTime, valTransform, valIntersect, True, True, False, False, parallelFileGroups) 
				
				'Print batch messages
				BRAPi.ErrorLog.LogMessage(si, "BatchName:" & batchInfo.GetBatchName)				
				Dim batchTitleMsg As String = batchInfo.GetBatchTitleMessage
				BRAPi.ErrorLog.LogMessage(si, "batchTitleMsg:" & batchTitleMsg)
				Dim objTimeDimAppInfoEx As TimeDimAppInfoEx = BRApi.Finance.Time.GetTimeDimAppInfo(si)
				Dim batchStatusMsg As String = batchInfo.GetCompleteBatchStatusMessage(si, objTimeDimAppInfoEx, True, True)
				BRAPi.ErrorLog.LogMessage(si, "batchStatusMsg:" & batchStatusMsg)
				
				'Analyze other information in Batch Info Object
'				Dim properties = batchInfo.GetType().GetProperties()
'				For Each prop In properties
'					'Inspect all properties
'					BRAPi.ErrorLog.LogMessage(si, "BatchInfo property:" & prop.Name)
'				Next
				
				'Send the Batch results to the log
				If Not batchInfo Is Nothing Then
					'Me.SendMail(si, batchInfo.GetBatchTitleMessage, batchInfo.GetCompleteBatchStatusMessage(si, True, True))
					BRAPi.ErrorLog.LogMessage(si, "Batch Execution OK")
				Else
					BRAPi.ErrorLog.LogMessage(si, "Batch Execution Failed")
					'Me.SendMail(si,"OneStream Batch Error Occured","OneStream Batch Error Occured")
				End If
				
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
#Region "General Helpers"

		Private Sub SendMail(ByVal si As SessionInfo, ByVal sSubject As String, ByVal sBody As String)
			Try
				'Connection to the mail server
				Using SmtpServer As New SmtpClient()
					'SmtpServer.Credentials = New Net.NetworkCredential("Support@OneStreamSoftware.com", "Onestream64")
					SmtpServer.Port = "25"
					'SmtpServer.EnableSSL = True
					SmtpServer.Host = "brayrelaysmtp.bray.com"
									
					'Create the message
					Using mail As New MailMessage()
						mail.From = New MailAddress("finance@bray.com")
						mail.To.Add("valerie.york@hollandparker.com")
						mail.Subject = sSubject
						mail.Body = sBody
						
						'Send the message (Without Attachment)
						SmtpServer.Send(mail)
						
					End Using
				End Using
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
#End Region
		
	End Class
End Namespace]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="XFR_ExportAppMetadata">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.XFR_ExportAppMetadata
	Public Class MainClass
		'------------------------------------------------------------------------------------------------------------
		'Reference Code: 	XFR_ExportAppMetadata 
		'
		'Description:		Extender buiness rule that all application metadata to a zip file for the current application. 
		'					The files are written to the application Data Mgmt Export folder in the file share directory.
		'
		'Usage:				Can be executed from Business Rule editor or run as part of a Data Management sequence. 
		'				
		'Created By:		Tom Shea
		'Date Created:		6-26-2013
		'------------------------------------------------------------------------------------------------------------		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType					
					Case Is = ExtenderFunctionType.Unknown, ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						'Prepare the Stage Data Extract File path
						Dim configSettings as AppServerConfigSettings = AppServerConfig.GetSettings(si)
						Dim folderPath As String = FileShareFolderHelper.GetDataManagementExportUsernameFolderForApp(si, True, configSettings.FileShareRootFolder, si.AppToken.AppName) & "\" & DateTime.UtcNow.ToString("yyyyMMdd") & "\MetadataExtracts"
						
						If Not Directory.Exists(folderPath) Then Directory.CreateDirectory(folderPath)
						Dim filePath As String = folderPath & "\" & si.AppToken.AppName & ".zip"				
						If File.Exists(filePath) Then File.Delete(filePath)

						'Set the extract options
						Dim xmlOptions as New XmlExtractOptions
						xmlOptions.ExtractAllItems = True
						
						'Execute the Metadata Extract
						Using dbConnFW As DBConnInfo = BRAPi.Database.CreateFrameworkDbConnInfo(si)
							Using dbConnApp As DBConnInfo = BRAPi.Database.CreateApplicationDbConnInfo(si)
								Dim zipBytes As Byte() = ApplicationZipFileHelper.Extract(dbConnFW, dbConnApp, Nothing, xmlOptions)
								'Append the contents of this workflow profile to the extract file			            
								Using FS As New FileStream(filePath, FileMode.Append, FileAccess.Write)			
									'Create a binary writer, and write all bytes to the FileStream at once
					                Using BW As New BinaryWriter(FS)
					                    BW.Write(zipBytes)
					                End Using
								End Using
							End Using
						End Using
												
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="XFR_ExportStageArchives">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.XFR_ExportStageArchives
	Public Class MainClass
		'------------------------------------------------------------------------------------------------------------
		'Reference Code: 	XFR_ExportStageArchives 
		'
		'Description:		Extender buiness rule that exports the stage archive files for all import child workflow 
		'					profiles of the specified parent workflow profile.  The files are written to the application 
		'					Data Mgmt Export folder in the file share directory.
		'
		'Usage:				Can be executed from Business Rule editor or run as part of a Data Management sequence. 
		'					Note: If called from a Data Management sequence,  the business rule step must supply 3 
		'					paramaters named as follows (WfProfileName, ScenarioName, TimeName)
		'				
		'Created By:		Tom Shea
		'Date Created:		5-9-2013
		'------------------------------------------------------------------------------------------------------------		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				'Define the workflow cluster used as the starting point to extract from
				Dim wfClusterPk as New WorkflowUnitClusterPk
				Dim wfProfileName as String = String.Empty
				Dim scenarioName as String = String.Empty
				Dim timeName as String = String.Empty
				
				Select Case args.FunctionType					
					Case Is = ExtenderFunctionType.Unknown
						'Set the parent workflow unit to extract input profiles for							
						wfProfileName = "FCST_eCF_Adj"'"Houston"
						scenarioName = "Forecast"
						timeName = "2021M4"
						wfClusterPk = BRAPi.Workflow.General.GetWorkflowUnitClusterPk(si, wfProfileName, scenarioName, timeName)						
		
					Case is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						'Since this is being called from a DataManagement job, get the wfCluster from the parameters defined in the DataMgmt sequence
						wfProfileName = args.NameValuePairs("WfProfileName")
						scenarioName = args.NameValuePairs("ScenarioName")
						timeName = args.NameValuePairs("TimeName")
						wfClusterPk = BRAPi.Workflow.General.GetWorkflowUnitClusterPk(si, wfProfileName, scenarioName, timeName)						
				End Select
				
				'Prepare the Stage Data Extract File path
				Dim configSettings as AppServerConfigSettings = AppServerConfig.GetSettings(si)
				Dim folderPath as String = FileShareFolderHelper.GetDataManagementExportUsernameFolderForApp(si, True, configSettings.FileShareRootFolder, si.AppToken.AppName) & "\" & DateTime.UtcNow.ToString("yyyyMMdd") & "\StageArchives\" & scenarioName & "\" & timeName
				if Not Directory.Exists(folderPath) then Directory.CreateDirectory(folderPath)
				brapi.ErrorLog.LogMessage(si,$"folderPath : {folderPath}")				
				'Export data for each descendant workflow profile
				Dim profileInfos as List(Of WorkflowProfileInfo) = BRAPi.Workflow.Metadata.GetRelatives(si, wfClusterPk, WorkflowProfileRelativeTypes.Descendants, WorkflowProfileTypes.InputImportChild)
				If Not profileInfos is Nothing then
					For Each profileInfo As WorkflowProfileInfo In profileInfos		
						Dim wfClusterPkChild As New WorkflowUnitClusterPk(profileInfo.ProfileKey, wfClusterPk.ScenarioKey, wfClusterPk.TimeKey)
						BRAPi.Import.Data.ExportStageArchives(si, wfClusterPkChild, folderPath, False)
					Next
				End If

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function				
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="XFR_ExtractSecurityXML">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.XFR_ExtractSecurityXML
	Public Class MainClass
		
		'------------------------------------------------------------------------------------------------------------
		'Reference Code: 	XFR_ExtractSecurityXML
		'
		'Description:		Executes Security Extract and produces XML file.
		'					The file is written to the application Data Mgmt Export folder in the file share directory.
		'
		'Usage:				Can be executed from Business Rule editor or run as part of a Data Management sequence. 
		'				
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType					
					Case Is = ExtenderFunctionType.Unknown, ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						'Prepare the Extract File path
						Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
						
						' Data management extract location
						Dim folderPath As String = FileShareFolderHelper.GetContentsFolderForApp(si, True, configSettings.FileShareRootFolder, si.AppToken.AppName)&"\SecurityBackup" & "\" & DateTime.UtcNow.ToString("yyyyMMdd") & "\Extracts"
						
						' if the diirectory does not exist create.
						If Not Directory.Exists(folderPath) Then Directory.CreateDirectory(folderPath)
						
						' full path and file name for extract
						Dim filePath As String = folderPath & "\Security.xml"
						brapi.ErrorLog.LogMessage(si,filePath)
						
						' if file already exists
						If File.Exists(filePath) Then File.Delete(filePath)
													
						' Extract options
						Dim xmlOptions As New XmlExtractOptions
						
						' extract all Security items
               			xmlOptions.ExtractAllItems = True
						
						' extract type information
						Dim extractDict As New Dictionary(Of XmlExtractItemPk, Boolean)
						
						' To Extract specific users (similar concept for groups)
						'xmlOptions.ExtractAllItems = False
						
						' Get User
						'Dim usrInfo As UserInfo = BRApi.Security.Authorization.GetUser(si, "John Goodwin")
						
						' extract specific user
						'extractDict.Add(New XmlExtractItemPk(XmlExtractItemType.Users), True)
						'extractDict.Add(New XmlExtractItemPk(XmlExtractItemType.User,usrInfo.User.UniqueID), True)

						
						'Execute the Security Extract
						Using dbConnFW As DBConnInfo = BRAPi.Database.CreateFrameworkDbConnInfo(si)
								
								' extract Security XML to target location
								File.WriteAllText(filePath,SystemXmlExtract.ExtractXML(dbConnFW, xmlOptions, extractDict))

						End Using
				End Select
				
				Return Nothing
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="XFR_OptimizePartitionedTableLockEscalation">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.XFR_OptimizePartitionedTableLockEscalation
	Public Class MainClass
		'------------------------------------------------------------------------------------------------------------
		'Reference Code: 	XFR_OptimizeStageViews 
		'
		'Description:		Optimize stage views that join Source / Target / attribute tables to enable SQL Server Query
		'					to narrow query scope down to table partition and clustered index.
		'
		'Usage:				Can be executed from Business Rule editor or run as part of a Data Management sequence. 
		'				
		'Created By:		Tom Shea
		'Date Created:		5-14-2020
		'------------------------------------------------------------------------------------------------------------				
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType					
					Case Is = ExtenderFunctionType.Unknown
						'Optimize View
						Dim autoEscalate As String = "AUTO"
						Dim tableEscalate As String = "TABLE"
						Me.SetLockEscalation(si, autoEscalate)
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Sub SetLockEscalation(ByVal si As SessionInfo, ByVal escalationType As String)
			Try

				'Define Optimized View (Source and Target)
				Dim ddl As New Text.StringBuilder				
				'Partitioned Stage Tables
				ddl.AppendLine("ALTER TABLE [StageArchivesInformation] SET (LOCK_ESCALATION = " & escalationType & ")")
				ddl.AppendLine("ALTER TABLE [StageSourceData] SET (LOCK_ESCALATION = " & escalationType & ")")
				ddl.AppendLine("ALTER TABLE [StageTargetData] SET (LOCK_ESCALATION = " & escalationType & ")")
				ddl.AppendLine("ALTER TABLE [StageAttributeData] SET (LOCK_ESCALATION = " & escalationType & ")")			
				ddl.AppendLine("ALTER TABLE [StageSummaryTargetData] SET (LOCK_ESCALATION = " & escalationType & ")")
				ddl.AppendLine("ALTER TABLE [StageToFinanceLoadResult] SET (LOCK_ESCALATION = " & escalationType & ")")
				ddl.AppendLine("ALTER TABLE [StageToFinanceValidationError] SET (LOCK_ESCALATION = " & escalationType & ")")				
				ddl.AppendLine("ALTER TABLE [StageRuleGroupsHistory] SET (LOCK_ESCALATION = " & escalationType & ")")
				ddl.AppendLine("ALTER TABLE [StageRuleProfileMembersHistory] SET (LOCK_ESCALATION = " & escalationType & ")")
				ddl.AppendLine("ALTER TABLE [StageRuleProfilesHistory] SET (LOCK_ESCALATION = " & escalationType & ")")
				ddl.AppendLine("ALTER TABLE [StageRulesHistory] SET (LOCK_ESCALATION = " & escalationType & ")")
				
				'Partitioned Finance Tables
				ddl.AppendLine("ALTER TABLE [DataUnitCacheTimestamp] SET (LOCK_ESCALATION = " & escalationType & ")")
				For y As Integer= 1996 To 2100
					ddl.AppendLine("ALTER TABLE [DataRecord" & y.ToString("g") & "] SET (LOCK_ESCALATION = " & escalationType & ")")
					ddl.AppendLine("ALTER TABLE [BinaryData" & y.ToString("g") & "] SET (LOCK_ESCALATION = " & escalationType & ")")	
				Next			
				
				'Update the Tables			 
				Using dbConnApp As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					BRApi.Database.ExecuteActionQuery(dbConnApp, ddl.ToString, False, True)
				End Using				
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="XFR_OptimizeStageViews">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.XFR_OptimizeStageViews
	Public Class MainClass
		'------------------------------------------------------------------------------------------------------------
		'Reference Code: 	XFR_OptimizeStageViews 
		'
		'Description:		Optimize stage views that join Source / Target / attribute tables to enable SQL Server Query
		'					to narrow query scope down to table partition and clustered index.
		'
		'Usage:				Can be executed from Business Rule editor or run as part of a Data Management sequence. 
		'				
		'Created By:		Tom Shea
		'Date Created:		5-14-2020
		'------------------------------------------------------------------------------------------------------------				
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType					
					Case Is = ExtenderFunctionType.Unknown
						'Optimize View
						Me.OptimizeStageSourceTarget(si)
						Me.OptimizeStageSourceTargetAttribute(si)
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Sub OptimizeStageSourceTarget(ByVal si As SessionInfo)
			Try

				'Define Optimized View (Source and Target)
				Dim ddl As New Text.StringBuilder				
				ddl.Append("ALTER VIEW [vStageSourceAndTargetData] ")
				ddl.Append("As ")
				ddl.Append("Select StageSourceData.Wfk, StageSourceData.Wsk, StageSourceData.Wtk, StageSourceData.Fak, StageSourceData.Ri, StageSourceData.Rt, StageSourceData.Si, StageSourceData.Lb, StageSourceData.Tv, StageSourceData.Et, StageTargetData.EtT, StageTargetData.EtR, StageSourceData.Pr, StageTargetData.PrT, ") 
				         ddl.Append("StageTargetData.PrR, StageSourceData.Cn, StageTargetData.CnT, StageTargetData.CnR, StageSourceData.Vw, StageTargetData.VwT, StageTargetData.VwR, StageSourceData.Sn, StageTargetData.SnT, StageTargetData.SnR, StageSourceData.Tm, StageTargetData.TmT, StageTargetData.TmR, StageSourceData.Ac, ") 
				         ddl.Append("StageTargetData.AcT, StageTargetData.AcR, StageSourceData.Fw, StageTargetData.FwT, StageTargetData.FwR, StageSourceData.Og, StageTargetData.OgT, StageTargetData.OgR, StageSourceData.Ic, StageTargetData.IcT, StageTargetData.IcR, StageSourceData.U1, StageTargetData.U1T, StageTargetData.U1R, ") 
				         ddl.Append("StageSourceData.U2, StageTargetData.U2T, StageTargetData.U2R, StageSourceData.U3, StageTargetData.U3T, StageTargetData.U3R, StageSourceData.U4, StageTargetData.U4T, StageTargetData.U4R, StageSourceData.U5, StageTargetData.U5T, StageTargetData.U5R, StageSourceData.U6, StageTargetData.U6T, ") 
				         ddl.Append("StageTargetData.U6R, StageSourceData.U7, StageTargetData.U7T, StageTargetData.U7R, StageSourceData.U8, StageTargetData.U8T, StageTargetData.U8R, StageTargetData.Fs, StageSourceData.Am As RawAmount, ") 
				         ddl.Append("Case StageTargetData.FS When 0 Then StageSourceData.Am When 1 Then - 1 * StageSourceData.Am End As ConvertedAmount ")
				ddl.Append("From  StageSourceData INNER Join ")
				         ddl.Append("StageTargetData On StageSourceData.Wfk = StageTargetData.Wfk And StageSourceData.Wsk = StageTargetData.Wsk And StageSourceData.Wtk = StageTargetData.Wtk And StageSourceData.Ri = StageTargetData.Ri ")						 
						 
				'Update the View			 
				Using dbConnApp As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					BRApi.Database.ExecuteActionQuery(dbConnApp, ddl.ToString, False, True)
				End Using				
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		Public Sub OptimizeStageSourceTargetAttribute(ByVal si As SessionInfo)
			Try

				'Define Optimized View (Source, Target and attribute)
				Dim ddl As New Text.StringBuilder				
				ddl.Append("ALTER VIEW [vStageSourceAndTargetDataWithAttributes] ")
				ddl.Append("As ")
				ddl.Append("Select StageSourceData.Wfk, StageSourceData.Wsk, StageSourceData.Wtk, StageSourceData.Fak, StageSourceData.Ri, StageSourceData.Rt, StageSourceData.Si, StageSourceData.Lb, StageSourceData.Tv, StageSourceData.Et, StageTargetData.EtT, StageTargetData.EtR, StageSourceData.Pr, StageTargetData.PrT,  ")
				         ddl.Append("StageTargetData.PrR, StageSourceData.Cn, StageTargetData.CnT, StageTargetData.CnR, StageSourceData.Vw, StageTargetData.VwT, StageTargetData.VwR, StageSourceData.Sn, StageTargetData.SnT, StageTargetData.SnR, StageSourceData.Tm, StageTargetData.TmT, StageTargetData.TmR, StageSourceData.Ac, ")
				         ddl.Append("StageTargetData.AcT, StageTargetData.AcR, StageSourceData.Fw, StageTargetData.FwT, StageTargetData.FwR, StageSourceData.Og, StageTargetData.OgT, StageTargetData.OgR, StageSourceData.Ic, StageTargetData.IcT, StageTargetData.IcR, StageSourceData.U1, StageTargetData.U1T, StageTargetData.U1R, ") 
				         ddl.Append("StageSourceData.U2, StageTargetData.U2T, StageTargetData.U2R, StageSourceData.U3, StageTargetData.U3T, StageTargetData.U3R, StageSourceData.U4, StageTargetData.U4T, StageTargetData.U4R, StageSourceData.U5, StageTargetData.U5T, StageTargetData.U5R, StageSourceData.U6, StageTargetData.U6T, ") 
				         ddl.Append("StageTargetData.U6R, StageSourceData.U7, StageTargetData.U7T, StageTargetData.U7R, StageSourceData.U8, StageTargetData.U8T, StageTargetData.U8R, StageTargetData.Fs, StageSourceData.Am As RawAmount, ")
				         ddl.Append("Case StageTargetData.FS When 0 Then StageSourceData.Am When 1 Then - 1 * StageSourceData.Am End As ConvertedAmount, StageAttributeData.A1, StageAttributeData.A2, StageAttributeData.A3, StageAttributeData.A4, StageAttributeData.A5, StageAttributeData.A6, StageAttributeData.A7, StageAttributeData.A8, ") 
				         ddl.Append("StageAttributeData.A9, StageAttributeData.A10, StageAttributeData.A11, StageAttributeData.A12, StageAttributeData.A13, StageAttributeData.A14, StageAttributeData.A15, StageAttributeData.A16, StageAttributeData.A17, StageAttributeData.A18, StageAttributeData.A19, StageAttributeData.A20, StageAttributeData.V1, ") 
				         ddl.Append("StageAttributeData.V2, StageAttributeData.V3, StageAttributeData.V4, StageAttributeData.V5, StageAttributeData.V6, StageAttributeData.V7, StageAttributeData.V8, StageAttributeData.V9, StageAttributeData.V10, StageAttributeData.V11, StageAttributeData.V12 ")
				ddl.Append("From  StageSourceData INNER Join ")
				         ddl.Append("StageTargetData On StageSourceData.Wfk = StageTargetData.Wfk And StageSourceData.Wsk = StageTargetData.Wsk And StageSourceData.Wtk = StageTargetData.Wtk And StageSourceData.Ri = StageTargetData.Ri INNER Join ")
				         ddl.Append("StageAttributeData On StageSourceData.Wfk = StageAttributeData.Wfk And StageSourceData.Wsk = StageAttributeData.Wsk And StageSourceData.Wtk = StageAttributeData.Wtk And StageSourceData.Ri = StageAttributeData.Ri ")

				'Update the View			 
				Using dbConnApp As DbConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
					BRApi.Database.ExecuteActionQuery(dbConnApp, ddl.ToString, False, True)
				End Using				
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub		
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="XFR_Segment_ForecastWky_Log">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

#Region "Change Mgmt"
'----------------------------
'	20201001-WN-Create BR
'----------------------------
#End Region

Namespace OneStream.BusinessRule.Extender.XFR_Segment_ForecastWky_Log
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Dim DEBUG As Boolean = True
			If DEBUG Then BRAPI.ErrorLog.LogMessage(si,"Begin XFR_Segment_ForecastWky_Log")
			
			Try
				Select Case args.FunctionType					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						If DEBUG Then BRAPI.ErrorLog.LogMessage(si, "Begin ExecuteDataMgmtBusinessRuleStep")
						
						Dim paramSubmWeek As String = args.NameValuePairs("paramSubmWeek")
						Dim paramCostCenter As String = args.NameValuePairs("paramCostCenter")
						Dim paramActivity As String =  args.NameValuePairs("paramActivity")
								
						If DEBUG Then 
							BRAPi.ErrorLog.LogMessage(si, "paramSubmWeek " & paramSubmWeek)
							BRAPi.ErrorLog.LogMessage(si, "paramCostCenter " & paramCostCenter)
							BRAPi.ErrorLog.LogMessage(si, "paramActivity " & paramActivity)
						End If
						
						Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
							Try
								Dim sql As New Text.StringBuilder
								Dim wfClusterPk As New WorkflowUnitClusterPk(si.WorkflowClusterPk.ProfileKey, si.WorkflowClusterPk.ScenarioKey, si.WorkflowClusterPk.TimeKey)					
								Dim wfProfile As WorkflowProfileInfo = BRApi.Workflow.Metadata.GetProfile(si, si.WorkflowClusterPk.ProfileKey)
								Dim wfNameAndDescr = wfProfile.NameAndDescription
								Dim wfNameAndDescrArr As String() = wfNameAndDescr.Split(".")
								If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "wfNameAndDescrArr(0) " & wfNameAndDescrArr(0))
								Dim objUser As UserInfo = BRApi.Security.Authorization.GetUser(si, si.AuthToken.UserName)
								Dim sUserDescription As String = objUser.User.Description
								If DEBUG Then BRAPi.ErrorLog.LogMessage(si, "sUserDescription " & sUserDescription)
			
								sql.Clear
								sql.AppendLine("INSERT INTO [dbo].[XFT_ENS_Activity_AuditLog] ")
								sql.AppendLine("( ") 
								sql.AppendLine(" 	[Segment], [Activity], [SubmWeek], [CostCenter], [UserName], [UserDesc], [SubmTime] ") 
								sql.AppendLine(") ") 
								sql.AppendLine("VALUES ") 
								sql.AppendLine("( ") 
								sql.AppendLine("	'" & wfNameAndDescrArr(0) & "', '" & paramActivity & "', '" & paramSubmWeek & "', '" & paramCostCenter & "', '" & si.UserName & "', '" & sUserDescription & "', '" & DateTime.Now & "'" )
								sql.AppendLine(") ") 
								Try
									BRApi.Database.ExecuteActionQuery(dbConnApp, sql.ToString, False, False)
								Catch ex As Exception
									BRAPi.ErrorLog.LogMessage(si, "Cannot insert log row. SQL: " & sql.ToString & " Error:" & ex.Message)
									Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
								End Try		
							Catch ex As Exception
								Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
							End Try
						End Using	
						
						brapi.Dashboards.Parameters.SetLiteralParameterValue(si,False,"setParam_PlanScenario",paramSubmWeek)
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="XFT_Generate_SessionToken_forOtherApp">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.XFT_Generate_SessionToken_forOtherApp
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
						brapi.ErrorLog.LogMessage(si, "App UniqueID: " & si.AppUniqueID.ToString)
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="Z_Test_Delete">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.Z_Test_Delete
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
		
'			Dim vParams As New Dictionary(Of String, String)
'			vParams.Add("cfrScenario", "Actual")
'			vParams.Add("cfrTime", "2022")
'			vParams.Add("cfrflow", "Total_Flow")
'			vParams.Add("cfrud4", "Audit_Trail")
		
			Dim value As New NameValueFormatBuilder 
'			Dim instance As New XFIfActionExpr("CVFilter", value)
'			value = instance.NameValueFormatBuilder
'			value.ApplyNameValuePairsFromDictionary(vParams)
			Dim entityDimensionName As String = ""
			Dim entityMemFilter As String = ""
			Dim scenarioDimName As String = ""
			Dim scenarioMemFilter As String = ""
			Dim timeMemFilter As String = ""
			Dim includeCellTextCols As Boolean = False
			Dim useStandardFactTableFields As Boolean = True
			Dim useGenericTimeColNames As Boolean = True
			Dim parallelQueryCount As Integer = 8
			Dim logStatistics As Boolean = False
			Dim dt As DataTable = Nothing
			Try
				dt = BRApi.Import.Data.FdxExecuteCubeView(si, "Tech_Cap_Rates", entityDimensionName, entityMemFilter, scenarioDimName, scenarioMemFilter, timeMemFilter, value, includeCellTextCols, useStandardFactTableFields, "Entity = 'US07548'" , parallelQueryCount, logStatistics)
				
				Me.PrintDT(si,dt,"Cap_Rates")
				Return Nothing				
			Catch e As Exception
				Brapi.ErrorLog.LogMessage(si,"Error")
				Throw ErrorHandler.LogWrite(si, New XFException(si, e))
			End Try
End Function


 Private Sub PrintDT(ByVal si As SessionInfo, ByVal dt As DataTable, ByVal Desc As String)
            Try
                'Print Table
                Dim dtprint As New Text.StringBuilder
                For Each dc As DataColumn In dt.Columns
                    dtprint.Append(dc.ColumnName & ",")
                Next
                dtprint.Remove(dtprint.Length - 1, 1)
                dtprint.Append(Environment.NewLine)
                For Each dr As DataRow In dt.Rows
                    For Each dc As DataColumn In dt.Columns
                        dtprint.Append(dr(dc.ColumnName) & ",")
                    Next
                    dtprint.Remove(dtprint.Length - 1, 1)
                    dtprint.Append(Environment.NewLine)
                Next
                BRApi.ErrorLog.LogMessage(si, Desc, dtprint.ToString)
            Catch ex As Exception
                Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
            End Try
        End Sub

	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="zDev_WN_getDataSetFromCV">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

'Aanalysis and conversion tools
Imports System.Diagnostics.Stopwatch
Imports System.Xml.Xsl.XslTransform

Namespace OneStream.BusinessRule.Extender.zDev_WN_getDataSetFromCV
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Dim DEBUG As Boolean = True
			If DEBUG Then BRApi.ErrorLog.LogMessage(si, $"zDev_WN_getDataSetFromCV Main.")								
			Try
'				Select Case args.FunctionType					
'					Case Is = ExtenderFunctionType.Unknown						
'					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep											
'				End Select
				Dim params As New Dictionary(Of String, String)	
				Dim isSystemLevel As Boolean = False
				
				'Simulate running from a dashboard by setting the dashboard parameters in the business rule
				BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, isSystemLevel, "30_Segment_Entity", 	"Walmart_US")
				BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, isSystemLevel, "04b_Center_Type", 		"CT_Tot")
				BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, isSystemLevel, "05_Audit_Trail", 		"Ext_Adjusted")
				BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, isSystemLevel, "13_Time_Selection", 	"T#2021")
				BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, isSystemLevel, "11_TY_Scenario", 		"S#Wk01_CorpFcst")
				BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, isSystemLevel, "12_EFC_Scenario",		"S#Wk04_CorpFcst")
				
				'Retrieve dashboard parameters 
				'args.NameValuePairs.GetValueOrEmpty()
				'Dim parmX As String = args.NameValuePairs.GetValueOrEmpty()
				Dim parmEntity As String 		= BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, isSystemLevel, "30_Segment_Entity")
				Dim parmCenterType As String 	= BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, isSystemLevel, "04b_Center_Type")
				Dim parmAuditTrail As String 	= BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, isSystemLevel, "05_Audit_Trail")
				Dim parmTime As String 			= BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, isSystemLevel, "13_Time_Selection")
				Dim parmTYScenario As String 	= BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, isSystemLevel, "11_TY_Scenario")
				Dim parmEFCScenario As String 	= BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, isSystemLevel, "12_EFC_Scenario")
				
				If DEBUG Then 
					BRApi.ErrorLog.LogMessage(si, $"zDev_WN_getDataSetFromCV Main parmEntity {parmEntity}")
					BRApi.ErrorLog.LogMessage(si, $"zDev_WN_getDataSetFromCV Main parmCenterType {parmCenterType}")
					BRApi.ErrorLog.LogMessage(si, $"zDev_WN_getDataSetFromCV Main parmAuditTrail {parmAuditTrail}")
					BRApi.ErrorLog.LogMessage(si, $"zDev_WN_getDataSetFromCV Main parmTime {parmTime}")
					BRApi.ErrorLog.LogMessage(si, $"zDev_WN_getDataSetFromCV Main parmTYScenario {parmTYScenario}")
					BRApi.ErrorLog.LogMessage(si, $"zDev_WN_getDataSetFromCV Main parmEFCScenario {parmEFCScenario}")
				End If
													
				'Temp hard coded until above sections is filled in
				params.Add("30_Segment_Entity", 	"Walmart_US") 				'args.NameValuePairs("30_Segment_Entity"))
				params.Add("04b_Center_Type", 		"CT_Tot")					'args.NameValuePairs("04b_Center_Type"))
				params.Add("05_Audit_Trail", 		"Ext_Adjusted")				'args.NameValuePairs("05_Audit_Trail"))
				params.Add("11_TY_Scenario", 		"S#Wk01_CorpFcst")			'args.NameValuePairs("11_TY_Scenario"))
				params.Add("12_EFC_Scenario", 		"S#Wk04_CorpFcst") 			'args.NameValuePairs("12_EFC_Scenario"))
				params.Add("13_Time_Selection", 	"T#2021")					'args.NameValuePairs("13_Time_Selection"))
				
				'Actual parameter
				'									 S#|!11_TY_Scenario!|:Name(TY),GetDataCell(BWDiff(S#|!11_TY_Scenario!|,S#|!12_EFC_Scenario!|)):Name(   vs. Prior EFC),GetDataCell(BWDiff(S#|!11_TY_Scenario!|,S#Plan_Final)):Name(        vs. Plan),S#Actual:Name(            LY),GetDataCell(Variance(S#|!11_TY_Scenario!|,S#Actual)):Name(        vs. LY %)
				'temporarily solved manually but will become concatenated string. 
				'All custom names taken Out To see what app displays Out Of the box.
				Dim parm10 As New StringBuilder()
				parm10.Append("S#")
				params.Add("10_Scenario_Var_Hdrs", 	"S#CorpFcst_Wk01,GetDataCell(BWDiff(S#CorpFcst_Wk01,S#CorpFcst_Wk04)),GetDataCell(BWDiff(S#CorpFcst_Wk01,S#Plan_Final)),S#Actual,GetDataCell(Variance(S#CorpFcst_Wk01,S#Actual))")			
				
				Me.processCVDataSet(si, Me.GetCubeviewDataSet(si, "dA_CV_11 Net Income Detail Segments", params))				
				
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Sub processCVDataSet(ByVal si As SessionInfo, ByVal ds As DataSet)
			Dim DEBUG As Boolean = True
			BRApi.ErrorLog.LogMessage(si, $"zDev_WN_getDataSetFromCV processCVDataSet Begin process dataset {ds.DataSetName.ToString}")
			
			If DEBUG Then
				'Analyze dataset schema
				BRApi.ErrorLog.LogMessage(si, $"zDev_WN_getDataSetFromCV processCVDataSet XML Schema of dataset {ds.GetXmlSchema.ToString}")
				BRApi.ErrorLog.LogMessage(si, $"zDev_WN_getDataSetFromCV processCVDataSet XML of dataset {ds.GetXml.ToString}")
			End If
			
			'Process dataset
			For Each dt As DataTable In ds.Tables
				'''Each row is a Table and are named after the row name in the cube view
				If dt.TableName.XFContainsIgnoreCase("Blank") Then
					If DEBUG Then BRApi.ErrorLog.LogMessage(si, $"zDev_WN_getDataSetFromCV processCVDataSet: Specific processing for data table {dt.TableName}")
				ElseIf dt.TableName.XFEqualsIgnoreCase("Table") Then
					If DEBUG Then BRApi.ErrorLog.LogMessage(si, $"zDev_WN_getDataSetFromCV processCVDataSet: Specific processing for data table {dt.TableName}")					
					'Replaced by showing the XML represenation of the dataset Me.debugDT(si, dt)
				ElseIf dt.TableName.XFEqualsIgnoreCase("Table_Title") Then
					If DEBUG Then BRApi.ErrorLog.LogMessage(si, $"zDev_WN_getDataSetFromCV processCVDataSet: Specific processing for data table {dt.TableName}")
					'Me.debugDT(si, dt)
				Else
					If DEBUG Then BRApi.ErrorLog.LogMessage(si, $"zDev_WN_getDataSetFromCV processCVDataSet: Generic processing for data table {dt.TableName}")
					'Me.debugDT(si, dt)
				End If
			Next dt
		End Sub
	
	#Region "Data Adapter Helpers"
		Protected Function GetDataAdapterTable(ByVal si As SessionInfo, ByVal dataAdapterName As String, ByVal _params As Dictionary(Of String, String) ) As DataTable
			Try				
				Using objDataSet As DataSet = BRApi.Dashboards.Process.GetAdoDataSetForAdapter(si, False, dataAdapterName, "", _params)
					Return objDataSet.Tables(0)
				End Using
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Protected Function GetCubeviewDataSet(ByVal si As SessionInfo, ByVal dataAdapterName As String, ByVal _params As Dictionary(Of String, String) ) As DataSet
			Dim DEBUG As Boolean = True
			If DEBUG Then BRApi.ErrorLog.LogMessage(si, $"Begin GetCubeviewDataSet for dataAdapter {dataAdapterName}")
			Try	
				
				Using oDataSet As DataSet = BRApi.Dashboards.Process.GetAdoDataSetForAdapter(si, False, dataAdapterName, "11_NetIncomeDetailSegments", _params)					
					Return oDataSet
				End Using
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	#End Region	
	
	#Region "Debug Helper"
		Public Sub debugDT(ByVal si As SessionInfo, ByVal dt As DataTable)
			Dim DEBUG As Boolean = True
			
			BRApi.ErrorLog.LogMessage(si, $"debugDT {dt.TableName} with {dt.Rows.Count.ToString} row(s):") 

			For Each dataRow As DataRow In dt.Rows
				For Each dataColumn As DataColumn In dataRow.Table.Columns	
					'Temporarily skip some columns
					If dataColumn.Caption.XFContainsIgnoreCase("Indent") 		_
					Or dataColumn.Caption.XFContainsIgnoreCase("ValueAsText")	_
					Or dataColumn.Caption.XFContainsIgnoreCase("ScenarioName")	_
					Or dataColumn.Caption.XFContainsIgnoreCase("TimeName")		Then
						'Skip
					Else	
						BRApi.ErrorLog.LogMessage(si, $"Col:{dataColumn.Caption} Value:{dataRow(dataColumn.Ordinal).ToString}")
					End If
				Next
			Next
		End Sub	
	#End Region
	
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ZXX_Create_Table">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.ZXX_Create_Table
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
			
			Dim sql As New Text.StringBuilder
		
			
		Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)

'					BRAPi.Database.ExecuteSql(dbConnApp, "Drop Table [dbo].[XFT_App2App_Status_Log];", True)	
'					sql.AppendLine("CREATE TABLE [dbo].[XFT_App2App_Status_Log] ")
'					sql.AppendLine("( ") 
'					sql.AppendLine(" [Job_ID] [INT] NOT NULL IDENTITY(1,1) PRIMARY KEY, ") 
'					sql.AppendLine(" [Source_Scenario] [varchar] (200), ")
'					sql.AppendLine(" [Target_Scenario] [varchar] (200), ") 								
'					sql.AppendLine(" [Source_Year] [varchar] (200) , ")
'					sql.AppendLine(" [Target_Year] [varchar] (200) , ")
'					sql.AppendLine(" [Start_Time] [DATETIME] DEFAULT GETDATE(), ")
'					sql.AppendLine(" [End_Time] [DATETIME] DEFAULT GETDATE(), ")
'					sql.AppendLine(" [ExecutedBy][varchar] (200), ")
'					sql.AppendLine(" [Triggered_From] [varchar] (200), ")
'					sql.AppendLine(" [Import] [varchar] (200), ")
'					sql.AppendLine(" [Transformation] [varchar] (200), ")
'					sql.AppendLine(" [Validation] [varchar] (200), ")
'					sql.AppendLine(" [Load_Cube] [varchar] (200), ")
'					sql.AppendLine(" [Process_Cube] [varchar] (200), ")
'					sql.AppendLine(" [Details] [varchar] (2000) ")
'					sql.AppendLine(")")


'					sql.AppendLine("TRUNCATE TABLE XFT_CFR_Certified_Data")
'					BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)	
						
						
					End Using
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ZXX_Execute_Load">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Threading

Namespace OneStream.BusinessRule.Extender.ZXX_Execute_Load
	Public Class MainClass
		
		Public Shared Dim runningStatus As Boolean = True
		Public Shared Dim JobExecution As New Text.StringBuilder
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				
				Select Case args.FunctionType
					Case Is = ExtenderFunctionType.Unknown, ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
				
						Dim ScenarioTime As List(Of String) = Me.getListScenarioTime(si,api)
						'Dim scenarioTime As New List(Of String) From {"Actual:2021"}
						
						
						Dim wfTop As String = "Metadata_Movement"
						Dim sourceMember As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "Source_Mbr")
						
						For Each STArray As String In ScenarioTime
							Dim STArraySplit As String() = STArray.Split(":")
							Dim vScenario As String = STArraySplit(0)
							Dim vYear As String = STArraySplit(1)
							
							BRApi.Import.Process.ClearStageData(si, BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, "Metadata_Movement_CORP.Import", vScenario, vYear), sourceMember)
							BRApi.Import.Process.ClearStageData(si, BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, "Metadata_Movement_CORP.Import", vScenario, vYear), "Metadata Automation")
						Next
						
						
 						For Each STArray As String In ScenarioTime
							Dim STArraySplit As String() = STArray.Split(":")
							Dim vScenario As String = STArraySplit(0)
							Dim vYear As String = STArraySplit(1)
							
								BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, False, "Load_Scenario", vScenario)
								BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, False, "Load_Year", vYear)
								
								
								If Not ExecuteBatch(si, wfTop, vScenario, vYear)
									Exit For
								End If
								
								Me.DeleteBatchFileTrigger(si)
							Next
							BRApi.ErrorLog.LogMessage(si,"JobExecution",JobExecution.Tostring)
							Me.UpdateTaskActivityStatus(si)
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Private Sub CreateBatchFileTrigger(ByVal si As SessionInfo, ByVal harvestPath As String, ByVal wfName As String, ByVal wfScenario As String, ByVal wfTime As String, ByVal Testing As Boolean)
			Try
				Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
				Dim Path As String = String.Empty

					If Not Testing Then
						Dim harvestFolderPath As String = FileShareFolderHelper.GetBatchHarvestFolderForApp(si, True, configSettings.FileShareRootFolder, configSettings.FileShareBatchHarvestRootFolder,si.AppToken.AppName)
						
						path = harvestFolderPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-R.txt"
					
					End If
					'brapi.ErrorLog.LogMessage(si, $"Create New Trigger File {wfName} {wfScenario} {wfTime}", "")
					If Not File.Exists(path) Or Testing = True Then
						' Create a file to write to. 
						'brapi.ErrorLog.LogMessage(si, $"Create New Trigger File {path}", "")
						Using sw As StreamWriter = File.CreateText(path)
							sw.WriteLine("Batch File Trigger")
						End Using
					End If
				Catch ex As Exception
					Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
				End Try
			End Sub
			
			Private Sub DeleteBatchFileTrigger(ByVal si As SessionInfo)
				Try
					Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
					Dim harvestFolderPath As String = FileShareFolderHelper.GetBatchHarvestFolderForApp(si, True, configSettings.FileShareRootFolder, configSettings.FileShareBatchHarvestRootFolder,si.AppToken.AppName)
							
						For Each deleteFile In Directory.GetFiles(harvestFolderPath ,"*.*",SearchOption.TopDirectoryOnly)
							File.Delete(deleteFile)
						Next	
				Catch ex As Exception
					'Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
				End Try
			End Sub
			
			
			Private Function ExecuteBatch(ByVal si As SessionInfo, ByVal wfTop As String, ByVal vScenario As String, ByVal vYear As String) As Boolean
				Dim logline As New Text.StringBuilder(1000)
				Try
						Dim wfList As New List(Of String)
						Dim targetCube As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "Target_Cube")
						Dim targetWfProfileName As String = "Metadata_Movement_" & targetCube & ";Import"
						Dim wfClusterPk  = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, wfTop, vScenario, vYear)
						
						
						
						Dim objList As List(Of WorkFlowProfileInfo) = BRApi.Workflow.Metadata.GetRelatives(si, wfClusterPk, WorkflowProfileRelativeTypes.Descendants, WorkflowProfileTypes.InputImportChild)
					
						For Each wfItem As WorkflowProfileInfo In objList
							
								'If WF is locked, do nothing
								Dim wfCLusterPk2 = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, wfItem.Name, vScenario, vYear)	
								
								Dim wfStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfClusterPk2)	
								
								If Not wfStatus.Locked Then
									wfList.Add(stringhelper.ReplaceString(wfItem.Name,".",";",True))
								End If
							
						Next
				
						If wfList.Count > 0 Then
							Try
								Me.CreateBatchFileTrigger(si,FileShareFolderHelper.GetBatchHarvestFolderForApp(si, True, AppServerConfig.GetSettings(si).FileShareRootFolder, AppServerConfig.GetSettings(si).FileShareBatchHarvestRootFolder,si.AppToken.AppName), targetWfProfileName, vScenario, vYear, False)
							Catch e As Exception
								brapi.ErrorLog.LogMessage(si, "Exception in CreateTriggerFile", $"Scenario: {vScenario}, Year:{vYear}, Exception in createFileTrigger: {e}")
							End Try
						End If
						'Set Processing Switches	
						Dim valTransform As Boolean = True
						Dim valIntersect As Boolean = True
						Dim loadCube As Boolean = True
						Dim processCube As Boolean = True
						Dim confirm As Boolean = True
						Dim autoCertify As Boolean = True
						
						Try
							Dim Batchinfo As WorkflowBatchFileCollection = BRApi.Utilities.ExecuteFileHarvestBatch(si, vScenario, vYear, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, True)
							While Batchinfo.TaskActivityItem.TaskActivityStatus <> TaskActivityStatus.Completed
								Thread.Sleep(TimeSpan.FromSeconds(2))
							End While
							For Each filegroup In Batchinfo.FileGroups
								For Each file In filegroup.Value
									logline.append($"FileName: {file.FileName} {Environment.NewLine} Loaded: {file.FileLoaded} {Environment.NewLine} Processed: {file.FileProcessed}")
									logline.append($"{Environment.NewLine}Details: {file.ProcessMessage}")	
								Next 
							Next 
						Catch e As Exception
							brapi.ErrorLog.LogMessage(si, "Exception in HarvestExecute", $"Scenario: {vScenario}, Year:{vYear}, Exception in ExecuteFileHarvestBatch: {e}")
							runningStatus = False
							
							JobExecution.Append($"MetaData DataLoad Automation Details {vScenario} {vYear}" & logline.ToString) 
							
							Return False
'							Exit Sub
						End Try
						
				Catch ex As Exception
					Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
				End Try
				
				JobExecution.Append($"MetaData DataLoad Automation Details {vScenario} {vYear}"  & logline.ToString) 
				
				Return True
			End Function
			
			Function getListScenarioTime(ByVal si As SessionInfo, ByVal api As Object) As List(Of String)
				
				Dim ScenarioDimPk As DimPk = BRApi.Finance.Dim.GetDimPk(si, "Corp_Scenario" )
				Dim TimeDimPk As DimPk = BRApi.Finance.Dim.GetDimPk(si, "Time" )
				Dim lev0ScenarioList As New List(Of String)
				
				
				Dim lev0Scenario As List(Of Memberinfo) =  BRApi.Finance.Members.GetMembersUsingFilter(si, ScenarioDimPk, "S#Root.Base", True, Nothing, Nothing)
				
				For Each lev0S In lev0Scenario
					 lev0ScenarioList.Add(lev0S.Member.Name)
					 
				Next
				
				Dim lev0TimeList As New List(Of String) From {"2015","2016","2017","2018","2019","2020","2021","2021","2022","2023","2024","2025"}
				
				Dim loglist As New Text.StringBuilder
				
				Dim ScenarioTime As New List(Of String)
				For Each lev0S In lev0ScenarioList 
					For Each lev0T In lev0TimeList
						
						Dim cubeName = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "Source_Cube")
						Dim entityMemFilter As String = "E#" & BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "Source_Mbr")
					
						Dim consName As String = "Local"
					
						Dim scenarioMemFilter As String = "S#" & lev0S
						Dim viewName As String = "Periodic"
					
						Dim timeMemFilter As String = "T#" & lev0T & ".Base"
						Dim suppressNoData As Boolean = True
						Dim filter As String = Nothing
						Dim scenarioTypeName As String = String.Empty
						
						If lev0S = "Actual" Or lev0S = "None" Then
							scenarioTypeName = "Actual"
						ElseIf lev0S = "Plan_0" Or lev0S = "Plan_Working" Or lev0S = "Plan_Final" Or lev0S = "Plan_v1"  Or lev0S = "Plan_v2"Or lev0S = "Plan_v3" Then
							scenarioTypeName = "Budget"
						ElseIf lev0S = "Plan_Target" Then
							scenarioTypeName = "Target"	
						ElseIf lev0S = "Plan_Corp_v1" Or lev0S = "Plan_Corp_v2" Or lev0S = "Plan_Corp_v3" Or lev0S = "Comp_Plan"  Or lev0S = "Plan_Corp" Then
							scenarioTypeName = "Plan"
						ElseIf lev0S.Contains("Forecast") Or lev0S.Contains("Fcst") Or lev0S = "Sandbox" Then
							scenarioTypeName = "Forecast"
						ElseIf lev0S.Contains("CorpFcst")
							scenarioTypeName = "ScenarioType1"
						End If	
							
						Dim scenariotypeID As Integer = ScenarioType.GetItem(scenarioTypeName).Id
						
					
						Dim parallelQueryCount As Integer = 8
						Dim logStatistics As Boolean = False
						Dim useGenericTimeColNames As Boolean = True
						
						
						
						If lev0S = "Actual" Then
							
							For M = 1 To 12 Step 1
									Dim dt As New DataTable
									timeMemFilter = "T#" & lev0T & "M" &M
									
									dt = BRApi.Import.Data.FdxExecuteDataUnit(si, 
									cubeName, 
									entityMemFilter, 
									consName, 
									scenarioTypeId, 
									scenarioMemFilter, 
									timeMemFilter, 
									viewName, 
									suppressNoData, 
									filter, 
									parallelQueryCount, 
									logStatistics)
								
									If Not dt Is Nothing Then
										Dim vFlag As Boolean = False	
										Dim row As DataRow
										For Each row In dt.Rows
										    Dim vData As Decimal = row("Amount")
										    If vData <> 0 Then
												vFlag = True
												Exit For
											End If
										Next 

										If vFlag Then
										
											brapi.ErrorLog.LogMessage(si, $"Data found for Year Scenario {lev0S} {lev0T} {dt.Rows.Count}", "")
											
											ScenarioTime.Add(lev0S & ":" & lev0T & "M" & M)
											loglist.Append(lev0S & ":" & lev0T & "M" & M & ",")
											
										End If	
									Else
										'brapi.ErrorLog.LogMessage(si, $"DT is Nothing {lev0S} {lev0T}", "")
									End If
							Next
							
						Else	
							
							Dim dt As New DataTable
						
							dt = BRApi.Import.Data.FdxExecuteDataUnitTimePivot(si, 
							cubeName, 
							entityMemFilter, 
							consName, 
							scenarioTypeId, 
							scenarioMemFilter, 
							timeMemFilter, 
							viewName, 
							suppressNoData, 
							useGenericTimeColNames,
							filter, 
							parallelQueryCount, 
							logStatistics)
						
							If Not dt Is Nothing Then
								
									Dim vFlag As Boolean = False	
										Dim row As DataRow
										For Each row In dt.Rows
										    Dim vData As Decimal = row("Time1") + row("Time2") + row("Time3") + row("Time4") + row("Time5") + row("Time6") + row("Time7") + row("Time8") + row("Time9") + row("Time10") + row("Time11") + row("Time12")
										    If vData <> 0 Then
												vFlag = True
												Exit For
											End If
										Next 
								If vFlag Then
									brapi.ErrorLog.LogMessage(si, $"Data found for Year Scenario {lev0S} {lev0T} {dt.Rows.Count}", "")
									
									ScenarioTime.Add(lev0S & ":" &lev0T)
									loglist.Append(lev0S & ":" &lev0T & ",")
								End If	
							Else
								'brapi.ErrorLog.LogMessage(si, $"DT is Nothing {lev0S} {lev0T}", "")
							End If
						
						End If
						
						Next
					Next
					
					brapi.ErrorLog.LogMessage(si,"ScenarioTimeList",loglist.ToString)
					
				Return ScenarioTime
					
					
			End Function
			
			Private Sub UpdateTaskActivityStatus(ByVal si As SessionInfo)
				Dim Metadata_Task_ID As String = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "Metadata_Task_ID")	
				
				Dim vStatus As String
					If runningStatus Then
						vStatus = "Completed"
					Else 
						vStatus = "Failed"
					End If
			
				Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				
					Dim sql As New Text.StringBuilder
					sql.AppendLine("UPDATE [dbo].[XFT_Metadata_Change_Log] SET Status = '"& vStatus &"' WHERE ID =" & Metadata_Task_ID)	
					
					BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)	
					BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, False, "MetaData_Automation_Job_Status", "Completed")	
						
			End Using
				
			End Sub
			
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ZXX_Metadata_POC">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database
Imports System.Threading

Namespace OneStream.BusinessRule.Extender.ZXX_Metadata_POC
	Public Class MainClass

		Public Shared Dim SourceCube As String
		Public Shared Dim TargetCube As String
		Public Shared Dim SourceDim As String
		Public Shared Dim SourceMbr As String
		Public Shared Dim TargetDim As String 
		Public Shared Dim TargetParent As String 
		Public Shared Dim Metadata_Task_ID As Int64
		
		
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				
				Me.ValidateParam(si,args)
				
				If SourceCube = TargetCube Then
					Me.RemoveRelation(si,SourceDim,SourceMbr) 
					Me.AddRelation(si,TargetParent,SourceMbr)
					Me.AddRecord(si,SourceDim, SourceMbr, TargetDim, TargetParent, Metadata_Task_ID)
					BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, False, "MetaData_Automation_Job_Status", "Completed")	
					
					Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				
						Dim sql As New Text.StringBuilder
						sql.AppendLine("UPDATE [dbo].[XFT_Metadata_Change_Log] SET Status = 'Completed' WHERE ID =" & Metadata_Task_ID)	
						
						BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)	
						
					End Using
					
					
					
				Else
					BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, False, "MetaData_Automation_Job_Status", "Running")
					Me.RemoveRelation(si,SourceDim,SourceMbr)  
					Me.RenameMbr(si,SourceDim,SourceMbr)
					Me.CreateMbr(si,SourceMbr,TargetDim)
					Me.AddRelation(si,TargetParent,SourceMbr)
					Me.AddRecord(si,SourceDim, SourceMbr, TargetDim, TargetParent, Metadata_Task_ID)
					
					Dim Params As New Dictionary(Of String, String)
					
'					Params.Add("TargetCube", TargetDim)
'					Params.Add("TargetEntity", SourceMbr)
'					Params.Add("SourceCube", SourceDim)
'					Params.Add("SourceEntity", "_WIP_" & SourceMbr)
					
'					Me.DataCopy(si,"Data_Copy_Sequence",Params)

					Dim dataCopyThread = New Thread(
												Sub() 
													Me.DataCopyWF(si,"Execute_Import_Profile_Sequence", Nothing)	
												End Sub
											)
					dataCopyThread.IsBackground = True
					dataCopyThread.Start
					
				End If
						
				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Public Sub ValidateParam(ByVal si As SessionInfo,ByVal args As ExtenderArgs) 
			Try
				SourceCube = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "Source_Cube")
				TargetCube = BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "Target_Cube")
				SourceDim = args.NameValuePairs.XFGetValue("SourceDimFilter")
				SourceMbr = args.NameValuePairs.XFGetValue("SourceMbrFilter")
				TargetDim = args.NameValuePairs.XFGetValue("TargetDimFilter")
				TargetParent = args.NameValuePairs.XFGetValue("TargetParentFilter")
				Metadata_Task_ID =  CType(BRApi.Dashboards.Parameters.GetLiteralParameterValue(si, False, "Metadata_Task_ID"), Int64)
				Metadata_Task_ID = Metadata_Task_ID + 1
				BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, False, "Metadata_Task_ID", Metadata_Task_ID.ToString)
				
				brapi.ErrorLog.LogMessage(si,"New -" & SourceDim & "/" & SourceMbr & "/" & TargetDim & "/" & TargetParent)
				
				
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		Public Sub CreateMbr(ByVal si As SessionInfo, ByVal SourceMbr As String, ByVal TargetDim As String) 
			Try
				'Create a new MemberInfo object with its child objects.
				Dim objMemberPk As New MemberPk(DimType.Entity.Id, DimConstants.Unknown)

				'Update Dim Name accordingly
				Dim objDim As OneStream.Shared.Wcf.Dim = BRApi.Finance.Dim.GetDim(si, TargetDim)
				'Get decription of source Member
				Dim sourceMemberObj = BRApi.Finance.Members.GetMember(si, DimType.Entity.Id, "_WIP_" & SourceMbr)
				
				'Create New Member
				Dim objMember As New Member(objMemberPk, SourceMbr, sourceMemberObj.Description, objDim.DimPk.DimId)
	
				Dim sourceMemberInfoObj = BRApi.Finance.Members.GetMemberInfo(si, DimType.Entity.Id, "_WIP_" & sourceMbr, True)
				
				'Create VaryingMemberProperties object
				'Dim objProperties As New VaryingMemberProperties(objMemberPk.DimTypeId, objMemberPk.MemberId, DimConstants.Unknown)
				sourceMemberInfoObj.Properties.ClearMemberId()
				sourceMemberInfoObj.Properties.ParentId = DimConstants.Unknown
				Dim objProperties = sourceMemberInfoObj.Properties
				
				'Create new member info object for new member
				Dim objMemberInfo As New MemberInfo(objMember, objProperties, Nothing, objDim, DimConstants.Unknown)
				
				
				'Modify some member properties. Account dimension, in this example.
				Dim accountProperties As AccountVMProperties = objMemberInfo.GetAccountProperties()
				accountProperties.AccountType.SetStoredValue(AccountType.Revenue.Id)
				'accountProperties.Text1.SetStoredValue(ScenarioType.Unknown.Id, DimConstants.Unknown, "MyNewText1Value")

				'Save the member and its properties.
				'Dim isNew As TriStateBool = TriStateBool.
				Dim newMember As MemberPK = BRApi.Finance.MemberAdmin.SaveMemberInfo(si, objMemberInfo, True, True, False, -1)
				
				Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		Public Sub RemoveRelation(ByVal si As SessionInfo, ByVal SourceDim As String,ByVal SourceMbr As String)
			Try
				Dim EMemberID As Integer = BRApi.Finance.Members.GetMemberId(si, DimType.Entity.Id, SourceMbr)
				Dim SourceMbrParent As String  = BRApi.Finance.Members.GetParents(si, BRApi.Finance.Dim.GetDimPk(si, SourceDim), EMemberID, False)(0).Name
				Dim EPMemberID As Integer = BRApi.Finance.Members.GetMemberId(si, DimType.Entity.Id, SourceMbrParent)
				Dim vDimPk As DimPk = BRApi.Finance.Dim.GetDimPk(si, SourceDim)

				Dim objRelationshipPk As New RelationshipPk(DimType.Entity.Id, EPMemberID, EMemberID)
				Dim LstPk As New List(Of RelationshipPk)
				LstPk.Add(objRelationshipPk)
				Dim objRemoveRelationshipResult As RemoveRelationshipResult = BRApi.Finance.MemberAdmin.RemoveRelationships(si, vDimPk,LstPk, True)
		 	Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		Public Sub AddRelation(ByVal si As SessionInfo, ByVal TargetParent As String, ByVal SourceMbr As String)
			Try	
				'Add Relationship
				Dim parentMemberID As Integer = BRApi.Finance.Members.GetMemberId(si, DimType.Entity.Id, TargetParent)
				'Util.appendLog(0, "SAMS_Ops_(incl_Merch_Adjust) ID:" & parentMemberID)
				Dim EMemberID As Integer = BRApi.Finance.Members.GetMemberId(si, DimType.Entity.Id, SourceMbr)
				Dim childMemberId As Integer = EMemberID
				'Util.appendLog(0, $"New member ID: {childMemberId}")
				
				Dim relation As New Relationship 
				relation.RelationshipPk.ChildId = childMemberId
				relation.RelationshipPk.ParentId = parentMemberID
				relation.RelationshipPk.DimTypeId =  DimType.Entity.Id
				relation.UDAggWeight = 1.0
				relation.DimId = BRApi.Finance.Members.GetDimIdFromMemberId(si,  DimType.Entity.Id, parentMemberID)
				Dim relationpos As New RelationshipPositionOptions
				relationpos.MovementType = RelationshipMovementType.InsertAsFirstSibling
				Dim objProp As New VaryingMemberProperties(DimType.Entity.Id, childMemberId, DimConstants.Unknown)
				BRApi.Finance.MemberAdmin.SaveRelationshipInfo(si, True, relation, True, objProp, relationpos)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		Public Sub RenameMbr(ByVal si As SessionInfo, ByVal SourceDim As String, ByVal SourceMbr As String)
			Try	
				Dim vDimPk As DimPk = BRApi.Finance.Dim.GetDimPk(si, SourceDim)
				BRApi.Finance.MemberAdmin.RenameMember(si, vDimPk, SourceMbr, "_WIP_" & SourceMbr)
				BRApi.Dashboards.Parameters.SetLiteralParameterValue(si, False, "Source_Mbr", "_WIP_" & SourceMbr)
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
	
		Public Sub DataCopy(ByVal si As SessionInfo, ByVal sequenceName As String, ByVal customSubstVars As Dictionary(Of String, String))
			Try	
				BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName, customSubstVars)
			Catch ex As Exception
			Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Sub
		
		Public Sub AddRecord(ByVal si As SessionInfo, ByVal SourceDim As String,ByVal SourceMbr As String, ByVal TargetDim As String, ByVal TargetParent As String, ByVal Metadata_Task_ID As Int64)
		Try
		
		Using dbConnApp As DBConnInfo = BRApi.Database.CreateApplicationDbConnInfo(si)
				Dim sql As New Text.StringBuilder
				sql.AppendLine("INSERT Into [dbo].[XFT_Metadata_Change_Log]
							(
				 				ID, 
								Source_Cube, 
								Source_Mbr, 
								Target_Cube, 
								Target_Parent, 
								Status,
								ExecutedBy,
								TimeStamp
							)	VALUES ('" & Metadata_Task_ID & "', '" & SourceDim & "', '" & SourceMbr & "', '" & TargetDim & "','" & TargetParent & "','Running','" & si.UserName & "','" & DateTime.Now & "')")	
						
					BRAPi.Database.ExecuteSql(dbConnApp, sql.ToString, True)	
						
						
			End Using
		
		
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try	
		End Sub
		
		Public Sub DataCopyWF(ByVal si As SessionInfo, ByVal sequenceName As String, ByVal customSubstVars As Dictionary(Of String, String))
			Try	
				 BRApi.Utilities.ExecuteDataMgmtSequence(si, sequenceName, customSubstVars)
			Catch ex As Exception
			Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
			
			
		End Sub
		
		
		
	End Class
End Namespace



]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ZZ_App_UniqueID">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.ZZ_App_UniqueID
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
				
						BRApi.ErrorLog.LogMessage(si, "Walmart Dev AppUniqueID:" & si.AppName & "-" & si.AppUniqueID.ToString)
'						Dim UD4DimPk As DimPk = BRApi.Finance.Dim.GetDimPk(si, "Audit_Trail")
'						Dim mbrlist As List(Of MemberInfo) = BRapi.Finance.Members.GetMembersUsingFilter(si, UD4DimPk, "U4#Mgmt_Reported.Base", True)
'						For Each mbr In mbrlist
'							brapi.ErrorLog.LogMessage(si, mbr.Member.Name)
'						Next
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="zz_s0s0acj">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.zz_s0s0acj
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			
				Dim URL As String = $"{Me.baseURL}getToken/{cubeView}/{time}"
					
						
						Dim response As String
						Dim responseTask As Task(Of String) = Util.webRequest(URL, Nothing)
						responseTask.Wait
						response = responseTask.Result
						If response Is Nothing Then
							Util.appendLog(0, $"getToken No reponse while fetching token.")
							Return Nothing
						Else 
							Return response
						End If
						

				Return Nothing
			
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="ZZ_Test">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.ZZ_Test
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
						Dim currentUserName As String = si.AuthToken.UserName
						brapi.ErrorLog.LogMessage(si,"currentUserName" &currentUserName)
						
						Dim userInfo As UserInfo = BRApi.Security.Admin.GetUser(si, currentUserName)
						Dim Name As String = userInfo.User.Name
						brapi.ErrorLog.LogMessage(si,"Name" &Name)
						Dim Description As String = userInfo.User.Description
						brapi.ErrorLog.LogMessage(si,"NameAndDescription" &Description)
						
						brapi.ErrorLog.LogMessage(si,"Des" &Description.Split(" ")(0))
						brapi.ErrorLog.LogMessage(si,"Des" &Description.Split(" ")(1))
'						Description.Split(" ")(1)
						Return Nothing
						'If args.CustomCalculateArgs.FunctionName.XFEqualsIgnoreCase("CopyPlanFinaltoForecast") Then
							
							'api.Data.ClearCalculatedData(True,True,True,True)
'							brapi.Finance.Calculate("Cb#SAMS:E#US09707:C#Local:S#Plan_Working:T#2022M1:V#Periodic:A#5101010:F#None:O#Input:
'							I#None:U1#None:U2#CT_G:U3#Physical:U4#HFM_Adj:U5#None:U6#None:U7#None:U8#None = 2000")
							'api.Data.Calculate("Cb#SAMS:E#US09707:C#Local:S#Plan_Working:T#2022M1:V#Periodic:A#5101010:F#None:O#Input:
							'I#None:U1#None:U2#CT_G:U3#Physical:U4#HFM_Adj:U5#None:U6#None:U7#None:U8#None = 2000"  ,True)
'						'End If
						
'					Dim PKFilterList As String = "PK_01_01, PK_01_02"
''					PKFilterList.Add("PK_01_01")
''					PKFilterList.Add("PK_01_02")
'					Dim whereString As String = String.Empty
'					Dim delimiter As String = ","
'					whereString = "WHERE "
'					Dim parts As String() = PKFilterList.Split(New Char() {","c})
''					For Each w In parts
						
''						brapi.ErrorLog.LogMessage(si, w.trim)
''					Next
'					Dim strList As String = "'" & String.Join("','", parts) & "'"
					
'					Dim rsltstmt As String = whereString & "= " & strList
'					brapi.ErrorLog.LogMessage(si, rsltstmt)
'					'brapi.ErrorLog.LogMessage(si, rslt)

		Dim Ud3mbr As String = "Physical"
				Dim Entmbr As String = "SAMS_US_Adj"
				
				Dim Ud3mbrId As Integer = BRApi.Finance.Members.GetMemberId(si, DimType.UD3.Id, Ud3mbr)
				'Dim Ud3mbr As String = args.GetSource("U3#")

				Dim targetmbr As String = String.Empty
				Select Entmbr
					Case "WMTUS_Adj"
						Dim WMTUS_UD3DimPk As DimPk = BRApi.Finance.Dim.GetDimPk(si, "Channel_WMTUS")
						Dim WMTUD3basembrs As List(Of Member) = BRApi.Finance.Members.GetBaseMembers(si, WMTUS_UD3DimPk, Ud3mbrId)
							targetmbr = WMTUD3basembrs(0).Name.ToString					
					Case "SAMS_US_Adj"
						Dim SAMS_UD3DimPk As DimPk = BRApi.Finance.Dim.GetDimPk(si, "Channel_SAMS")
						Dim SAMSUD3basembrs As List(Of Member) = BRApi.Finance.Members.GetBaseMembers(si, SAMS_UD3DimPk, Ud3mbrId)
						brapi.ErrorLog.LogMessage(si, "Count" & SAMSUD3basembrs.Count)
'							If SAMSUD3basembrs.Count <> 0 Then
'						   		targetmbr = SAMSUD3basembrs(0).Name.ToString
'							Else
'								targetmbr = Ud3mbr
						  		 
'						   End If
					targetmbr = SAMSUD3basembrs(0).Name.ToString
					Case Else
						targetmbr = Ud3mbr
					End Select

					brapi.ErrorLog.LogMessage(si, targetmbr)
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace	]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="zz_test_d0r06fa">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.zz_test_d0r06fa
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
						Dim listofgroupstocreate As New List(Of String)
						listofgroupstocreate.Add("EXP_WMTUS_Total_Supply_Chain_mgmt")
						listofgroupstocreate.Add("EXP_WMTUS_Manufacturing_mgmt")
						listofgroupstocreate.Add("EXP_WMTUS_Home_Office_Operations")
						listofgroupstocreate.Add("EXP_WMTUS_Home_Office_Compliance")
						listofgroupstocreate.Add("EXP_WMTUS_Home_Office_People_wo_Supply_Chain")
						listofgroupstocreate.Add("EXP_WMTUS_Home_Office_Merchandising_wo_PR")
						listofgroupstocreate.Add("EXP_WMTUS_Home_Office_HW")
						listofgroupstocreate.Add("EXP_WMTUS_Home_Office_Finance_wo_PR_and_Supply_Chain")
						listofgroupstocreate.Add("EXP_WMTUS_Home_Office_Executive")
						listofgroupstocreate.Add("EXP_WMTUS_Home_Office_Support_Other")
						listofgroupstocreate.Add("EXP_WMTUS_Home_Office_Customer")
						listofgroupstocreate.Add("EXP_WMTUS_Product_and_Innovation")
						listofgroupstocreate.Add("EXP_WMTUS_Home_Office_Ecommerce_Operations")
						listofgroupstocreate.Add("EXP_WMTUS_E_Commerce_Mgmt")
						
						Dim listofroles As New List(Of String) ({"Planner","Reviewer"})
						For Each role In listofroles
							For Each grouptocreate In listofgroupstocreate
								'New Group Info
								Dim newGroupName As String = grouptocreate & "_" & role
								BRAPI.Security.Admin.DeleteGroup(si, newGroupName)
								
								Dim vbo As String = newGroupName.Replace("EXP_","").Replace("_" & role,"")

								'Create a New Group
								Dim objGroup As Group = New Group()
								objGroup.Name = newGroupName
								Dim objGroupInfo As GroupInfo = New GroupInfo()
								objGroupInfo.Group = objGroup
								BRApi.Security.Admin.SaveGroup(si, objGroupInfo, False, Nothing, TriStateBool.Unknown)
							
								'Add parent groups to new group
								Dim objGroup1Info As GroupInfo = BRApi.Security.Admin.GetGroup(si, newGroupName)
								Dim parent1 As GroupInfo = BRApi.Security.Admin.GetGroup(si, "APP_USERS_ENT")
								Dim parent2 As GroupInfo = BRApi.Security.Admin.GetGroup(si, "C_WMTUS")
								Dim parent3 As GroupInfo = BRApi.Security.Admin.GetGroup(si, "S_Plan_Working")
								Dim parent4 As GroupInfo = BRApi.Security.Admin.GetGroup(si, "S_EXP_Working")
								Dim entity_group As String = String.Empty
								Dim user_group As String = String.Empty
								If newGroupName.XFContainsIgnoreCase("Planner")
									If newGroupName.XFContainsIgnoreCase("WMTUS_E_Commerce")
										entity_group = "E_WRITE_WMTUS_Total_Ecommerce_Mgmt"
									Else
										entity_group = "E_WRITE_" & vbo
									End If
									user_group = "EXP_User_Planner"
								ElseIf newGroupName.XFContainsIgnoreCase("Reviewer")
									If newGroupName.XFContainsIgnoreCase("WMTUS_E_Commerce")
										entity_group = "E_VIEW_WMTUS_Total_Ecommerce_Mgmt"
									Else
										entity_group = "E_VIEW_" & vbo
									End If
									user_group = "EP_Reports"
								End If
								Dim parent5 As GroupInfo = BRApi.Security.Admin.GetGroup(si, entity_group)
								Dim parent6 As GroupInfo = BRApi.Security.Admin.GetGroup(si, "EP_" & vbo)
								Dim parent7 As GroupInfo = BRApi.Security.Admin.GetGroup(si, user_group)
								Dim parentGroupIDs As New List(Of Guid)
								parentGroupIDs.Add(parent1.Group.UniqueID)
								parentGroupIDs.Add(parent2.Group.UniqueID)
								parentGroupIDs.Add(parent3.Group.UniqueID)
								parentGroupIDs.Add(parent4.Group.UniqueID)
								parentGroupIDs.Add(parent5.Group.UniqueID)
								parentGroupIDs.Add(parent6.Group.UniqueID)
								parentGroupIDs.Add(parent7.Group.UniqueID)
								BRApi.Security.Admin.SaveGroup(si, objGroup1Info, True, parentGroupIDs, TriStateBool.Unknown)
							Next
						Next	
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="zz_test_vn513c8">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.zz_test_vn513c8
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.Unknown
						
						Dim listofgroupstocreate As New List(Of String)
						listofgroupstocreate.Add("EXP_CORP_Global_Sourcing_W_Elim")
						listofgroupstocreate.Add("EXP_CORP_Other_Corporate_and_Segments")
						listofgroupstocreate.Add("EXP_CORP_Core_Finance")
						listofgroupstocreate.Add("EXP_CORP_Corp_Affairs_Total")
						listofgroupstocreate.Add("EXP_CORP_Corporate_Exec_Total")
'						listofgroupstocreate.Add("EXP_CORP_Global_Governance_Total")
'						listofgroupstocreate.Add("EXP_CORP_People_and_Benefits_Total")
						listofgroupstocreate.Add("EXP_CORP_Global_Tech_Rollup")
						listofgroupstocreate.Add("EXP_CORP_CTO_Admin_Rollup")
						listofgroupstocreate.Add("EXP_CORP_Strategy_and_Commercialization")
						listofgroupstocreate.Add("EXP_CORP_US_Tech_Rollup")
						listofgroupstocreate.Add("EXP_CORP_Core_Services_Retail_Rollup")
						listofgroupstocreate.Add("EXP_CORP_Core_Services_Inventory_Rollup")
						listofgroupstocreate.Add("EXP_CORP_Platforms_Rollup")
						listofgroupstocreate.Add("EXP_CORP_Global_Data")
						listofgroupstocreate.Add("EXP_CORP_Business_Services_Rollup")
						listofgroupstocreate.Add("EXP_CORP_InfoSec_Governance_Risk_and_Compliance_Rollup")
						listofgroupstocreate.Add("EXP_CORP_Tech_Finance")
						listofgroupstocreate.Add("EXP_CORP_Sams_Club_CTO_Rollup")
						listofgroupstocreate.Add("EXP_CORP_International_CTO_Rollup")
'						listofgroupstocreate.Add("EXP_CORP_Corporate")
						listofgroupstocreate.Add("EXP_CORP_Corporate_Real_Estate")
			
						
						Dim listofroles As New List(Of String) ({"Planner","Reviewer"})
						For Each role In listofroles
							For Each grouptocreate In listofgroupstocreate
								'New Group Info
								Dim newGroupName As String = grouptocreate & "_" & role
								BRAPI.Security.Admin.DeleteGroup(si, newGroupName)
								
								Dim vbo As String = newGroupName.Replace("EXP_","").Replace("_" & role,"")

								'Create a New Group
								Dim objGroup As Group = New Group()
								objGroup.Name = newGroupName
								Dim objGroupInfo As GroupInfo = New GroupInfo()
								objGroupInfo.Group = objGroup
								BRApi.Security.Admin.SaveGroup(si, objGroupInfo, False, Nothing, TriStateBool.Unknown)
							
								'Add parent groups to new group
								Dim objGroup1Info As GroupInfo = BRApi.Security.Admin.GetGroup(si, newGroupName)
								Dim parent1 As GroupInfo = BRApi.Security.Admin.GetGroup(si, "APP_USERS_ENT")
								Dim parent2 As GroupInfo = BRApi.Security.Admin.GetGroup(si, "C_Corporate")
								Dim parent3 As GroupInfo = BRApi.Security.Admin.GetGroup(si, "S_Plan_Working")
								Dim parent4 As GroupInfo = BRApi.Security.Admin.GetGroup(si, "S_EXP_Working")
								Dim parent5 As GroupInfo = BRApi.Security.Admin.GetGroup(si, "S_Target")
								Dim parent6 As GroupInfo = BRApi.Security.Admin.GetGroup(si, "S_Actual")
								Dim parent7 As GroupInfo = BRApi.Security.Admin.GetGroup(si, "S_Plan_Final")
								Dim entity_group As String = String.Empty
								Dim user_group As String = String.Empty
								If newGroupName.XFContainsIgnoreCase("Planner")
									If newGroupName.XFContainsIgnoreCase("WMTUS_E_Commerce")
										entity_group = "E_WRITE_WMTUS_Total_Ecommerce_Mgmt"
									Else
										entity_group = "E_WRITE_" & vbo
									End If
									user_group = "EXP_User_Planner"
								ElseIf newGroupName.XFContainsIgnoreCase("Reviewer")
									If newGroupName.XFContainsIgnoreCase("WMTUS_E_Commerce")
										entity_group = "E_VIEW_WMTUS_Total_Ecommerce_Mgmt"
									Else
										entity_group = "E_VIEW_" & vbo
									End If
									user_group = "EP_Reports"
								End If
								Dim parent8 As GroupInfo = BRApi.Security.Admin.GetGroup(si, entity_group)
								Dim parent9 As GroupInfo = BRApi.Security.Admin.GetGroup(si, "EP_" & vbo)
								Dim parent10 As GroupInfo = BRApi.Security.Admin.GetGroup(si, user_group)
								Dim parentGroupIDs As New List(Of Guid)
								parentGroupIDs.Add(parent1.Group.UniqueID)
								parentGroupIDs.Add(parent2.Group.UniqueID)
								parentGroupIDs.Add(parent3.Group.UniqueID)
								parentGroupIDs.Add(parent4.Group.UniqueID)
								parentGroupIDs.Add(parent5.Group.UniqueID)
								parentGroupIDs.Add(parent6.Group.UniqueID)
								parentGroupIDs.Add(parent7.Group.UniqueID)
								parentGroupIDs.Add(parent8.Group.UniqueID)
								parentGroupIDs.Add(parent9.Group.UniqueID)
								parentGroupIDs.Add(parent10.Group.UniqueID)
								BRApi.Security.Admin.SaveGroup(si, objGroup1Info, True, parentGroupIDs, TriStateBool.Unknown)
							Next
						Next	
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
        <businessRule businessRuleType="Extender" name="zzz_test">
            <accessGroup>Everyone</accessGroup>
            <maintenanceGroup>Everyone</maintenanceGroup>
            <isGlobal>false</isGlobal>
            <isEncrypted>false</isEncrypted>
            <referencedAssemblies />
            <sourceCode><![CDATA[Imports System
Imports System.Data
Imports System.Data.Common
Imports System.IO
Imports System.Collections.Generic
Imports System.Globalization
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Windows.Forms
Imports OneStream.Shared.Common
Imports OneStream.Shared.Wcf
Imports OneStream.Shared.Engine
Imports OneStream.Shared.Database
Imports OneStream.Stage.Engine
Imports OneStream.Stage.Database
Imports OneStream.Finance.Engine
Imports OneStream.Finance.Database

Namespace OneStream.BusinessRule.Extender.zzz_test
	Public Class MainClass
		Public Function Main(ByVal si As SessionInfo, ByVal globals As BRGlobals, ByVal api As Object, ByVal args As ExtenderArgs) As Object
			Try
				Select Case args.FunctionType
					
					Case Is = ExtenderFunctionType.ExecuteDataMgmtBusinessRuleStep
						
						Dim profileName As String = args.NameValuePairs.XFGetValue("profileName")
						Dim scenarioName As String = args.NameValuePairs.XFGetValue("scenarioName")
						Dim timeName As String = args.NameValuePairs.XFGetValue("timeName")
						
						Dim valTransform As Boolean = True
						Dim valIntersect As Boolean = True
						Dim loadCube As Boolean = False
						Dim processCube As Boolean = False
						Dim confirm As Boolean = False
						Dim autoCertify As Boolean = False
						
						Dim wfClusterPk As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, profileName, scenarioName, timeName)
						Dim objList As List(Of WorkFlowProfileInfo) = BRApi.Workflow.Metadata.GetRelatives(si, wfClusterPk, WorkflowProfileRelativeTypes.Descendants, WorkflowProfileTypes.InputImportChild)
						Dim wfList As New List(Of String)
						
						For Each wfItem As WorkflowProfileInfo In objList
							Dim wfCLusterPk2 As WorkflowUnitClusterPk = BRApi.Workflow.General.GetWorkflowUnitClusterPk(si, wfitem.Name, scenarioName, timeName)	
							Dim wfStatus As WorkflowInfo = BRApi.Workflow.Status.GetWorkflowStatus(si, wfClusterPk2)
'							Dim objLoadTransformProcessInfo As LoadTransformProcessInfo = BRApi.Import.Process.ClearStageData(si, wfClusterPk2, wfItem.Name)
							Me.CreateBatchFileTrigger(si,FileShareFolderHelper.GetBatchHarvestFolderForApp(si, True, AppServerConfig.GetSettings(si).FileShareRootFolder, AppServerConfig.GetSettings(si).FileShareBatchHarvestRootFolder,si.AppToken.AppName), wfItem.Name.Replace(".",";"), scenarioName, timeName, False)
							Dim batchInfo As WorkflowBatchFileCollection = BRAPi.Utilities.ExecuteFileHarvestBatch(si, scenarioName, timeName, valTransform, valIntersect, loadCube, processCube, confirm, autoCertify, False)
						Next
						
				End Select

				Return Nothing
			Catch ex As Exception
				Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
			End Try
		End Function
		
		Private Sub CreateBatchFileTrigger(ByVal si As SessionInfo, ByVal harvestPath As String, ByVal wfName As String, ByVal wfScenario As String, ByVal wfTime As String, ByVal Testing As Boolean)
			Try
				Dim configSettings As AppServerConfigSettings = AppServerConfig.GetSettings(si)
				Dim Path As String = String.Empty

					If Not Testing Then
						Dim harvestFolderPath As String = FileShareFolderHelper.GetBatchHarvestFolderForApp(si, True, configSettings.FileShareRootFolder, configSettings.FileShareBatchHarvestRootFolder,si.AppToken.AppName)
						
						path = harvestFolderPath & "\autoBatchfile-" & wfName & "-" & wfScenario &  "-" & wfTime & "-R.txt"
					
					End If
					'BRApi.ErrorLog.LogMessage(si, $"Create New Trigger File {wfName} {wfScenario} {wfTime}", "")
					If Not File.Exists(path) Or Testing = True Then
						' Create a file to write to. 
						'BRApi.ErrorLog.LogMessage(si, $"Create New Trigger File {path}", "")
						Using sw As StreamWriter = File.CreateText(path)
							sw.WriteLine("Batch File Trigger")
						End Using
					End If
				Catch ex As Exception
					Throw ErrorHandler.LogWrite(si, New XFException(si, ex))
				End Try
		  End Sub
		
		  
		 
		
	End Class
End Namespace
]]></sourceCode>
        </businessRule>
    </extensibilityRulesRoot>
</OneStreamXF>